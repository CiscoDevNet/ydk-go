// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-ospf package operational data.
// 
// This module contains definitions
// for the following management objects:
//   ospf: OSPF operational data
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_ospf_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_ospf_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ospf-oper ospf}", reflect.TypeOf(Ospf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-ospf-oper:ospf", reflect.TypeOf(Ospf{}))
}

// NsfRtr represents Nsf rtr
type NsfRtr string

const (
    // None
    NsfRtr_mgmt_nsf_rtr_none NsfRtr = "mgmt-nsf-rtr-none"

    // Requester
    NsfRtr_mgmt_nsf_rtr_requester NsfRtr = "mgmt-nsf-rtr-requester"

    // Receiver
    NsfRtr_mgmt_nsf_rtr_receiver NsfRtr = "mgmt-nsf-rtr-receiver"
)

// IpfrrTbrkr represents FRR Tiebreakers
type IpfrrTbrkr string

const (
    // Downsteram
    IpfrrTbrkr_downstream IpfrrTbrkr = "downstream"

    // LC Disjoint
    IpfrrTbrkr_line_card_disjoint IpfrrTbrkr = "line-card-disjoint"

    // Backup metric
    IpfrrTbrkr_backup_metric IpfrrTbrkr = "backup-metric"

    // Node protection
    IpfrrTbrkr_node_protect IpfrrTbrkr = "node-protect"

    // Primary path
    IpfrrTbrkr_primary_path IpfrrTbrkr = "primary-path"

    // Secondary path
    IpfrrTbrkr_secondary_path IpfrrTbrkr = "secondary-path"

    // SRLG disjoint
    IpfrrTbrkr_srlg_disjoint IpfrrTbrkr = "srlg-disjoint"

    // Tunnel
    IpfrrTbrkr_tunnel IpfrrTbrkr = "tunnel"

    // Post Convergence
    IpfrrTbrkr_post_convergence IpfrrTbrkr = "post-convergence"
)

// IgpteLibBwModel represents Bandwidth model
type IgpteLibBwModel string

const (
    // Russian Dolls Model
    IgpteLibBwModel_rdm IgpteLibBwModel = "rdm"

    // Maximum Allocation Model
    IgpteLibBwModel_mam IgpteLibBwModel = "mam"

    // No model set
    IgpteLibBwModel_not_set IgpteLibBwModel = "not-set"
)

// LinkSubnet represents Link subnet
type LinkSubnet string

const (
    // None
    LinkSubnet_mgmt_igp_subnet_type_none LinkSubnet = "mgmt-igp-subnet-type-none"

    // Point to Point
    LinkSubnet_mgmt_igp_subnet_type_p2p LinkSubnet = "mgmt-igp-subnet-type-p2p"

    // Broadcast
    LinkSubnet_mgmt_igp_subnet_type_broadcast LinkSubnet = "mgmt-igp-subnet-type-broadcast"

    // Non Broadcast Multi Access
    LinkSubnet_mgmt_igp_subnet_type_nbma LinkSubnet = "mgmt-igp-subnet-type-nbma"

    // Point to multipoint
    LinkSubnet_mgmt_igp_subnet_type_p2mp LinkSubnet = "mgmt-igp-subnet-type-p2mp"

    // Loopback
    LinkSubnet_mgmt_igp_subnet_type_loop_back LinkSubnet = "mgmt-igp-subnet-type-loop-back"

    // Unsupported
    LinkSubnet_mgmt_igp_subnet_type_max LinkSubnet = "mgmt-igp-subnet-type-max"
)

// Authentication represents Authentication
type Authentication string

const (
    // No Authentication
    Authentication_mgmt_ospf_auth_none Authentication = "mgmt-ospf-auth-none"

    // Clear Text
    Authentication_mgmt_ospf_auth_ct Authentication = "mgmt-ospf-auth-ct"

    // MD5
    Authentication_mgmt_ospf_auth_md Authentication = "mgmt-ospf-auth-md"

    // Keychain
    Authentication_mgmt_ospf_auth_kc Authentication = "mgmt-ospf-auth-kc"
)

// OspfShNnhValTypes represents OSPF Neighbor Next Hop Value Types
type OspfShNnhValTypes string

const (
    // NNH IP Address
    OspfShNnhValTypes_mgmt_nnh_val_type_ip_addr OspfShNnhValTypes = "mgmt-nnh-val-type-ip-addr"

    // NNH Interface Index
    OspfShNnhValTypes_mgmt_nnh_val_type_if_index OspfShNnhValTypes = "mgmt-nnh-val-type-if-index"
)

// UloopAvoidance represents Uloop avoidance
type UloopAvoidance string

const (
    // No uloop avoidance
    UloopAvoidance_none UloopAvoidance = "none"

    // Apply Local uloop avoidance only for protected
    // prefixes
    UloopAvoidance_protected_prefixes UloopAvoidance = "protected-prefixes"

    // Apply Local uloop avoidance for all prefixes
    UloopAvoidance_all_prefixes UloopAvoidance = "all-prefixes"

    // Apply segment routing uloop avoidance
    UloopAvoidance_segment_routing_uloop UloopAvoidance = "segment-routing-uloop"
)

// OspfLinkTypes represents Type of router LSA links
type OspfLinkTypes string

const (
    // Link to a Router
    OspfLinkTypes_mgmt_rtr_link OspfLinkTypes = "mgmt-rtr-link"

    // Link to a transit network
    OspfLinkTypes_mgmt_trans_link OspfLinkTypes = "mgmt-trans-link"

    // Link to Stub network
    OspfLinkTypes_mgmt_stub_net OspfLinkTypes = "mgmt-stub-net"

    // Link to Virtual Link
    OspfLinkTypes_mgmt_vitural_link OspfLinkTypes = "mgmt-vitural-link"
)

// SrmsMiSrcEB represents Srms mi src e b
type SrmsMiSrcEB string

const (
    // None
    SrmsMiSrcEB_none SrmsMiSrcEB = "none"

    // Local
    SrmsMiSrcEB_local SrmsMiSrcEB = "local"

    // Remote
    SrmsMiSrcEB_remote SrmsMiSrcEB = "remote"
)

// OspfInterfaceState represents Ospf interface state
type OspfInterfaceState string

const (
    // Down
    OspfInterfaceState_mgmt_ospf_ifs_down OspfInterfaceState = "mgmt-ospf-ifs-down"

    // Loopback
    OspfInterfaceState_mgmt_ospf_ifs_loop_back OspfInterfaceState = "mgmt-ospf-ifs-loop-back"

    // Waiting
    OspfInterfaceState_mgmt_ospf_ifs_waiting OspfInterfaceState = "mgmt-ospf-ifs-waiting"

    // Point to multipoint
    OspfInterfaceState_mgmt_ospf_ifs_point_to_m_point OspfInterfaceState = "mgmt-ospf-ifs-point-to-m-point"

    // Point to point
    OspfInterfaceState_mgmt_ospf_ifs_point_to_point OspfInterfaceState = "mgmt-ospf-ifs-point-to-point"

    // DesignatedRouter
    OspfInterfaceState_mgmt_ospf_ifs_dr OspfInterfaceState = "mgmt-ospf-ifs-dr"

    // Backup Designated Router
    OspfInterfaceState_mgmt_ospf_ifs_backup OspfInterfaceState = "mgmt-ospf-ifs-backup"

    // Designated Router Other
    OspfInterfaceState_mgmt_ospf_ifs_other OspfInterfaceState = "mgmt-ospf-ifs-other"
)

// Ipfrr represents FRR Types
type Ipfrr string

const (
    // Disabled
    Ipfrr_none Ipfrr = "none"

    // Per link
    Ipfrr_per_link Ipfrr = "per-link"

    // Per prefix
    Ipfrr_per_prefix Ipfrr = "per-prefix"
)

// OspfSrgbStatus represents Ospf srgb status
type OspfSrgbStatus string

const (
    // Not allocated
    OspfSrgbStatus_not_allocated OspfSrgbStatus = "not-allocated"

    // Allocation pending
    OspfSrgbStatus_pending OspfSrgbStatus = "pending"

    // Allocated
    OspfSrgbStatus_allocated OspfSrgbStatus = "allocated"
)

// OspfSrEndpResFailReason represents Ospf sr endp res fail reason
type OspfSrEndpResFailReason string

const (
    // None
    OspfSrEndpResFailReason_ospf_se_res_fail_none OspfSrEndpResFailReason = "ospf-se-res-fail-none"

    // No route
    OspfSrEndpResFailReason_ospf_se_res_fail_no_route OspfSrEndpResFailReason = "ospf-se-res-fail-no-route"

    // Route type is not valid
    OspfSrEndpResFailReason_ospf_se_res_fail_inv_route_type OspfSrEndpResFailReason = "ospf-se-res-fail-inv-route-type"

    // Default route not used
    OspfSrEndpResFailReason_ospf_se_res_fail_default_route OspfSrEndpResFailReason = "ospf-se-res-fail-default-route"

    // Multihomed intra prefix
    OspfSrEndpResFailReason_ospf_se_res_fail_intra_multi_home_d OspfSrEndpResFailReason = "ospf-se-res-fail-intra-multi-home-d"

    // No path found
    OspfSrEndpResFailReason_ospf_se_res_fail_no_path OspfSrEndpResFailReason = "ospf-se-res-fail-no-path"

    // No EPL found
    OspfSrEndpResFailReason_ospf_se_res_fail_no_epl OspfSrEndpResFailReason = "ospf-se-res-fail-no-epl"

    // Area not SR enabled
    OspfSrEndpResFailReason_ospf_se_res_fail_area_not_sr_enable OspfSrEndpResFailReason = "ospf-se-res-fail-area-not-sr-enable"

    // Multihomed EPL origin
    OspfSrEndpResFailReason_ospf_se_res_fail_epl_multi_home_d OspfSrEndpResFailReason = "ospf-se-res-fail-epl-multi-home-d"

    // No EPL with N-bit found
    OspfSrEndpResFailReason_ospf_se_res_fail_no_n_bit_epl OspfSrEndpResFailReason = "ospf-se-res-fail-no-n-bit-epl"

    // No EPL with NA-bit found
    OspfSrEndpResFailReason_ospf_se_res_fail_no_na_bit_epl OspfSrEndpResFailReason = "ospf-se-res-fail-no-na-bit-epl"

    // Area mismatch
    OspfSrEndpResFailReason_ospf_se_res_fail_area_mismatch OspfSrEndpResFailReason = "ospf-se-res-fail-area-mismatch"

    // Router ID mismatch
    OspfSrEndpResFailReason_ospf_se_res_fail_rid_mismatch OspfSrEndpResFailReason = "ospf-se-res-fail-rid-mismatch"
)

// SrDp represents Sr dp
type SrDp string

const (
    // SR Disable
    SrDp_mgmt_ospf_sr_dp_none SrDp = "mgmt-ospf-sr-dp-none"

    // SR MPLS
    SrDp_mgmt_ospf_sr_dp_mpls SrDp = "mgmt-ospf-sr-dp-mpls"
)

// Interface_ represents Interface
type Interface_ string

const (
    // Broadcast
    Interface__mgmt_if_broadcast Interface_ = "mgmt-if-broadcast"

    // Non broadcast multi access
    Interface__mgmt_if_nonbroadcast Interface_ = "mgmt-if-nonbroadcast"

    // Point to Point
    Interface__mgmt_if_point_to_point Interface_ = "mgmt-if-point-to-point"

    // Point to multipoint
    Interface__mgmt_if_point_to_m_point Interface_ = "mgmt-if-point-to-m-point"

    // Non broadcast point to multipoint
    Interface__mgmt_if_p2mp_non_bcast Interface_ = "mgmt-if-p2mp-non-bcast"

    // Virtual link
    Interface__mgmt_if_virtual_link Interface_ = "mgmt-if-virtual-link"

    // Sham link
    Interface__mgmt_if_sham_link Interface_ = "mgmt-if-sham-link"

    // Loopback
    Interface__mgmt_if_loop_back Interface_ = "mgmt-if-loop-back"
)

// InterfaceState represents Interface state
type InterfaceState string

const (
    // Interface state unknown
    InterfaceState_mgmt_ifs_unknown InterfaceState = "mgmt-ifs-unknown"

    // Interface is administratively down
    InterfaceState_mgmt_ifs_admin_down InterfaceState = "mgmt-ifs-admin-down"

    // Interface is down
    InterfaceState_mgmt_ifs_down InterfaceState = "mgmt-ifs-down"

    // Interface is up
    InterfaceState_mgmt_ifs_up InterfaceState = "mgmt-ifs-up"

    // Interface is administratively down
    InterfaceState_mgmt_ifs_shutdown InterfaceState = "mgmt-ifs-shutdown"
)

// ExMetric represents Ex metric
type ExMetric string

const (
    // No metric type
    ExMetric_mgmt_ex_metric_type_none ExMetric = "mgmt-ex-metric-type-none"

    // Type 1 External
    ExMetric_mgmt_ex_metric_type_1 ExMetric = "mgmt-ex-metric-type-1"

    // Type 2 External
    ExMetric_mgmt_ex_metric_type_2 ExMetric = "mgmt-ex-metric-type-2"
)

// GsState represents Gs state
type GsState string

const (
    // Process in initialization 
    GsState_mgmt_gs_init GsState = "mgmt-gs-init"

    // Graceful Shutdown not running
    GsState_mgmt_gs_normal GsState = "mgmt-gs-normal"

    // Delaying  before Graceful Shutdown
    GsState_mgmt_gs_delay GsState = "mgmt-gs-delay"

    // Flushing self originated LSAs
    GsState_mgmt_gs_flush GsState = "mgmt-gs-flush"

    // Sending empty hellos
    GsState_mgmt_gs_hello GsState = "mgmt-gs-hello"

    // Shutdown mode.
    GsState_mgmt_gs_quiet GsState = "mgmt-gs-quiet"
)

// OspfShOpqRiPceAddrTypes represents OSPF PCE Address Type
type OspfShOpqRiPceAddrTypes string

const (
    // Invalid PCE Address
    OspfShOpqRiPceAddrTypes_mgmt_ospf_opq_pce_addr_type_invalid OspfShOpqRiPceAddrTypes = "mgmt-ospf-opq-pce-addr-type-invalid"

    // IPv4 PCE Address
    OspfShOpqRiPceAddrTypes_mgmt_ospf_opq_pce_addr_type_ipv4 OspfShOpqRiPceAddrTypes = "mgmt-ospf-opq-pce-addr-type-ipv4"

    // IPv6 PCE Address
    OspfShOpqRiPceAddrTypes_mgmt_ospf_opq_pce_addr_type_ipv6 OspfShOpqRiPceAddrTypes = "mgmt-ospf-opq-pce-addr-type-ipv6"
)

// MaxMetricSetReason represents Max metric set reason
type MaxMetricSetReason string

const (
    // proc migration
    MaxMetricSetReason_mgmt_max_metric_on_proc_migration MaxMetricSetReason = "mgmt-max-metric-on-proc-migration"

    // proc restart
    MaxMetricSetReason_mgmt_max_metric_on_proc_restart MaxMetricSetReason = "mgmt-max-metric-on-proc-restart"

    // switch over
    MaxMetricSetReason_mgmt_max_metric_on_switchover MaxMetricSetReason = "mgmt-max-metric-on-switchover"

    // start up
    MaxMetricSetReason_mgmt_max_metric_on_startup MaxMetricSetReason = "mgmt-max-metric-on-startup"

    // always
    MaxMetricSetReason_mgmt_max_metric_always MaxMetricSetReason = "mgmt-max-metric-always"

    // none
    MaxMetricSetReason_mgmt_max_metric_reason_none MaxMetricSetReason = "mgmt-max-metric-reason-none"
)

// OspfRoute represents Ospf route
type OspfRoute string

const (
    // No route type
    OspfRoute_mgmt_r_type_none OspfRoute = "mgmt-r-type-none"

    // Not set
    OspfRoute_mgmt_r_type_other OspfRoute = "mgmt-r-type-other"

    // Intra-area route
    OspfRoute_mgmt_r_type_intra OspfRoute = "mgmt-r-type-intra"

    // Inter-area route
    OspfRoute_mgmt_r_type_inter OspfRoute = "mgmt-r-type-inter"

    // Type 1 External route
    OspfRoute_mgmt_r_type_extern1 OspfRoute = "mgmt-r-type-extern1"

    // Type 2 External route
    OspfRoute_mgmt_r_type_extern2 OspfRoute = "mgmt-r-type-extern2"

    // IS-IS summary route
    OspfRoute_mgmt_r_type_isis_sum OspfRoute = "mgmt-r-type-isis-sum"

    // IS-IS level 1 route
    OspfRoute_mgmt_r_type_isis_l1 OspfRoute = "mgmt-r-type-isis-l1"

    // IS-IS level 2 route
    OspfRoute_mgmt_r_type_isis_l2 OspfRoute = "mgmt-r-type-isis-l2"

    // IS-IS level 1 inter-area route
    OspfRoute_mgmt_r_type_isis_l1_ia OspfRoute = "mgmt-r-type-isis-l1-ia"

    // iBGP route
    OspfRoute_mgmt_r_type_bgp_int OspfRoute = "mgmt-r-type-bgp-int"

    // eBGP route
    OspfRoute_mgmt_r_type_bgp_ext OspfRoute = "mgmt-r-type-bgp-ext"

    // BGP local route
    OspfRoute_mgmt_r_type_bgp_loc OspfRoute = "mgmt-r-type-bgp-loc"

    // Type 1 NSSA route
    OspfRoute_mgmt_r_type_nssa1 OspfRoute = "mgmt-r-type-nssa1"

    // Type 2 NSSA route
    OspfRoute_mgmt_r_type_nssa2 OspfRoute = "mgmt-r-type-nssa2"

    // EIGRP internal route
    OspfRoute_mgmt_r_type_i_grp2_int OspfRoute = "mgmt-r-type-i-grp2-int"

    // EIGRP external route
    OspfRoute_mgmt_r_type_i_grp2_ext OspfRoute = "mgmt-r-type-i-grp2-ext"
)

// SrUloopEvent represents Sr uloop event
type SrUloopEvent string

const (
    // No SR uloop event
    SrUloopEvent_none SrUloopEvent = "none"

    // SR Uloop Event Link Down
    SrUloopEvent_link_down SrUloopEvent = "link-down"

    // SR Uloop Event Link Up
    SrUloopEvent_link_up SrUloopEvent = "link-up"
)

// OspfShOpqRiTlvTypes represents OSPF Router Information TLV types
type OspfShOpqRiTlvTypes string

const (
    // Unknown
    OspfShOpqRiTlvTypes_mgmt_ospf_opq_ri_tlv_type_unknown OspfShOpqRiTlvTypes = "mgmt-ospf-opq-ri-tlv-type-unknown"

    // Router Capabilities
    OspfShOpqRiTlvTypes_mgmt_ospf_opq_ri_tlv_type_rtrcap OspfShOpqRiTlvTypes = "mgmt-ospf-opq-ri-tlv-type-rtrcap"

    // PCE Discovery
    OspfShOpqRiTlvTypes_mgmt_ospf_opq_ri_tlv_type_pce_discovery OspfShOpqRiTlvTypes = "mgmt-ospf-opq-ri-tlv-type-pce-discovery"

    // Segment Routing Algorithm
    OspfShOpqRiTlvTypes_mgmt_ospf_opq_ri_tlv_type_sr_algo OspfShOpqRiTlvTypes = "mgmt-ospf-opq-ri-tlv-type-sr-algo"

    // Segment Routing SID Range
    OspfShOpqRiTlvTypes_mgmt_ospf_opq_ri_tlv_type_sr_range OspfShOpqRiTlvTypes = "mgmt-ospf-opq-ri-tlv-type-sr-range"

    // Node MSD (Max SID Depth)
    OspfShOpqRiTlvTypes_mgmt_ospf_opq_ri_tlv_type_node_msd OspfShOpqRiTlvTypes = "mgmt-ospf-opq-ri-tlv-type-node-msd"
)

// Timer represents maxage
type Timer string

const (
    // Timer stopped
    Timer_mgmt_db_stop Timer = "mgmt-db-stop"

    // Refresh
    Timer_mgmt_db_refresh Timer = "mgmt-db-refresh"

    // Checksum
    Timer_mgmt_db_checksum Timer = "mgmt-db-checksum"

    // Maxage
    Timer_mgmt_db_max_age Timer = "mgmt-db-max-age"
)

// MaxMetricUnsetReason represents Max metric unset reason
type MaxMetricUnsetReason string

const (
    // none
    MaxMetricUnsetReason_mgmt_max_metric_unset_none MaxMetricUnsetReason = "mgmt-max-metric-unset-none"

    // BGP converged
    MaxMetricUnsetReason_mgmt_max_metric_unset_bgp MaxMetricUnsetReason = "mgmt-max-metric-unset-bgp"

    // timer expired
    MaxMetricUnsetReason_mgmt_max_metric_unset_timer MaxMetricUnsetReason = "mgmt-max-metric-unset-timer"

    // unconfigured
    MaxMetricUnsetReason_mgmt_max_metric_unset_cfg MaxMetricUnsetReason = "mgmt-max-metric-unset-cfg"

    // process cleared
    MaxMetricUnsetReason_mgmt_max_metric_unset_process_cleared MaxMetricUnsetReason = "mgmt-max-metric-unset-process-cleared"

    // set for other reason
    MaxMetricUnsetReason_mgmt_max_metric_unset_over_write MaxMetricUnsetReason = "mgmt-max-metric-unset-over-write"
)

// OspfBr represents Ospf br
type OspfBr string

const (
    // Both Area Border Router and AS Border Router
    OspfBr_mgmt_d_type_abr_asbr OspfBr = "mgmt-d-type-abr-asbr"

    // AS Border Router
    OspfBr_mgmt_d_type_asbr OspfBr = "mgmt-d-type-asbr"

    // Area Border Router
    OspfBr_mgmt_d_type_abr OspfBr = "mgmt-d-type-abr"
)

// Stlv represents OSPF Opaque-area Type 1 sub TLV types
type Stlv string

const (
    // Link Type
    Stlv_mgmt_rrr_link_type Stlv = "mgmt-rrr-link-type"

    // Link ID
    Stlv_mgmt_rrr_link_id Stlv = "mgmt-rrr-link-id"

    // Local interface IP address
    Stlv_mgmt_rrr_link_local_if_addr Stlv = "mgmt-rrr-link-local-if-addr"

    // Remote interface IP address
    Stlv_mgmt_rrr_link_remote_if_addr Stlv = "mgmt-rrr-link-remote-if-addr"

    // Traffic Engineering metric
    Stlv_mgmt_rrr_link_metric Stlv = "mgmt-rrr-link-metric"

    // Maximum Link Bandwidth
    Stlv_mgmt_rrr_link_max_bw Stlv = "mgmt-rrr-link-max-bw"

    // Maximum Reservable bandwidth
    Stlv_mgmt_rrr_link_max_reservable_bw Stlv = "mgmt-rrr-link-max-reservable-bw"

    // Unreserved Bandwidth
    Stlv_mgmt_rrr_link_unreserved_bw Stlv = "mgmt-rrr-link-unreserved-bw"

    // Administrative group
    Stlv_mgmt_rrr_link_re_source_class Stlv = "mgmt-rrr-link-re-source-class"

    // Link Local/Remote Identifiers
    Stlv_mgmt_rrr_link_in_out_if_id Stlv = "mgmt-rrr-link-in-out-if-id"

    // Interface Switching Capability Descriptor
    Stlv_mgmt_rrr_link_if_switching_cap_desc Stlv = "mgmt-rrr-link-if-switching-cap-desc"

    // Shared Risk Link Group
    Stlv_mgmt_ospf_rrr_link_srlg Stlv = "mgmt-ospf-rrr-link-srlg"

    // Bandwidth constraints
    Stlv_mgmt_rrr_link_bw_constraints_sub Stlv = "mgmt-rrr-link-bw-constraints-sub"

    // Extended admin
    Stlv_mgmt_ospf_rrr_link_ext_admin_sub Stlv = "mgmt-ospf-rrr-link-ext-admin-sub"

    // Unidirectional link delay
    Stlv_mgmt_ospf_rrr_link_uni_delay Stlv = "mgmt-ospf-rrr-link-uni-delay"

    // Maximum reservable sub-pool bandwidth
    Stlv_mgmt_ospf_rrr_link_max_reservable_bw_sub Stlv = "mgmt-ospf-rrr-link-max-reservable-bw-sub"

    // Unreserved sub-pool bandwidth
    Stlv_mgmt_ospf_rrr_link_unreserved_bw_sub Stlv = "mgmt-ospf-rrr-link-unreserved-bw-sub"

    // IGP Link Metric
    Stlv_mgmt_rrr_link_igp_metric Stlv = "mgmt-rrr-link-igp-metric"
)

// SrmsMiFlagEB represents Srms mi flag e b
type SrmsMiFlagEB string

const (
    // False
    SrmsMiFlagEB_false_ SrmsMiFlagEB = "false"

    // True
    SrmsMiFlagEB_true_ SrmsMiFlagEB = "true"
)

// SrmsMiAfEB represents Srms mi af e b
type SrmsMiAfEB string

const (
    // None
    SrmsMiAfEB_none SrmsMiAfEB = "none"

    // IPv4
    SrmsMiAfEB_ipv4 SrmsMiAfEB = "ipv4"

    // IPv6
    SrmsMiAfEB_ipv6 SrmsMiAfEB = "ipv6"
)

// NeighborState represents Neighbor state
type NeighborState string

const (
    // Down
    NeighborState_mgmt_nbr_down NeighborState = "mgmt-nbr-down"

    // Attempt
    NeighborState_mgmt_nbr_attempt NeighborState = "mgmt-nbr-attempt"

    // Init
    NeighborState_mgmt_nbr_init NeighborState = "mgmt-nbr-init"

    // 2 Way
    NeighborState_mgmt_nbr_2way NeighborState = "mgmt-nbr-2way"

    // Exstart
    NeighborState_mgmt_nbr_ex_start NeighborState = "mgmt-nbr-ex-start"

    // Exchange
    NeighborState_mgmt_nbr_ex_change NeighborState = "mgmt-nbr-ex-change"

    // Loading
    NeighborState_mgmt_nbr_load_ing NeighborState = "mgmt-nbr-load-ing"

    // Full
    NeighborState_mgmt_nbr_full NeighborState = "mgmt-nbr-full"

    // SCvirtual
    NeighborState_mgmt_nbr_sc_virtual NeighborState = "mgmt-nbr-sc-virtual"
)

// OspfInternalLsaTypes represents OSPF LSA format types
type OspfInternalLsaTypes string

const (
    // Router LSA
    OspfInternalLsaTypes_mgmt_rtr_type OspfInternalLsaTypes = "mgmt-rtr-type"

    // Network LSA
    OspfInternalLsaTypes_mgmt_ntwk_type OspfInternalLsaTypes = "mgmt-ntwk-type"

    // Summary and ASBR summary LSA
    OspfInternalLsaTypes_mgmt_sum_type OspfInternalLsaTypes = "mgmt-sum-type"

    // Type 5 and NSSA external LSA
    OspfInternalLsaTypes_mgmt_ext_type OspfInternalLsaTypes = "mgmt-ext-type"

    // Generic AS/Area Opaque LSA
    OspfInternalLsaTypes_mgmt_opq_type OspfInternalLsaTypes = "mgmt-opq-type"

    // Generic Link Opaque LSA
    OspfInternalLsaTypes_mgmt_opq_link_type OspfInternalLsaTypes = "mgmt-opq-link-type"

    // Opaque Area type 1 LSA
    OspfInternalLsaTypes_mgmt_opq_rrr_type OspfInternalLsaTypes = "mgmt-opq-rrr-type"

    // Opaque link type 1 LSA
    OspfInternalLsaTypes_mgmt_opq_gr_type OspfInternalLsaTypes = "mgmt-opq-gr-type"

    // Opaque Router Information LSA
    OspfInternalLsaTypes_mgmt_opq_ri_type OspfInternalLsaTypes = "mgmt-opq-ri-type"

    // Opaque Area type 128
    OspfInternalLsaTypes_mgmt_opq_epl_type OspfInternalLsaTypes = "mgmt-opq-epl-type"

    // Opaque Area type 8
    OspfInternalLsaTypes_mgmt_opq_ell_type OspfInternalLsaTypes = "mgmt-opq-ell-type"
)

// MplsTeOptTlv represents Mpls te opt tlv
type MplsTeOptTlv string

const (
    // None
    MplsTeOptTlv_mpls_te_opt_tlv_type_none MplsTeOptTlv = "mpls-te-opt-tlv-type-none"

    // SRLGs
    MplsTeOptTlv_mpls_te_opt_tlv_type_srlg MplsTeOptTlv = "mpls-te-opt-tlv-type-srlg"

    // Bandwidth Constraints
    MplsTeOptTlv_mpls_te_opt_tlv_type_bc MplsTeOptTlv = "mpls-te-opt-tlv-type-bc"

    // Intarface Switching Capability Descriptor
    MplsTeOptTlv_mpls_te_opt_tlv_type_ixcd MplsTeOptTlv = "mpls-te-opt-tlv-type-ixcd"

    // Unidirectional Link Delay
    MplsTeOptTlv_mpls_te_opt_tlv_type_uni_delay MplsTeOptTlv = "mpls-te-opt-tlv-type-uni-delay"
)

// RedistProtocol represents Redist protocol
type RedistProtocol string

const (
    // Unknown
    RedistProtocol_mgmt_rib_protocol_all RedistProtocol = "mgmt-rib-protocol-all"

    // Connected
    RedistProtocol_mgmt_rib_protocol_connected RedistProtocol = "mgmt-rib-protocol-connected"

    // Local
    RedistProtocol_mgmt_rib_protocol_local RedistProtocol = "mgmt-rib-protocol-local"

    // Static
    RedistProtocol_mgmt_rib_protocol_static RedistProtocol = "mgmt-rib-protocol-static"

    // BGP
    RedistProtocol_mgmt_rib_protocol_bgp RedistProtocol = "mgmt-rib-protocol-bgp"

    // RIP
    RedistProtocol_mgmt_rib_protocol_rip RedistProtocol = "mgmt-rib-protocol-rip"

    // ISIS
    RedistProtocol_mgmt_rib_protocol_isis RedistProtocol = "mgmt-rib-protocol-isis"

    // OSPF
    RedistProtocol_mgmt_rib_protocol_ospf RedistProtocol = "mgmt-rib-protocol-ospf"

    // EIGRP
    RedistProtocol_mgmt_rib_protocol_eigrp RedistProtocol = "mgmt-rib-protocol-eigrp"

    // DAGR
    RedistProtocol_mgmt_rib_protocol_dagr RedistProtocol = "mgmt-rib-protocol-dagr"

    // Subscriber
    RedistProtocol_mgmt_rib_protocol_subscriber RedistProtocol = "mgmt-rib-protocol-subscriber"

    // Application
    RedistProtocol_mgmt_rib_protocol_application RedistProtocol = "mgmt-rib-protocol-application"

    // Mobile
    RedistProtocol_mgmt_rib_protocol_mobile RedistProtocol = "mgmt-rib-protocol-mobile"
)

// Lfa represents Lfa
type Lfa string

const (
    // Unknown LFA
    Lfa_mgmt_ospf_unknown_lfa Lfa = "mgmt-ospf-unknown-lfa"

    // Direct LFA
    Lfa_mgmt_ospf_direct_lfa Lfa = "mgmt-ospf-direct-lfa"

    // TI LFA
    Lfa_mgmt_ospf_ti_lfa Lfa = "mgmt-ospf-ti-lfa"

    // Remote LFA
    Lfa_mgmt_ospf_remote_lfa Lfa = "mgmt-ospf-remote-lfa"
)

// OspfLsaOpqRiScope represents OSPF Router Information LSA scope types
type OspfLsaOpqRiScope string

const (
    // Link-local Router Information LSA
    OspfLsaOpqRiScope_mgmt_lsa_opq_ri_scope_link OspfLsaOpqRiScope = "mgmt-lsa-opq-ri-scope-link"

    // Area-scope Router Information LSA
    OspfLsaOpqRiScope_mgmt_lsa_opq_ri_scope_area OspfLsaOpqRiScope = "mgmt-lsa-opq-ri-scope-area"

    // AS-scope Router Information LSA
    OspfLsaOpqRiScope_mgmt_lsa_opq_ri_scope_as OspfLsaOpqRiScope = "mgmt-lsa-opq-ri-scope-as"
)

// Lsa represents Lsa
type Lsa string

const (
    // Router LSA
    Lsa_mgmt_lsa_type_rtr Lsa = "mgmt-lsa-type-rtr"

    // Network LSA
    Lsa_mgmt_lsa_type_net Lsa = "mgmt-lsa-type-net"

    // Summary LSA
    Lsa_mgmt_lsa_type_sum_net Lsa = "mgmt-lsa-type-sum-net"

    // Summary-ASBR LSA
    Lsa_mgmt_lsa_type_sum_asb Lsa = "mgmt-lsa-type-sum-asb"

    // AS external LSA
    Lsa_mgmt_lsa_type_ext Lsa = "mgmt-lsa-type-ext"

    // MOSPF LSA
    Lsa_mgmt_lsa_type_mospf Lsa = "mgmt-lsa-type-mospf"

    // Type-7 External LSA
    Lsa_mgmt_lsa_type_7_ase Lsa = "mgmt-lsa-type-7-ase"

    // Invalid type
    Lsa_mgmt_lsa_type_8_ignore Lsa = "mgmt-lsa-type-8-ignore"

    // Opaque link LSA
    Lsa_mgmt_lsa_type_opq_link Lsa = "mgmt-lsa-type-opq-link"

    // Opaque Area LSA
    Lsa_mgmt_lsa_type_opq_area Lsa = "mgmt-lsa-type-opq-area"

    // Opaque AS LSA
    Lsa_mgmt_lsa_type_opq_as Lsa = "mgmt-lsa-type-opq-as"
)

// OspfSrPolMetricMode represents Ospf sr pol metric mode
type OspfSrPolMetricMode string

const (
    // Metric Mode None
    OspfSrPolMetricMode_mgmt_ospf_metric_mode_none OspfSrPolMetricMode = "mgmt-ospf-metric-mode-none"

    // Relative Metric
    OspfSrPolMetricMode_mgmt_ospf_metric_mode_relative OspfSrPolMetricMode = "mgmt-ospf-metric-mode-relative"

    // Constant Metric
    OspfSrPolMetricMode_mgmt_ospf_metric_mode_constant OspfSrPolMetricMode = "mgmt-ospf-metric-mode-constant"

    // Absolute Metric
    OspfSrPolMetricMode_mgmt_ospf_metric_mode_absolute OspfSrPolMetricMode = "mgmt-ospf-metric-mode-absolute"
)

// DrBdrState represents Dr bdr state
type DrBdrState string

const (
    // None
    DrBdrState_mgmt_dbdr_none DrBdrState = "mgmt-dbdr-none"

    // Designated Router
    DrBdrState_mgmt_dbdr_dr DrBdrState = "mgmt-dbdr-dr"

    // Backup Designated Router
    DrBdrState_mgmt_dbdr_bdr DrBdrState = "mgmt-dbdr-bdr"

    // Designated Router Other
    DrBdrState_mgmt_dbdr_dr_other DrBdrState = "mgmt-dbdr-dr-other"
)

// TimerTable represents minute timer table
type TimerTable string

const (
    // Not in time table
    TimerTable_mgmt_db_no_table TimerTable = "mgmt-db-no-table"

    // In second table
    TimerTable_mgmt_db_sec_table TimerTable = "mgmt-db-sec-table"

    // In buffer table
    TimerTable_mgmt_db_buffer_table TimerTable = "mgmt-db-buffer-table"

    // In minute table
    TimerTable_mgmt_db_min_table TimerTable = "mgmt-db-min-table"
)

// OspfGrReason represents Ospf gr reason
type OspfGrReason string

const (
    // Unknown
    OspfGrReason_mgmt_gr_reason_unknown OspfGrReason = "mgmt-gr-reason-unknown"

    // Software restart
    OspfGrReason_mgmt_gr_reason_sw_restart OspfGrReason = "mgmt-gr-reason-sw-restart"

    // Software reload/upgrade
    OspfGrReason_mgmt_gr_reason_sw_upgrade OspfGrReason = "mgmt-gr-reason-sw-upgrade"

    // Switch to redundant control processor
    OspfGrReason_mgmt_gr_reason_switchover OspfGrReason = "mgmt-gr-reason-switchover"
)

// OspfMaxMetricAbrOffReasons represents Ospf max metric abr off reasons
type OspfMaxMetricAbrOffReasons string

const (
    // No reason
    OspfMaxMetricAbrOffReasons_ospf_max_metric_abr_off_reason_none OspfMaxMetricAbrOffReasons = "ospf-max-metric-abr-off-reason-none"

    // No neighbors seen yet
    OspfMaxMetricAbrOffReasons_ospf_max_metric_abr_off_reason_no_nbr OspfMaxMetricAbrOffReasons = "ospf-max-metric-abr-off-reason-no-nbr"

    // New neighbor seen recently
    OspfMaxMetricAbrOffReasons_ospf_max_metric_abr_off_reason_new_nbr OspfMaxMetricAbrOffReasons = "ospf-max-metric-abr-off-reason-new-nbr"

    // Adjacency FULL seen recently
    OspfMaxMetricAbrOffReasons_ospf_max_metric_abr_off_reason_nbr_full OspfMaxMetricAbrOffReasons = "ospf-max-metric-abr-off-reason-nbr-full"

    // LSA flushes pending
    OspfMaxMetricAbrOffReasons_ospf_max_metric_abr_off_reason_flush_p_end OspfMaxMetricAbrOffReasons = "ospf-max-metric-abr-off-reason-flush-p-end"
)

// OspfLs represents Ospf ls
type OspfLs string

const (
    // Router LSA
    OspfLs_router OspfLs = "router"

    // Network LSA
    OspfLs_network OspfLs = "network"

    // Summary LSA
    OspfLs_summary OspfLs = "summary"

    // ASBR-Summary LSA
    OspfLs_asbr_summary OspfLs = "asbr-summary"

    // External LSA
    OspfLs_external OspfLs = "external"

    // NSSA External LSA
    OspfLs_nssa_external OspfLs = "nssa-external"

    // Opaque LSALink Scope
    OspfLs_opaque_link OspfLs = "opaque-link"

    // Opaque LSA Area Scope
    OspfLs_opaque_area OspfLs = "opaque-area"

    // Opaque LSA AS Scope
    OspfLs_opaque_as OspfLs = "opaque-as"
)

// Ospf
// OSPF operational data
type Ospf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for each process.
    Processes Ospf_Processes
}

func (ospf *Ospf) GetEntityData() *types.CommonEntityData {
    ospf.EntityData.YFilter = ospf.YFilter
    ospf.EntityData.YangName = "ospf"
    ospf.EntityData.BundleName = "cisco_ios_xr"
    ospf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-ospf-oper"
    ospf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-ospf-oper:ospf"
    ospf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospf.EntityData.Children = types.NewOrderedMap()
    ospf.EntityData.Children.Append("processes", types.YChild{"Processes", &ospf.Processes})
    ospf.EntityData.Leafs = types.NewOrderedMap()

    ospf.EntityData.YListKeys = []string {}

    return &(ospf.EntityData)
}

// Ospf_Processes
// Table for each process
type Ospf_Processes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for a particular OSPF process. The type is slice of
    // Ospf_Processes_Process.
    Process []*Ospf_Processes_Process
}

func (processes *Ospf_Processes) GetEntityData() *types.CommonEntityData {
    processes.EntityData.YFilter = processes.YFilter
    processes.EntityData.YangName = "processes"
    processes.EntityData.BundleName = "cisco_ios_xr"
    processes.EntityData.ParentYangName = "ospf"
    processes.EntityData.SegmentPath = "processes"
    processes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processes.EntityData.Children = types.NewOrderedMap()
    processes.EntityData.Children.Append("process", types.YChild{"Process", nil})
    for i := range processes.Process {
        processes.EntityData.Children.Append(types.GetSegmentPath(processes.Process[i]), types.YChild{"Process", processes.Process[i]})
    }
    processes.EntityData.Leafs = types.NewOrderedMap()

    processes.EntityData.YListKeys = []string {}

    return &(processes.EntityData)
}

// Ospf_Processes_Process
// Operational data for a particular OSPF process
type Ospf_Processes_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF process. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Table for each VRF.
    Vrfs Ospf_Processes_Process_Vrfs

    // Segment Routing Mapping Server operational data.
    Srms Ospf_Processes_Process_Srms

    // Operational data for the default VRF (instance) in the OSPF process.
    DefaultVrf Ospf_Processes_Process_DefaultVrf
}

func (process *Ospf_Processes_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "processes"
    process.EntityData.SegmentPath = "process" + types.AddKeyToken(process.ProcessName, "process-name")
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = types.NewOrderedMap()
    process.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &process.Vrfs})
    process.EntityData.Children.Append("srms", types.YChild{"Srms", &process.Srms})
    process.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &process.DefaultVrf})
    process.EntityData.Leafs = types.NewOrderedMap()
    process.EntityData.Leafs.Append("process-name", types.YLeaf{"ProcessName", process.ProcessName})

    process.EntityData.YListKeys = []string {"ProcessName"}

    return &(process.EntityData)
}

// Ospf_Processes_Process_Vrfs
// Table for each VRF
type Ospf_Processes_Process_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for a particular VRF (instance) in the OSPF process. The
    // type is slice of Ospf_Processes_Process_Vrfs_Vrf.
    Vrf []*Ospf_Processes_Process_Vrfs_Vrf
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "process"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf
// Operational data for a particular VRF
// (instance) in the OSPF process
type Ospf_Processes_Process_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Container for OSPF Interfaces/links under a VRF.
    InterfaceVrfInformation Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation

    // Flood list table.
    FloodListTable Ospf_Processes_Process_Vrfs_Vrf_FloodListTable

    // Container for Segment Routing.
    SegmentRouting Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting

    // Container for MPLS TE.
    MplsTe Ospf_Processes_Process_Vrfs_Vrf_MplsTe

    // Container for Statistics.
    Statistics Ospf_Processes_Process_Vrfs_Vrf_Statistics

    // Container for OSPF Interfaces.
    AdjacencyInformation Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation

    // Container for OSPF routing tables.
    RouteInformation Ospf_Processes_Process_Vrfs_Vrf_RouteInformation

    // Container for OSPF Interfaces/links.
    InterfaceInformation Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation

    // Border router table.
    BorderRouters Ospf_Processes_Process_Vrfs_Vrf_BorderRouters

    // Container for OSPF Process information.
    ProcessInformation Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation

    // Area table.
    Areas Ospf_Processes_Process_Vrfs_Vrf_Areas

    // OSPF Link State Database.
    Database Ospf_Processes_Process_Vrfs_Vrf_Database

    // Summary prefix table.
    SummaryPrefixes Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes

    // Container for Statistics.
    AreaStatistics Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics

    // Fast-reroute topology information.
    OspfSummary Ospf_Processes_Process_Vrfs_Vrf_OspfSummary

    // Container for FastReroute.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_FastReroute
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("interface-vrf-information", types.YChild{"InterfaceVrfInformation", &vrf.InterfaceVrfInformation})
    vrf.EntityData.Children.Append("flood-list-table", types.YChild{"FloodListTable", &vrf.FloodListTable})
    vrf.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &vrf.SegmentRouting})
    vrf.EntityData.Children.Append("mpls-te", types.YChild{"MplsTe", &vrf.MplsTe})
    vrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &vrf.Statistics})
    vrf.EntityData.Children.Append("adjacency-information", types.YChild{"AdjacencyInformation", &vrf.AdjacencyInformation})
    vrf.EntityData.Children.Append("route-information", types.YChild{"RouteInformation", &vrf.RouteInformation})
    vrf.EntityData.Children.Append("interface-information", types.YChild{"InterfaceInformation", &vrf.InterfaceInformation})
    vrf.EntityData.Children.Append("border-routers", types.YChild{"BorderRouters", &vrf.BorderRouters})
    vrf.EntityData.Children.Append("process-information", types.YChild{"ProcessInformation", &vrf.ProcessInformation})
    vrf.EntityData.Children.Append("areas", types.YChild{"Areas", &vrf.Areas})
    vrf.EntityData.Children.Append("database", types.YChild{"Database", &vrf.Database})
    vrf.EntityData.Children.Append("summary-prefixes", types.YChild{"SummaryPrefixes", &vrf.SummaryPrefixes})
    vrf.EntityData.Children.Append("area-statistics", types.YChild{"AreaStatistics", &vrf.AreaStatistics})
    vrf.EntityData.Children.Append("ospf-summary", types.YChild{"OspfSummary", &vrf.OspfSummary})
    vrf.EntityData.Children.Append("fast-reroute", types.YChild{"FastReroute", &vrf.FastReroute})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation
// Container for OSPF Interfaces/links under a
// VRF
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sham Link table.
    ShamLinks Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks
}

func (interfaceVrfInformation *Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation) GetEntityData() *types.CommonEntityData {
    interfaceVrfInformation.EntityData.YFilter = interfaceVrfInformation.YFilter
    interfaceVrfInformation.EntityData.YangName = "interface-vrf-information"
    interfaceVrfInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceVrfInformation.EntityData.ParentYangName = "vrf"
    interfaceVrfInformation.EntityData.SegmentPath = "interface-vrf-information"
    interfaceVrfInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceVrfInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceVrfInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceVrfInformation.EntityData.Children = types.NewOrderedMap()
    interfaceVrfInformation.EntityData.Children.Append("sham-links", types.YChild{"ShamLinks", &interfaceVrfInformation.ShamLinks})
    interfaceVrfInformation.EntityData.Leafs = types.NewOrderedMap()

    interfaceVrfInformation.EntityData.YListKeys = []string {}

    return &(interfaceVrfInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks
// Sham Link table
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information for one Sham link. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink.
    ShamLink []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink
}

func (shamLinks *Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks) GetEntityData() *types.CommonEntityData {
    shamLinks.EntityData.YFilter = shamLinks.YFilter
    shamLinks.EntityData.YangName = "sham-links"
    shamLinks.EntityData.BundleName = "cisco_ios_xr"
    shamLinks.EntityData.ParentYangName = "interface-vrf-information"
    shamLinks.EntityData.SegmentPath = "sham-links"
    shamLinks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinks.EntityData.Children = types.NewOrderedMap()
    shamLinks.EntityData.Children.Append("sham-link", types.YChild{"ShamLink", nil})
    for i := range shamLinks.ShamLink {
        shamLinks.EntityData.Children.Append(types.GetSegmentPath(shamLinks.ShamLink[i]), types.YChild{"ShamLink", shamLinks.ShamLink[i]})
    }
    shamLinks.EntityData.Leafs = types.NewOrderedMap()

    shamLinks.EntityData.YListKeys = []string {}

    return &(shamLinks.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink
// Information for one Sham link
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Sham link. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ShamLinkName interface{}

    // Sham link name. The type is string.
    ShamLinkNameXr interface{}

    // Neighbor on other end of this sham link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkNeighborId interface{}

    // Sham-link source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkSourceAddress interface{}

    // Sham-link dest. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkDestAddress interface{}

    // OSPF interface state for the sham link. The type is OspfInterfaceState.
    ShamLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    ShamLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    ShamLinkDcBitlessLsa interface{}

    // Sham-link ifindex. The type is interface{} with range: 0..4294967295.
    ShamLinkIfindex interface{}

    // Area id. The type is string.
    ShamLinkArea interface{}

    // Cost of the sham link. The type is interface{} with range: 0..65535.
    ShamLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    ShamLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkHelloInterval interface{}

    // Hello interval (ms). The type is interface{} with range: 0..4294967295.
    ShamLinkHelloIntervalMs interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkNextHello interface{}

    // Time until next hello (ms). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkNextHelloMs interface{}

    // If true, interface is passive. The type is bool.
    ShamLinkPassive interface{}

    // Authentication type. The type is Authentication.
    ShamLinkAuthenticationType interface{}

    // If true, MD key configured. The type is bool.
    ShamLinkYoungestMdKey interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    ShamLinkYoungestMdKeyId interface{}

    // Number of neighbors still using the old key (rollover in progress). The
    // type is interface{} with range: 0..4294967295.
    ShamLinkOldMdKeyCount interface{}

    // Sham Link Keychain ID. The type is interface{} with range:
    // 0..18446744073709551615.
    ShamLinkKeychainId interface{}

    // If true, NSF enabled. The type is bool.
    ShamLinkNsfEnabled interface{}

    // If true, NSF restart in progress on the sham link. The type is bool.
    ShamLinkNsf interface{}

    // Time in seconds since last NSF. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ShamLinkLastNsf interface{}

    // Neighbor information.
    ShamLinkNeighbor Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor

    // List of old MD keys (if any). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkMdKey.
    ShamLinkMdKey []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkMdKey
}

func (shamLink *Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink) GetEntityData() *types.CommonEntityData {
    shamLink.EntityData.YFilter = shamLink.YFilter
    shamLink.EntityData.YangName = "sham-link"
    shamLink.EntityData.BundleName = "cisco_ios_xr"
    shamLink.EntityData.ParentYangName = "sham-links"
    shamLink.EntityData.SegmentPath = "sham-link" + types.AddKeyToken(shamLink.ShamLinkName, "sham-link-name")
    shamLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLink.EntityData.Children = types.NewOrderedMap()
    shamLink.EntityData.Children.Append("sham-link-neighbor", types.YChild{"ShamLinkNeighbor", &shamLink.ShamLinkNeighbor})
    shamLink.EntityData.Children.Append("sham-link-md-key", types.YChild{"ShamLinkMdKey", nil})
    for i := range shamLink.ShamLinkMdKey {
        shamLink.EntityData.Children.Append(types.GetSegmentPath(shamLink.ShamLinkMdKey[i]), types.YChild{"ShamLinkMdKey", shamLink.ShamLinkMdKey[i]})
    }
    shamLink.EntityData.Leafs = types.NewOrderedMap()
    shamLink.EntityData.Leafs.Append("sham-link-name", types.YLeaf{"ShamLinkName", shamLink.ShamLinkName})
    shamLink.EntityData.Leafs.Append("sham-link-name-xr", types.YLeaf{"ShamLinkNameXr", shamLink.ShamLinkNameXr})
    shamLink.EntityData.Leafs.Append("sham-link-neighbor-id", types.YLeaf{"ShamLinkNeighborId", shamLink.ShamLinkNeighborId})
    shamLink.EntityData.Leafs.Append("sham-link-source-address", types.YLeaf{"ShamLinkSourceAddress", shamLink.ShamLinkSourceAddress})
    shamLink.EntityData.Leafs.Append("sham-link-dest-address", types.YLeaf{"ShamLinkDestAddress", shamLink.ShamLinkDestAddress})
    shamLink.EntityData.Leafs.Append("sham-link-state", types.YLeaf{"ShamLinkState", shamLink.ShamLinkState})
    shamLink.EntityData.Leafs.Append("sham-link-demand-circuit", types.YLeaf{"ShamLinkDemandCircuit", shamLink.ShamLinkDemandCircuit})
    shamLink.EntityData.Leafs.Append("sham-link-dc-bitless-lsa", types.YLeaf{"ShamLinkDcBitlessLsa", shamLink.ShamLinkDcBitlessLsa})
    shamLink.EntityData.Leafs.Append("sham-link-ifindex", types.YLeaf{"ShamLinkIfindex", shamLink.ShamLinkIfindex})
    shamLink.EntityData.Leafs.Append("sham-link-area", types.YLeaf{"ShamLinkArea", shamLink.ShamLinkArea})
    shamLink.EntityData.Leafs.Append("sham-link-cost", types.YLeaf{"ShamLinkCost", shamLink.ShamLinkCost})
    shamLink.EntityData.Leafs.Append("sham-link-transmission-delay", types.YLeaf{"ShamLinkTransmissionDelay", shamLink.ShamLinkTransmissionDelay})
    shamLink.EntityData.Leafs.Append("sham-link-hello-interval", types.YLeaf{"ShamLinkHelloInterval", shamLink.ShamLinkHelloInterval})
    shamLink.EntityData.Leafs.Append("sham-link-hello-interval-ms", types.YLeaf{"ShamLinkHelloIntervalMs", shamLink.ShamLinkHelloIntervalMs})
    shamLink.EntityData.Leafs.Append("sham-link-dead-interval", types.YLeaf{"ShamLinkDeadInterval", shamLink.ShamLinkDeadInterval})
    shamLink.EntityData.Leafs.Append("sham-link-wait-interval", types.YLeaf{"ShamLinkWaitInterval", shamLink.ShamLinkWaitInterval})
    shamLink.EntityData.Leafs.Append("sham-link-retransmission-interval", types.YLeaf{"ShamLinkRetransmissionInterval", shamLink.ShamLinkRetransmissionInterval})
    shamLink.EntityData.Leafs.Append("sham-link-next-hello", types.YLeaf{"ShamLinkNextHello", shamLink.ShamLinkNextHello})
    shamLink.EntityData.Leafs.Append("sham-link-next-hello-ms", types.YLeaf{"ShamLinkNextHelloMs", shamLink.ShamLinkNextHelloMs})
    shamLink.EntityData.Leafs.Append("sham-link-passive", types.YLeaf{"ShamLinkPassive", shamLink.ShamLinkPassive})
    shamLink.EntityData.Leafs.Append("sham-link-authentication-type", types.YLeaf{"ShamLinkAuthenticationType", shamLink.ShamLinkAuthenticationType})
    shamLink.EntityData.Leafs.Append("sham-link-youngest-md-key", types.YLeaf{"ShamLinkYoungestMdKey", shamLink.ShamLinkYoungestMdKey})
    shamLink.EntityData.Leafs.Append("sham-link-youngest-md-key-id", types.YLeaf{"ShamLinkYoungestMdKeyId", shamLink.ShamLinkYoungestMdKeyId})
    shamLink.EntityData.Leafs.Append("sham-link-old-md-key-count", types.YLeaf{"ShamLinkOldMdKeyCount", shamLink.ShamLinkOldMdKeyCount})
    shamLink.EntityData.Leafs.Append("sham-link-keychain-id", types.YLeaf{"ShamLinkKeychainId", shamLink.ShamLinkKeychainId})
    shamLink.EntityData.Leafs.Append("sham-link-nsf-enabled", types.YLeaf{"ShamLinkNsfEnabled", shamLink.ShamLinkNsfEnabled})
    shamLink.EntityData.Leafs.Append("sham-link-nsf", types.YLeaf{"ShamLinkNsf", shamLink.ShamLinkNsf})
    shamLink.EntityData.Leafs.Append("sham-link-last-nsf", types.YLeaf{"ShamLinkLastNsf", shamLink.ShamLinkLastNsf})

    shamLink.EntityData.YListKeys = []string {"ShamLinkName"}

    return &(shamLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor
// Neighbor information
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    ShamLinkSuppressHello interface{}

    // Adjacency state. The type is NeighborState.
    ShamLinkState interface{}

    // Neighbor retransmission info.
    ShamLinkRetransmissoin Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor_ShamLinkRetransmissoin
}

func (shamLinkNeighbor *Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor) GetEntityData() *types.CommonEntityData {
    shamLinkNeighbor.EntityData.YFilter = shamLinkNeighbor.YFilter
    shamLinkNeighbor.EntityData.YangName = "sham-link-neighbor"
    shamLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    shamLinkNeighbor.EntityData.ParentYangName = "sham-link"
    shamLinkNeighbor.EntityData.SegmentPath = "sham-link-neighbor"
    shamLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    shamLinkNeighbor.EntityData.Children.Append("sham-link-retransmissoin", types.YChild{"ShamLinkRetransmissoin", &shamLinkNeighbor.ShamLinkRetransmissoin})
    shamLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    shamLinkNeighbor.EntityData.Leafs.Append("sham-link-suppress-hello", types.YLeaf{"ShamLinkSuppressHello", shamLinkNeighbor.ShamLinkSuppressHello})
    shamLinkNeighbor.EntityData.Leafs.Append("sham-link-state", types.YLeaf{"ShamLinkState", shamLinkNeighbor.ShamLinkState})

    shamLinkNeighbor.EntityData.YListKeys = []string {}

    return &(shamLinkNeighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor_ShamLinkRetransmissoin
// Neighbor retransmission info
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor_ShamLinkRetransmissoin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (shamLinkRetransmissoin *Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkNeighbor_ShamLinkRetransmissoin) GetEntityData() *types.CommonEntityData {
    shamLinkRetransmissoin.EntityData.YFilter = shamLinkRetransmissoin.YFilter
    shamLinkRetransmissoin.EntityData.YangName = "sham-link-retransmissoin"
    shamLinkRetransmissoin.EntityData.BundleName = "cisco_ios_xr"
    shamLinkRetransmissoin.EntityData.ParentYangName = "sham-link-neighbor"
    shamLinkRetransmissoin.EntityData.SegmentPath = "sham-link-retransmissoin"
    shamLinkRetransmissoin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkRetransmissoin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkRetransmissoin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkRetransmissoin.EntityData.Children = types.NewOrderedMap()
    shamLinkRetransmissoin.EntityData.Leafs = types.NewOrderedMap()
    shamLinkRetransmissoin.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", shamLinkRetransmissoin.DbdRetransmissionCount})
    shamLinkRetransmissoin.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", shamLinkRetransmissoin.DbdRetransmissionTotalCount})
    shamLinkRetransmissoin.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", shamLinkRetransmissoin.AreaFloodingIndex})
    shamLinkRetransmissoin.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", shamLinkRetransmissoin.AsFloodIndex})
    shamLinkRetransmissoin.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", shamLinkRetransmissoin.NeighborRetransmissionCount})
    shamLinkRetransmissoin.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", shamLinkRetransmissoin.NumberOfRetransmissions})
    shamLinkRetransmissoin.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", shamLinkRetransmissoin.AreaFirstFloodInformation})
    shamLinkRetransmissoin.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", shamLinkRetransmissoin.AreaFirstFloodInformationIndex})
    shamLinkRetransmissoin.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", shamLinkRetransmissoin.AsFirstFloodInformation})
    shamLinkRetransmissoin.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", shamLinkRetransmissoin.AsFirstFloodInformationIndex})
    shamLinkRetransmissoin.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", shamLinkRetransmissoin.AreaNextFloodInformation})
    shamLinkRetransmissoin.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", shamLinkRetransmissoin.AreaNextFloodInformationIndex})
    shamLinkRetransmissoin.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", shamLinkRetransmissoin.AsNextFloodInformation})
    shamLinkRetransmissoin.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", shamLinkRetransmissoin.AsNextFloodInformationIndex})
    shamLinkRetransmissoin.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", shamLinkRetransmissoin.LastRetransmissionLength})
    shamLinkRetransmissoin.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", shamLinkRetransmissoin.MaximumRetransmissionLength})
    shamLinkRetransmissoin.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", shamLinkRetransmissoin.LastRetransmissionTime})
    shamLinkRetransmissoin.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", shamLinkRetransmissoin.MaximumRetransmissionTime})
    shamLinkRetransmissoin.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", shamLinkRetransmissoin.LsaRetransmissionTimer})

    shamLinkRetransmissoin.EntityData.YListKeys = []string {}

    return &(shamLinkRetransmissoin.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkMdKey
// List of old MD keys (if any)
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkMdKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (shamLinkMdKey *Ospf_Processes_Process_Vrfs_Vrf_InterfaceVrfInformation_ShamLinks_ShamLink_ShamLinkMdKey) GetEntityData() *types.CommonEntityData {
    shamLinkMdKey.EntityData.YFilter = shamLinkMdKey.YFilter
    shamLinkMdKey.EntityData.YangName = "sham-link-md-key"
    shamLinkMdKey.EntityData.BundleName = "cisco_ios_xr"
    shamLinkMdKey.EntityData.ParentYangName = "sham-link"
    shamLinkMdKey.EntityData.SegmentPath = "sham-link-md-key"
    shamLinkMdKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkMdKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkMdKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkMdKey.EntityData.Children = types.NewOrderedMap()
    shamLinkMdKey.EntityData.Leafs = types.NewOrderedMap()
    shamLinkMdKey.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", shamLinkMdKey.Entry})

    shamLinkMdKey.EntityData.YListKeys = []string {}

    return &(shamLinkMdKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FloodListTable
// Flood list table
type Ospf_Processes_Process_Vrfs_Vrf_FloodListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flooding information for a specific interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood.
    Flood []*Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood
}

func (floodListTable *Ospf_Processes_Process_Vrfs_Vrf_FloodListTable) GetEntityData() *types.CommonEntityData {
    floodListTable.EntityData.YFilter = floodListTable.YFilter
    floodListTable.EntityData.YangName = "flood-list-table"
    floodListTable.EntityData.BundleName = "cisco_ios_xr"
    floodListTable.EntityData.ParentYangName = "vrf"
    floodListTable.EntityData.SegmentPath = "flood-list-table"
    floodListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListTable.EntityData.Children = types.NewOrderedMap()
    floodListTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListTable.Flood {
        floodListTable.EntityData.Children.Append(types.GetSegmentPath(floodListTable.Flood[i]), types.YChild{"Flood", floodListTable.Flood[i]})
    }
    floodListTable.EntityData.Leafs = types.NewOrderedMap()

    floodListTable.EntityData.YListKeys = []string {}

    return &(floodListTable.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood
// Flooding information for a specific interface
type Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    FloodInterfaceName interface{}

    // Time until next LS update due (ms). The type is interface{} with range:
    // 0..4294967295.
    FloodPacingTimer interface{}

    // Number of LSAs currently being flooded. The type is interface{} with range:
    // 0..4294967295.
    FloodLsaCount interface{}

    // Area scope floodlist. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AreaFlood.
    AreaFlood []*Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AsFlood.
    AsFlood []*Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AsFlood
}

func (flood *Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("flood-interface-name", types.YLeaf{"FloodInterfaceName", flood.FloodInterfaceName})
    flood.EntityData.Leafs.Append("flood-pacing-timer", types.YLeaf{"FloodPacingTimer", flood.FloodPacingTimer})
    flood.EntityData.Leafs.Append("flood-lsa-count", types.YLeaf{"FloodLsaCount", flood.FloodLsaCount})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AreaFlood
// Area scope floodlist
type Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (areaFlood *Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood"
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", areaFlood.HeaderLsId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})
    areaFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", areaFlood.HeaderLsaChecksum})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AsFlood
// AS scope floodlist
type Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (asFlood *Ospf_Processes_Process_Vrfs_Vrf_FloodListTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood"
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", asFlood.HeaderLsId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})
    asFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", asFlood.HeaderLsaChecksum})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting
// Container for Segment Routing
type Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Container for SR Policies.
    SrEndpointPolicies Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies
}

func (segmentRouting *Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "cisco_ios_xr"
    segmentRouting.EntityData.ParentYangName = "vrf"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("sr-endpoint-policies", types.YChild{"SrEndpointPolicies", &segmentRouting.SrEndpointPolicies})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies
// Container for SR Policies
type Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Endpoint Policy Bag. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy.
    SrEndpointPolicy []*Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy
}

func (srEndpointPolicies *Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies) GetEntityData() *types.CommonEntityData {
    srEndpointPolicies.EntityData.YFilter = srEndpointPolicies.YFilter
    srEndpointPolicies.EntityData.YangName = "sr-endpoint-policies"
    srEndpointPolicies.EntityData.BundleName = "cisco_ios_xr"
    srEndpointPolicies.EntityData.ParentYangName = "segment-routing"
    srEndpointPolicies.EntityData.SegmentPath = "sr-endpoint-policies"
    srEndpointPolicies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srEndpointPolicies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srEndpointPolicies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srEndpointPolicies.EntityData.Children = types.NewOrderedMap()
    srEndpointPolicies.EntityData.Children.Append("sr-endpoint-policy", types.YChild{"SrEndpointPolicy", nil})
    for i := range srEndpointPolicies.SrEndpointPolicy {
        srEndpointPolicies.EntityData.Children.Append(types.GetSegmentPath(srEndpointPolicies.SrEndpointPolicy[i]), types.YChild{"SrEndpointPolicy", srEndpointPolicies.SrEndpointPolicy[i]})
    }
    srEndpointPolicies.EntityData.Leafs = types.NewOrderedMap()

    srEndpointPolicies.EntityData.YListKeys = []string {}

    return &(srEndpointPolicies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy
// SR Endpoint Policy Bag
type Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Endpoint IP Address. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    EndpointIp interface{}

    // SR Endpoint. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrEndpoint interface{}

    // SR Endpoint Router ID. The type is interface{} with range: 0..4294967295.
    SrRouterId interface{}

    // SR Endpoint Area ID. The type is string.
    SrAreaIdString interface{}

    // SR Policy count. The type is interface{} with range: 0..4294967295.
    SrPolicyCount interface{}

    // SR Valid Policy count. The type is interface{} with range: 0..4294967295.
    SrValidPolicyCount interface{}

    // SR Endpoint state is valid. The type is bool.
    SrEndpStateIsValid interface{}

    // SR Endpoint state is stale. The type is bool.
    SrEndpStateIsStale interface{}

    // SR Endpoint state is unresolved. The type is bool.
    SrEndpStateIsUnres interface{}

    // SR Endpoint resolution failed reason. The type is OspfSrEndpResFailReason.
    SrEndpResolutionFailReason interface{}

    // SR Policy List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy.
    SrPolicy []*Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy
}

func (srEndpointPolicy *Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy) GetEntityData() *types.CommonEntityData {
    srEndpointPolicy.EntityData.YFilter = srEndpointPolicy.YFilter
    srEndpointPolicy.EntityData.YangName = "sr-endpoint-policy"
    srEndpointPolicy.EntityData.BundleName = "cisco_ios_xr"
    srEndpointPolicy.EntityData.ParentYangName = "sr-endpoint-policies"
    srEndpointPolicy.EntityData.SegmentPath = "sr-endpoint-policy" + types.AddKeyToken(srEndpointPolicy.EndpointIp, "endpoint-ip")
    srEndpointPolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srEndpointPolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srEndpointPolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srEndpointPolicy.EntityData.Children = types.NewOrderedMap()
    srEndpointPolicy.EntityData.Children.Append("sr-policy", types.YChild{"SrPolicy", nil})
    for i := range srEndpointPolicy.SrPolicy {
        srEndpointPolicy.EntityData.Children.Append(types.GetSegmentPath(srEndpointPolicy.SrPolicy[i]), types.YChild{"SrPolicy", srEndpointPolicy.SrPolicy[i]})
    }
    srEndpointPolicy.EntityData.Leafs = types.NewOrderedMap()
    srEndpointPolicy.EntityData.Leafs.Append("endpoint-ip", types.YLeaf{"EndpointIp", srEndpointPolicy.EndpointIp})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endpoint", types.YLeaf{"SrEndpoint", srEndpointPolicy.SrEndpoint})
    srEndpointPolicy.EntityData.Leafs.Append("sr-router-id", types.YLeaf{"SrRouterId", srEndpointPolicy.SrRouterId})
    srEndpointPolicy.EntityData.Leafs.Append("sr-area-id-string", types.YLeaf{"SrAreaIdString", srEndpointPolicy.SrAreaIdString})
    srEndpointPolicy.EntityData.Leafs.Append("sr-policy-count", types.YLeaf{"SrPolicyCount", srEndpointPolicy.SrPolicyCount})
    srEndpointPolicy.EntityData.Leafs.Append("sr-valid-policy-count", types.YLeaf{"SrValidPolicyCount", srEndpointPolicy.SrValidPolicyCount})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-state-is-valid", types.YLeaf{"SrEndpStateIsValid", srEndpointPolicy.SrEndpStateIsValid})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-state-is-stale", types.YLeaf{"SrEndpStateIsStale", srEndpointPolicy.SrEndpStateIsStale})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-state-is-unres", types.YLeaf{"SrEndpStateIsUnres", srEndpointPolicy.SrEndpStateIsUnres})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-resolution-fail-reason", types.YLeaf{"SrEndpResolutionFailReason", srEndpointPolicy.SrEndpResolutionFailReason})

    srEndpointPolicy.EntityData.YListKeys = []string {"EndpointIp"}

    return &(srEndpointPolicy.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy
// SR Policy List
type Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Policy Name. The type is string.
    PolicyName interface{}

    // SR Policy Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PolicyIfHandle interface{}

    // SR Policy Metric. The type is interface{} with range:
    // -2147483648..2147483647.
    PolicyMetric interface{}

    // SR Policy Metric mode. The type is OspfSrPolMetricMode.
    PolicyMetricMode interface{}

    // SR Policy is Strict SPF. The type is bool.
    PolicyIsSspf interface{}

    // SR Policy is autoroute Include. The type is bool.
    PolicyIsAutorouteInclude interface{}

    // SR Policy State is valid. The type is bool.
    PolicyStateIsValid interface{}

    // SR Policy State is stale. The type is bool.
    PolicyStateIsStale interface{}

    // SR Policy State is IF Handle error. The type is bool.
    PolicyStateIsIfhError interface{}

    // SR Policy State is IDB pending. The type is bool.
    PolicyStateIsIdbPending interface{}

    // SR Policy update time. The type is interface{} with range: 0..4294967295.
    PolicyUpdateTimestamp interface{}
}

func (srPolicy *Ospf_Processes_Process_Vrfs_Vrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy) GetEntityData() *types.CommonEntityData {
    srPolicy.EntityData.YFilter = srPolicy.YFilter
    srPolicy.EntityData.YangName = "sr-policy"
    srPolicy.EntityData.BundleName = "cisco_ios_xr"
    srPolicy.EntityData.ParentYangName = "sr-endpoint-policy"
    srPolicy.EntityData.SegmentPath = "sr-policy"
    srPolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPolicy.EntityData.Children = types.NewOrderedMap()
    srPolicy.EntityData.Leafs = types.NewOrderedMap()
    srPolicy.EntityData.Leafs.Append("policy-name", types.YLeaf{"PolicyName", srPolicy.PolicyName})
    srPolicy.EntityData.Leafs.Append("policy-if-handle", types.YLeaf{"PolicyIfHandle", srPolicy.PolicyIfHandle})
    srPolicy.EntityData.Leafs.Append("policy-metric", types.YLeaf{"PolicyMetric", srPolicy.PolicyMetric})
    srPolicy.EntityData.Leafs.Append("policy-metric-mode", types.YLeaf{"PolicyMetricMode", srPolicy.PolicyMetricMode})
    srPolicy.EntityData.Leafs.Append("policy-is-sspf", types.YLeaf{"PolicyIsSspf", srPolicy.PolicyIsSspf})
    srPolicy.EntityData.Leafs.Append("policy-is-autoroute-include", types.YLeaf{"PolicyIsAutorouteInclude", srPolicy.PolicyIsAutorouteInclude})
    srPolicy.EntityData.Leafs.Append("policy-state-is-valid", types.YLeaf{"PolicyStateIsValid", srPolicy.PolicyStateIsValid})
    srPolicy.EntityData.Leafs.Append("policy-state-is-stale", types.YLeaf{"PolicyStateIsStale", srPolicy.PolicyStateIsStale})
    srPolicy.EntityData.Leafs.Append("policy-state-is-ifh-error", types.YLeaf{"PolicyStateIsIfhError", srPolicy.PolicyStateIsIfhError})
    srPolicy.EntityData.Leafs.Append("policy-state-is-idb-pending", types.YLeaf{"PolicyStateIsIdbPending", srPolicy.PolicyStateIsIdbPending})
    srPolicy.EntityData.Leafs.Append("policy-update-timestamp", types.YLeaf{"PolicyUpdateTimestamp", srPolicy.PolicyUpdateTimestamp})

    srPolicy.EntityData.YListKeys = []string {}

    return &(srPolicy.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe
// Container for MPLS TE
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS TE link information table.
    MplsTeLinks Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks

    // MPLS TE Fragment information table.
    MplsTeFragments Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments
}

func (mplsTe *Ospf_Processes_Process_Vrfs_Vrf_MplsTe) GetEntityData() *types.CommonEntityData {
    mplsTe.EntityData.YFilter = mplsTe.YFilter
    mplsTe.EntityData.YangName = "mpls-te"
    mplsTe.EntityData.BundleName = "cisco_ios_xr"
    mplsTe.EntityData.ParentYangName = "vrf"
    mplsTe.EntityData.SegmentPath = "mpls-te"
    mplsTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTe.EntityData.Children = types.NewOrderedMap()
    mplsTe.EntityData.Children.Append("mpls-te-links", types.YChild{"MplsTeLinks", &mplsTe.MplsTeLinks})
    mplsTe.EntityData.Children.Append("mpls-te-fragments", types.YChild{"MplsTeFragments", &mplsTe.MplsTeFragments})
    mplsTe.EntityData.Leafs = types.NewOrderedMap()

    mplsTe.EntityData.YListKeys = []string {}

    return &(mplsTe.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks
// MPLS TE link information table
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS TE link information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink
}

func (mplsTeLinks *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks) GetEntityData() *types.CommonEntityData {
    mplsTeLinks.EntityData.YFilter = mplsTeLinks.YFilter
    mplsTeLinks.EntityData.YangName = "mpls-te-links"
    mplsTeLinks.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLinks.EntityData.ParentYangName = "mpls-te"
    mplsTeLinks.EntityData.SegmentPath = "mpls-te-links"
    mplsTeLinks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLinks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLinks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLinks.EntityData.Children = types.NewOrderedMap()
    mplsTeLinks.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeLinks.MplsTeLink {
        mplsTeLinks.EntityData.Children.Append(types.GetSegmentPath(mplsTeLinks.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeLinks.MplsTeLink[i]})
    }
    mplsTeLinks.EntityData.Leafs = types.NewOrderedMap()

    mplsTeLinks.EntityData.YListKeys = []string {}

    return &(mplsTeLinks.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink
// MPLS TE link information
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPF MPLS-TE router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterId interface{}

    // If true, MPLS-TE enabled in area. The type is bool.
    MplsTeEnabled interface{}

    // If true, MPLS-TE initialized in the area. The type is bool.
    MplsTeInitialized interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    MplsTeAreaId interface{}

    // Area information instance. The type is interface{} with range:
    // 0..4294967295.
    MplsTeAreaInstance interface{}

    // MPLS-TE router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterAddress interface{}

    // Next MPLS-TE fragment ID. The type is interface{} with range:
    // 0..4294967295.
    MplsTeNextFragmentId interface{}

    // If true, fragment has space for next link. The type is bool.
    SpaciousFragment interface{}

    // MPLS-TE links in the area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink

    // MPLS TE fragments in the area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment.
    MplsTeFragment []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment
}

func (mplsTeLink *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-links"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link" + types.AddKeyToken(mplsTeLink.AreaId, "area-id")
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeLink.MplsTeLink {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeLink.MplsTeLink[i]})
    }
    mplsTeLink.EntityData.Children.Append("mpls-te-fragment", types.YChild{"MplsTeFragment", nil})
    for i := range mplsTeLink.MplsTeFragment {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsTeFragment[i]), types.YChild{"MplsTeFragment", mplsTeLink.MplsTeFragment[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", mplsTeLink.AreaId})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-router-id", types.YLeaf{"MplsTeRouterId", mplsTeLink.MplsTeRouterId})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-enabled", types.YLeaf{"MplsTeEnabled", mplsTeLink.MplsTeEnabled})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-initialized", types.YLeaf{"MplsTeInitialized", mplsTeLink.MplsTeInitialized})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-area-id", types.YLeaf{"MplsTeAreaId", mplsTeLink.MplsTeAreaId})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-area-instance", types.YLeaf{"MplsTeAreaInstance", mplsTeLink.MplsTeAreaInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-router-address", types.YLeaf{"MplsTeRouterAddress", mplsTeLink.MplsTeRouterAddress})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-next-fragment-id", types.YLeaf{"MplsTeNextFragmentId", mplsTeLink.MplsTeNextFragmentId})
    mplsTeLink.EntityData.Leafs.Append("spacious-fragment", types.YLeaf{"SpaciousFragment", mplsTeLink.SpaciousFragment})

    mplsTeLink.EntityData.YListKeys = []string {"AreaId"}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink
// MPLS-TE links in the area
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-link"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment
// MPLS TE fragments in the area
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fragment instance. The type is interface{} with range: 0..4294967295.
    FragmentInstance interface{}

    // Fragment ID. The type is interface{} with range: 0..4294967295.
    FragmentId interface{}

    // DS-TE Allocation Model ID. The type is interface{} with range: 0..255.
    DsteModelId interface{}

    // Number of fragment links which haven't changed since the last update. The
    // type is interface{} with range: 0..255.
    SameFragmentCount interface{}

    // List of fragment links. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink
}

func (mplsTeFragment *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment) GetEntityData() *types.CommonEntityData {
    mplsTeFragment.EntityData.YFilter = mplsTeFragment.YFilter
    mplsTeFragment.EntityData.YangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragment.EntityData.ParentYangName = "mpls-te-link"
    mplsTeFragment.EntityData.SegmentPath = "mpls-te-fragment"
    mplsTeFragment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragment.EntityData.Children = types.NewOrderedMap()
    mplsTeFragment.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeFragment.MplsTeLink {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeFragment.MplsTeLink[i]})
    }
    mplsTeFragment.EntityData.Leafs = types.NewOrderedMap()
    mplsTeFragment.EntityData.Leafs.Append("fragment-instance", types.YLeaf{"FragmentInstance", mplsTeFragment.FragmentInstance})
    mplsTeFragment.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeFragment.FragmentId})
    mplsTeFragment.EntityData.Leafs.Append("dste-model-id", types.YLeaf{"DsteModelId", mplsTeFragment.DsteModelId})
    mplsTeFragment.EntityData.Leafs.Append("same-fragment-count", types.YLeaf{"SameFragmentCount", mplsTeFragment.SameFragmentCount})

    mplsTeFragment.EntityData.YListKeys = []string {}

    return &(mplsTeFragment.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink
// List of fragment links
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments
// MPLS TE Fragment information table
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS TE Fragment. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment.
    MplsTeFragment []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment
}

func (mplsTeFragments *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments) GetEntityData() *types.CommonEntityData {
    mplsTeFragments.EntityData.YFilter = mplsTeFragments.YFilter
    mplsTeFragments.EntityData.YangName = "mpls-te-fragments"
    mplsTeFragments.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragments.EntityData.ParentYangName = "mpls-te"
    mplsTeFragments.EntityData.SegmentPath = "mpls-te-fragments"
    mplsTeFragments.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragments.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragments.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragments.EntityData.Children = types.NewOrderedMap()
    mplsTeFragments.EntityData.Children.Append("mpls-te-fragment", types.YChild{"MplsTeFragment", nil})
    for i := range mplsTeFragments.MplsTeFragment {
        mplsTeFragments.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragments.MplsTeFragment[i]), types.YChild{"MplsTeFragment", mplsTeFragments.MplsTeFragment[i]})
    }
    mplsTeFragments.EntityData.Leafs = types.NewOrderedMap()

    mplsTeFragments.EntityData.YListKeys = []string {}

    return &(mplsTeFragments.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment
// MPLS TE Fragment
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPF MPLS-TE router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterId interface{}

    // If true, MPLS-TE enabled in area. The type is bool.
    MplsTeEnabled interface{}

    // If true, MPLS-TE initialized in the area. The type is bool.
    MplsTeInitialized interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    MplsTeAreaId interface{}

    // Area information instance. The type is interface{} with range:
    // 0..4294967295.
    MplsTeAreaInstance interface{}

    // MPLS-TE router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterAddress interface{}

    // Next MPLS-TE fragment ID. The type is interface{} with range:
    // 0..4294967295.
    MplsTeNextFragmentId interface{}

    // If true, fragment has space for next link. The type is bool.
    SpaciousFragment interface{}

    // MPLS-TE links in the area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink

    // MPLS TE fragments in the area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment.
    MplsTeFragment []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment
}

func (mplsTeFragment *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment) GetEntityData() *types.CommonEntityData {
    mplsTeFragment.EntityData.YFilter = mplsTeFragment.YFilter
    mplsTeFragment.EntityData.YangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragment.EntityData.ParentYangName = "mpls-te-fragments"
    mplsTeFragment.EntityData.SegmentPath = "mpls-te-fragment" + types.AddKeyToken(mplsTeFragment.AreaId, "area-id")
    mplsTeFragment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragment.EntityData.Children = types.NewOrderedMap()
    mplsTeFragment.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeFragment.MplsTeLink {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeFragment.MplsTeLink[i]})
    }
    mplsTeFragment.EntityData.Children.Append("mpls-te-fragment", types.YChild{"MplsTeFragment", nil})
    for i := range mplsTeFragment.MplsTeFragment {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeFragment[i]), types.YChild{"MplsTeFragment", mplsTeFragment.MplsTeFragment[i]})
    }
    mplsTeFragment.EntityData.Leafs = types.NewOrderedMap()
    mplsTeFragment.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", mplsTeFragment.AreaId})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-router-id", types.YLeaf{"MplsTeRouterId", mplsTeFragment.MplsTeRouterId})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-enabled", types.YLeaf{"MplsTeEnabled", mplsTeFragment.MplsTeEnabled})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-initialized", types.YLeaf{"MplsTeInitialized", mplsTeFragment.MplsTeInitialized})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-area-id", types.YLeaf{"MplsTeAreaId", mplsTeFragment.MplsTeAreaId})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-area-instance", types.YLeaf{"MplsTeAreaInstance", mplsTeFragment.MplsTeAreaInstance})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-router-address", types.YLeaf{"MplsTeRouterAddress", mplsTeFragment.MplsTeRouterAddress})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-next-fragment-id", types.YLeaf{"MplsTeNextFragmentId", mplsTeFragment.MplsTeNextFragmentId})
    mplsTeFragment.EntityData.Leafs.Append("spacious-fragment", types.YLeaf{"SpaciousFragment", mplsTeFragment.SpaciousFragment})

    mplsTeFragment.EntityData.YListKeys = []string {"AreaId"}

    return &(mplsTeFragment.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink
// MPLS-TE links in the area
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment
// MPLS TE fragments in the area
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fragment instance. The type is interface{} with range: 0..4294967295.
    FragmentInstance interface{}

    // Fragment ID. The type is interface{} with range: 0..4294967295.
    FragmentId interface{}

    // DS-TE Allocation Model ID. The type is interface{} with range: 0..255.
    DsteModelId interface{}

    // Number of fragment links which haven't changed since the last update. The
    // type is interface{} with range: 0..255.
    SameFragmentCount interface{}

    // List of fragment links. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink
}

func (mplsTeFragment *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment) GetEntityData() *types.CommonEntityData {
    mplsTeFragment.EntityData.YFilter = mplsTeFragment.YFilter
    mplsTeFragment.EntityData.YangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragment.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.SegmentPath = "mpls-te-fragment"
    mplsTeFragment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragment.EntityData.Children = types.NewOrderedMap()
    mplsTeFragment.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeFragment.MplsTeLink {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeFragment.MplsTeLink[i]})
    }
    mplsTeFragment.EntityData.Leafs = types.NewOrderedMap()
    mplsTeFragment.EntityData.Leafs.Append("fragment-instance", types.YLeaf{"FragmentInstance", mplsTeFragment.FragmentInstance})
    mplsTeFragment.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeFragment.FragmentId})
    mplsTeFragment.EntityData.Leafs.Append("dste-model-id", types.YLeaf{"DsteModelId", mplsTeFragment.DsteModelId})
    mplsTeFragment.EntityData.Leafs.Append("same-fragment-count", types.YLeaf{"SameFragmentCount", mplsTeFragment.SameFragmentCount})

    mplsTeFragment.EntityData.YListKeys = []string {}

    return &(mplsTeFragment.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink
// List of fragment links
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_Vrfs_Vrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics
// Container for Statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF SPF statistics.
    SpfStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats

    // Stats concerning RIB route updates using the Batching API.
    RibBatchStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats

    // OSPF ISSU statistics.
    IssuStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats

    // OSPF RIB thread statistics.
    RibThreadStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats

    // OSPF NSR packet library statistics.
    NsrPlStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats

    // OSPF NSR thread statistics.
    NsrStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats

    // OSPF fast-reroute statistics.
    FrrStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_FrrStats

    // OSPF TE IO statistics.
    TeStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_TeStats

    // OSPF Protocol statistics.
    ProtocolStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_ProtocolStats

    // OSPF RAW IO statistics.
    RawIoStats Ospf_Processes_Process_Vrfs_Vrf_Statistics_RawIoStats

    // Statistics innformation Interface table.
    InterfaceStatsEntries Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries
}

func (statistics *Ospf_Processes_Process_Vrfs_Vrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("spf-stats", types.YChild{"SpfStats", &statistics.SpfStats})
    statistics.EntityData.Children.Append("rib-batch-stats", types.YChild{"RibBatchStats", &statistics.RibBatchStats})
    statistics.EntityData.Children.Append("issu-stats", types.YChild{"IssuStats", &statistics.IssuStats})
    statistics.EntityData.Children.Append("rib-thread-stats", types.YChild{"RibThreadStats", &statistics.RibThreadStats})
    statistics.EntityData.Children.Append("nsr-pl-stats", types.YChild{"NsrPlStats", &statistics.NsrPlStats})
    statistics.EntityData.Children.Append("nsr-stats", types.YChild{"NsrStats", &statistics.NsrStats})
    statistics.EntityData.Children.Append("frr-stats", types.YChild{"FrrStats", &statistics.FrrStats})
    statistics.EntityData.Children.Append("te-stats", types.YChild{"TeStats", &statistics.TeStats})
    statistics.EntityData.Children.Append("protocol-stats", types.YChild{"ProtocolStats", &statistics.ProtocolStats})
    statistics.EntityData.Children.Append("raw-io-stats", types.YChild{"RawIoStats", &statistics.RawIoStats})
    statistics.EntityData.Children.Append("interface-stats-entries", types.YChild{"InterfaceStatsEntries", &statistics.InterfaceStatsEntries})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats
// OSPF SPF statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf header.
    SpfHeader Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader

    // os runtime. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime.
    OsRuntime []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime

    // os sum runtime. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime.
    OsSumRuntime []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime

    // os ex runtime. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime.
    OsExRuntime []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime

    // runtime. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime.
    Runtime []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime
}

func (spfStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats) GetEntityData() *types.CommonEntityData {
    spfStats.EntityData.YFilter = spfStats.YFilter
    spfStats.EntityData.YangName = "spf-stats"
    spfStats.EntityData.BundleName = "cisco_ios_xr"
    spfStats.EntityData.ParentYangName = "statistics"
    spfStats.EntityData.SegmentPath = "spf-stats"
    spfStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStats.EntityData.Children = types.NewOrderedMap()
    spfStats.EntityData.Children.Append("spf-header", types.YChild{"SpfHeader", &spfStats.SpfHeader})
    spfStats.EntityData.Children.Append("os-runtime", types.YChild{"OsRuntime", nil})
    for i := range spfStats.OsRuntime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.OsRuntime[i]), types.YChild{"OsRuntime", spfStats.OsRuntime[i]})
    }
    spfStats.EntityData.Children.Append("os-sum-runtime", types.YChild{"OsSumRuntime", nil})
    for i := range spfStats.OsSumRuntime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.OsSumRuntime[i]), types.YChild{"OsSumRuntime", spfStats.OsSumRuntime[i]})
    }
    spfStats.EntityData.Children.Append("os-ex-runtime", types.YChild{"OsExRuntime", nil})
    for i := range spfStats.OsExRuntime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.OsExRuntime[i]), types.YChild{"OsExRuntime", spfStats.OsExRuntime[i]})
    }
    spfStats.EntityData.Children.Append("runtime", types.YChild{"Runtime", nil})
    for i := range spfStats.Runtime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.Runtime[i]), types.YChild{"Runtime", spfStats.Runtime[i]})
    }
    spfStats.EntityData.Leafs = types.NewOrderedMap()

    spfStats.EntityData.YListKeys = []string {}

    return &(spfStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader
// spf header
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // spf count. The type is interface{} with range: 0..4294967295.
    SpfCount interface{}

    // area summ. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader_AreaSumm.
    AreaSumm []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader_AreaSumm
}

func (spfHeader *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader) GetEntityData() *types.CommonEntityData {
    spfHeader.EntityData.YFilter = spfHeader.YFilter
    spfHeader.EntityData.YangName = "spf-header"
    spfHeader.EntityData.BundleName = "cisco_ios_xr"
    spfHeader.EntityData.ParentYangName = "spf-stats"
    spfHeader.EntityData.SegmentPath = "spf-header"
    spfHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfHeader.EntityData.Children = types.NewOrderedMap()
    spfHeader.EntityData.Children.Append("area-summ", types.YChild{"AreaSumm", nil})
    for i := range spfHeader.AreaSumm {
        spfHeader.EntityData.Children.Append(types.GetSegmentPath(spfHeader.AreaSumm[i]), types.YChild{"AreaSumm", spfHeader.AreaSumm[i]})
    }
    spfHeader.EntityData.Leafs = types.NewOrderedMap()
    spfHeader.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", spfHeader.RouterId})
    spfHeader.EntityData.Leafs.Append("spf-count", types.YLeaf{"SpfCount", spfHeader.SpfCount})

    spfHeader.EntityData.YListKeys = []string {}

    return &(spfHeader.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader_AreaSumm
// area summ
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader_AreaSumm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // spf count. The type is interface{} with range: 0..4294967295.
    SpfCount interface{}
}

func (areaSumm *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_SpfHeader_AreaSumm) GetEntityData() *types.CommonEntityData {
    areaSumm.EntityData.YFilter = areaSumm.YFilter
    areaSumm.EntityData.YangName = "area-summ"
    areaSumm.EntityData.BundleName = "cisco_ios_xr"
    areaSumm.EntityData.ParentYangName = "spf-header"
    areaSumm.EntityData.SegmentPath = "area-summ"
    areaSumm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaSumm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaSumm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaSumm.EntityData.Children = types.NewOrderedMap()
    areaSumm.EntityData.Leafs = types.NewOrderedMap()
    areaSumm.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaSumm.AreaId})
    areaSumm.EntityData.Leafs.Append("spf-count", types.YLeaf{"SpfCount", areaSumm.SpfCount})

    areaSumm.EntityData.YListKeys = []string {}

    return &(areaSumm.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime
// os runtime
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // si area id str. The type is string.
    SiAreaIdStr interface{}

    // si change flags. The type is interface{} with range: 0..65535.
    SiChangeFlags interface{}

    // si start time.
    SiStartTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiStartTime

    // si duration.
    SiDuration Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiDuration
}

func (osRuntime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime) GetEntityData() *types.CommonEntityData {
    osRuntime.EntityData.YFilter = osRuntime.YFilter
    osRuntime.EntityData.YangName = "os-runtime"
    osRuntime.EntityData.BundleName = "cisco_ios_xr"
    osRuntime.EntityData.ParentYangName = "spf-stats"
    osRuntime.EntityData.SegmentPath = "os-runtime"
    osRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    osRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    osRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    osRuntime.EntityData.Children = types.NewOrderedMap()
    osRuntime.EntityData.Children.Append("si-start-time", types.YChild{"SiStartTime", &osRuntime.SiStartTime})
    osRuntime.EntityData.Children.Append("si-duration", types.YChild{"SiDuration", &osRuntime.SiDuration})
    osRuntime.EntityData.Leafs = types.NewOrderedMap()
    osRuntime.EntityData.Leafs.Append("si-area-id-str", types.YLeaf{"SiAreaIdStr", osRuntime.SiAreaIdStr})
    osRuntime.EntityData.Leafs.Append("si-change-flags", types.YLeaf{"SiChangeFlags", osRuntime.SiChangeFlags})

    osRuntime.EntityData.YListKeys = []string {}

    return &(osRuntime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiStartTime
// si start time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiStartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (siStartTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiStartTime) GetEntityData() *types.CommonEntityData {
    siStartTime.EntityData.YFilter = siStartTime.YFilter
    siStartTime.EntityData.YangName = "si-start-time"
    siStartTime.EntityData.BundleName = "cisco_ios_xr"
    siStartTime.EntityData.ParentYangName = "os-runtime"
    siStartTime.EntityData.SegmentPath = "si-start-time"
    siStartTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siStartTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siStartTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siStartTime.EntityData.Children = types.NewOrderedMap()
    siStartTime.EntityData.Leafs = types.NewOrderedMap()
    siStartTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", siStartTime.Second})
    siStartTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", siStartTime.Nanosecond})

    siStartTime.EntityData.YListKeys = []string {}

    return &(siStartTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiDuration
// si duration
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiDuration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (siDuration *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsRuntime_SiDuration) GetEntityData() *types.CommonEntityData {
    siDuration.EntityData.YFilter = siDuration.YFilter
    siDuration.EntityData.YangName = "si-duration"
    siDuration.EntityData.BundleName = "cisco_ios_xr"
    siDuration.EntityData.ParentYangName = "os-runtime"
    siDuration.EntityData.SegmentPath = "si-duration"
    siDuration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siDuration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siDuration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siDuration.EntityData.Children = types.NewOrderedMap()
    siDuration.EntityData.Leafs = types.NewOrderedMap()
    siDuration.EntityData.Leafs.Append("second", types.YLeaf{"Second", siDuration.Second})
    siDuration.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", siDuration.Nanosecond})

    siDuration.EntityData.YListKeys = []string {}

    return &(siDuration.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime
// os sum runtime
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sp adv rtr id. The type is interface{} with range: 0..4294967295.
    SpAdvRtrId interface{}

    // sp dest count. The type is interface{} with range: 0..4294967295.
    SpDestCount interface{}

    // sp dest addr. The type is interface{} with range: 0..4294967295.
    SpDestAddr interface{}

    // sp start time.
    SpStartTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpStartTime

    // sp duration.
    SpDuration Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpDuration
}

func (osSumRuntime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime) GetEntityData() *types.CommonEntityData {
    osSumRuntime.EntityData.YFilter = osSumRuntime.YFilter
    osSumRuntime.EntityData.YangName = "os-sum-runtime"
    osSumRuntime.EntityData.BundleName = "cisco_ios_xr"
    osSumRuntime.EntityData.ParentYangName = "spf-stats"
    osSumRuntime.EntityData.SegmentPath = "os-sum-runtime"
    osSumRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    osSumRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    osSumRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    osSumRuntime.EntityData.Children = types.NewOrderedMap()
    osSumRuntime.EntityData.Children.Append("sp-start-time", types.YChild{"SpStartTime", &osSumRuntime.SpStartTime})
    osSumRuntime.EntityData.Children.Append("sp-duration", types.YChild{"SpDuration", &osSumRuntime.SpDuration})
    osSumRuntime.EntityData.Leafs = types.NewOrderedMap()
    osSumRuntime.EntityData.Leafs.Append("sp-adv-rtr-id", types.YLeaf{"SpAdvRtrId", osSumRuntime.SpAdvRtrId})
    osSumRuntime.EntityData.Leafs.Append("sp-dest-count", types.YLeaf{"SpDestCount", osSumRuntime.SpDestCount})
    osSumRuntime.EntityData.Leafs.Append("sp-dest-addr", types.YLeaf{"SpDestAddr", osSumRuntime.SpDestAddr})

    osSumRuntime.EntityData.YListKeys = []string {}

    return &(osSumRuntime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpStartTime
// sp start time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpStartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spStartTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpStartTime) GetEntityData() *types.CommonEntityData {
    spStartTime.EntityData.YFilter = spStartTime.YFilter
    spStartTime.EntityData.YangName = "sp-start-time"
    spStartTime.EntityData.BundleName = "cisco_ios_xr"
    spStartTime.EntityData.ParentYangName = "os-sum-runtime"
    spStartTime.EntityData.SegmentPath = "sp-start-time"
    spStartTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spStartTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spStartTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spStartTime.EntityData.Children = types.NewOrderedMap()
    spStartTime.EntityData.Leafs = types.NewOrderedMap()
    spStartTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", spStartTime.Second})
    spStartTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spStartTime.Nanosecond})

    spStartTime.EntityData.YListKeys = []string {}

    return &(spStartTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpDuration
// sp duration
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpDuration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spDuration *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsSumRuntime_SpDuration) GetEntityData() *types.CommonEntityData {
    spDuration.EntityData.YFilter = spDuration.YFilter
    spDuration.EntityData.YangName = "sp-duration"
    spDuration.EntityData.BundleName = "cisco_ios_xr"
    spDuration.EntityData.ParentYangName = "os-sum-runtime"
    spDuration.EntityData.SegmentPath = "sp-duration"
    spDuration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spDuration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spDuration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spDuration.EntityData.Children = types.NewOrderedMap()
    spDuration.EntityData.Leafs = types.NewOrderedMap()
    spDuration.EntityData.Leafs.Append("second", types.YLeaf{"Second", spDuration.Second})
    spDuration.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spDuration.Nanosecond})

    spDuration.EntityData.YListKeys = []string {}

    return &(spDuration.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime
// os ex runtime
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sp adv rtr id. The type is interface{} with range: 0..4294967295.
    SpAdvRtrId interface{}

    // sp dest count. The type is interface{} with range: 0..4294967295.
    SpDestCount interface{}

    // sp dest addr. The type is interface{} with range: 0..4294967295.
    SpDestAddr interface{}

    // sp start time.
    SpStartTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpStartTime

    // sp duration.
    SpDuration Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpDuration
}

func (osExRuntime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime) GetEntityData() *types.CommonEntityData {
    osExRuntime.EntityData.YFilter = osExRuntime.YFilter
    osExRuntime.EntityData.YangName = "os-ex-runtime"
    osExRuntime.EntityData.BundleName = "cisco_ios_xr"
    osExRuntime.EntityData.ParentYangName = "spf-stats"
    osExRuntime.EntityData.SegmentPath = "os-ex-runtime"
    osExRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    osExRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    osExRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    osExRuntime.EntityData.Children = types.NewOrderedMap()
    osExRuntime.EntityData.Children.Append("sp-start-time", types.YChild{"SpStartTime", &osExRuntime.SpStartTime})
    osExRuntime.EntityData.Children.Append("sp-duration", types.YChild{"SpDuration", &osExRuntime.SpDuration})
    osExRuntime.EntityData.Leafs = types.NewOrderedMap()
    osExRuntime.EntityData.Leafs.Append("sp-adv-rtr-id", types.YLeaf{"SpAdvRtrId", osExRuntime.SpAdvRtrId})
    osExRuntime.EntityData.Leafs.Append("sp-dest-count", types.YLeaf{"SpDestCount", osExRuntime.SpDestCount})
    osExRuntime.EntityData.Leafs.Append("sp-dest-addr", types.YLeaf{"SpDestAddr", osExRuntime.SpDestAddr})

    osExRuntime.EntityData.YListKeys = []string {}

    return &(osExRuntime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpStartTime
// sp start time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpStartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spStartTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpStartTime) GetEntityData() *types.CommonEntityData {
    spStartTime.EntityData.YFilter = spStartTime.YFilter
    spStartTime.EntityData.YangName = "sp-start-time"
    spStartTime.EntityData.BundleName = "cisco_ios_xr"
    spStartTime.EntityData.ParentYangName = "os-ex-runtime"
    spStartTime.EntityData.SegmentPath = "sp-start-time"
    spStartTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spStartTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spStartTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spStartTime.EntityData.Children = types.NewOrderedMap()
    spStartTime.EntityData.Leafs = types.NewOrderedMap()
    spStartTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", spStartTime.Second})
    spStartTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spStartTime.Nanosecond})

    spStartTime.EntityData.YListKeys = []string {}

    return &(spStartTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpDuration
// sp duration
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpDuration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spDuration *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_OsExRuntime_SpDuration) GetEntityData() *types.CommonEntityData {
    spDuration.EntityData.YFilter = spDuration.YFilter
    spDuration.EntityData.YangName = "sp-duration"
    spDuration.EntityData.BundleName = "cisco_ios_xr"
    spDuration.EntityData.ParentYangName = "os-ex-runtime"
    spDuration.EntityData.SegmentPath = "sp-duration"
    spDuration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spDuration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spDuration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spDuration.EntityData.Children = types.NewOrderedMap()
    spDuration.EntityData.Leafs = types.NewOrderedMap()
    spDuration.EntityData.Leafs.Append("second", types.YLeaf{"Second", spDuration.Second})
    spDuration.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spDuration.Nanosecond})

    spDuration.EntityData.YListKeys = []string {}

    return &(spDuration.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime
// runtime
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf start time. The type is interface{} with range: 0..4294967295.
    SpfStartTime interface{}

    // lsa change cnt. The type is interface{} with range: -32768..32767.
    LsaChangeCnt interface{}

    // gbl spf time.
    GblSpfTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_GblSpfTime

    // lsa info. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_LsaInfo.
    LsaInfo []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_LsaInfo

    // area stat. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat.
    AreaStat []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat
}

func (runtime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime) GetEntityData() *types.CommonEntityData {
    runtime.EntityData.YFilter = runtime.YFilter
    runtime.EntityData.YangName = "runtime"
    runtime.EntityData.BundleName = "cisco_ios_xr"
    runtime.EntityData.ParentYangName = "spf-stats"
    runtime.EntityData.SegmentPath = "runtime"
    runtime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    runtime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    runtime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    runtime.EntityData.Children = types.NewOrderedMap()
    runtime.EntityData.Children.Append("gbl-spf-time", types.YChild{"GblSpfTime", &runtime.GblSpfTime})
    runtime.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", nil})
    for i := range runtime.LsaInfo {
        runtime.EntityData.Children.Append(types.GetSegmentPath(runtime.LsaInfo[i]), types.YChild{"LsaInfo", runtime.LsaInfo[i]})
    }
    runtime.EntityData.Children.Append("area-stat", types.YChild{"AreaStat", nil})
    for i := range runtime.AreaStat {
        runtime.EntityData.Children.Append(types.GetSegmentPath(runtime.AreaStat[i]), types.YChild{"AreaStat", runtime.AreaStat[i]})
    }
    runtime.EntityData.Leafs = types.NewOrderedMap()
    runtime.EntityData.Leafs.Append("spf-start-time", types.YLeaf{"SpfStartTime", runtime.SpfStartTime})
    runtime.EntityData.Leafs.Append("lsa-change-cnt", types.YLeaf{"LsaChangeCnt", runtime.LsaChangeCnt})

    runtime.EntityData.YListKeys = []string {}

    return &(runtime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_GblSpfTime
// gbl spf time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_GblSpfTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf dijkstra. The type is interface{} with range: 0..4294967295.
    SpfDijkstra interface{}

    // spf intra prefix. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefix interface{}

    // spf intra prefix del. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefixDel interface{}

    // spf inter prefix. The type is interface{} with range: 0..4294967295.
    SpfInterPrefix interface{}

    // spf inter prefix del. The type is interface{} with range: 0..4294967295.
    SpfInterPrefixDel interface{}

    // spf ext prefix. The type is interface{} with range: 0..4294967295.
    SpfExtPrefix interface{}

    // spf ext prefix del. The type is interface{} with range: 0..4294967295.
    SpfExtPrefixDel interface{}
}

func (gblSpfTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_GblSpfTime) GetEntityData() *types.CommonEntityData {
    gblSpfTime.EntityData.YFilter = gblSpfTime.YFilter
    gblSpfTime.EntityData.YangName = "gbl-spf-time"
    gblSpfTime.EntityData.BundleName = "cisco_ios_xr"
    gblSpfTime.EntityData.ParentYangName = "runtime"
    gblSpfTime.EntityData.SegmentPath = "gbl-spf-time"
    gblSpfTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gblSpfTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gblSpfTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gblSpfTime.EntityData.Children = types.NewOrderedMap()
    gblSpfTime.EntityData.Leafs = types.NewOrderedMap()
    gblSpfTime.EntityData.Leafs.Append("spf-dijkstra", types.YLeaf{"SpfDijkstra", gblSpfTime.SpfDijkstra})
    gblSpfTime.EntityData.Leafs.Append("spf-intra-prefix", types.YLeaf{"SpfIntraPrefix", gblSpfTime.SpfIntraPrefix})
    gblSpfTime.EntityData.Leafs.Append("spf-intra-prefix-del", types.YLeaf{"SpfIntraPrefixDel", gblSpfTime.SpfIntraPrefixDel})
    gblSpfTime.EntityData.Leafs.Append("spf-inter-prefix", types.YLeaf{"SpfInterPrefix", gblSpfTime.SpfInterPrefix})
    gblSpfTime.EntityData.Leafs.Append("spf-inter-prefix-del", types.YLeaf{"SpfInterPrefixDel", gblSpfTime.SpfInterPrefixDel})
    gblSpfTime.EntityData.Leafs.Append("spf-ext-prefix", types.YLeaf{"SpfExtPrefix", gblSpfTime.SpfExtPrefix})
    gblSpfTime.EntityData.Leafs.Append("spf-ext-prefix-del", types.YLeaf{"SpfExtPrefixDel", gblSpfTime.SpfExtPrefixDel})

    gblSpfTime.EntityData.YListKeys = []string {}

    return &(gblSpfTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_LsaInfo
// lsa info
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // adv rtr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvRtr interface{}

    // id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Id interface{}

    // type. The type is interface{} with range: 0..255.
    Type interface{}

    // flush. The type is bool.
    Flush interface{}
}

func (lsaInfo *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "runtime"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsaInfo.AreaId})
    lsaInfo.EntityData.Leafs.Append("adv-rtr", types.YLeaf{"AdvRtr", lsaInfo.AdvRtr})
    lsaInfo.EntityData.Leafs.Append("id", types.YLeaf{"Id", lsaInfo.Id})
    lsaInfo.EntityData.Leafs.Append("type", types.YLeaf{"Type", lsaInfo.Type})
    lsaInfo.EntityData.Leafs.Append("flush", types.YLeaf{"Flush", lsaInfo.Flush})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat
// area stat
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // spf time.
    SpfTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime

    // lsa type cnt. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt.
    LsaTypeCnt []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt
}

func (areaStat *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat) GetEntityData() *types.CommonEntityData {
    areaStat.EntityData.YFilter = areaStat.YFilter
    areaStat.EntityData.YangName = "area-stat"
    areaStat.EntityData.BundleName = "cisco_ios_xr"
    areaStat.EntityData.ParentYangName = "runtime"
    areaStat.EntityData.SegmentPath = "area-stat"
    areaStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStat.EntityData.Children = types.NewOrderedMap()
    areaStat.EntityData.Children.Append("spf-time", types.YChild{"SpfTime", &areaStat.SpfTime})
    areaStat.EntityData.Children.Append("lsa-type-cnt", types.YChild{"LsaTypeCnt", nil})
    for i := range areaStat.LsaTypeCnt {
        areaStat.EntityData.Children.Append(types.GetSegmentPath(areaStat.LsaTypeCnt[i]), types.YChild{"LsaTypeCnt", areaStat.LsaTypeCnt[i]})
    }
    areaStat.EntityData.Leafs = types.NewOrderedMap()
    areaStat.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaStat.AreaId})

    areaStat.EntityData.YListKeys = []string {}

    return &(areaStat.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime
// spf time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf dijkstra. The type is interface{} with range: 0..4294967295.
    SpfDijkstra interface{}

    // spf intra prefix. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefix interface{}

    // spf intra prefix del. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefixDel interface{}

    // spf inter prefix. The type is interface{} with range: 0..4294967295.
    SpfInterPrefix interface{}

    // spf inter prefix del. The type is interface{} with range: 0..4294967295.
    SpfInterPrefixDel interface{}

    // spf ext prefix. The type is interface{} with range: 0..4294967295.
    SpfExtPrefix interface{}

    // spf ext prefix del. The type is interface{} with range: 0..4294967295.
    SpfExtPrefixDel interface{}
}

func (spfTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime) GetEntityData() *types.CommonEntityData {
    spfTime.EntityData.YFilter = spfTime.YFilter
    spfTime.EntityData.YangName = "spf-time"
    spfTime.EntityData.BundleName = "cisco_ios_xr"
    spfTime.EntityData.ParentYangName = "area-stat"
    spfTime.EntityData.SegmentPath = "spf-time"
    spfTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfTime.EntityData.Children = types.NewOrderedMap()
    spfTime.EntityData.Leafs = types.NewOrderedMap()
    spfTime.EntityData.Leafs.Append("spf-dijkstra", types.YLeaf{"SpfDijkstra", spfTime.SpfDijkstra})
    spfTime.EntityData.Leafs.Append("spf-intra-prefix", types.YLeaf{"SpfIntraPrefix", spfTime.SpfIntraPrefix})
    spfTime.EntityData.Leafs.Append("spf-intra-prefix-del", types.YLeaf{"SpfIntraPrefixDel", spfTime.SpfIntraPrefixDel})
    spfTime.EntityData.Leafs.Append("spf-inter-prefix", types.YLeaf{"SpfInterPrefix", spfTime.SpfInterPrefix})
    spfTime.EntityData.Leafs.Append("spf-inter-prefix-del", types.YLeaf{"SpfInterPrefixDel", spfTime.SpfInterPrefixDel})
    spfTime.EntityData.Leafs.Append("spf-ext-prefix", types.YLeaf{"SpfExtPrefix", spfTime.SpfExtPrefix})
    spfTime.EntityData.Leafs.Append("spf-ext-prefix-del", types.YLeaf{"SpfExtPrefixDel", spfTime.SpfExtPrefixDel})

    spfTime.EntityData.YListKeys = []string {}

    return &(spfTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt
// lsa type cnt
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lsaTypeCnt *Ospf_Processes_Process_Vrfs_Vrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt) GetEntityData() *types.CommonEntityData {
    lsaTypeCnt.EntityData.YFilter = lsaTypeCnt.YFilter
    lsaTypeCnt.EntityData.YangName = "lsa-type-cnt"
    lsaTypeCnt.EntityData.BundleName = "cisco_ios_xr"
    lsaTypeCnt.EntityData.ParentYangName = "area-stat"
    lsaTypeCnt.EntityData.SegmentPath = "lsa-type-cnt"
    lsaTypeCnt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaTypeCnt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaTypeCnt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaTypeCnt.EntityData.Children = types.NewOrderedMap()
    lsaTypeCnt.EntityData.Leafs = types.NewOrderedMap()
    lsaTypeCnt.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lsaTypeCnt.Entry})

    lsaTypeCnt.EntityData.YListKeys = []string {}

    return &(lsaTypeCnt.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats
// Stats concerning RIB route updates using the
// Batching API
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // priority batch. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats_PriorityBatch.
    PriorityBatch []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats_PriorityBatch
}

func (ribBatchStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats) GetEntityData() *types.CommonEntityData {
    ribBatchStats.EntityData.YFilter = ribBatchStats.YFilter
    ribBatchStats.EntityData.YangName = "rib-batch-stats"
    ribBatchStats.EntityData.BundleName = "cisco_ios_xr"
    ribBatchStats.EntityData.ParentYangName = "statistics"
    ribBatchStats.EntityData.SegmentPath = "rib-batch-stats"
    ribBatchStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBatchStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBatchStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBatchStats.EntityData.Children = types.NewOrderedMap()
    ribBatchStats.EntityData.Children.Append("priority-batch", types.YChild{"PriorityBatch", nil})
    for i := range ribBatchStats.PriorityBatch {
        ribBatchStats.EntityData.Children.Append(types.GetSegmentPath(ribBatchStats.PriorityBatch[i]), types.YChild{"PriorityBatch", ribBatchStats.PriorityBatch[i]})
    }
    ribBatchStats.EntityData.Leafs = types.NewOrderedMap()

    ribBatchStats.EntityData.YListKeys = []string {}

    return &(ribBatchStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats_PriorityBatch
// priority batch
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats_PriorityBatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // routes sent. The type is interface{} with range: 0..4294967295.
    RoutesSent interface{}

    // routes pending. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // max routes. The type is interface{} with range: 0..4294967295.
    MaxRoutes interface{}

    // paths sent. The type is interface{} with range: 0..4294967295.
    PathsSent interface{}

    // paths pending. The type is interface{} with range: 0..4294967295.
    PathsPending interface{}

    // paths add. The type is interface{} with range: 0..4294967295.
    PathsAdd interface{}

    // paths add errs. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // paths del. The type is interface{} with range: 0..4294967295.
    PathsDel interface{}

    // paths del errs. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}

    // lfas pending. The type is interface{} with range: 0..4294967295.
    LfasPending interface{}

    // lfas add. The type is interface{} with range: 0..4294967295.
    LfasAdd interface{}

    // lfas del. The type is interface{} with range: 0..4294967295.
    LfasDel interface{}

    // lfas sent. The type is interface{} with range: 0..4294967295.
    LfasSent interface{}

    // priority level. The type is string with length: 0..40.
    PriorityLevel interface{}
}

func (priorityBatch *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibBatchStats_PriorityBatch) GetEntityData() *types.CommonEntityData {
    priorityBatch.EntityData.YFilter = priorityBatch.YFilter
    priorityBatch.EntityData.YangName = "priority-batch"
    priorityBatch.EntityData.BundleName = "cisco_ios_xr"
    priorityBatch.EntityData.ParentYangName = "rib-batch-stats"
    priorityBatch.EntityData.SegmentPath = "priority-batch"
    priorityBatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    priorityBatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    priorityBatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    priorityBatch.EntityData.Children = types.NewOrderedMap()
    priorityBatch.EntityData.Leafs = types.NewOrderedMap()
    priorityBatch.EntityData.Leafs.Append("batches-sent", types.YLeaf{"BatchesSent", priorityBatch.BatchesSent})
    priorityBatch.EntityData.Leafs.Append("routes-sent", types.YLeaf{"RoutesSent", priorityBatch.RoutesSent})
    priorityBatch.EntityData.Leafs.Append("routes-pending", types.YLeaf{"RoutesPending", priorityBatch.RoutesPending})
    priorityBatch.EntityData.Leafs.Append("max-routes", types.YLeaf{"MaxRoutes", priorityBatch.MaxRoutes})
    priorityBatch.EntityData.Leafs.Append("paths-sent", types.YLeaf{"PathsSent", priorityBatch.PathsSent})
    priorityBatch.EntityData.Leafs.Append("paths-pending", types.YLeaf{"PathsPending", priorityBatch.PathsPending})
    priorityBatch.EntityData.Leafs.Append("paths-add", types.YLeaf{"PathsAdd", priorityBatch.PathsAdd})
    priorityBatch.EntityData.Leafs.Append("paths-add-errs", types.YLeaf{"PathsAddErrs", priorityBatch.PathsAddErrs})
    priorityBatch.EntityData.Leafs.Append("paths-del", types.YLeaf{"PathsDel", priorityBatch.PathsDel})
    priorityBatch.EntityData.Leafs.Append("paths-del-errs", types.YLeaf{"PathsDelErrs", priorityBatch.PathsDelErrs})
    priorityBatch.EntityData.Leafs.Append("lfas-pending", types.YLeaf{"LfasPending", priorityBatch.LfasPending})
    priorityBatch.EntityData.Leafs.Append("lfas-add", types.YLeaf{"LfasAdd", priorityBatch.LfasAdd})
    priorityBatch.EntityData.Leafs.Append("lfas-del", types.YLeaf{"LfasDel", priorityBatch.LfasDel})
    priorityBatch.EntityData.Leafs.Append("lfas-sent", types.YLeaf{"LfasSent", priorityBatch.LfasSent})
    priorityBatch.EntityData.Leafs.Append("priority-level", types.YLeaf{"PriorityLevel", priorityBatch.PriorityLevel})

    priorityBatch.EntityData.YListKeys = []string {}

    return &(priorityBatch.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats
// OSPF ISSU statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr rev. The type is interface{} with range: -2147483648..2147483647.
    NsrRev interface{}

    // nsr fsm state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // nsr version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // nsr nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeid interface{}

    // nsr peer version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // nsr peer nodeid. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeid interface{}

    // nsr fabric mtu. The type is interface{} with range: 0..4294967295.
    NsrFabricMtu interface{}

    // nsr nbr qad qid. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // nsr lsa qad qid. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // nsr nbr qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // nsr lsa qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // nsr nbr init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // nsr lsa init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // nsr nbr seq no. The type is interface{} with range: 0..4294967295.
    NsrNbrSeqNo interface{}

    // nsr intf seq no. The type is interface{} with range: 0..4294967295.
    NsrIntfSeqNo interface{}

    // nsr tmr quant. The type is interface{} with range: -2147483648..2147483647.
    NsrTmrQuant interface{}

    // nsr conn to active attempts. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // nsr conn to active fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // nsr conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // nsr conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // nsr conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // nsr thd sched.
    NsrThdSched Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched

    // nsr rtr thd sched.
    NsrRtrThdSched Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched

    // Nsr Fsm Flags information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmFlag.
    NsrFsmFlag []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmFlag

    // Nsr Fsm Running Timers. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmRunningTimer.
    NsrFsmRunningTimer []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmRunningTimer

    // Nsr Issu Milestones. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrIssuMilestone.
    NsrIssuMilestone []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrIssuMilestone

    // Nsr Error History List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory.
    NsrErrHistory []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory
}

func (issuStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats) GetEntityData() *types.CommonEntityData {
    issuStats.EntityData.YFilter = issuStats.YFilter
    issuStats.EntityData.YangName = "issu-stats"
    issuStats.EntityData.BundleName = "cisco_ios_xr"
    issuStats.EntityData.ParentYangName = "statistics"
    issuStats.EntityData.SegmentPath = "issu-stats"
    issuStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issuStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issuStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issuStats.EntityData.Children = types.NewOrderedMap()
    issuStats.EntityData.Children.Append("nsr-thd-sched", types.YChild{"NsrThdSched", &issuStats.NsrThdSched})
    issuStats.EntityData.Children.Append("nsr-rtr-thd-sched", types.YChild{"NsrRtrThdSched", &issuStats.NsrRtrThdSched})
    issuStats.EntityData.Children.Append("nsr-fsm-flag", types.YChild{"NsrFsmFlag", nil})
    for i := range issuStats.NsrFsmFlag {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrFsmFlag[i]), types.YChild{"NsrFsmFlag", issuStats.NsrFsmFlag[i]})
    }
    issuStats.EntityData.Children.Append("nsr-fsm-running-timer", types.YChild{"NsrFsmRunningTimer", nil})
    for i := range issuStats.NsrFsmRunningTimer {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrFsmRunningTimer[i]), types.YChild{"NsrFsmRunningTimer", issuStats.NsrFsmRunningTimer[i]})
    }
    issuStats.EntityData.Children.Append("nsr-issu-milestone", types.YChild{"NsrIssuMilestone", nil})
    for i := range issuStats.NsrIssuMilestone {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrIssuMilestone[i]), types.YChild{"NsrIssuMilestone", issuStats.NsrIssuMilestone[i]})
    }
    issuStats.EntityData.Children.Append("nsr-err-history", types.YChild{"NsrErrHistory", nil})
    for i := range issuStats.NsrErrHistory {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrErrHistory[i]), types.YChild{"NsrErrHistory", issuStats.NsrErrHistory[i]})
    }
    issuStats.EntityData.Leafs = types.NewOrderedMap()
    issuStats.EntityData.Leafs.Append("nsr-rev", types.YLeaf{"NsrRev", issuStats.NsrRev})
    issuStats.EntityData.Leafs.Append("nsr-fsm-state", types.YLeaf{"NsrFsmState", issuStats.NsrFsmState})
    issuStats.EntityData.Leafs.Append("nsr-version", types.YLeaf{"NsrVersion", issuStats.NsrVersion})
    issuStats.EntityData.Leafs.Append("nsr-nodeid", types.YLeaf{"NsrNodeid", issuStats.NsrNodeid})
    issuStats.EntityData.Leafs.Append("nsr-peer-version", types.YLeaf{"NsrPeerVersion", issuStats.NsrPeerVersion})
    issuStats.EntityData.Leafs.Append("nsr-peer-nodeid", types.YLeaf{"NsrPeerNodeid", issuStats.NsrPeerNodeid})
    issuStats.EntityData.Leafs.Append("nsr-fabric-mtu", types.YLeaf{"NsrFabricMtu", issuStats.NsrFabricMtu})
    issuStats.EntityData.Leafs.Append("nsr-nbr-qad-qid", types.YLeaf{"NsrNbrQadQid", issuStats.NsrNbrQadQid})
    issuStats.EntityData.Leafs.Append("nsr-lsa-qad-qid", types.YLeaf{"NsrLsaQadQid", issuStats.NsrLsaQadQid})
    issuStats.EntityData.Leafs.Append("nsr-nbr-qad-mdata-count", types.YLeaf{"NsrNbrQadMdataCount", issuStats.NsrNbrQadMdataCount})
    issuStats.EntityData.Leafs.Append("nsr-lsa-qad-mdata-count", types.YLeaf{"NsrLsaQadMdataCount", issuStats.NsrLsaQadMdataCount})
    issuStats.EntityData.Leafs.Append("nsr-nbr-init-sync-pend-count", types.YLeaf{"NsrNbrInitSyncPendCount", issuStats.NsrNbrInitSyncPendCount})
    issuStats.EntityData.Leafs.Append("nsr-lsa-init-sync-pend-count", types.YLeaf{"NsrLsaInitSyncPendCount", issuStats.NsrLsaInitSyncPendCount})
    issuStats.EntityData.Leafs.Append("nsr-nbr-seq-no", types.YLeaf{"NsrNbrSeqNo", issuStats.NsrNbrSeqNo})
    issuStats.EntityData.Leafs.Append("nsr-intf-seq-no", types.YLeaf{"NsrIntfSeqNo", issuStats.NsrIntfSeqNo})
    issuStats.EntityData.Leafs.Append("nsr-tmr-quant", types.YLeaf{"NsrTmrQuant", issuStats.NsrTmrQuant})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-attempts", types.YLeaf{"NsrConnToActiveAttempts", issuStats.NsrConnToActiveAttempts})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-fails", types.YLeaf{"NsrConnToActiveFails", issuStats.NsrConnToActiveFails})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-opens", types.YLeaf{"NsrConnToActiveOpens", issuStats.NsrConnToActiveOpens})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-closes", types.YLeaf{"NsrConnToActiveCloses", issuStats.NsrConnToActiveCloses})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-errors", types.YLeaf{"NsrConnToActiveErrors", issuStats.NsrConnToActiveErrors})

    issuStats.EntityData.YListKeys = []string {}

    return &(issuStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched
// nsr thd sched
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched_NsrPri
}

func (nsrThdSched *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched) GetEntityData() *types.CommonEntityData {
    nsrThdSched.EntityData.YFilter = nsrThdSched.YFilter
    nsrThdSched.EntityData.YangName = "nsr-thd-sched"
    nsrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrThdSched.EntityData.ParentYangName = "issu-stats"
    nsrThdSched.EntityData.SegmentPath = "nsr-thd-sched"
    nsrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrThdSched.NsrPri {
        nsrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrThdSched.NsrPri[i]})
    }
    nsrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrThdSched.NsrPulseQuant})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrThdSched.NsrEventsInQ})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrThdSched.NsrEventsTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrThdSched.NsrEventsRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrThdSched.NsrBadPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrThdSched.NsrGoodPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrThdSched.NsrPulsesTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrThdSched.NsrPulseTxFails})

    nsrThdSched.EntityData.YListKeys = []string {}

    return &(nsrThdSched.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched
// nsr rtr thd sched
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched) GetEntityData() *types.CommonEntityData {
    nsrRtrThdSched.EntityData.YFilter = nsrRtrThdSched.YFilter
    nsrRtrThdSched.EntityData.YangName = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrRtrThdSched.EntityData.ParentYangName = "issu-stats"
    nsrRtrThdSched.EntityData.SegmentPath = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrRtrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrRtrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrRtrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrRtrThdSched.NsrPri {
        nsrRtrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrRtrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrRtrThdSched.NsrPri[i]})
    }
    nsrRtrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrRtrThdSched.NsrPulseQuant})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrRtrThdSched.NsrEventsInQ})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrRtrThdSched.NsrEventsTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrRtrThdSched.NsrEventsRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrRtrThdSched.NsrBadPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrRtrThdSched.NsrGoodPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrRtrThdSched.NsrPulsesTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrRtrThdSched.NsrPulseTxFails})

    nsrRtrThdSched.EntityData.YListKeys = []string {}

    return &(nsrRtrThdSched.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-rtr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmFlag
// Nsr Fsm Flags information
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmFlag *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmFlag) GetEntityData() *types.CommonEntityData {
    nsrFsmFlag.EntityData.YFilter = nsrFsmFlag.YFilter
    nsrFsmFlag.EntityData.YangName = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmFlag.EntityData.ParentYangName = "issu-stats"
    nsrFsmFlag.EntityData.SegmentPath = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmFlag.EntityData.Children = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmFlag.Entry})

    nsrFsmFlag.EntityData.YListKeys = []string {}

    return &(nsrFsmFlag.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmRunningTimer
// Nsr Fsm Running Timers
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmRunningTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmRunningTimer *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrFsmRunningTimer) GetEntityData() *types.CommonEntityData {
    nsrFsmRunningTimer.EntityData.YFilter = nsrFsmRunningTimer.YFilter
    nsrFsmRunningTimer.EntityData.YangName = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmRunningTimer.EntityData.ParentYangName = "issu-stats"
    nsrFsmRunningTimer.EntityData.SegmentPath = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmRunningTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmRunningTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmRunningTimer.EntityData.Children = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmRunningTimer.Entry})

    nsrFsmRunningTimer.EntityData.YListKeys = []string {}

    return &(nsrFsmRunningTimer.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrIssuMilestone
// Nsr Issu Milestones
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrIssuMilestone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Milestone Name. The type is string.
    MilestoneName interface{}

    // Milestone Status. The type is string.
    MilestoneStatus interface{}
}

func (nsrIssuMilestone *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrIssuMilestone) GetEntityData() *types.CommonEntityData {
    nsrIssuMilestone.EntityData.YFilter = nsrIssuMilestone.YFilter
    nsrIssuMilestone.EntityData.YangName = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.BundleName = "cisco_ios_xr"
    nsrIssuMilestone.EntityData.ParentYangName = "issu-stats"
    nsrIssuMilestone.EntityData.SegmentPath = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrIssuMilestone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrIssuMilestone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrIssuMilestone.EntityData.Children = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-name", types.YLeaf{"MilestoneName", nsrIssuMilestone.MilestoneName})
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-status", types.YLeaf{"MilestoneStatus", nsrIssuMilestone.MilestoneStatus})

    nsrIssuMilestone.EntityData.YListKeys = []string {}

    return &(nsrIssuMilestone.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory
// Nsr Error History List
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nsr Revision version. The type is interface{} with range: 0..4294967295.
    NsrRevisionversion interface{}

    // Total errors for this nsr revision version. The type is interface{} with
    // range: -2147483648..2147483647.
    TotalErrors interface{}

    // List of erros. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo.
    NsrErrorInfo []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo
}

func (nsrErrHistory *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory) GetEntityData() *types.CommonEntityData {
    nsrErrHistory.EntityData.YFilter = nsrErrHistory.YFilter
    nsrErrHistory.EntityData.YangName = "nsr-err-history"
    nsrErrHistory.EntityData.BundleName = "cisco_ios_xr"
    nsrErrHistory.EntityData.ParentYangName = "issu-stats"
    nsrErrHistory.EntityData.SegmentPath = "nsr-err-history"
    nsrErrHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrHistory.EntityData.Children = types.NewOrderedMap()
    nsrErrHistory.EntityData.Children.Append("nsr-error-info", types.YChild{"NsrErrorInfo", nil})
    for i := range nsrErrHistory.NsrErrorInfo {
        nsrErrHistory.EntityData.Children.Append(types.GetSegmentPath(nsrErrHistory.NsrErrorInfo[i]), types.YChild{"NsrErrorInfo", nsrErrHistory.NsrErrorInfo[i]})
    }
    nsrErrHistory.EntityData.Leafs = types.NewOrderedMap()
    nsrErrHistory.EntityData.Leafs.Append("nsr-revisionversion", types.YLeaf{"NsrRevisionversion", nsrErrHistory.NsrRevisionversion})
    nsrErrHistory.EntityData.Leafs.Append("total-errors", types.YLeaf{"TotalErrors", nsrErrHistory.TotalErrors})

    nsrErrHistory.EntityData.YListKeys = []string {}

    return &(nsrErrHistory.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo
// List of erros
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count this error hit during the Nsr Revision. The type is interface{} with
    // range: -2147483648..2147483647.
    ErrCount interface{}

    // Error Information. The type is string.
    ErrInfoString interface{}

    // Time this error was last hit.
    LastErrTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime
}

func (nsrErrorInfo *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo) GetEntityData() *types.CommonEntityData {
    nsrErrorInfo.EntityData.YFilter = nsrErrorInfo.YFilter
    nsrErrorInfo.EntityData.YangName = "nsr-error-info"
    nsrErrorInfo.EntityData.BundleName = "cisco_ios_xr"
    nsrErrorInfo.EntityData.ParentYangName = "nsr-err-history"
    nsrErrorInfo.EntityData.SegmentPath = "nsr-error-info"
    nsrErrorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrorInfo.EntityData.Children = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Children.Append("last-err-time", types.YChild{"LastErrTime", &nsrErrorInfo.LastErrTime})
    nsrErrorInfo.EntityData.Leafs = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Leafs.Append("err-count", types.YLeaf{"ErrCount", nsrErrorInfo.ErrCount})
    nsrErrorInfo.EntityData.Leafs.Append("err-info-string", types.YLeaf{"ErrInfoString", nsrErrorInfo.ErrInfoString})

    nsrErrorInfo.EntityData.YListKeys = []string {}

    return &(nsrErrorInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime
// Time this error was last hit
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lastErrTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime) GetEntityData() *types.CommonEntityData {
    lastErrTime.EntityData.YFilter = lastErrTime.YFilter
    lastErrTime.EntityData.YangName = "last-err-time"
    lastErrTime.EntityData.BundleName = "cisco_ios_xr"
    lastErrTime.EntityData.ParentYangName = "nsr-error-info"
    lastErrTime.EntityData.SegmentPath = "last-err-time"
    lastErrTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastErrTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastErrTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastErrTime.EntityData.Children = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lastErrTime.Second})
    lastErrTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lastErrTime.Nanosecond})

    lastErrTime.EntityData.YListKeys = []string {}

    return &(lastErrTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats
// OSPF RIB thread statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // internalwq.
    Internalwq Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq

    // ribqueue. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue.
    Ribqueue []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue
}

func (ribThreadStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats) GetEntityData() *types.CommonEntityData {
    ribThreadStats.EntityData.YFilter = ribThreadStats.YFilter
    ribThreadStats.EntityData.YangName = "rib-thread-stats"
    ribThreadStats.EntityData.BundleName = "cisco_ios_xr"
    ribThreadStats.EntityData.ParentYangName = "statistics"
    ribThreadStats.EntityData.SegmentPath = "rib-thread-stats"
    ribThreadStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribThreadStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribThreadStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribThreadStats.EntityData.Children = types.NewOrderedMap()
    ribThreadStats.EntityData.Children.Append("internalwq", types.YChild{"Internalwq", &ribThreadStats.Internalwq})
    ribThreadStats.EntityData.Children.Append("ribqueue", types.YChild{"Ribqueue", nil})
    for i := range ribThreadStats.Ribqueue {
        ribThreadStats.EntityData.Children.Append(types.GetSegmentPath(ribThreadStats.Ribqueue[i]), types.YChild{"Ribqueue", ribThreadStats.Ribqueue[i]})
    }
    ribThreadStats.EntityData.Leafs = types.NewOrderedMap()

    ribThreadStats.EntityData.YListKeys = []string {}

    return &(ribThreadStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq
// internalwq
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // wq thread active. The type is bool.
    WqThreadActive interface{}

    // wq dqtime. The type is interface{} with range: 0..18446744073709551615.
    WqDqtime interface{}

    // wqe qtime. The type is interface{} with range: 0..18446744073709551615.
    WqeQtime interface{}

    // wq len cur. The type is interface{} with range: -2147483648..2147483647.
    WqLenCur interface{}

    // wq len max. The type is interface{} with range: -2147483648..2147483647.
    WqLenMax interface{}

    // wq total queued. The type is interface{} with range: 0..4294967295.
    WqTotalQueued interface{}

    // wq total dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // rib version. The type is interface{} with range: 0..4294967295.
    RibVersion interface{}

    // rib pkts sent. The type is interface{} with range: 0..4294967295.
    RibPktsSent interface{}

    // rib signals. The type is interface{} with range: 0..4294967295.
    RibSignals interface{}

    // rib send errs. The type is interface{} with range: 0..4294967295.
    RibSendErrs interface{}

    // rib queue errs. The type is interface{} with range: 0..4294967295.
    RibQueueErrs interface{}

    // rib pfx limit errs. The type is interface{} with range: 0..4294967295.
    RibPfxLimitErrs interface{}

    // rib dequeue errs. The type is interface{} with range: 0..4294967295.
    RibDequeueErrs interface{}

    // rib empty batches. The type is interface{} with range: 0..4294967295.
    RibEmptyBatches interface{}

    // rib drop before. The type is interface{} with range: 0..4294967295.
    RibDropBefore interface{}

    // rib drop after. The type is interface{} with range: 0..4294967295.
    RibDropAfter interface{}

    // rib drop conn. The type is interface{} with range: 0..4294967295.
    RibDropConn interface{}

    // rib table not created. The type is interface{} with range: 0..4294967295.
    RibTableNotCreated interface{}

    // priority level. The type is string with length: 0..40.
    PriorityLevel interface{}

    // rib base clock. The type is interface{} with range:
    // 0..18446744073709551615.
    RibBaseClock interface{}

    // rib base time.
    RibBaseTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq_RibBaseTime
}

func (internalwq *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq) GetEntityData() *types.CommonEntityData {
    internalwq.EntityData.YFilter = internalwq.YFilter
    internalwq.EntityData.YangName = "internalwq"
    internalwq.EntityData.BundleName = "cisco_ios_xr"
    internalwq.EntityData.ParentYangName = "rib-thread-stats"
    internalwq.EntityData.SegmentPath = "internalwq"
    internalwq.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalwq.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalwq.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalwq.EntityData.Children = types.NewOrderedMap()
    internalwq.EntityData.Children.Append("rib-base-time", types.YChild{"RibBaseTime", &internalwq.RibBaseTime})
    internalwq.EntityData.Leafs = types.NewOrderedMap()
    internalwq.EntityData.Leafs.Append("wq-thread-active", types.YLeaf{"WqThreadActive", internalwq.WqThreadActive})
    internalwq.EntityData.Leafs.Append("wq-dqtime", types.YLeaf{"WqDqtime", internalwq.WqDqtime})
    internalwq.EntityData.Leafs.Append("wqe-qtime", types.YLeaf{"WqeQtime", internalwq.WqeQtime})
    internalwq.EntityData.Leafs.Append("wq-len-cur", types.YLeaf{"WqLenCur", internalwq.WqLenCur})
    internalwq.EntityData.Leafs.Append("wq-len-max", types.YLeaf{"WqLenMax", internalwq.WqLenMax})
    internalwq.EntityData.Leafs.Append("wq-total-queued", types.YLeaf{"WqTotalQueued", internalwq.WqTotalQueued})
    internalwq.EntityData.Leafs.Append("wq-total-dequeued", types.YLeaf{"WqTotalDequeued", internalwq.WqTotalDequeued})
    internalwq.EntityData.Leafs.Append("rib-version", types.YLeaf{"RibVersion", internalwq.RibVersion})
    internalwq.EntityData.Leafs.Append("rib-pkts-sent", types.YLeaf{"RibPktsSent", internalwq.RibPktsSent})
    internalwq.EntityData.Leafs.Append("rib-signals", types.YLeaf{"RibSignals", internalwq.RibSignals})
    internalwq.EntityData.Leafs.Append("rib-send-errs", types.YLeaf{"RibSendErrs", internalwq.RibSendErrs})
    internalwq.EntityData.Leafs.Append("rib-queue-errs", types.YLeaf{"RibQueueErrs", internalwq.RibQueueErrs})
    internalwq.EntityData.Leafs.Append("rib-pfx-limit-errs", types.YLeaf{"RibPfxLimitErrs", internalwq.RibPfxLimitErrs})
    internalwq.EntityData.Leafs.Append("rib-dequeue-errs", types.YLeaf{"RibDequeueErrs", internalwq.RibDequeueErrs})
    internalwq.EntityData.Leafs.Append("rib-empty-batches", types.YLeaf{"RibEmptyBatches", internalwq.RibEmptyBatches})
    internalwq.EntityData.Leafs.Append("rib-drop-before", types.YLeaf{"RibDropBefore", internalwq.RibDropBefore})
    internalwq.EntityData.Leafs.Append("rib-drop-after", types.YLeaf{"RibDropAfter", internalwq.RibDropAfter})
    internalwq.EntityData.Leafs.Append("rib-drop-conn", types.YLeaf{"RibDropConn", internalwq.RibDropConn})
    internalwq.EntityData.Leafs.Append("rib-table-not-created", types.YLeaf{"RibTableNotCreated", internalwq.RibTableNotCreated})
    internalwq.EntityData.Leafs.Append("priority-level", types.YLeaf{"PriorityLevel", internalwq.PriorityLevel})
    internalwq.EntityData.Leafs.Append("rib-base-clock", types.YLeaf{"RibBaseClock", internalwq.RibBaseClock})

    internalwq.EntityData.YListKeys = []string {}

    return &(internalwq.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq_RibBaseTime
// rib base time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq_RibBaseTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (ribBaseTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Internalwq_RibBaseTime) GetEntityData() *types.CommonEntityData {
    ribBaseTime.EntityData.YFilter = ribBaseTime.YFilter
    ribBaseTime.EntityData.YangName = "rib-base-time"
    ribBaseTime.EntityData.BundleName = "cisco_ios_xr"
    ribBaseTime.EntityData.ParentYangName = "internalwq"
    ribBaseTime.EntityData.SegmentPath = "rib-base-time"
    ribBaseTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBaseTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBaseTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBaseTime.EntityData.Children = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", ribBaseTime.Second})
    ribBaseTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", ribBaseTime.Nanosecond})

    ribBaseTime.EntityData.YListKeys = []string {}

    return &(ribBaseTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue
// ribqueue
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // wq thread active. The type is bool.
    WqThreadActive interface{}

    // wq dqtime. The type is interface{} with range: 0..18446744073709551615.
    WqDqtime interface{}

    // wqe qtime. The type is interface{} with range: 0..18446744073709551615.
    WqeQtime interface{}

    // wq len cur. The type is interface{} with range: -2147483648..2147483647.
    WqLenCur interface{}

    // wq len max. The type is interface{} with range: -2147483648..2147483647.
    WqLenMax interface{}

    // wq total queued. The type is interface{} with range: 0..4294967295.
    WqTotalQueued interface{}

    // wq total dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // rib version. The type is interface{} with range: 0..4294967295.
    RibVersion interface{}

    // rib pkts sent. The type is interface{} with range: 0..4294967295.
    RibPktsSent interface{}

    // rib signals. The type is interface{} with range: 0..4294967295.
    RibSignals interface{}

    // rib send errs. The type is interface{} with range: 0..4294967295.
    RibSendErrs interface{}

    // rib queue errs. The type is interface{} with range: 0..4294967295.
    RibQueueErrs interface{}

    // rib pfx limit errs. The type is interface{} with range: 0..4294967295.
    RibPfxLimitErrs interface{}

    // rib dequeue errs. The type is interface{} with range: 0..4294967295.
    RibDequeueErrs interface{}

    // rib empty batches. The type is interface{} with range: 0..4294967295.
    RibEmptyBatches interface{}

    // rib drop before. The type is interface{} with range: 0..4294967295.
    RibDropBefore interface{}

    // rib drop after. The type is interface{} with range: 0..4294967295.
    RibDropAfter interface{}

    // rib drop conn. The type is interface{} with range: 0..4294967295.
    RibDropConn interface{}

    // rib table not created. The type is interface{} with range: 0..4294967295.
    RibTableNotCreated interface{}

    // priority level. The type is string with length: 0..40.
    PriorityLevel interface{}

    // rib base clock. The type is interface{} with range:
    // 0..18446744073709551615.
    RibBaseClock interface{}

    // rib base time.
    RibBaseTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime
}

func (ribqueue *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue) GetEntityData() *types.CommonEntityData {
    ribqueue.EntityData.YFilter = ribqueue.YFilter
    ribqueue.EntityData.YangName = "ribqueue"
    ribqueue.EntityData.BundleName = "cisco_ios_xr"
    ribqueue.EntityData.ParentYangName = "rib-thread-stats"
    ribqueue.EntityData.SegmentPath = "ribqueue"
    ribqueue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribqueue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribqueue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribqueue.EntityData.Children = types.NewOrderedMap()
    ribqueue.EntityData.Children.Append("rib-base-time", types.YChild{"RibBaseTime", &ribqueue.RibBaseTime})
    ribqueue.EntityData.Leafs = types.NewOrderedMap()
    ribqueue.EntityData.Leafs.Append("wq-thread-active", types.YLeaf{"WqThreadActive", ribqueue.WqThreadActive})
    ribqueue.EntityData.Leafs.Append("wq-dqtime", types.YLeaf{"WqDqtime", ribqueue.WqDqtime})
    ribqueue.EntityData.Leafs.Append("wqe-qtime", types.YLeaf{"WqeQtime", ribqueue.WqeQtime})
    ribqueue.EntityData.Leafs.Append("wq-len-cur", types.YLeaf{"WqLenCur", ribqueue.WqLenCur})
    ribqueue.EntityData.Leafs.Append("wq-len-max", types.YLeaf{"WqLenMax", ribqueue.WqLenMax})
    ribqueue.EntityData.Leafs.Append("wq-total-queued", types.YLeaf{"WqTotalQueued", ribqueue.WqTotalQueued})
    ribqueue.EntityData.Leafs.Append("wq-total-dequeued", types.YLeaf{"WqTotalDequeued", ribqueue.WqTotalDequeued})
    ribqueue.EntityData.Leafs.Append("rib-version", types.YLeaf{"RibVersion", ribqueue.RibVersion})
    ribqueue.EntityData.Leafs.Append("rib-pkts-sent", types.YLeaf{"RibPktsSent", ribqueue.RibPktsSent})
    ribqueue.EntityData.Leafs.Append("rib-signals", types.YLeaf{"RibSignals", ribqueue.RibSignals})
    ribqueue.EntityData.Leafs.Append("rib-send-errs", types.YLeaf{"RibSendErrs", ribqueue.RibSendErrs})
    ribqueue.EntityData.Leafs.Append("rib-queue-errs", types.YLeaf{"RibQueueErrs", ribqueue.RibQueueErrs})
    ribqueue.EntityData.Leafs.Append("rib-pfx-limit-errs", types.YLeaf{"RibPfxLimitErrs", ribqueue.RibPfxLimitErrs})
    ribqueue.EntityData.Leafs.Append("rib-dequeue-errs", types.YLeaf{"RibDequeueErrs", ribqueue.RibDequeueErrs})
    ribqueue.EntityData.Leafs.Append("rib-empty-batches", types.YLeaf{"RibEmptyBatches", ribqueue.RibEmptyBatches})
    ribqueue.EntityData.Leafs.Append("rib-drop-before", types.YLeaf{"RibDropBefore", ribqueue.RibDropBefore})
    ribqueue.EntityData.Leafs.Append("rib-drop-after", types.YLeaf{"RibDropAfter", ribqueue.RibDropAfter})
    ribqueue.EntityData.Leafs.Append("rib-drop-conn", types.YLeaf{"RibDropConn", ribqueue.RibDropConn})
    ribqueue.EntityData.Leafs.Append("rib-table-not-created", types.YLeaf{"RibTableNotCreated", ribqueue.RibTableNotCreated})
    ribqueue.EntityData.Leafs.Append("priority-level", types.YLeaf{"PriorityLevel", ribqueue.PriorityLevel})
    ribqueue.EntityData.Leafs.Append("rib-base-clock", types.YLeaf{"RibBaseClock", ribqueue.RibBaseClock})

    ribqueue.EntityData.YListKeys = []string {}

    return &(ribqueue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime
// rib base time
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (ribBaseTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime) GetEntityData() *types.CommonEntityData {
    ribBaseTime.EntityData.YFilter = ribBaseTime.YFilter
    ribBaseTime.EntityData.YangName = "rib-base-time"
    ribBaseTime.EntityData.BundleName = "cisco_ios_xr"
    ribBaseTime.EntityData.ParentYangName = "ribqueue"
    ribBaseTime.EntityData.SegmentPath = "rib-base-time"
    ribBaseTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBaseTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBaseTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBaseTime.EntityData.Children = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", ribBaseTime.Second})
    ribBaseTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", ribBaseTime.Nanosecond})

    ribBaseTime.EntityData.YListKeys = []string {}

    return &(ribBaseTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats
// OSPF NSR packet library statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ncd pri. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri.
    NcdPri []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri
}

func (nsrPlStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats) GetEntityData() *types.CommonEntityData {
    nsrPlStats.EntityData.YFilter = nsrPlStats.YFilter
    nsrPlStats.EntityData.YangName = "nsr-pl-stats"
    nsrPlStats.EntityData.BundleName = "cisco_ios_xr"
    nsrPlStats.EntityData.ParentYangName = "statistics"
    nsrPlStats.EntityData.SegmentPath = "nsr-pl-stats"
    nsrPlStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlStats.EntityData.Children = types.NewOrderedMap()
    nsrPlStats.EntityData.Children.Append("ncd-pri", types.YChild{"NcdPri", nil})
    for i := range nsrPlStats.NcdPri {
        nsrPlStats.EntityData.Children.Append(types.GetSegmentPath(nsrPlStats.NcdPri[i]), types.YChild{"NcdPri", nsrPlStats.NcdPri[i]})
    }
    nsrPlStats.EntityData.Leafs = types.NewOrderedMap()

    nsrPlStats.EntityData.YListKeys = []string {}

    return &(nsrPlStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri
// ncd pri
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sent. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSent.
    NumSent []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSent

    // Total recvd. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecv.
    NumRecv []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecv

    // Sent Error/drops. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop.
    NumSentDrop []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop

    // Recv Errors/drops. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop.
    NumRecvDrop []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop
}

func (ncdPri *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri) GetEntityData() *types.CommonEntityData {
    ncdPri.EntityData.YFilter = ncdPri.YFilter
    ncdPri.EntityData.YangName = "ncd-pri"
    ncdPri.EntityData.BundleName = "cisco_ios_xr"
    ncdPri.EntityData.ParentYangName = "nsr-pl-stats"
    ncdPri.EntityData.SegmentPath = "ncd-pri"
    ncdPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ncdPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ncdPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ncdPri.EntityData.Children = types.NewOrderedMap()
    ncdPri.EntityData.Children.Append("num-sent", types.YChild{"NumSent", nil})
    for i := range ncdPri.NumSent {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumSent[i]), types.YChild{"NumSent", ncdPri.NumSent[i]})
    }
    ncdPri.EntityData.Children.Append("num-recv", types.YChild{"NumRecv", nil})
    for i := range ncdPri.NumRecv {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumRecv[i]), types.YChild{"NumRecv", ncdPri.NumRecv[i]})
    }
    ncdPri.EntityData.Children.Append("num-sent-drop", types.YChild{"NumSentDrop", nil})
    for i := range ncdPri.NumSentDrop {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumSentDrop[i]), types.YChild{"NumSentDrop", ncdPri.NumSentDrop[i]})
    }
    ncdPri.EntityData.Children.Append("num-recv-drop", types.YChild{"NumRecvDrop", nil})
    for i := range ncdPri.NumRecvDrop {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumRecvDrop[i]), types.YChild{"NumRecvDrop", ncdPri.NumRecvDrop[i]})
    }
    ncdPri.EntityData.Leafs = types.NewOrderedMap()

    ncdPri.EntityData.YListKeys = []string {}

    return &(ncdPri.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSent
// Total sent
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (numSent *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSent) GetEntityData() *types.CommonEntityData {
    numSent.EntityData.YFilter = numSent.YFilter
    numSent.EntityData.YangName = "num-sent"
    numSent.EntityData.BundleName = "cisco_ios_xr"
    numSent.EntityData.ParentYangName = "ncd-pri"
    numSent.EntityData.SegmentPath = "num-sent"
    numSent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numSent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numSent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numSent.EntityData.Children = types.NewOrderedMap()
    numSent.EntityData.Leafs = types.NewOrderedMap()
    numSent.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", numSent.Entry})

    numSent.EntityData.YListKeys = []string {}

    return &(numSent.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecv
// Total recvd
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (numRecv *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecv) GetEntityData() *types.CommonEntityData {
    numRecv.EntityData.YFilter = numRecv.YFilter
    numRecv.EntityData.YangName = "num-recv"
    numRecv.EntityData.BundleName = "cisco_ios_xr"
    numRecv.EntityData.ParentYangName = "ncd-pri"
    numRecv.EntityData.SegmentPath = "num-recv"
    numRecv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numRecv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numRecv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numRecv.EntityData.Children = types.NewOrderedMap()
    numRecv.EntityData.Leafs = types.NewOrderedMap()
    numRecv.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", numRecv.Entry})

    numRecv.EntityData.YListKeys = []string {}

    return &(numRecv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop
// Sent Error/drops
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pl send drop array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray.
    NsrPlSendDropArray []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray
}

func (numSentDrop *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetEntityData() *types.CommonEntityData {
    numSentDrop.EntityData.YFilter = numSentDrop.YFilter
    numSentDrop.EntityData.YangName = "num-sent-drop"
    numSentDrop.EntityData.BundleName = "cisco_ios_xr"
    numSentDrop.EntityData.ParentYangName = "ncd-pri"
    numSentDrop.EntityData.SegmentPath = "num-sent-drop"
    numSentDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numSentDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numSentDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numSentDrop.EntityData.Children = types.NewOrderedMap()
    numSentDrop.EntityData.Children.Append("nsr-pl-send-drop-array", types.YChild{"NsrPlSendDropArray", nil})
    for i := range numSentDrop.NsrPlSendDropArray {
        numSentDrop.EntityData.Children.Append(types.GetSegmentPath(numSentDrop.NsrPlSendDropArray[i]), types.YChild{"NsrPlSendDropArray", numSentDrop.NsrPlSendDropArray[i]})
    }
    numSentDrop.EntityData.Leafs = types.NewOrderedMap()

    numSentDrop.EntityData.YListKeys = []string {}

    return &(numSentDrop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray
// nsr pl send drop array
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrPlSendDropArray *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray) GetEntityData() *types.CommonEntityData {
    nsrPlSendDropArray.EntityData.YFilter = nsrPlSendDropArray.YFilter
    nsrPlSendDropArray.EntityData.YangName = "nsr-pl-send-drop-array"
    nsrPlSendDropArray.EntityData.BundleName = "cisco_ios_xr"
    nsrPlSendDropArray.EntityData.ParentYangName = "num-sent-drop"
    nsrPlSendDropArray.EntityData.SegmentPath = "nsr-pl-send-drop-array"
    nsrPlSendDropArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlSendDropArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlSendDropArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlSendDropArray.EntityData.Children = types.NewOrderedMap()
    nsrPlSendDropArray.EntityData.Leafs = types.NewOrderedMap()
    nsrPlSendDropArray.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrPlSendDropArray.Entry})

    nsrPlSendDropArray.EntityData.YListKeys = []string {}

    return &(nsrPlSendDropArray.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop
// Recv Errors/drops
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pl recv drop array. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray.
    NsrPlRecvDropArray []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray
}

func (numRecvDrop *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetEntityData() *types.CommonEntityData {
    numRecvDrop.EntityData.YFilter = numRecvDrop.YFilter
    numRecvDrop.EntityData.YangName = "num-recv-drop"
    numRecvDrop.EntityData.BundleName = "cisco_ios_xr"
    numRecvDrop.EntityData.ParentYangName = "ncd-pri"
    numRecvDrop.EntityData.SegmentPath = "num-recv-drop"
    numRecvDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numRecvDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numRecvDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numRecvDrop.EntityData.Children = types.NewOrderedMap()
    numRecvDrop.EntityData.Children.Append("nsr-pl-recv-drop-array", types.YChild{"NsrPlRecvDropArray", nil})
    for i := range numRecvDrop.NsrPlRecvDropArray {
        numRecvDrop.EntityData.Children.Append(types.GetSegmentPath(numRecvDrop.NsrPlRecvDropArray[i]), types.YChild{"NsrPlRecvDropArray", numRecvDrop.NsrPlRecvDropArray[i]})
    }
    numRecvDrop.EntityData.Leafs = types.NewOrderedMap()

    numRecvDrop.EntityData.YListKeys = []string {}

    return &(numRecvDrop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray
// nsr pl recv drop array
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrPlRecvDropArray *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray) GetEntityData() *types.CommonEntityData {
    nsrPlRecvDropArray.EntityData.YFilter = nsrPlRecvDropArray.YFilter
    nsrPlRecvDropArray.EntityData.YangName = "nsr-pl-recv-drop-array"
    nsrPlRecvDropArray.EntityData.BundleName = "cisco_ios_xr"
    nsrPlRecvDropArray.EntityData.ParentYangName = "num-recv-drop"
    nsrPlRecvDropArray.EntityData.SegmentPath = "nsr-pl-recv-drop-array"
    nsrPlRecvDropArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlRecvDropArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlRecvDropArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlRecvDropArray.EntityData.Children = types.NewOrderedMap()
    nsrPlRecvDropArray.EntityData.Leafs = types.NewOrderedMap()
    nsrPlRecvDropArray.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrPlRecvDropArray.Entry})

    nsrPlRecvDropArray.EntityData.YListKeys = []string {}

    return &(nsrPlRecvDropArray.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats
// OSPF NSR thread statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr rev. The type is interface{} with range: -2147483648..2147483647.
    NsrRev interface{}

    // nsr fsm state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // nsr version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // nsr nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeid interface{}

    // nsr peer version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // nsr peer nodeid. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeid interface{}

    // nsr fabric mtu. The type is interface{} with range: 0..4294967295.
    NsrFabricMtu interface{}

    // nsr nbr qad qid. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // nsr lsa qad qid. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // nsr nbr qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // nsr lsa qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // nsr nbr init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // nsr lsa init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // nsr nbr seq no. The type is interface{} with range: 0..4294967295.
    NsrNbrSeqNo interface{}

    // nsr intf seq no. The type is interface{} with range: 0..4294967295.
    NsrIntfSeqNo interface{}

    // nsr tmr quant. The type is interface{} with range: -2147483648..2147483647.
    NsrTmrQuant interface{}

    // nsr conn to active attempts. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // nsr conn to active fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // nsr conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // nsr conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // nsr conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // nsr thd sched.
    NsrThdSched Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched

    // nsr rtr thd sched.
    NsrRtrThdSched Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched

    // Nsr Fsm Flags information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmFlag.
    NsrFsmFlag []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmFlag

    // Nsr Fsm Running Timers. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmRunningTimer.
    NsrFsmRunningTimer []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmRunningTimer

    // Nsr Issu Milestones. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrIssuMilestone.
    NsrIssuMilestone []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrIssuMilestone

    // Nsr Error History List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory.
    NsrErrHistory []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory
}

func (nsrStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats) GetEntityData() *types.CommonEntityData {
    nsrStats.EntityData.YFilter = nsrStats.YFilter
    nsrStats.EntityData.YangName = "nsr-stats"
    nsrStats.EntityData.BundleName = "cisco_ios_xr"
    nsrStats.EntityData.ParentYangName = "statistics"
    nsrStats.EntityData.SegmentPath = "nsr-stats"
    nsrStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStats.EntityData.Children = types.NewOrderedMap()
    nsrStats.EntityData.Children.Append("nsr-thd-sched", types.YChild{"NsrThdSched", &nsrStats.NsrThdSched})
    nsrStats.EntityData.Children.Append("nsr-rtr-thd-sched", types.YChild{"NsrRtrThdSched", &nsrStats.NsrRtrThdSched})
    nsrStats.EntityData.Children.Append("nsr-fsm-flag", types.YChild{"NsrFsmFlag", nil})
    for i := range nsrStats.NsrFsmFlag {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrFsmFlag[i]), types.YChild{"NsrFsmFlag", nsrStats.NsrFsmFlag[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-fsm-running-timer", types.YChild{"NsrFsmRunningTimer", nil})
    for i := range nsrStats.NsrFsmRunningTimer {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrFsmRunningTimer[i]), types.YChild{"NsrFsmRunningTimer", nsrStats.NsrFsmRunningTimer[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-issu-milestone", types.YChild{"NsrIssuMilestone", nil})
    for i := range nsrStats.NsrIssuMilestone {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrIssuMilestone[i]), types.YChild{"NsrIssuMilestone", nsrStats.NsrIssuMilestone[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-err-history", types.YChild{"NsrErrHistory", nil})
    for i := range nsrStats.NsrErrHistory {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrErrHistory[i]), types.YChild{"NsrErrHistory", nsrStats.NsrErrHistory[i]})
    }
    nsrStats.EntityData.Leafs = types.NewOrderedMap()
    nsrStats.EntityData.Leafs.Append("nsr-rev", types.YLeaf{"NsrRev", nsrStats.NsrRev})
    nsrStats.EntityData.Leafs.Append("nsr-fsm-state", types.YLeaf{"NsrFsmState", nsrStats.NsrFsmState})
    nsrStats.EntityData.Leafs.Append("nsr-version", types.YLeaf{"NsrVersion", nsrStats.NsrVersion})
    nsrStats.EntityData.Leafs.Append("nsr-nodeid", types.YLeaf{"NsrNodeid", nsrStats.NsrNodeid})
    nsrStats.EntityData.Leafs.Append("nsr-peer-version", types.YLeaf{"NsrPeerVersion", nsrStats.NsrPeerVersion})
    nsrStats.EntityData.Leafs.Append("nsr-peer-nodeid", types.YLeaf{"NsrPeerNodeid", nsrStats.NsrPeerNodeid})
    nsrStats.EntityData.Leafs.Append("nsr-fabric-mtu", types.YLeaf{"NsrFabricMtu", nsrStats.NsrFabricMtu})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-qad-qid", types.YLeaf{"NsrNbrQadQid", nsrStats.NsrNbrQadQid})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-qad-qid", types.YLeaf{"NsrLsaQadQid", nsrStats.NsrLsaQadQid})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-qad-mdata-count", types.YLeaf{"NsrNbrQadMdataCount", nsrStats.NsrNbrQadMdataCount})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-qad-mdata-count", types.YLeaf{"NsrLsaQadMdataCount", nsrStats.NsrLsaQadMdataCount})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-init-sync-pend-count", types.YLeaf{"NsrNbrInitSyncPendCount", nsrStats.NsrNbrInitSyncPendCount})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-init-sync-pend-count", types.YLeaf{"NsrLsaInitSyncPendCount", nsrStats.NsrLsaInitSyncPendCount})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-seq-no", types.YLeaf{"NsrNbrSeqNo", nsrStats.NsrNbrSeqNo})
    nsrStats.EntityData.Leafs.Append("nsr-intf-seq-no", types.YLeaf{"NsrIntfSeqNo", nsrStats.NsrIntfSeqNo})
    nsrStats.EntityData.Leafs.Append("nsr-tmr-quant", types.YLeaf{"NsrTmrQuant", nsrStats.NsrTmrQuant})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-attempts", types.YLeaf{"NsrConnToActiveAttempts", nsrStats.NsrConnToActiveAttempts})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-fails", types.YLeaf{"NsrConnToActiveFails", nsrStats.NsrConnToActiveFails})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-opens", types.YLeaf{"NsrConnToActiveOpens", nsrStats.NsrConnToActiveOpens})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-closes", types.YLeaf{"NsrConnToActiveCloses", nsrStats.NsrConnToActiveCloses})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-errors", types.YLeaf{"NsrConnToActiveErrors", nsrStats.NsrConnToActiveErrors})

    nsrStats.EntityData.YListKeys = []string {}

    return &(nsrStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched
// nsr thd sched
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched_NsrPri
}

func (nsrThdSched *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched) GetEntityData() *types.CommonEntityData {
    nsrThdSched.EntityData.YFilter = nsrThdSched.YFilter
    nsrThdSched.EntityData.YangName = "nsr-thd-sched"
    nsrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrThdSched.EntityData.ParentYangName = "nsr-stats"
    nsrThdSched.EntityData.SegmentPath = "nsr-thd-sched"
    nsrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrThdSched.NsrPri {
        nsrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrThdSched.NsrPri[i]})
    }
    nsrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrThdSched.NsrPulseQuant})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrThdSched.NsrEventsInQ})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrThdSched.NsrEventsTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrThdSched.NsrEventsRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrThdSched.NsrBadPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrThdSched.NsrGoodPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrThdSched.NsrPulsesTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrThdSched.NsrPulseTxFails})

    nsrThdSched.EntityData.YListKeys = []string {}

    return &(nsrThdSched.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched
// nsr rtr thd sched
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched) GetEntityData() *types.CommonEntityData {
    nsrRtrThdSched.EntityData.YFilter = nsrRtrThdSched.YFilter
    nsrRtrThdSched.EntityData.YangName = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrRtrThdSched.EntityData.ParentYangName = "nsr-stats"
    nsrRtrThdSched.EntityData.SegmentPath = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrRtrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrRtrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrRtrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrRtrThdSched.NsrPri {
        nsrRtrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrRtrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrRtrThdSched.NsrPri[i]})
    }
    nsrRtrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrRtrThdSched.NsrPulseQuant})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrRtrThdSched.NsrEventsInQ})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrRtrThdSched.NsrEventsTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrRtrThdSched.NsrEventsRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrRtrThdSched.NsrBadPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrRtrThdSched.NsrGoodPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrRtrThdSched.NsrPulsesTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrRtrThdSched.NsrPulseTxFails})

    nsrRtrThdSched.EntityData.YListKeys = []string {}

    return &(nsrRtrThdSched.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-rtr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmFlag
// Nsr Fsm Flags information
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmFlag *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmFlag) GetEntityData() *types.CommonEntityData {
    nsrFsmFlag.EntityData.YFilter = nsrFsmFlag.YFilter
    nsrFsmFlag.EntityData.YangName = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmFlag.EntityData.ParentYangName = "nsr-stats"
    nsrFsmFlag.EntityData.SegmentPath = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmFlag.EntityData.Children = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmFlag.Entry})

    nsrFsmFlag.EntityData.YListKeys = []string {}

    return &(nsrFsmFlag.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmRunningTimer
// Nsr Fsm Running Timers
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmRunningTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmRunningTimer *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrFsmRunningTimer) GetEntityData() *types.CommonEntityData {
    nsrFsmRunningTimer.EntityData.YFilter = nsrFsmRunningTimer.YFilter
    nsrFsmRunningTimer.EntityData.YangName = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmRunningTimer.EntityData.ParentYangName = "nsr-stats"
    nsrFsmRunningTimer.EntityData.SegmentPath = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmRunningTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmRunningTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmRunningTimer.EntityData.Children = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmRunningTimer.Entry})

    nsrFsmRunningTimer.EntityData.YListKeys = []string {}

    return &(nsrFsmRunningTimer.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrIssuMilestone
// Nsr Issu Milestones
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrIssuMilestone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Milestone Name. The type is string.
    MilestoneName interface{}

    // Milestone Status. The type is string.
    MilestoneStatus interface{}
}

func (nsrIssuMilestone *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrIssuMilestone) GetEntityData() *types.CommonEntityData {
    nsrIssuMilestone.EntityData.YFilter = nsrIssuMilestone.YFilter
    nsrIssuMilestone.EntityData.YangName = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.BundleName = "cisco_ios_xr"
    nsrIssuMilestone.EntityData.ParentYangName = "nsr-stats"
    nsrIssuMilestone.EntityData.SegmentPath = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrIssuMilestone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrIssuMilestone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrIssuMilestone.EntityData.Children = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-name", types.YLeaf{"MilestoneName", nsrIssuMilestone.MilestoneName})
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-status", types.YLeaf{"MilestoneStatus", nsrIssuMilestone.MilestoneStatus})

    nsrIssuMilestone.EntityData.YListKeys = []string {}

    return &(nsrIssuMilestone.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory
// Nsr Error History List
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nsr Revision version. The type is interface{} with range: 0..4294967295.
    NsrRevisionversion interface{}

    // Total errors for this nsr revision version. The type is interface{} with
    // range: -2147483648..2147483647.
    TotalErrors interface{}

    // List of erros. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo.
    NsrErrorInfo []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo
}

func (nsrErrHistory *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory) GetEntityData() *types.CommonEntityData {
    nsrErrHistory.EntityData.YFilter = nsrErrHistory.YFilter
    nsrErrHistory.EntityData.YangName = "nsr-err-history"
    nsrErrHistory.EntityData.BundleName = "cisco_ios_xr"
    nsrErrHistory.EntityData.ParentYangName = "nsr-stats"
    nsrErrHistory.EntityData.SegmentPath = "nsr-err-history"
    nsrErrHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrHistory.EntityData.Children = types.NewOrderedMap()
    nsrErrHistory.EntityData.Children.Append("nsr-error-info", types.YChild{"NsrErrorInfo", nil})
    for i := range nsrErrHistory.NsrErrorInfo {
        nsrErrHistory.EntityData.Children.Append(types.GetSegmentPath(nsrErrHistory.NsrErrorInfo[i]), types.YChild{"NsrErrorInfo", nsrErrHistory.NsrErrorInfo[i]})
    }
    nsrErrHistory.EntityData.Leafs = types.NewOrderedMap()
    nsrErrHistory.EntityData.Leafs.Append("nsr-revisionversion", types.YLeaf{"NsrRevisionversion", nsrErrHistory.NsrRevisionversion})
    nsrErrHistory.EntityData.Leafs.Append("total-errors", types.YLeaf{"TotalErrors", nsrErrHistory.TotalErrors})

    nsrErrHistory.EntityData.YListKeys = []string {}

    return &(nsrErrHistory.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo
// List of erros
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count this error hit during the Nsr Revision. The type is interface{} with
    // range: -2147483648..2147483647.
    ErrCount interface{}

    // Error Information. The type is string.
    ErrInfoString interface{}

    // Time this error was last hit.
    LastErrTime Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime
}

func (nsrErrorInfo *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo) GetEntityData() *types.CommonEntityData {
    nsrErrorInfo.EntityData.YFilter = nsrErrorInfo.YFilter
    nsrErrorInfo.EntityData.YangName = "nsr-error-info"
    nsrErrorInfo.EntityData.BundleName = "cisco_ios_xr"
    nsrErrorInfo.EntityData.ParentYangName = "nsr-err-history"
    nsrErrorInfo.EntityData.SegmentPath = "nsr-error-info"
    nsrErrorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrorInfo.EntityData.Children = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Children.Append("last-err-time", types.YChild{"LastErrTime", &nsrErrorInfo.LastErrTime})
    nsrErrorInfo.EntityData.Leafs = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Leafs.Append("err-count", types.YLeaf{"ErrCount", nsrErrorInfo.ErrCount})
    nsrErrorInfo.EntityData.Leafs.Append("err-info-string", types.YLeaf{"ErrInfoString", nsrErrorInfo.ErrInfoString})

    nsrErrorInfo.EntityData.YListKeys = []string {}

    return &(nsrErrorInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime
// Time this error was last hit
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lastErrTime *Ospf_Processes_Process_Vrfs_Vrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime) GetEntityData() *types.CommonEntityData {
    lastErrTime.EntityData.YFilter = lastErrTime.YFilter
    lastErrTime.EntityData.YangName = "last-err-time"
    lastErrTime.EntityData.BundleName = "cisco_ios_xr"
    lastErrTime.EntityData.ParentYangName = "nsr-error-info"
    lastErrTime.EntityData.SegmentPath = "last-err-time"
    lastErrTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastErrTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastErrTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastErrTime.EntityData.Children = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lastErrTime.Second})
    lastErrTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lastErrTime.Nanosecond})

    lastErrTime.EntityData.YListKeys = []string {}

    return &(lastErrTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_FrrStats
// OSPF fast-reroute statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_FrrStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of IPFRR paths. The type is interface{} with range: 0..4294967295.
    FsPaths interface{}

    // Number of paths enabled for protection. The type is interface{} with range:
    // 0..4294967295.
    FsPathsEligible interface{}

    // Number of paths protected. The type is interface{} with range:
    // 0..4294967295.
    FsPathsProtected interface{}
}

func (frrStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_FrrStats) GetEntityData() *types.CommonEntityData {
    frrStats.EntityData.YFilter = frrStats.YFilter
    frrStats.EntityData.YangName = "frr-stats"
    frrStats.EntityData.BundleName = "cisco_ios_xr"
    frrStats.EntityData.ParentYangName = "statistics"
    frrStats.EntityData.SegmentPath = "frr-stats"
    frrStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrStats.EntityData.Children = types.NewOrderedMap()
    frrStats.EntityData.Leafs = types.NewOrderedMap()
    frrStats.EntityData.Leafs.Append("fs-paths", types.YLeaf{"FsPaths", frrStats.FsPaths})
    frrStats.EntityData.Leafs.Append("fs-paths-eligible", types.YLeaf{"FsPathsEligible", frrStats.FsPathsEligible})
    frrStats.EntityData.Leafs.Append("fs-paths-protected", types.YLeaf{"FsPathsProtected", frrStats.FsPathsProtected})

    frrStats.EntityData.YListKeys = []string {}

    return &(frrStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_TeStats
// OSPF TE IO statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_TeStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // te connected. The type is bool.
    TeConnected interface{}

    // control disconnects. The type is interface{} with range: 0..4294967295.
    ControlDisconnects interface{}

    // te disconnects. The type is interface{} with range: 0..4294967295.
    TeDisconnects interface{}

    // adj gets. The type is interface{} with range: 0..4294967295.
    AdjGets interface{}

    // link floods. The type is interface{} with range: 0..4294967295.
    LinkFloods interface{}

    // link fragment floods. The type is interface{} with range: 0..4294967295.
    LinkFragmentFloods interface{}

    // lsp gets. The type is interface{} with range: 0..4294967295.
    LspGets interface{}

    // tunnel announces. The type is interface{} with range: 0..4294967295.
    TunnelAnnounces interface{}

    // total tunnels. The type is interface{} with range: 0..4294967295.
    TotalTunnels interface{}

    // control batch reads. The type is interface{} with range: 0..4294967295.
    ControlBatchReads interface{}

    // control batch writes. The type is interface{} with range: 0..4294967295.
    ControlBatchWrites interface{}

    // link batch reads. The type is interface{} with range: 0..4294967295.
    LinkBatchReads interface{}

    // link batch writes. The type is interface{} with range: 0..4294967295.
    LinkBatchWrites interface{}

    // adj changes. The type is interface{} with range: 0..4294967295.
    AdjChanges interface{}

    // fragment deletes. The type is interface{} with range: 0..4294967295.
    FragmentDeletes interface{}

    // fragment announces. The type is interface{} with range: 0..4294967295.
    FragmentAnnounces interface{}

    // data trans completes. The type is interface{} with range: 0..4294967295.
    DataTransCompletes interface{}

    // pce listen. The type is interface{} with range: 0..4294967295.
    PceListen interface{}

    // pce stoplisten. The type is interface{} with range: 0..4294967295.
    PceStoplisten interface{}

    // pce flood. The type is interface{} with range: 0..4294967295.
    PceFlood interface{}

    // pce get. The type is interface{} with range: 0..4294967295.
    PceGet interface{}

    // pce br lookup. The type is interface{} with range: 0..4294967295.
    PceBrLookup interface{}

    // pce br lkup num dests. The type is interface{} with range: 0..4294967295.
    PceBrLkupNumDests interface{}

    // pce br resp fails. The type is interface{} with range: 0..4294967295.
    PceBrRespFails interface{}

    // pce node announce batches. The type is interface{} with range:
    // 0..4294967295.
    PceNodeAnnounceBatches interface{}

    // pce node delete batches. The type is interface{} with range: 0..4294967295.
    PceNodeDeleteBatches interface{}

    // pce num node announce. The type is interface{} with range: 0..4294967295.
    PceNumNodeAnnounce interface{}

    // pce num node delete. The type is interface{} with range: 0..4294967295.
    PceNumNodeDelete interface{}

    // pce node send fails. The type is interface{} with range: 0..4294967295.
    PceNodeSendFails interface{}

    // te sr path reg idt recvd. The type is bool.
    TeSrPathRegIdtRecvd interface{}

    // te sr idt sent. The type is bool.
    TeSrIdtSent interface{}

    // sr num area enabled. The type is interface{} with range: 0..4294967295.
    SrNumAreaEnabled interface{}
}

func (teStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_TeStats) GetEntityData() *types.CommonEntityData {
    teStats.EntityData.YFilter = teStats.YFilter
    teStats.EntityData.YangName = "te-stats"
    teStats.EntityData.BundleName = "cisco_ios_xr"
    teStats.EntityData.ParentYangName = "statistics"
    teStats.EntityData.SegmentPath = "te-stats"
    teStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teStats.EntityData.Children = types.NewOrderedMap()
    teStats.EntityData.Leafs = types.NewOrderedMap()
    teStats.EntityData.Leafs.Append("te-connected", types.YLeaf{"TeConnected", teStats.TeConnected})
    teStats.EntityData.Leafs.Append("control-disconnects", types.YLeaf{"ControlDisconnects", teStats.ControlDisconnects})
    teStats.EntityData.Leafs.Append("te-disconnects", types.YLeaf{"TeDisconnects", teStats.TeDisconnects})
    teStats.EntityData.Leafs.Append("adj-gets", types.YLeaf{"AdjGets", teStats.AdjGets})
    teStats.EntityData.Leafs.Append("link-floods", types.YLeaf{"LinkFloods", teStats.LinkFloods})
    teStats.EntityData.Leafs.Append("link-fragment-floods", types.YLeaf{"LinkFragmentFloods", teStats.LinkFragmentFloods})
    teStats.EntityData.Leafs.Append("lsp-gets", types.YLeaf{"LspGets", teStats.LspGets})
    teStats.EntityData.Leafs.Append("tunnel-announces", types.YLeaf{"TunnelAnnounces", teStats.TunnelAnnounces})
    teStats.EntityData.Leafs.Append("total-tunnels", types.YLeaf{"TotalTunnels", teStats.TotalTunnels})
    teStats.EntityData.Leafs.Append("control-batch-reads", types.YLeaf{"ControlBatchReads", teStats.ControlBatchReads})
    teStats.EntityData.Leafs.Append("control-batch-writes", types.YLeaf{"ControlBatchWrites", teStats.ControlBatchWrites})
    teStats.EntityData.Leafs.Append("link-batch-reads", types.YLeaf{"LinkBatchReads", teStats.LinkBatchReads})
    teStats.EntityData.Leafs.Append("link-batch-writes", types.YLeaf{"LinkBatchWrites", teStats.LinkBatchWrites})
    teStats.EntityData.Leafs.Append("adj-changes", types.YLeaf{"AdjChanges", teStats.AdjChanges})
    teStats.EntityData.Leafs.Append("fragment-deletes", types.YLeaf{"FragmentDeletes", teStats.FragmentDeletes})
    teStats.EntityData.Leafs.Append("fragment-announces", types.YLeaf{"FragmentAnnounces", teStats.FragmentAnnounces})
    teStats.EntityData.Leafs.Append("data-trans-completes", types.YLeaf{"DataTransCompletes", teStats.DataTransCompletes})
    teStats.EntityData.Leafs.Append("pce-listen", types.YLeaf{"PceListen", teStats.PceListen})
    teStats.EntityData.Leafs.Append("pce-stoplisten", types.YLeaf{"PceStoplisten", teStats.PceStoplisten})
    teStats.EntityData.Leafs.Append("pce-flood", types.YLeaf{"PceFlood", teStats.PceFlood})
    teStats.EntityData.Leafs.Append("pce-get", types.YLeaf{"PceGet", teStats.PceGet})
    teStats.EntityData.Leafs.Append("pce-br-lookup", types.YLeaf{"PceBrLookup", teStats.PceBrLookup})
    teStats.EntityData.Leafs.Append("pce-br-lkup-num-dests", types.YLeaf{"PceBrLkupNumDests", teStats.PceBrLkupNumDests})
    teStats.EntityData.Leafs.Append("pce-br-resp-fails", types.YLeaf{"PceBrRespFails", teStats.PceBrRespFails})
    teStats.EntityData.Leafs.Append("pce-node-announce-batches", types.YLeaf{"PceNodeAnnounceBatches", teStats.PceNodeAnnounceBatches})
    teStats.EntityData.Leafs.Append("pce-node-delete-batches", types.YLeaf{"PceNodeDeleteBatches", teStats.PceNodeDeleteBatches})
    teStats.EntityData.Leafs.Append("pce-num-node-announce", types.YLeaf{"PceNumNodeAnnounce", teStats.PceNumNodeAnnounce})
    teStats.EntityData.Leafs.Append("pce-num-node-delete", types.YLeaf{"PceNumNodeDelete", teStats.PceNumNodeDelete})
    teStats.EntityData.Leafs.Append("pce-node-send-fails", types.YLeaf{"PceNodeSendFails", teStats.PceNodeSendFails})
    teStats.EntityData.Leafs.Append("te-sr-path-reg-idt-recvd", types.YLeaf{"TeSrPathRegIdtRecvd", teStats.TeSrPathRegIdtRecvd})
    teStats.EntityData.Leafs.Append("te-sr-idt-sent", types.YLeaf{"TeSrIdtSent", teStats.TeSrIdtSent})
    teStats.EntityData.Leafs.Append("sr-num-area-enabled", types.YLeaf{"SrNumAreaEnabled", teStats.SrNumAreaEnabled})

    teStats.EntityData.YListKeys = []string {}

    return &(teStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_ProtocolStats
// OSPF Protocol statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_ProtocolStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // inputs. The type is interface{} with range: 0..4294967295.
    Inputs interface{}

    // input hello. The type is interface{} with range: 0..4294967295.
    InputHello interface{}

    // input dbdes. The type is interface{} with range: 0..4294967295.
    InputDbdes interface{}

    // input dbdes lsa. The type is interface{} with range: 0..4294967295.
    InputDbdesLsa interface{}

    // input req. The type is interface{} with range: 0..4294967295.
    InputReq interface{}

    // input req lsa. The type is interface{} with range: 0..4294967295.
    InputReqLsa interface{}

    // input lsupd. The type is interface{} with range: 0..4294967295.
    InputLsupd interface{}

    // input lsupd lsa. The type is interface{} with range: 0..4294967295.
    InputLsupdLsa interface{}

    // input ack. The type is interface{} with range: 0..4294967295.
    InputAck interface{}

    // input ack lsa. The type is interface{} with range: 0..4294967295.
    InputAckLsa interface{}

    // checksumerr. The type is interface{} with range: 0..4294967295.
    Checksumerr interface{}

    // input autherr. The type is interface{} with range: 0..4294967295.
    InputAutherr interface{}

    // outputs. The type is interface{} with range: 0..4294967295.
    Outputs interface{}

    // output hello. The type is interface{} with range: 0..4294967295.
    OutputHello interface{}

    // output dbdes. The type is interface{} with range: 0..4294967295.
    OutputDbdes interface{}

    // output dbdes lsa. The type is interface{} with range: 0..4294967295.
    OutputDbdesLsa interface{}

    // output req. The type is interface{} with range: 0..4294967295.
    OutputReq interface{}

    // output req lsa. The type is interface{} with range: 0..4294967295.
    OutputReqLsa interface{}

    // output lsupd. The type is interface{} with range: 0..4294967295.
    OutputLsupd interface{}

    // output lsupd lsa. The type is interface{} with range: 0..4294967295.
    OutputLsupdLsa interface{}

    // output ack. The type is interface{} with range: 0..4294967295.
    OutputAck interface{}

    // output ack lsa. The type is interface{} with range: 0..4294967295.
    OutputAckLsa interface{}

    // output autherr. The type is interface{} with range: 0..4294967295.
    OutputAutherr interface{}

    // h input dbdes. The type is interface{} with range: 0..4294967295.
    HInputDbdes interface{}

    // h input req. The type is interface{} with range: 0..4294967295.
    HInputReq interface{}

    // h input lsupd. The type is interface{} with range: 0..4294967295.
    HInputLsupd interface{}

    // h input ack. The type is interface{} with range: 0..4294967295.
    HInputAck interface{}
}

func (protocolStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_ProtocolStats) GetEntityData() *types.CommonEntityData {
    protocolStats.EntityData.YFilter = protocolStats.YFilter
    protocolStats.EntityData.YangName = "protocol-stats"
    protocolStats.EntityData.BundleName = "cisco_ios_xr"
    protocolStats.EntityData.ParentYangName = "statistics"
    protocolStats.EntityData.SegmentPath = "protocol-stats"
    protocolStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStats.EntityData.Children = types.NewOrderedMap()
    protocolStats.EntityData.Leafs = types.NewOrderedMap()
    protocolStats.EntityData.Leafs.Append("inputs", types.YLeaf{"Inputs", protocolStats.Inputs})
    protocolStats.EntityData.Leafs.Append("input-hello", types.YLeaf{"InputHello", protocolStats.InputHello})
    protocolStats.EntityData.Leafs.Append("input-dbdes", types.YLeaf{"InputDbdes", protocolStats.InputDbdes})
    protocolStats.EntityData.Leafs.Append("input-dbdes-lsa", types.YLeaf{"InputDbdesLsa", protocolStats.InputDbdesLsa})
    protocolStats.EntityData.Leafs.Append("input-req", types.YLeaf{"InputReq", protocolStats.InputReq})
    protocolStats.EntityData.Leafs.Append("input-req-lsa", types.YLeaf{"InputReqLsa", protocolStats.InputReqLsa})
    protocolStats.EntityData.Leafs.Append("input-lsupd", types.YLeaf{"InputLsupd", protocolStats.InputLsupd})
    protocolStats.EntityData.Leafs.Append("input-lsupd-lsa", types.YLeaf{"InputLsupdLsa", protocolStats.InputLsupdLsa})
    protocolStats.EntityData.Leafs.Append("input-ack", types.YLeaf{"InputAck", protocolStats.InputAck})
    protocolStats.EntityData.Leafs.Append("input-ack-lsa", types.YLeaf{"InputAckLsa", protocolStats.InputAckLsa})
    protocolStats.EntityData.Leafs.Append("checksumerr", types.YLeaf{"Checksumerr", protocolStats.Checksumerr})
    protocolStats.EntityData.Leafs.Append("input-autherr", types.YLeaf{"InputAutherr", protocolStats.InputAutherr})
    protocolStats.EntityData.Leafs.Append("outputs", types.YLeaf{"Outputs", protocolStats.Outputs})
    protocolStats.EntityData.Leafs.Append("output-hello", types.YLeaf{"OutputHello", protocolStats.OutputHello})
    protocolStats.EntityData.Leafs.Append("output-dbdes", types.YLeaf{"OutputDbdes", protocolStats.OutputDbdes})
    protocolStats.EntityData.Leafs.Append("output-dbdes-lsa", types.YLeaf{"OutputDbdesLsa", protocolStats.OutputDbdesLsa})
    protocolStats.EntityData.Leafs.Append("output-req", types.YLeaf{"OutputReq", protocolStats.OutputReq})
    protocolStats.EntityData.Leafs.Append("output-req-lsa", types.YLeaf{"OutputReqLsa", protocolStats.OutputReqLsa})
    protocolStats.EntityData.Leafs.Append("output-lsupd", types.YLeaf{"OutputLsupd", protocolStats.OutputLsupd})
    protocolStats.EntityData.Leafs.Append("output-lsupd-lsa", types.YLeaf{"OutputLsupdLsa", protocolStats.OutputLsupdLsa})
    protocolStats.EntityData.Leafs.Append("output-ack", types.YLeaf{"OutputAck", protocolStats.OutputAck})
    protocolStats.EntityData.Leafs.Append("output-ack-lsa", types.YLeaf{"OutputAckLsa", protocolStats.OutputAckLsa})
    protocolStats.EntityData.Leafs.Append("output-autherr", types.YLeaf{"OutputAutherr", protocolStats.OutputAutherr})
    protocolStats.EntityData.Leafs.Append("h-input-dbdes", types.YLeaf{"HInputDbdes", protocolStats.HInputDbdes})
    protocolStats.EntityData.Leafs.Append("h-input-req", types.YLeaf{"HInputReq", protocolStats.HInputReq})
    protocolStats.EntityData.Leafs.Append("h-input-lsupd", types.YLeaf{"HInputLsupd", protocolStats.HInputLsupd})
    protocolStats.EntityData.Leafs.Append("h-input-ack", types.YLeaf{"HInputAck", protocolStats.HInputAck})

    protocolStats.EntityData.YListKeys = []string {}

    return &(protocolStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_RawIoStats
// OSPF RAW IO statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_RawIoStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // out sent. The type is interface{} with range: 0..4294967295.
    OutSent interface{}

    // out bytes sent. The type is interface{} with range: 0..4294967295.
    OutBytesSent interface{}

    // out no conn discarded. The type is interface{} with range: 0..4294967295.
    OutNoConnDiscarded interface{}

    // out null src discarded. The type is interface{} with range: 0..4294967295.
    OutNullSrcDiscarded interface{}

    // out no pak discarded. The type is interface{} with range: 0..4294967295.
    OutNoPakDiscarded interface{}

    // out ipv4 hdr err discarded. The type is interface{} with range:
    // 0..4294967295.
    OutIpv4HdrErrDiscarded interface{}

    // out send pak err discarded. The type is interface{} with range:
    // 0..4294967295.
    OutSendPakErrDiscarded interface{}

    // in rcv. The type is interface{} with range: 0..4294967295.
    InRcv interface{}

    // in bytes rcv. The type is interface{} with range: 0..4294967295.
    InBytesRcv interface{}

    // in short msg discarded. The type is interface{} with range: 0..4294967295.
    InShortMsgDiscarded interface{}

    // in no mem discarded. The type is interface{} with range: 0..4294967295.
    InNoMemDiscarded interface{}

    // in raw event. The type is interface{} with range: 0..4294967295.
    InRawEvent interface{}

    // disconnects. The type is interface{} with range: 0..4294967295.
    Disconnects interface{}

    // in standby discarded. The type is interface{} with range: 0..4294967295.
    InStandbyDiscarded interface{}

    // nsr not ready discarded. The type is interface{} with range: 0..4294967295.
    NsrNotReadyDiscarded interface{}

    // raw connected. The type is bool.
    RawConnected interface{}

    // sl raw connected. The type is bool.
    SlRawConnected interface{}
}

func (rawIoStats *Ospf_Processes_Process_Vrfs_Vrf_Statistics_RawIoStats) GetEntityData() *types.CommonEntityData {
    rawIoStats.EntityData.YFilter = rawIoStats.YFilter
    rawIoStats.EntityData.YangName = "raw-io-stats"
    rawIoStats.EntityData.BundleName = "cisco_ios_xr"
    rawIoStats.EntityData.ParentYangName = "statistics"
    rawIoStats.EntityData.SegmentPath = "raw-io-stats"
    rawIoStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rawIoStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rawIoStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rawIoStats.EntityData.Children = types.NewOrderedMap()
    rawIoStats.EntityData.Leafs = types.NewOrderedMap()
    rawIoStats.EntityData.Leafs.Append("out-sent", types.YLeaf{"OutSent", rawIoStats.OutSent})
    rawIoStats.EntityData.Leafs.Append("out-bytes-sent", types.YLeaf{"OutBytesSent", rawIoStats.OutBytesSent})
    rawIoStats.EntityData.Leafs.Append("out-no-conn-discarded", types.YLeaf{"OutNoConnDiscarded", rawIoStats.OutNoConnDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-null-src-discarded", types.YLeaf{"OutNullSrcDiscarded", rawIoStats.OutNullSrcDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-no-pak-discarded", types.YLeaf{"OutNoPakDiscarded", rawIoStats.OutNoPakDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-ipv4-hdr-err-discarded", types.YLeaf{"OutIpv4HdrErrDiscarded", rawIoStats.OutIpv4HdrErrDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-send-pak-err-discarded", types.YLeaf{"OutSendPakErrDiscarded", rawIoStats.OutSendPakErrDiscarded})
    rawIoStats.EntityData.Leafs.Append("in-rcv", types.YLeaf{"InRcv", rawIoStats.InRcv})
    rawIoStats.EntityData.Leafs.Append("in-bytes-rcv", types.YLeaf{"InBytesRcv", rawIoStats.InBytesRcv})
    rawIoStats.EntityData.Leafs.Append("in-short-msg-discarded", types.YLeaf{"InShortMsgDiscarded", rawIoStats.InShortMsgDiscarded})
    rawIoStats.EntityData.Leafs.Append("in-no-mem-discarded", types.YLeaf{"InNoMemDiscarded", rawIoStats.InNoMemDiscarded})
    rawIoStats.EntityData.Leafs.Append("in-raw-event", types.YLeaf{"InRawEvent", rawIoStats.InRawEvent})
    rawIoStats.EntityData.Leafs.Append("disconnects", types.YLeaf{"Disconnects", rawIoStats.Disconnects})
    rawIoStats.EntityData.Leafs.Append("in-standby-discarded", types.YLeaf{"InStandbyDiscarded", rawIoStats.InStandbyDiscarded})
    rawIoStats.EntityData.Leafs.Append("nsr-not-ready-discarded", types.YLeaf{"NsrNotReadyDiscarded", rawIoStats.NsrNotReadyDiscarded})
    rawIoStats.EntityData.Leafs.Append("raw-connected", types.YLeaf{"RawConnected", rawIoStats.RawConnected})
    rawIoStats.EntityData.Leafs.Append("sl-raw-connected", types.YLeaf{"SlRawConnected", rawIoStats.SlRawConnected})

    rawIoStats.EntityData.YListKeys = []string {}

    return &(rawIoStats.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries
// Statistics innformation Interface table
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics information for a specific interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry.
    InterfaceStatsEntry []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry
}

func (interfaceStatsEntries *Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntries.EntityData.YFilter = interfaceStatsEntries.YFilter
    interfaceStatsEntries.EntityData.YangName = "interface-stats-entries"
    interfaceStatsEntries.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntries.EntityData.ParentYangName = "statistics"
    interfaceStatsEntries.EntityData.SegmentPath = "interface-stats-entries"
    interfaceStatsEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntries.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntries.EntityData.Children.Append("interface-stats-entry", types.YChild{"InterfaceStatsEntry", nil})
    for i := range interfaceStatsEntries.InterfaceStatsEntry {
        interfaceStatsEntries.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntries.InterfaceStatsEntry[i]), types.YChild{"InterfaceStatsEntry", interfaceStatsEntries.InterfaceStatsEntry[i]})
    }
    interfaceStatsEntries.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatsEntries.EntityData.YListKeys = []string {}

    return &(interfaceStatsEntries.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry
// Statistics information for a specific interface
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // interface handle type. The type is string with pattern: [a-zA-Z0-9./-]+.
    Handle interface{}

    // interface name. The type is string.
    IfNameStr interface{}

    // interface entry. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry.
    IfEntry []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
}

func (interfaceStatsEntry *Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntry.EntityData.YFilter = interfaceStatsEntry.YFilter
    interfaceStatsEntry.EntityData.YangName = "interface-stats-entry"
    interfaceStatsEntry.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntry.EntityData.ParentYangName = "interface-stats-entries"
    interfaceStatsEntry.EntityData.SegmentPath = "interface-stats-entry" + types.AddKeyToken(interfaceStatsEntry.InterfaceName, "interface-name")
    interfaceStatsEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntry.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Children.Append("if-entry", types.YChild{"IfEntry", nil})
    for i := range interfaceStatsEntry.IfEntry {
        interfaceStatsEntry.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntry.IfEntry[i]), types.YChild{"IfEntry", interfaceStatsEntry.IfEntry[i]})
    }
    interfaceStatsEntry.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatsEntry.InterfaceName})
    interfaceStatsEntry.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", interfaceStatsEntry.Handle})
    interfaceStatsEntry.EntityData.Leafs.Append("if-name-str", types.YLeaf{"IfNameStr", interfaceStatsEntry.IfNameStr})

    interfaceStatsEntry.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatsEntry.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
// interface entry
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF madj interface. The type is bool.
    MadjIntf interface{}

    // OSPF area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // OSPF aread id string. The type is string.
    AreaIdStr interface{}

    // OSPF interface statistics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat.
    IfStat []*Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
}

func (ifEntry *Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry) GetEntityData() *types.CommonEntityData {
    ifEntry.EntityData.YFilter = ifEntry.YFilter
    ifEntry.EntityData.YangName = "if-entry"
    ifEntry.EntityData.BundleName = "cisco_ios_xr"
    ifEntry.EntityData.ParentYangName = "interface-stats-entry"
    ifEntry.EntityData.SegmentPath = "if-entry"
    ifEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifEntry.EntityData.Children = types.NewOrderedMap()
    ifEntry.EntityData.Children.Append("if-stat", types.YChild{"IfStat", nil})
    for i := range ifEntry.IfStat {
        ifEntry.EntityData.Children.Append(types.GetSegmentPath(ifEntry.IfStat[i]), types.YChild{"IfStat", ifEntry.IfStat[i]})
    }
    ifEntry.EntityData.Leafs = types.NewOrderedMap()
    ifEntry.EntityData.Leafs.Append("madj-intf", types.YLeaf{"MadjIntf", ifEntry.MadjIntf})
    ifEntry.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", ifEntry.AreaId})
    ifEntry.EntityData.Leafs.Append("area-id-str", types.YLeaf{"AreaIdStr", ifEntry.AreaIdStr})

    ifEntry.EntityData.YListKeys = []string {}

    return &(ifEntry.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
// OSPF interface statistics
type Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (ifStat *Ospf_Processes_Process_Vrfs_Vrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat) GetEntityData() *types.CommonEntityData {
    ifStat.EntityData.YFilter = ifStat.YFilter
    ifStat.EntityData.YangName = "if-stat"
    ifStat.EntityData.BundleName = "cisco_ios_xr"
    ifStat.EntityData.ParentYangName = "if-entry"
    ifStat.EntityData.SegmentPath = "if-stat"
    ifStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifStat.EntityData.Children = types.NewOrderedMap()
    ifStat.EntityData.Leafs = types.NewOrderedMap()
    ifStat.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", ifStat.Entry})

    ifStat.EntityData.YListKeys = []string {}

    return &(ifStat.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation
// Container for OSPF Interfaces
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor table.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors

    // Request List table.
    Requests Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests

    // Retransmission list table.
    Retransmissions Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions

    // Neighbor detail table.
    NeighborDetails Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails
}

func (adjacencyInformation *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation) GetEntityData() *types.CommonEntityData {
    adjacencyInformation.EntityData.YFilter = adjacencyInformation.YFilter
    adjacencyInformation.EntityData.YangName = "adjacency-information"
    adjacencyInformation.EntityData.BundleName = "cisco_ios_xr"
    adjacencyInformation.EntityData.ParentYangName = "vrf"
    adjacencyInformation.EntityData.SegmentPath = "adjacency-information"
    adjacencyInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyInformation.EntityData.Children = types.NewOrderedMap()
    adjacencyInformation.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &adjacencyInformation.Neighbors})
    adjacencyInformation.EntityData.Children.Append("requests", types.YChild{"Requests", &adjacencyInformation.Requests})
    adjacencyInformation.EntityData.Children.Append("retransmissions", types.YChild{"Retransmissions", &adjacencyInformation.Retransmissions})
    adjacencyInformation.EntityData.Children.Append("neighbor-details", types.YChild{"NeighborDetails", &adjacencyInformation.NeighborDetails})
    adjacencyInformation.EntityData.Leafs = types.NewOrderedMap()

    adjacencyInformation.EntityData.YListKeys = []string {}

    return &(adjacencyInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors
// Neighbor table
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor.
    Neighbor []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "adjacency-information"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor
// Neighbor information
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighbor.NeighborBfdInformation})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighbor.NeighborId})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighbor.NeighborInterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighbor.DrBdrState})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighbor.NeighborMadjInterface})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests
// Request List table
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Request list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request.
    Request []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request
}

func (requests *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests) GetEntityData() *types.CommonEntityData {
    requests.EntityData.YFilter = requests.YFilter
    requests.EntityData.YangName = "requests"
    requests.EntityData.BundleName = "cisco_ios_xr"
    requests.EntityData.ParentYangName = "adjacency-information"
    requests.EntityData.SegmentPath = "requests"
    requests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requests.EntityData.Children = types.NewOrderedMap()
    requests.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requests.Request {
        requests.EntityData.Children.Append(types.GetSegmentPath(requests.Request[i]), types.YChild{"Request", requests.Request[i]})
    }
    requests.EntityData.Leafs = types.NewOrderedMap()

    requests.EntityData.YListKeys = []string {}

    return &(requests.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request
// Request list for a particular adjacency
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborId interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // Request list interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RequestInterfaceName interface{}

    // List of request list entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request_Request.
    Request []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request_Request
}

func (request *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "requests"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-id", types.YLeaf{"RequestNeighborId", request.RequestNeighborId})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("request-interface-name", types.YLeaf{"RequestInterfaceName", request.RequestInterfaceName})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request_Request
// List of request list entries
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (request *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Requests_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", request.HeaderLsId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})
    request.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", request.HeaderLsaChecksum})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions
// Retransmission list table
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Retransmission list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission.
    Retransmission []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission
}

func (retransmissions *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions) GetEntityData() *types.CommonEntityData {
    retransmissions.EntityData.YFilter = retransmissions.YFilter
    retransmissions.EntityData.YangName = "retransmissions"
    retransmissions.EntityData.BundleName = "cisco_ios_xr"
    retransmissions.EntityData.ParentYangName = "adjacency-information"
    retransmissions.EntityData.SegmentPath = "retransmissions"
    retransmissions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissions.EntityData.Children = types.NewOrderedMap()
    retransmissions.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissions.Retransmission {
        retransmissions.EntityData.Children.Append(types.GetSegmentPath(retransmissions.Retransmission[i]), types.YChild{"Retransmission", retransmissions.Retransmission[i]})
    }
    retransmissions.EntityData.Leafs = types.NewOrderedMap()

    retransmissions.EntityData.YListKeys = []string {}

    return &(retransmissions.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission
// Retransmission list for a particular adjacency
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborIpAddress interface{}

    // Retransmission list interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    RetransmissionInterfaceName interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionCount interface{}

    // List of Area scope entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb

    // List of AS Scope entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmissions"
    retransmission.EntityData.SegmentPath = "retransmission"
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-id", types.YLeaf{"RetransmissionNeighborId", retransmission.RetransmissionNeighborId})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-ip-address", types.YLeaf{"RetransmissionNeighborIpAddress", retransmission.RetransmissionNeighborIpAddress})
    retransmission.EntityData.Leafs.Append("retransmission-interface-name", types.YLeaf{"RetransmissionInterfaceName", retransmission.RetransmissionInterfaceName})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-count", types.YLeaf{"RetransmissionCount", retransmission.RetransmissionCount})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb
// List of Area scope entries
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAreaDb *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db"
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAreaDb.HeaderLsId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAreaDb.HeaderLsaChecksum})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb
// List of AS Scope entries
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAsdb *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb"
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAsdb.HeaderLsId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAsdb.HeaderLsaChecksum})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails
// Neighbor detail table
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single neighbor's detail information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail.
    NeighborDetail []*Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail
}

func (neighborDetails *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails) GetEntityData() *types.CommonEntityData {
    neighborDetails.EntityData.YFilter = neighborDetails.YFilter
    neighborDetails.EntityData.YangName = "neighbor-details"
    neighborDetails.EntityData.BundleName = "cisco_ios_xr"
    neighborDetails.EntityData.ParentYangName = "adjacency-information"
    neighborDetails.EntityData.SegmentPath = "neighbor-details"
    neighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetails.EntityData.Children = types.NewOrderedMap()
    neighborDetails.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetails.NeighborDetail {
        neighborDetails.EntityData.Children.Append(types.GetSegmentPath(neighborDetails.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetails.NeighborDetail[i]})
    }
    neighborDetails.EntityData.Leafs = types.NewOrderedMap()

    neighborDetails.EntityData.YListKeys = []string {}

    return &(neighborDetails.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail
// A single neighbor's detail information
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    NeighborAreaId interface{}

    // Number of state changes. The type is interface{} with range: 0..65535.
    StateChangeCount interface{}

    // Cost of path to this neighbor. The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs. The type is bool.
    NeighborFilter interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Interface_.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // This is bitmaks of neighbor's option field received. The type is
    // interface{} with range: 0..255.
    NeighborOption interface{}

    // Number of pending events. The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // This is a bitmask of Link Local signalling options received from the
    // neighbor. The type is interface{} with range: 0..4294967295.
    NeighborLlsOption interface{}

    // Out-Of-Bound resynchronization in progress. The type is bool.
    OobResynchronization interface{}

    // For cisco NSF, the router is either Requester or Receiver. The type is
    // NsfRtr.
    NsfRouterState interface{}

    // The amount of time in seconds since last time Out-Of-Band resynchronization
    // was done with this neighbor. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastOobTime interface{}

    // LFA Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    LfaInterface interface{}

    // LFA Next Hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNextHop interface{}

    // LFA Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNeighborId interface{}

    // LFA Neighbor Revision. The type is interface{} with range: 0..4294967295.
    LfaNeighborRevision interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    NeighborAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    NeighborAckListHighWatermark interface{}

    // SR Adjacency SID Label. The type is interface{} with range: 0..4294967295.
    AdjacencySidLabel interface{}

    // SR Adjacency SID Protected. The type is bool.
    AdjacencySidProtected interface{}

    // SR Adjacency SID Unprotected Label. The type is interface{} with range:
    // 0..4294967295.
    AdjacencySidUnprotectedLabel interface{}

    // Interface ID of neighbor recived via LLS. The type is interface{} with
    // range: 0..65535.
    NeighborInterfaceId interface{}

    // Neighbor summary information.
    NeighborSummary Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation

    // Retransmission information with this neighbor.
    NeighborRetransmissionInformation Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
}

func (neighborDetail *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-details"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-summary", types.YChild{"NeighborSummary", &neighborDetail.NeighborSummary})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborDetail.NeighborBfdInformation})
    neighborDetail.EntityData.Children.Append("neighbor-retransmission-information", types.YChild{"NeighborRetransmissionInformation", &neighborDetail.NeighborRetransmissionInformation})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-area-id", types.YLeaf{"NeighborAreaId", neighborDetail.NeighborAreaId})
    neighborDetail.EntityData.Leafs.Append("state-change-count", types.YLeaf{"StateChangeCount", neighborDetail.StateChangeCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("neighbor-filter", types.YLeaf{"NeighborFilter", neighborDetail.NeighborFilter})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})
    neighborDetail.EntityData.Leafs.Append("neighbor-lls-option", types.YLeaf{"NeighborLlsOption", neighborDetail.NeighborLlsOption})
    neighborDetail.EntityData.Leafs.Append("oob-resynchronization", types.YLeaf{"OobResynchronization", neighborDetail.OobResynchronization})
    neighborDetail.EntityData.Leafs.Append("nsf-router-state", types.YLeaf{"NsfRouterState", neighborDetail.NsfRouterState})
    neighborDetail.EntityData.Leafs.Append("last-oob-time", types.YLeaf{"LastOobTime", neighborDetail.LastOobTime})
    neighborDetail.EntityData.Leafs.Append("lfa-interface", types.YLeaf{"LfaInterface", neighborDetail.LfaInterface})
    neighborDetail.EntityData.Leafs.Append("lfa-next-hop", types.YLeaf{"LfaNextHop", neighborDetail.LfaNextHop})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-id", types.YLeaf{"LfaNeighborId", neighborDetail.LfaNeighborId})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-revision", types.YLeaf{"LfaNeighborRevision", neighborDetail.LfaNeighborRevision})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-count", types.YLeaf{"NeighborAckListCount", neighborDetail.NeighborAckListCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-high-watermark", types.YLeaf{"NeighborAckListHighWatermark", neighborDetail.NeighborAckListHighWatermark})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-label", types.YLeaf{"AdjacencySidLabel", neighborDetail.AdjacencySidLabel})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-protected", types.YLeaf{"AdjacencySidProtected", neighborDetail.AdjacencySidProtected})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-unprotected-label", types.YLeaf{"AdjacencySidUnprotectedLabel", neighborDetail.AdjacencySidUnprotectedLabel})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary
// Neighbor summary information
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
}

func (neighborSummary *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary) GetEntityData() *types.CommonEntityData {
    neighborSummary.EntityData.YFilter = neighborSummary.YFilter
    neighborSummary.EntityData.YangName = "neighbor-summary"
    neighborSummary.EntityData.BundleName = "cisco_ios_xr"
    neighborSummary.EntityData.ParentYangName = "neighbor-detail"
    neighborSummary.EntityData.SegmentPath = "neighbor-summary"
    neighborSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummary.EntityData.Children = types.NewOrderedMap()
    neighborSummary.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborSummary.NeighborBfdInformation})
    neighborSummary.EntityData.Leafs = types.NewOrderedMap()
    neighborSummary.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighborSummary.NeighborId})
    neighborSummary.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborSummary.NeighborAddressXr})
    neighborSummary.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighborSummary.NeighborInterfaceName})
    neighborSummary.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborSummary.NeighborDrPriority})
    neighborSummary.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborSummary.NeighborState})
    neighborSummary.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighborSummary.DrBdrState})
    neighborSummary.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborSummary.NeighborDeadTimer})
    neighborSummary.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborSummary.NeighborUpTime})
    neighborSummary.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighborSummary.NeighborMadjInterface})

    neighborSummary.EntityData.YListKeys = []string {}

    return &(neighborSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-summary"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
// Retransmission information with this neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmissionInformation *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation) GetEntityData() *types.CommonEntityData {
    neighborRetransmissionInformation.EntityData.YFilter = neighborRetransmissionInformation.YFilter
    neighborRetransmissionInformation.EntityData.YangName = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmissionInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmissionInformation.EntityData.SegmentPath = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmissionInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmissionInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmissionInformation.EntityData.Children = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", neighborRetransmissionInformation.DbdRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", neighborRetransmissionInformation.DbdRetransmissionTotalCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", neighborRetransmissionInformation.AreaFloodingIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmissionInformation.AsFloodIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", neighborRetransmissionInformation.NeighborRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", neighborRetransmissionInformation.NumberOfRetransmissions})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", neighborRetransmissionInformation.AreaFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", neighborRetransmissionInformation.AreaFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", neighborRetransmissionInformation.AsFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", neighborRetransmissionInformation.AsFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", neighborRetransmissionInformation.AreaNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", neighborRetransmissionInformation.AreaNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", neighborRetransmissionInformation.AsNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", neighborRetransmissionInformation.AsNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmissionInformation.LastRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmissionInformation.MaximumRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmissionInformation.LastRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmissionInformation.MaximumRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmissionInformation.LsaRetransmissionTimer})

    neighborRetransmissionInformation.EntityData.YListKeys = []string {}

    return &(neighborRetransmissionInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation
// Container for OSPF routing tables
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF Route Table Including Backup Paths.
    BackupRoutes Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes

    // OSPF Route Table including multicast-intact routes.
    MulticastIntactRouteTable Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable

    // OSPF Route Table Including Multicast intact Backup Paths.
    MulticastIntactBackupRoutes Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes

    // OSPF route summary statistics.
    SummaryInformation Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation

    // OSPF Connected Route Table.
    ConnectedRoutes Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes

    // OSPF Local Route Table.
    LocalRoutes Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes

    // OSPF Area Route Table.
    RouteAreas Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas

    // OSPF Route Table.
    RouteTable Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable

    // OSPF External Route Table.
    ExternalRoutes Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes
}

func (routeInformation *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation) GetEntityData() *types.CommonEntityData {
    routeInformation.EntityData.YFilter = routeInformation.YFilter
    routeInformation.EntityData.YangName = "route-information"
    routeInformation.EntityData.BundleName = "cisco_ios_xr"
    routeInformation.EntityData.ParentYangName = "vrf"
    routeInformation.EntityData.SegmentPath = "route-information"
    routeInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInformation.EntityData.Children = types.NewOrderedMap()
    routeInformation.EntityData.Children.Append("backup-routes", types.YChild{"BackupRoutes", &routeInformation.BackupRoutes})
    routeInformation.EntityData.Children.Append("multicast-intact-route-table", types.YChild{"MulticastIntactRouteTable", &routeInformation.MulticastIntactRouteTable})
    routeInformation.EntityData.Children.Append("multicast-intact-backup-routes", types.YChild{"MulticastIntactBackupRoutes", &routeInformation.MulticastIntactBackupRoutes})
    routeInformation.EntityData.Children.Append("summary-information", types.YChild{"SummaryInformation", &routeInformation.SummaryInformation})
    routeInformation.EntityData.Children.Append("connected-routes", types.YChild{"ConnectedRoutes", &routeInformation.ConnectedRoutes})
    routeInformation.EntityData.Children.Append("local-routes", types.YChild{"LocalRoutes", &routeInformation.LocalRoutes})
    routeInformation.EntityData.Children.Append("route-areas", types.YChild{"RouteAreas", &routeInformation.RouteAreas})
    routeInformation.EntityData.Children.Append("route-table", types.YChild{"RouteTable", &routeInformation.RouteTable})
    routeInformation.EntityData.Children.Append("external-routes", types.YChild{"ExternalRoutes", &routeInformation.ExternalRoutes})
    routeInformation.EntityData.Leafs = types.NewOrderedMap()

    routeInformation.EntityData.YListKeys = []string {}

    return &(routeInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes
// OSPF Route Table Including Backup Paths
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including backup paths. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute.
    BackupRoute []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute
}

func (backupRoutes *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes) GetEntityData() *types.CommonEntityData {
    backupRoutes.EntityData.YFilter = backupRoutes.YFilter
    backupRoutes.EntityData.YangName = "backup-routes"
    backupRoutes.EntityData.BundleName = "cisco_ios_xr"
    backupRoutes.EntityData.ParentYangName = "route-information"
    backupRoutes.EntityData.SegmentPath = "backup-routes"
    backupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoutes.EntityData.Children = types.NewOrderedMap()
    backupRoutes.EntityData.Children.Append("backup-route", types.YChild{"BackupRoute", nil})
    for i := range backupRoutes.BackupRoute {
        backupRoutes.EntityData.Children.Append(types.GetSegmentPath(backupRoutes.BackupRoute[i]), types.YChild{"BackupRoute", backupRoutes.BackupRoute[i]})
    }
    backupRoutes.EntityData.Leafs = types.NewOrderedMap()

    backupRoutes.EntityData.YListKeys = []string {}

    return &(backupRoutes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute
// OSPF route including backup paths
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath
}

func (backupRoute *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute) GetEntityData() *types.CommonEntityData {
    backupRoute.EntityData.YFilter = backupRoute.YFilter
    backupRoute.EntityData.YangName = "backup-route"
    backupRoute.EntityData.BundleName = "cisco_ios_xr"
    backupRoute.EntityData.ParentYangName = "backup-routes"
    backupRoute.EntityData.SegmentPath = "backup-route"
    backupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoute.EntityData.Children = types.NewOrderedMap()
    backupRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &backupRoute.RouteInfo})
    backupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range backupRoute.RoutePath {
        backupRoute.EntityData.Children.Append(types.GetSegmentPath(backupRoute.RoutePath[i]), types.YChild{"RoutePath", backupRoute.RoutePath[i]})
    }
    backupRoute.EntityData.Leafs = types.NewOrderedMap()
    backupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupRoute.Prefix})
    backupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupRoute.PrefixLength})
    backupRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", backupRoute.RoutePrefix})
    backupRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", backupRoute.RoutePrefixLength})
    backupRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", backupRoute.RouteMetric})
    backupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", backupRoute.RouteType})
    backupRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", backupRoute.RouteConnected})

    backupRoute.EntityData.YListKeys = []string {}

    return &(backupRoute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "backup-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable
// OSPF Route Table including multicast-intact
// routes
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An OSPF route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route.
    Route []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route
}

func (multicastIntactRouteTable *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable) GetEntityData() *types.CommonEntityData {
    multicastIntactRouteTable.EntityData.YFilter = multicastIntactRouteTable.YFilter
    multicastIntactRouteTable.EntityData.YangName = "multicast-intact-route-table"
    multicastIntactRouteTable.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactRouteTable.EntityData.ParentYangName = "route-information"
    multicastIntactRouteTable.EntityData.SegmentPath = "multicast-intact-route-table"
    multicastIntactRouteTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactRouteTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactRouteTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactRouteTable.EntityData.Children = types.NewOrderedMap()
    multicastIntactRouteTable.EntityData.Children.Append("route", types.YChild{"Route", nil})
    for i := range multicastIntactRouteTable.Route {
        multicastIntactRouteTable.EntityData.Children.Append(types.GetSegmentPath(multicastIntactRouteTable.Route[i]), types.YChild{"Route", multicastIntactRouteTable.Route[i]})
    }
    multicastIntactRouteTable.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactRouteTable.EntityData.YListKeys = []string {}

    return &(multicastIntactRouteTable.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route
// An OSPF route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath
}

func (route *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "multicast-intact-route-table"
    route.EntityData.SegmentPath = "route"
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &route.RouteInfo})
    route.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range route.RoutePath {
        route.EntityData.Children.Append(types.GetSegmentPath(route.RoutePath[i]), types.YChild{"RoutePath", route.RoutePath[i]})
    }
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", route.Prefix})
    route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", route.PrefixLength})
    route.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", route.RoutePrefix})
    route.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", route.RoutePrefixLength})
    route.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", route.RouteMetric})
    route.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", route.RouteType})
    route.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", route.RouteConnected})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes
// OSPF Route Table Including Multicast intact
// Backup Paths
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including multicast backup paths. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute.
    MulticastIntactBackupRoute []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute
}

func (multicastIntactBackupRoutes *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRoutes.EntityData.YFilter = multicastIntactBackupRoutes.YFilter
    multicastIntactBackupRoutes.EntityData.YangName = "multicast-intact-backup-routes"
    multicastIntactBackupRoutes.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRoutes.EntityData.ParentYangName = "route-information"
    multicastIntactBackupRoutes.EntityData.SegmentPath = "multicast-intact-backup-routes"
    multicastIntactBackupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRoutes.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRoutes.EntityData.Children.Append("multicast-intact-backup-route", types.YChild{"MulticastIntactBackupRoute", nil})
    for i := range multicastIntactBackupRoutes.MulticastIntactBackupRoute {
        multicastIntactBackupRoutes.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRoutes.MulticastIntactBackupRoute[i]), types.YChild{"MulticastIntactBackupRoute", multicastIntactBackupRoutes.MulticastIntactBackupRoute[i]})
    }
    multicastIntactBackupRoutes.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactBackupRoutes.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRoutes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute
// OSPF route including multicast backup paths
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath
}

func (multicastIntactBackupRoute *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRoute.EntityData.YFilter = multicastIntactBackupRoute.YFilter
    multicastIntactBackupRoute.EntityData.YangName = "multicast-intact-backup-route"
    multicastIntactBackupRoute.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRoute.EntityData.ParentYangName = "multicast-intact-backup-routes"
    multicastIntactBackupRoute.EntityData.SegmentPath = "multicast-intact-backup-route"
    multicastIntactBackupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRoute.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &multicastIntactBackupRoute.RouteInfo})
    multicastIntactBackupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range multicastIntactBackupRoute.RoutePath {
        multicastIntactBackupRoute.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRoute.RoutePath[i]), types.YChild{"RoutePath", multicastIntactBackupRoute.RoutePath[i]})
    }
    multicastIntactBackupRoute.EntityData.Leafs = types.NewOrderedMap()
    multicastIntactBackupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", multicastIntactBackupRoute.Prefix})
    multicastIntactBackupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", multicastIntactBackupRoute.PrefixLength})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", multicastIntactBackupRoute.RoutePrefix})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", multicastIntactBackupRoute.RoutePrefixLength})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", multicastIntactBackupRoute.RouteMetric})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", multicastIntactBackupRoute.RouteType})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", multicastIntactBackupRoute.RouteConnected})

    multicastIntactBackupRoute.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRoute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "multicast-intact-backup-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "multicast-intact-backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation
// OSPF route summary statistics
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB failure count. The type is interface{} with range: 0..4294967295.
    Failures interface{}

    // Last failed address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FailureAddress interface{}

    // Last time failed.
    FailureTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_FailureTime

    // OSPF route summary Information.
    Common Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_Common
}

func (summaryInformation *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation) GetEntityData() *types.CommonEntityData {
    summaryInformation.EntityData.YFilter = summaryInformation.YFilter
    summaryInformation.EntityData.YangName = "summary-information"
    summaryInformation.EntityData.BundleName = "cisco_ios_xr"
    summaryInformation.EntityData.ParentYangName = "route-information"
    summaryInformation.EntityData.SegmentPath = "summary-information"
    summaryInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryInformation.EntityData.Children = types.NewOrderedMap()
    summaryInformation.EntityData.Children.Append("failure-time", types.YChild{"FailureTime", &summaryInformation.FailureTime})
    summaryInformation.EntityData.Children.Append("common", types.YChild{"Common", &summaryInformation.Common})
    summaryInformation.EntityData.Leafs = types.NewOrderedMap()
    summaryInformation.EntityData.Leafs.Append("failures", types.YLeaf{"Failures", summaryInformation.Failures})
    summaryInformation.EntityData.Leafs.Append("failure-address", types.YLeaf{"FailureAddress", summaryInformation.FailureAddress})

    summaryInformation.EntityData.YListKeys = []string {}

    return &(summaryInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_FailureTime
// Last time failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_FailureTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (failureTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_FailureTime) GetEntityData() *types.CommonEntityData {
    failureTime.EntityData.YFilter = failureTime.YFilter
    failureTime.EntityData.YangName = "failure-time"
    failureTime.EntityData.BundleName = "cisco_ios_xr"
    failureTime.EntityData.ParentYangName = "summary-information"
    failureTime.EntityData.SegmentPath = "failure-time"
    failureTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    failureTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    failureTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    failureTime.EntityData.Children = types.NewOrderedMap()
    failureTime.EntityData.Leafs = types.NewOrderedMap()
    failureTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", failureTime.Second})
    failureTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", failureTime.Nanosecond})

    failureTime.EntityData.YListKeys = []string {}

    return &(failureTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_Common
// OSPF route summary Information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // External type 1 count. The type is interface{} with range: 0..4294967295.
    ExternalType1s interface{}

    // External type 2 count. The type is interface{} with range: 0..4294967295.
    ExternalType2s interface{}

    // External NSSA type 1 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType1s interface{}

    // External NSSA type 2 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType2s interface{}

    // Inter-area count. The type is interface{} with range: 0..4294967295.
    InterAreas interface{}

    // Intra-area count. The type is interface{} with range: 0..4294967295.
    IntraAreas interface{}

    // Total count. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (common *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_SummaryInformation_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary-information"
    common.EntityData.SegmentPath = "common"
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("external-type1s", types.YLeaf{"ExternalType1s", common.ExternalType1s})
    common.EntityData.Leafs.Append("external-type2s", types.YLeaf{"ExternalType2s", common.ExternalType2s})
    common.EntityData.Leafs.Append("external-nssa-type1s", types.YLeaf{"ExternalNssaType1s", common.ExternalNssaType1s})
    common.EntityData.Leafs.Append("external-nssa-type2s", types.YLeaf{"ExternalNssaType2s", common.ExternalNssaType2s})
    common.EntityData.Leafs.Append("inter-areas", types.YLeaf{"InterAreas", common.InterAreas})
    common.EntityData.Leafs.Append("intra-areas", types.YLeaf{"IntraAreas", common.IntraAreas})
    common.EntityData.Leafs.Append("total", types.YLeaf{"Total", common.Total})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes
// OSPF Connected Route Table
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connected route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute.
    ConnectedRoute []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute
}

func (connectedRoutes *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes) GetEntityData() *types.CommonEntityData {
    connectedRoutes.EntityData.YFilter = connectedRoutes.YFilter
    connectedRoutes.EntityData.YangName = "connected-routes"
    connectedRoutes.EntityData.BundleName = "cisco_ios_xr"
    connectedRoutes.EntityData.ParentYangName = "route-information"
    connectedRoutes.EntityData.SegmentPath = "connected-routes"
    connectedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoutes.EntityData.Children = types.NewOrderedMap()
    connectedRoutes.EntityData.Children.Append("connected-route", types.YChild{"ConnectedRoute", nil})
    for i := range connectedRoutes.ConnectedRoute {
        connectedRoutes.EntityData.Children.Append(types.GetSegmentPath(connectedRoutes.ConnectedRoute[i]), types.YChild{"ConnectedRoute", connectedRoutes.ConnectedRoute[i]})
    }
    connectedRoutes.EntityData.Leafs = types.NewOrderedMap()

    connectedRoutes.EntityData.YListKeys = []string {}

    return &(connectedRoutes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute
// Connected route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath
}

func (connectedRoute *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute) GetEntityData() *types.CommonEntityData {
    connectedRoute.EntityData.YFilter = connectedRoute.YFilter
    connectedRoute.EntityData.YangName = "connected-route"
    connectedRoute.EntityData.BundleName = "cisco_ios_xr"
    connectedRoute.EntityData.ParentYangName = "connected-routes"
    connectedRoute.EntityData.SegmentPath = "connected-route"
    connectedRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoute.EntityData.Children = types.NewOrderedMap()
    connectedRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &connectedRoute.RouteInfo})
    connectedRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range connectedRoute.RoutePath {
        connectedRoute.EntityData.Children.Append(types.GetSegmentPath(connectedRoute.RoutePath[i]), types.YChild{"RoutePath", connectedRoute.RoutePath[i]})
    }
    connectedRoute.EntityData.Leafs = types.NewOrderedMap()
    connectedRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", connectedRoute.Prefix})
    connectedRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", connectedRoute.PrefixLength})
    connectedRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", connectedRoute.RoutePrefix})
    connectedRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", connectedRoute.RoutePrefixLength})
    connectedRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", connectedRoute.RouteMetric})
    connectedRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", connectedRoute.RouteType})
    connectedRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", connectedRoute.RouteConnected})

    connectedRoute.EntityData.YListKeys = []string {}

    return &(connectedRoute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "connected-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "connected-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes
// OSPF Local Route Table
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute.
    LocalRoute []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute
}

func (localRoutes *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes) GetEntityData() *types.CommonEntityData {
    localRoutes.EntityData.YFilter = localRoutes.YFilter
    localRoutes.EntityData.YangName = "local-routes"
    localRoutes.EntityData.BundleName = "cisco_ios_xr"
    localRoutes.EntityData.ParentYangName = "route-information"
    localRoutes.EntityData.SegmentPath = "local-routes"
    localRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRoutes.EntityData.Children = types.NewOrderedMap()
    localRoutes.EntityData.Children.Append("local-route", types.YChild{"LocalRoute", nil})
    for i := range localRoutes.LocalRoute {
        localRoutes.EntityData.Children.Append(types.GetSegmentPath(localRoutes.LocalRoute[i]), types.YChild{"LocalRoute", localRoutes.LocalRoute[i]})
    }
    localRoutes.EntityData.Leafs = types.NewOrderedMap()

    localRoutes.EntityData.YListKeys = []string {}

    return &(localRoutes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute
// Local route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath
}

func (localRoute *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute) GetEntityData() *types.CommonEntityData {
    localRoute.EntityData.YFilter = localRoute.YFilter
    localRoute.EntityData.YangName = "local-route"
    localRoute.EntityData.BundleName = "cisco_ios_xr"
    localRoute.EntityData.ParentYangName = "local-routes"
    localRoute.EntityData.SegmentPath = "local-route"
    localRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRoute.EntityData.Children = types.NewOrderedMap()
    localRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &localRoute.RouteInfo})
    localRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range localRoute.RoutePath {
        localRoute.EntityData.Children.Append(types.GetSegmentPath(localRoute.RoutePath[i]), types.YChild{"RoutePath", localRoute.RoutePath[i]})
    }
    localRoute.EntityData.Leafs = types.NewOrderedMap()
    localRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", localRoute.Prefix})
    localRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", localRoute.PrefixLength})
    localRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", localRoute.RoutePrefix})
    localRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", localRoute.RoutePrefixLength})
    localRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", localRoute.RouteMetric})
    localRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", localRoute.RouteType})
    localRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", localRoute.RouteConnected})

    localRoute.EntityData.YListKeys = []string {}

    return &(localRoute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "local-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "local-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas
// OSPF Area Route Table
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF Area Route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea.
    RouteArea []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea
}

func (routeAreas *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas) GetEntityData() *types.CommonEntityData {
    routeAreas.EntityData.YFilter = routeAreas.YFilter
    routeAreas.EntityData.YangName = "route-areas"
    routeAreas.EntityData.BundleName = "cisco_ios_xr"
    routeAreas.EntityData.ParentYangName = "route-information"
    routeAreas.EntityData.SegmentPath = "route-areas"
    routeAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeAreas.EntityData.Children = types.NewOrderedMap()
    routeAreas.EntityData.Children.Append("route-area", types.YChild{"RouteArea", nil})
    for i := range routeAreas.RouteArea {
        routeAreas.EntityData.Children.Append(types.GetSegmentPath(routeAreas.RouteArea[i]), types.YChild{"RouteArea", routeAreas.RouteArea[i]})
    }
    routeAreas.EntityData.Leafs = types.NewOrderedMap()

    routeAreas.EntityData.YListKeys = []string {}

    return &(routeAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea
// OSPF Area Route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPF Route Table Including Multicast Intace Backup Paths in an area.
    MulticastIntactBackupRouteAreas Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas

    // OSPF Connected Route Table in an area.
    ConnectedRouteAreas Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas

    // OSPF Route Table Including Backup Paths in an area.
    BackupRouteAreas Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas

    // OSPF Area Route Entry.
    RouteAreaInformations Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations

    // OSPF Area multicast-intact included route entry.
    MulticastIntactRouteAreas Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas

    // OSPF route summary statistics.
    SummaryAreaInformation Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation

    // OSPF Local Route Table.
    LocalRouteAreas Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas
}

func (routeArea *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea) GetEntityData() *types.CommonEntityData {
    routeArea.EntityData.YFilter = routeArea.YFilter
    routeArea.EntityData.YangName = "route-area"
    routeArea.EntityData.BundleName = "cisco_ios_xr"
    routeArea.EntityData.ParentYangName = "route-areas"
    routeArea.EntityData.SegmentPath = "route-area" + types.AddKeyToken(routeArea.AreaId, "area-id")
    routeArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeArea.EntityData.Children = types.NewOrderedMap()
    routeArea.EntityData.Children.Append("multicast-intact-backup-route-areas", types.YChild{"MulticastIntactBackupRouteAreas", &routeArea.MulticastIntactBackupRouteAreas})
    routeArea.EntityData.Children.Append("connected-route-areas", types.YChild{"ConnectedRouteAreas", &routeArea.ConnectedRouteAreas})
    routeArea.EntityData.Children.Append("backup-route-areas", types.YChild{"BackupRouteAreas", &routeArea.BackupRouteAreas})
    routeArea.EntityData.Children.Append("route-area-informations", types.YChild{"RouteAreaInformations", &routeArea.RouteAreaInformations})
    routeArea.EntityData.Children.Append("multicast-intact-route-areas", types.YChild{"MulticastIntactRouteAreas", &routeArea.MulticastIntactRouteAreas})
    routeArea.EntityData.Children.Append("summary-area-information", types.YChild{"SummaryAreaInformation", &routeArea.SummaryAreaInformation})
    routeArea.EntityData.Children.Append("local-route-areas", types.YChild{"LocalRouteAreas", &routeArea.LocalRouteAreas})
    routeArea.EntityData.Leafs = types.NewOrderedMap()
    routeArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routeArea.AreaId})

    routeArea.EntityData.YListKeys = []string {"AreaId"}

    return &(routeArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas
// OSPF Route Table Including Multicast Intace
// Backup Paths in an area
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including Multicast intact backup paths. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea.
    MulticastIntactBackupRouteArea []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea
}

func (multicastIntactBackupRouteAreas *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRouteAreas.EntityData.YFilter = multicastIntactBackupRouteAreas.YFilter
    multicastIntactBackupRouteAreas.EntityData.YangName = "multicast-intact-backup-route-areas"
    multicastIntactBackupRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRouteAreas.EntityData.ParentYangName = "route-area"
    multicastIntactBackupRouteAreas.EntityData.SegmentPath = "multicast-intact-backup-route-areas"
    multicastIntactBackupRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRouteAreas.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRouteAreas.EntityData.Children.Append("multicast-intact-backup-route-area", types.YChild{"MulticastIntactBackupRouteArea", nil})
    for i := range multicastIntactBackupRouteAreas.MulticastIntactBackupRouteArea {
        multicastIntactBackupRouteAreas.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRouteAreas.MulticastIntactBackupRouteArea[i]), types.YChild{"MulticastIntactBackupRouteArea", multicastIntactBackupRouteAreas.MulticastIntactBackupRouteArea[i]})
    }
    multicastIntactBackupRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactBackupRouteAreas.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRouteAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea
// OSPF route including Multicast intact backup
// paths
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath
}

func (multicastIntactBackupRouteArea *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRouteArea.EntityData.YFilter = multicastIntactBackupRouteArea.YFilter
    multicastIntactBackupRouteArea.EntityData.YangName = "multicast-intact-backup-route-area"
    multicastIntactBackupRouteArea.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRouteArea.EntityData.ParentYangName = "multicast-intact-backup-route-areas"
    multicastIntactBackupRouteArea.EntityData.SegmentPath = "multicast-intact-backup-route-area"
    multicastIntactBackupRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRouteArea.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &multicastIntactBackupRouteArea.RouteInfo})
    multicastIntactBackupRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range multicastIntactBackupRouteArea.RoutePath {
        multicastIntactBackupRouteArea.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRouteArea.RoutePath[i]), types.YChild{"RoutePath", multicastIntactBackupRouteArea.RoutePath[i]})
    }
    multicastIntactBackupRouteArea.EntityData.Leafs = types.NewOrderedMap()
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", multicastIntactBackupRouteArea.Prefix})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", multicastIntactBackupRouteArea.PrefixLength})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", multicastIntactBackupRouteArea.RoutePrefix})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", multicastIntactBackupRouteArea.RoutePrefixLength})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", multicastIntactBackupRouteArea.RouteMetric})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", multicastIntactBackupRouteArea.RouteType})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", multicastIntactBackupRouteArea.RouteConnected})

    multicastIntactBackupRouteArea.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRouteArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "multicast-intact-backup-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "multicast-intact-backup-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas
// OSPF Connected Route Table in an area
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connected route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea.
    ConnectedRouteArea []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea
}

func (connectedRouteAreas *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas) GetEntityData() *types.CommonEntityData {
    connectedRouteAreas.EntityData.YFilter = connectedRouteAreas.YFilter
    connectedRouteAreas.EntityData.YangName = "connected-route-areas"
    connectedRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    connectedRouteAreas.EntityData.ParentYangName = "route-area"
    connectedRouteAreas.EntityData.SegmentPath = "connected-route-areas"
    connectedRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRouteAreas.EntityData.Children = types.NewOrderedMap()
    connectedRouteAreas.EntityData.Children.Append("connected-route-area", types.YChild{"ConnectedRouteArea", nil})
    for i := range connectedRouteAreas.ConnectedRouteArea {
        connectedRouteAreas.EntityData.Children.Append(types.GetSegmentPath(connectedRouteAreas.ConnectedRouteArea[i]), types.YChild{"ConnectedRouteArea", connectedRouteAreas.ConnectedRouteArea[i]})
    }
    connectedRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    connectedRouteAreas.EntityData.YListKeys = []string {}

    return &(connectedRouteAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea
// Connected route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath
}

func (connectedRouteArea *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea) GetEntityData() *types.CommonEntityData {
    connectedRouteArea.EntityData.YFilter = connectedRouteArea.YFilter
    connectedRouteArea.EntityData.YangName = "connected-route-area"
    connectedRouteArea.EntityData.BundleName = "cisco_ios_xr"
    connectedRouteArea.EntityData.ParentYangName = "connected-route-areas"
    connectedRouteArea.EntityData.SegmentPath = "connected-route-area"
    connectedRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRouteArea.EntityData.Children = types.NewOrderedMap()
    connectedRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &connectedRouteArea.RouteInfo})
    connectedRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range connectedRouteArea.RoutePath {
        connectedRouteArea.EntityData.Children.Append(types.GetSegmentPath(connectedRouteArea.RoutePath[i]), types.YChild{"RoutePath", connectedRouteArea.RoutePath[i]})
    }
    connectedRouteArea.EntityData.Leafs = types.NewOrderedMap()
    connectedRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", connectedRouteArea.Prefix})
    connectedRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", connectedRouteArea.PrefixLength})
    connectedRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", connectedRouteArea.RoutePrefix})
    connectedRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", connectedRouteArea.RoutePrefixLength})
    connectedRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", connectedRouteArea.RouteMetric})
    connectedRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", connectedRouteArea.RouteType})
    connectedRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", connectedRouteArea.RouteConnected})

    connectedRouteArea.EntityData.YListKeys = []string {}

    return &(connectedRouteArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "connected-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "connected-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas
// OSPF Route Table Including Backup Paths in an
// area
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including backup paths. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea.
    BackupRouteArea []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea
}

func (backupRouteAreas *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas) GetEntityData() *types.CommonEntityData {
    backupRouteAreas.EntityData.YFilter = backupRouteAreas.YFilter
    backupRouteAreas.EntityData.YangName = "backup-route-areas"
    backupRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    backupRouteAreas.EntityData.ParentYangName = "route-area"
    backupRouteAreas.EntityData.SegmentPath = "backup-route-areas"
    backupRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRouteAreas.EntityData.Children = types.NewOrderedMap()
    backupRouteAreas.EntityData.Children.Append("backup-route-area", types.YChild{"BackupRouteArea", nil})
    for i := range backupRouteAreas.BackupRouteArea {
        backupRouteAreas.EntityData.Children.Append(types.GetSegmentPath(backupRouteAreas.BackupRouteArea[i]), types.YChild{"BackupRouteArea", backupRouteAreas.BackupRouteArea[i]})
    }
    backupRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    backupRouteAreas.EntityData.YListKeys = []string {}

    return &(backupRouteAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea
// OSPF route including backup paths
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath
}

func (backupRouteArea *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea) GetEntityData() *types.CommonEntityData {
    backupRouteArea.EntityData.YFilter = backupRouteArea.YFilter
    backupRouteArea.EntityData.YangName = "backup-route-area"
    backupRouteArea.EntityData.BundleName = "cisco_ios_xr"
    backupRouteArea.EntityData.ParentYangName = "backup-route-areas"
    backupRouteArea.EntityData.SegmentPath = "backup-route-area"
    backupRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRouteArea.EntityData.Children = types.NewOrderedMap()
    backupRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &backupRouteArea.RouteInfo})
    backupRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range backupRouteArea.RoutePath {
        backupRouteArea.EntityData.Children.Append(types.GetSegmentPath(backupRouteArea.RoutePath[i]), types.YChild{"RoutePath", backupRouteArea.RoutePath[i]})
    }
    backupRouteArea.EntityData.Leafs = types.NewOrderedMap()
    backupRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupRouteArea.Prefix})
    backupRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupRouteArea.PrefixLength})
    backupRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", backupRouteArea.RoutePrefix})
    backupRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", backupRouteArea.RoutePrefixLength})
    backupRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", backupRouteArea.RouteMetric})
    backupRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", backupRouteArea.RouteType})
    backupRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", backupRouteArea.RouteConnected})

    backupRouteArea.EntityData.YListKeys = []string {}

    return &(backupRouteArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "backup-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "backup-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations
// OSPF Area Route Entry
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An OSPF route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation.
    RouteAreaInformation []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation
}

func (routeAreaInformations *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations) GetEntityData() *types.CommonEntityData {
    routeAreaInformations.EntityData.YFilter = routeAreaInformations.YFilter
    routeAreaInformations.EntityData.YangName = "route-area-informations"
    routeAreaInformations.EntityData.BundleName = "cisco_ios_xr"
    routeAreaInformations.EntityData.ParentYangName = "route-area"
    routeAreaInformations.EntityData.SegmentPath = "route-area-informations"
    routeAreaInformations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeAreaInformations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeAreaInformations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeAreaInformations.EntityData.Children = types.NewOrderedMap()
    routeAreaInformations.EntityData.Children.Append("route-area-information", types.YChild{"RouteAreaInformation", nil})
    for i := range routeAreaInformations.RouteAreaInformation {
        routeAreaInformations.EntityData.Children.Append(types.GetSegmentPath(routeAreaInformations.RouteAreaInformation[i]), types.YChild{"RouteAreaInformation", routeAreaInformations.RouteAreaInformation[i]})
    }
    routeAreaInformations.EntityData.Leafs = types.NewOrderedMap()

    routeAreaInformations.EntityData.YListKeys = []string {}

    return &(routeAreaInformations.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation
// An OSPF route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath
}

func (routeAreaInformation *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation) GetEntityData() *types.CommonEntityData {
    routeAreaInformation.EntityData.YFilter = routeAreaInformation.YFilter
    routeAreaInformation.EntityData.YangName = "route-area-information"
    routeAreaInformation.EntityData.BundleName = "cisco_ios_xr"
    routeAreaInformation.EntityData.ParentYangName = "route-area-informations"
    routeAreaInformation.EntityData.SegmentPath = "route-area-information"
    routeAreaInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeAreaInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeAreaInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeAreaInformation.EntityData.Children = types.NewOrderedMap()
    routeAreaInformation.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &routeAreaInformation.RouteInfo})
    routeAreaInformation.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range routeAreaInformation.RoutePath {
        routeAreaInformation.EntityData.Children.Append(types.GetSegmentPath(routeAreaInformation.RoutePath[i]), types.YChild{"RoutePath", routeAreaInformation.RoutePath[i]})
    }
    routeAreaInformation.EntityData.Leafs = types.NewOrderedMap()
    routeAreaInformation.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", routeAreaInformation.Prefix})
    routeAreaInformation.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", routeAreaInformation.PrefixLength})
    routeAreaInformation.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", routeAreaInformation.RoutePrefix})
    routeAreaInformation.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", routeAreaInformation.RoutePrefixLength})
    routeAreaInformation.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routeAreaInformation.RouteMetric})
    routeAreaInformation.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeAreaInformation.RouteType})
    routeAreaInformation.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", routeAreaInformation.RouteConnected})

    routeAreaInformation.EntityData.YListKeys = []string {}

    return &(routeAreaInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route-area-information"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route-area-information"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas
// OSPF Area multicast-intact included route
// entry
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A Muliticast OSPF route in an area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea.
    MulticastIntactRouteArea []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea
}

func (multicastIntactRouteAreas *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas) GetEntityData() *types.CommonEntityData {
    multicastIntactRouteAreas.EntityData.YFilter = multicastIntactRouteAreas.YFilter
    multicastIntactRouteAreas.EntityData.YangName = "multicast-intact-route-areas"
    multicastIntactRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactRouteAreas.EntityData.ParentYangName = "route-area"
    multicastIntactRouteAreas.EntityData.SegmentPath = "multicast-intact-route-areas"
    multicastIntactRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactRouteAreas.EntityData.Children = types.NewOrderedMap()
    multicastIntactRouteAreas.EntityData.Children.Append("multicast-intact-route-area", types.YChild{"MulticastIntactRouteArea", nil})
    for i := range multicastIntactRouteAreas.MulticastIntactRouteArea {
        multicastIntactRouteAreas.EntityData.Children.Append(types.GetSegmentPath(multicastIntactRouteAreas.MulticastIntactRouteArea[i]), types.YChild{"MulticastIntactRouteArea", multicastIntactRouteAreas.MulticastIntactRouteArea[i]})
    }
    multicastIntactRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactRouteAreas.EntityData.YListKeys = []string {}

    return &(multicastIntactRouteAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea
// A Muliticast OSPF route in an area
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath
}

func (multicastIntactRouteArea *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea) GetEntityData() *types.CommonEntityData {
    multicastIntactRouteArea.EntityData.YFilter = multicastIntactRouteArea.YFilter
    multicastIntactRouteArea.EntityData.YangName = "multicast-intact-route-area"
    multicastIntactRouteArea.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactRouteArea.EntityData.ParentYangName = "multicast-intact-route-areas"
    multicastIntactRouteArea.EntityData.SegmentPath = "multicast-intact-route-area"
    multicastIntactRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactRouteArea.EntityData.Children = types.NewOrderedMap()
    multicastIntactRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &multicastIntactRouteArea.RouteInfo})
    multicastIntactRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range multicastIntactRouteArea.RoutePath {
        multicastIntactRouteArea.EntityData.Children.Append(types.GetSegmentPath(multicastIntactRouteArea.RoutePath[i]), types.YChild{"RoutePath", multicastIntactRouteArea.RoutePath[i]})
    }
    multicastIntactRouteArea.EntityData.Leafs = types.NewOrderedMap()
    multicastIntactRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", multicastIntactRouteArea.Prefix})
    multicastIntactRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", multicastIntactRouteArea.PrefixLength})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", multicastIntactRouteArea.RoutePrefix})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", multicastIntactRouteArea.RoutePrefixLength})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", multicastIntactRouteArea.RouteMetric})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", multicastIntactRouteArea.RouteType})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", multicastIntactRouteArea.RouteConnected})

    multicastIntactRouteArea.EntityData.YListKeys = []string {}

    return &(multicastIntactRouteArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "multicast-intact-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "multicast-intact-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation
// OSPF route summary statistics
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB failure count. The type is interface{} with range: 0..4294967295.
    Failures interface{}

    // Last failed address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FailureAddress interface{}

    // Last time failed.
    FailureTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime

    // OSPF route summary Information.
    Common Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common
}

func (summaryAreaInformation *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation) GetEntityData() *types.CommonEntityData {
    summaryAreaInformation.EntityData.YFilter = summaryAreaInformation.YFilter
    summaryAreaInformation.EntityData.YangName = "summary-area-information"
    summaryAreaInformation.EntityData.BundleName = "cisco_ios_xr"
    summaryAreaInformation.EntityData.ParentYangName = "route-area"
    summaryAreaInformation.EntityData.SegmentPath = "summary-area-information"
    summaryAreaInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryAreaInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryAreaInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryAreaInformation.EntityData.Children = types.NewOrderedMap()
    summaryAreaInformation.EntityData.Children.Append("failure-time", types.YChild{"FailureTime", &summaryAreaInformation.FailureTime})
    summaryAreaInformation.EntityData.Children.Append("common", types.YChild{"Common", &summaryAreaInformation.Common})
    summaryAreaInformation.EntityData.Leafs = types.NewOrderedMap()
    summaryAreaInformation.EntityData.Leafs.Append("failures", types.YLeaf{"Failures", summaryAreaInformation.Failures})
    summaryAreaInformation.EntityData.Leafs.Append("failure-address", types.YLeaf{"FailureAddress", summaryAreaInformation.FailureAddress})

    summaryAreaInformation.EntityData.YListKeys = []string {}

    return &(summaryAreaInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime
// Last time failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (failureTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime) GetEntityData() *types.CommonEntityData {
    failureTime.EntityData.YFilter = failureTime.YFilter
    failureTime.EntityData.YangName = "failure-time"
    failureTime.EntityData.BundleName = "cisco_ios_xr"
    failureTime.EntityData.ParentYangName = "summary-area-information"
    failureTime.EntityData.SegmentPath = "failure-time"
    failureTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    failureTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    failureTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    failureTime.EntityData.Children = types.NewOrderedMap()
    failureTime.EntityData.Leafs = types.NewOrderedMap()
    failureTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", failureTime.Second})
    failureTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", failureTime.Nanosecond})

    failureTime.EntityData.YListKeys = []string {}

    return &(failureTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common
// OSPF route summary Information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // External type 1 count. The type is interface{} with range: 0..4294967295.
    ExternalType1s interface{}

    // External type 2 count. The type is interface{} with range: 0..4294967295.
    ExternalType2s interface{}

    // External NSSA type 1 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType1s interface{}

    // External NSSA type 2 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType2s interface{}

    // Inter-area count. The type is interface{} with range: 0..4294967295.
    InterAreas interface{}

    // Intra-area count. The type is interface{} with range: 0..4294967295.
    IntraAreas interface{}

    // Total count. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (common *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary-area-information"
    common.EntityData.SegmentPath = "common"
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("external-type1s", types.YLeaf{"ExternalType1s", common.ExternalType1s})
    common.EntityData.Leafs.Append("external-type2s", types.YLeaf{"ExternalType2s", common.ExternalType2s})
    common.EntityData.Leafs.Append("external-nssa-type1s", types.YLeaf{"ExternalNssaType1s", common.ExternalNssaType1s})
    common.EntityData.Leafs.Append("external-nssa-type2s", types.YLeaf{"ExternalNssaType2s", common.ExternalNssaType2s})
    common.EntityData.Leafs.Append("inter-areas", types.YLeaf{"InterAreas", common.InterAreas})
    common.EntityData.Leafs.Append("intra-areas", types.YLeaf{"IntraAreas", common.IntraAreas})
    common.EntityData.Leafs.Append("total", types.YLeaf{"Total", common.Total})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas
// OSPF Local Route Table
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea.
    LocalRouteArea []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea
}

func (localRouteAreas *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas) GetEntityData() *types.CommonEntityData {
    localRouteAreas.EntityData.YFilter = localRouteAreas.YFilter
    localRouteAreas.EntityData.YangName = "local-route-areas"
    localRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    localRouteAreas.EntityData.ParentYangName = "route-area"
    localRouteAreas.EntityData.SegmentPath = "local-route-areas"
    localRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRouteAreas.EntityData.Children = types.NewOrderedMap()
    localRouteAreas.EntityData.Children.Append("local-route-area", types.YChild{"LocalRouteArea", nil})
    for i := range localRouteAreas.LocalRouteArea {
        localRouteAreas.EntityData.Children.Append(types.GetSegmentPath(localRouteAreas.LocalRouteArea[i]), types.YChild{"LocalRouteArea", localRouteAreas.LocalRouteArea[i]})
    }
    localRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    localRouteAreas.EntityData.YListKeys = []string {}

    return &(localRouteAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea
// Local route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath
}

func (localRouteArea *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea) GetEntityData() *types.CommonEntityData {
    localRouteArea.EntityData.YFilter = localRouteArea.YFilter
    localRouteArea.EntityData.YangName = "local-route-area"
    localRouteArea.EntityData.BundleName = "cisco_ios_xr"
    localRouteArea.EntityData.ParentYangName = "local-route-areas"
    localRouteArea.EntityData.SegmentPath = "local-route-area"
    localRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRouteArea.EntityData.Children = types.NewOrderedMap()
    localRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &localRouteArea.RouteInfo})
    localRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range localRouteArea.RoutePath {
        localRouteArea.EntityData.Children.Append(types.GetSegmentPath(localRouteArea.RoutePath[i]), types.YChild{"RoutePath", localRouteArea.RoutePath[i]})
    }
    localRouteArea.EntityData.Leafs = types.NewOrderedMap()
    localRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", localRouteArea.Prefix})
    localRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", localRouteArea.PrefixLength})
    localRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", localRouteArea.RoutePrefix})
    localRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", localRouteArea.RoutePrefixLength})
    localRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", localRouteArea.RouteMetric})
    localRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", localRouteArea.RouteType})
    localRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", localRouteArea.RouteConnected})

    localRouteArea.EntityData.YListKeys = []string {}

    return &(localRouteArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "local-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "local-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable
// OSPF Route Table
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An OSPF route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route.
    Route []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route
}

func (routeTable *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable) GetEntityData() *types.CommonEntityData {
    routeTable.EntityData.YFilter = routeTable.YFilter
    routeTable.EntityData.YangName = "route-table"
    routeTable.EntityData.BundleName = "cisco_ios_xr"
    routeTable.EntityData.ParentYangName = "route-information"
    routeTable.EntityData.SegmentPath = "route-table"
    routeTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTable.EntityData.Children = types.NewOrderedMap()
    routeTable.EntityData.Children.Append("route", types.YChild{"Route", nil})
    for i := range routeTable.Route {
        routeTable.EntityData.Children.Append(types.GetSegmentPath(routeTable.Route[i]), types.YChild{"Route", routeTable.Route[i]})
    }
    routeTable.EntityData.Leafs = types.NewOrderedMap()

    routeTable.EntityData.YListKeys = []string {}

    return &(routeTable.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route
// An OSPF route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath
}

func (route *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "route-table"
    route.EntityData.SegmentPath = "route"
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &route.RouteInfo})
    route.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range route.RoutePath {
        route.EntityData.Children.Append(types.GetSegmentPath(route.RoutePath[i]), types.YChild{"RoutePath", route.RoutePath[i]})
    }
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", route.Prefix})
    route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", route.PrefixLength})
    route.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", route.RoutePrefix})
    route.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", route.RoutePrefixLength})
    route.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", route.RouteMetric})
    route.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", route.RouteType})
    route.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", route.RouteConnected})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes
// OSPF External Route Table
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF external route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute.
    ExternalRoute []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute
}

func (externalRoutes *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes) GetEntityData() *types.CommonEntityData {
    externalRoutes.EntityData.YFilter = externalRoutes.YFilter
    externalRoutes.EntityData.YangName = "external-routes"
    externalRoutes.EntityData.BundleName = "cisco_ios_xr"
    externalRoutes.EntityData.ParentYangName = "route-information"
    externalRoutes.EntityData.SegmentPath = "external-routes"
    externalRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoutes.EntityData.Children = types.NewOrderedMap()
    externalRoutes.EntityData.Children.Append("external-route", types.YChild{"ExternalRoute", nil})
    for i := range externalRoutes.ExternalRoute {
        externalRoutes.EntityData.Children.Append(types.GetSegmentPath(externalRoutes.ExternalRoute[i]), types.YChild{"ExternalRoute", externalRoutes.ExternalRoute[i]})
    }
    externalRoutes.EntityData.Leafs = types.NewOrderedMap()

    externalRoutes.EntityData.YListKeys = []string {}

    return &(externalRoutes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute
// OSPF external route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route information.
    RouteInformation Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation

    // Name of protocol from which the external route was redistributed.
    ProtocolName Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName

    // Extended communities in the route.
    RouteExtendedCommunity Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
}

func (externalRoute *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute) GetEntityData() *types.CommonEntityData {
    externalRoute.EntityData.YFilter = externalRoute.YFilter
    externalRoute.EntityData.YangName = "external-route"
    externalRoute.EntityData.BundleName = "cisco_ios_xr"
    externalRoute.EntityData.ParentYangName = "external-routes"
    externalRoute.EntityData.SegmentPath = "external-route"
    externalRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoute.EntityData.Children = types.NewOrderedMap()
    externalRoute.EntityData.Children.Append("route-information", types.YChild{"RouteInformation", &externalRoute.RouteInformation})
    externalRoute.EntityData.Children.Append("protocol-name", types.YChild{"ProtocolName", &externalRoute.ProtocolName})
    externalRoute.EntityData.Children.Append("route-extended-community", types.YChild{"RouteExtendedCommunity", &externalRoute.RouteExtendedCommunity})
    externalRoute.EntityData.Leafs = types.NewOrderedMap()
    externalRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalRoute.Prefix})
    externalRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalRoute.PrefixLength})

    externalRoute.EntityData.YListKeys = []string {}

    return &(externalRoute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath.
    RoutePath []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath
}

func (routeInformation *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation) GetEntityData() *types.CommonEntityData {
    routeInformation.EntityData.YFilter = routeInformation.YFilter
    routeInformation.EntityData.YangName = "route-information"
    routeInformation.EntityData.BundleName = "cisco_ios_xr"
    routeInformation.EntityData.ParentYangName = "external-route"
    routeInformation.EntityData.SegmentPath = "route-information"
    routeInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInformation.EntityData.Children = types.NewOrderedMap()
    routeInformation.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &routeInformation.RouteInfo})
    routeInformation.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range routeInformation.RoutePath {
        routeInformation.EntityData.Children.Append(types.GetSegmentPath(routeInformation.RoutePath[i]), types.YChild{"RoutePath", routeInformation.RoutePath[i]})
    }
    routeInformation.EntityData.Leafs = types.NewOrderedMap()
    routeInformation.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", routeInformation.RoutePrefix})
    routeInformation.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", routeInformation.RoutePrefixLength})
    routeInformation.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routeInformation.RouteMetric})
    routeInformation.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeInformation.RouteType})
    routeInformation.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", routeInformation.RouteConnected})

    routeInformation.EntityData.YListKeys = []string {}

    return &(routeInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo
// Route information
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route-information"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath
// List of paths to this route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route-information"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName
// Name of protocol from which the external route
// was redistributed
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ProtocolType. The type is RedistProtocol.
    ProtocolType interface{}

    // ISIS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // BGP Autonomous System Number. The type is string.
    BgpAsNumber interface{}

    // Autonomous System Number. The type is string.
    EigrpAsNumber interface{}

    // Connected instance name. The type is string.
    ConnectedInstance interface{}
}

func (protocolName *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName) GetEntityData() *types.CommonEntityData {
    protocolName.EntityData.YFilter = protocolName.YFilter
    protocolName.EntityData.YangName = "protocol-name"
    protocolName.EntityData.BundleName = "cisco_ios_xr"
    protocolName.EntityData.ParentYangName = "external-route"
    protocolName.EntityData.SegmentPath = "protocol-name"
    protocolName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolName.EntityData.Children = types.NewOrderedMap()
    protocolName.EntityData.Leafs = types.NewOrderedMap()
    protocolName.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", protocolName.ProtocolType})
    protocolName.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", protocolName.IsisInstanceId})
    protocolName.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", protocolName.OspfProcessId})
    protocolName.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", protocolName.BgpAsNumber})
    protocolName.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", protocolName.EigrpAsNumber})
    protocolName.EntityData.Leafs.Append("connected-instance", types.YLeaf{"ConnectedInstance", protocolName.ConnectedInstance})

    protocolName.EntityData.YListKeys = []string {}

    return &(protocolName.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
// Extended communities in the route
type Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunityDomainIdValue interface{}

    // Domain ID type. The type is interface{} with range: 0..65535.
    ExtendedCommunitylDomainIdType interface{}

    // Area id. The type is interface{} with range: 0..4294967295.
    ExtendedCommunityAreaId interface{}

    // Router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedCommunityRouterId interface{}

    // Route type. The type is interface{} with range: 0..255.
    ExtendedCommunityRouteType interface{}

    // Route Options. The type is interface{} with range: 0..255.
    ExtendedCommunityOptions interface{}
}

func (routeExtendedCommunity *Ospf_Processes_Process_Vrfs_Vrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetEntityData() *types.CommonEntityData {
    routeExtendedCommunity.EntityData.YFilter = routeExtendedCommunity.YFilter
    routeExtendedCommunity.EntityData.YangName = "route-extended-community"
    routeExtendedCommunity.EntityData.BundleName = "cisco_ios_xr"
    routeExtendedCommunity.EntityData.ParentYangName = "external-route"
    routeExtendedCommunity.EntityData.SegmentPath = "route-extended-community"
    routeExtendedCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeExtendedCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeExtendedCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeExtendedCommunity.EntityData.Children = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-domain-id-value", types.YLeaf{"ExtendedCommunityDomainIdValue", routeExtendedCommunity.ExtendedCommunityDomainIdValue})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-communityl-domain-id-type", types.YLeaf{"ExtendedCommunitylDomainIdType", routeExtendedCommunity.ExtendedCommunitylDomainIdType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-area-id", types.YLeaf{"ExtendedCommunityAreaId", routeExtendedCommunity.ExtendedCommunityAreaId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-router-id", types.YLeaf{"ExtendedCommunityRouterId", routeExtendedCommunity.ExtendedCommunityRouterId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-route-type", types.YLeaf{"ExtendedCommunityRouteType", routeExtendedCommunity.ExtendedCommunityRouteType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-options", types.YLeaf{"ExtendedCommunityOptions", routeExtendedCommunity.ExtendedCommunityOptions})

    routeExtendedCommunity.EntityData.YListKeys = []string {}

    return &(routeExtendedCommunity.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation
// Container for OSPF Interfaces/links
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Virtual Link table.
    VirtualLinks Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks

    // OSPF Interface Brief Table.
    InterfaceBriefs Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs

    // OSPF Interface Table.
    Interfaces Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces
}

func (interfaceInformation *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation) GetEntityData() *types.CommonEntityData {
    interfaceInformation.EntityData.YFilter = interfaceInformation.YFilter
    interfaceInformation.EntityData.YangName = "interface-information"
    interfaceInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceInformation.EntityData.ParentYangName = "vrf"
    interfaceInformation.EntityData.SegmentPath = "interface-information"
    interfaceInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceInformation.EntityData.Children = types.NewOrderedMap()
    interfaceInformation.EntityData.Children.Append("virtual-links", types.YChild{"VirtualLinks", &interfaceInformation.VirtualLinks})
    interfaceInformation.EntityData.Children.Append("interface-briefs", types.YChild{"InterfaceBriefs", &interfaceInformation.InterfaceBriefs})
    interfaceInformation.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaceInformation.Interfaces})
    interfaceInformation.EntityData.Leafs = types.NewOrderedMap()

    interfaceInformation.EntityData.YListKeys = []string {}

    return &(interfaceInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks
// Virtual Link table
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information for one Virtual link. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink.
    VirtualLink []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink
}

func (virtualLinks *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks) GetEntityData() *types.CommonEntityData {
    virtualLinks.EntityData.YFilter = virtualLinks.YFilter
    virtualLinks.EntityData.YangName = "virtual-links"
    virtualLinks.EntityData.BundleName = "cisco_ios_xr"
    virtualLinks.EntityData.ParentYangName = "interface-information"
    virtualLinks.EntityData.SegmentPath = "virtual-links"
    virtualLinks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinks.EntityData.Children = types.NewOrderedMap()
    virtualLinks.EntityData.Children.Append("virtual-link", types.YChild{"VirtualLink", nil})
    for i := range virtualLinks.VirtualLink {
        virtualLinks.EntityData.Children.Append(types.GetSegmentPath(virtualLinks.VirtualLink[i]), types.YChild{"VirtualLink", virtualLinks.VirtualLink[i]})
    }
    virtualLinks.EntityData.Leafs = types.NewOrderedMap()

    virtualLinks.EntityData.YListKeys = []string {}

    return &(virtualLinks.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink
// Information for one Virtual link
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Virtual link. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VirtualLinkName interface{}

    // Virtual link name. The type is string.
    VirtualLinkNameXr interface{}

    // Neighbor on other end of this virtual link. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborId interface{}

    // OSPF interface state for the virtual link. The type is OspfInterfaceState.
    VirtualLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    VirtualLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkDcBitlessLsa interface{}

    // Transit area id. The type is string.
    TransitArea interface{}

    // Interface on which this virtual link is formed. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    VirtualLinkInterfaceName interface{}

    // Cost of the virtual link. The type is interface{} with range: 0..65535.
    VirtualLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    VirualLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloInterval interface{}

    // Hello interval (ms). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloIntervalMs interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    VirtaulLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHello interface{}

    // Time until next hello (ms). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHelloMs interface{}

    // If true, interface is passive. The type is bool.
    VirtualLinkPassive interface{}

    // Authentication type. The type is Authentication.
    VirtualLinkAuthenticationType interface{}

    // If true, MD key configured. The type is bool.
    VirtualLinkYoungestMdKey interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    VirtualLinkYoungestMdKeyId interface{}

    // Number of neighbors still using the old key (rollover in progress). The
    // type is interface{} with range: 0..4294967295.
    VirtualLinkOldMdKeyCount interface{}

    // Virtual Link Keychain ID. The type is interface{} with range:
    // 0..18446744073709551615.
    VirtualLinkKeychainId interface{}

    // If true, NSF enabled. The type is bool.
    VirtualLinkNsfEnabled interface{}

    // If true, NSF restart in progress on the virtual link. The type is bool.
    VirtualLinkNsf interface{}

    // Time in seconds since last NSF. The type is interface{} with range:
    // 0..4294967295. Units are second.
    VirtualLinkLastNsf interface{}

    // Neighbor information.
    VirtualLinkNeighbor Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor

    // List of old MD keys (if any). The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey.
    VirtualLinkMdKey []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey
}

func (virtualLink *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink) GetEntityData() *types.CommonEntityData {
    virtualLink.EntityData.YFilter = virtualLink.YFilter
    virtualLink.EntityData.YangName = "virtual-link"
    virtualLink.EntityData.BundleName = "cisco_ios_xr"
    virtualLink.EntityData.ParentYangName = "virtual-links"
    virtualLink.EntityData.SegmentPath = "virtual-link" + types.AddKeyToken(virtualLink.VirtualLinkName, "virtual-link-name")
    virtualLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLink.EntityData.Children = types.NewOrderedMap()
    virtualLink.EntityData.Children.Append("virtual-link-neighbor", types.YChild{"VirtualLinkNeighbor", &virtualLink.VirtualLinkNeighbor})
    virtualLink.EntityData.Children.Append("virtual-link-md-key", types.YChild{"VirtualLinkMdKey", nil})
    for i := range virtualLink.VirtualLinkMdKey {
        virtualLink.EntityData.Children.Append(types.GetSegmentPath(virtualLink.VirtualLinkMdKey[i]), types.YChild{"VirtualLinkMdKey", virtualLink.VirtualLinkMdKey[i]})
    }
    virtualLink.EntityData.Leafs = types.NewOrderedMap()
    virtualLink.EntityData.Leafs.Append("virtual-link-name", types.YLeaf{"VirtualLinkName", virtualLink.VirtualLinkName})
    virtualLink.EntityData.Leafs.Append("virtual-link-name-xr", types.YLeaf{"VirtualLinkNameXr", virtualLink.VirtualLinkNameXr})
    virtualLink.EntityData.Leafs.Append("virtual-link-neighbor-id", types.YLeaf{"VirtualLinkNeighborId", virtualLink.VirtualLinkNeighborId})
    virtualLink.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLink.VirtualLinkState})
    virtualLink.EntityData.Leafs.Append("virtual-link-demand-circuit", types.YLeaf{"VirtualLinkDemandCircuit", virtualLink.VirtualLinkDemandCircuit})
    virtualLink.EntityData.Leafs.Append("virtual-link-dc-bitless-lsa", types.YLeaf{"VirtualLinkDcBitlessLsa", virtualLink.VirtualLinkDcBitlessLsa})
    virtualLink.EntityData.Leafs.Append("transit-area", types.YLeaf{"TransitArea", virtualLink.TransitArea})
    virtualLink.EntityData.Leafs.Append("virtual-link-interface-name", types.YLeaf{"VirtualLinkInterfaceName", virtualLink.VirtualLinkInterfaceName})
    virtualLink.EntityData.Leafs.Append("virtual-link-cost", types.YLeaf{"VirtualLinkCost", virtualLink.VirtualLinkCost})
    virtualLink.EntityData.Leafs.Append("virual-link-transmission-delay", types.YLeaf{"VirualLinkTransmissionDelay", virtualLink.VirualLinkTransmissionDelay})
    virtualLink.EntityData.Leafs.Append("virtual-link-hello-interval", types.YLeaf{"VirtualLinkHelloInterval", virtualLink.VirtualLinkHelloInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-hello-interval-ms", types.YLeaf{"VirtualLinkHelloIntervalMs", virtualLink.VirtualLinkHelloIntervalMs})
    virtualLink.EntityData.Leafs.Append("virtual-link-dead-interval", types.YLeaf{"VirtualLinkDeadInterval", virtualLink.VirtualLinkDeadInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-wait-interval", types.YLeaf{"VirtualLinkWaitInterval", virtualLink.VirtualLinkWaitInterval})
    virtualLink.EntityData.Leafs.Append("virtaul-link-retransmission-interval", types.YLeaf{"VirtaulLinkRetransmissionInterval", virtualLink.VirtaulLinkRetransmissionInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-next-hello", types.YLeaf{"VirtualLinkNextHello", virtualLink.VirtualLinkNextHello})
    virtualLink.EntityData.Leafs.Append("virtual-link-next-hello-ms", types.YLeaf{"VirtualLinkNextHelloMs", virtualLink.VirtualLinkNextHelloMs})
    virtualLink.EntityData.Leafs.Append("virtual-link-passive", types.YLeaf{"VirtualLinkPassive", virtualLink.VirtualLinkPassive})
    virtualLink.EntityData.Leafs.Append("virtual-link-authentication-type", types.YLeaf{"VirtualLinkAuthenticationType", virtualLink.VirtualLinkAuthenticationType})
    virtualLink.EntityData.Leafs.Append("virtual-link-youngest-md-key", types.YLeaf{"VirtualLinkYoungestMdKey", virtualLink.VirtualLinkYoungestMdKey})
    virtualLink.EntityData.Leafs.Append("virtual-link-youngest-md-key-id", types.YLeaf{"VirtualLinkYoungestMdKeyId", virtualLink.VirtualLinkYoungestMdKeyId})
    virtualLink.EntityData.Leafs.Append("virtual-link-old-md-key-count", types.YLeaf{"VirtualLinkOldMdKeyCount", virtualLink.VirtualLinkOldMdKeyCount})
    virtualLink.EntityData.Leafs.Append("virtual-link-keychain-id", types.YLeaf{"VirtualLinkKeychainId", virtualLink.VirtualLinkKeychainId})
    virtualLink.EntityData.Leafs.Append("virtual-link-nsf-enabled", types.YLeaf{"VirtualLinkNsfEnabled", virtualLink.VirtualLinkNsfEnabled})
    virtualLink.EntityData.Leafs.Append("virtual-link-nsf", types.YLeaf{"VirtualLinkNsf", virtualLink.VirtualLinkNsf})
    virtualLink.EntityData.Leafs.Append("virtual-link-last-nsf", types.YLeaf{"VirtualLinkLastNsf", virtualLink.VirtualLinkLastNsf})

    virtualLink.EntityData.YListKeys = []string {"VirtualLinkName"}

    return &(virtualLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor
// Neighbor information
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    VirtualLinkSuppressHello interface{}

    // Adjacency state. The type is NeighborState.
    VirtualLinkState interface{}

    // Neighbor retransmission info.
    VirtualLinkRetransmissoin Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin
}

func (virtualLinkNeighbor *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor) GetEntityData() *types.CommonEntityData {
    virtualLinkNeighbor.EntityData.YFilter = virtualLinkNeighbor.YFilter
    virtualLinkNeighbor.EntityData.YangName = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkNeighbor.EntityData.ParentYangName = "virtual-link"
    virtualLinkNeighbor.EntityData.SegmentPath = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Children.Append("virtual-link-retransmissoin", types.YChild{"VirtualLinkRetransmissoin", &virtualLinkNeighbor.VirtualLinkRetransmissoin})
    virtualLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Leafs.Append("virtual-link-suppress-hello", types.YLeaf{"VirtualLinkSuppressHello", virtualLinkNeighbor.VirtualLinkSuppressHello})
    virtualLinkNeighbor.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLinkNeighbor.VirtualLinkState})

    virtualLinkNeighbor.EntityData.YListKeys = []string {}

    return &(virtualLinkNeighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin
// Neighbor retransmission info
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (virtualLinkRetransmissoin *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin) GetEntityData() *types.CommonEntityData {
    virtualLinkRetransmissoin.EntityData.YFilter = virtualLinkRetransmissoin.YFilter
    virtualLinkRetransmissoin.EntityData.YangName = "virtual-link-retransmissoin"
    virtualLinkRetransmissoin.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkRetransmissoin.EntityData.ParentYangName = "virtual-link-neighbor"
    virtualLinkRetransmissoin.EntityData.SegmentPath = "virtual-link-retransmissoin"
    virtualLinkRetransmissoin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkRetransmissoin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkRetransmissoin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkRetransmissoin.EntityData.Children = types.NewOrderedMap()
    virtualLinkRetransmissoin.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkRetransmissoin.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", virtualLinkRetransmissoin.DbdRetransmissionCount})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", virtualLinkRetransmissoin.DbdRetransmissionTotalCount})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", virtualLinkRetransmissoin.AreaFloodingIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", virtualLinkRetransmissoin.AsFloodIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", virtualLinkRetransmissoin.NeighborRetransmissionCount})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", virtualLinkRetransmissoin.NumberOfRetransmissions})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", virtualLinkRetransmissoin.AreaFirstFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", virtualLinkRetransmissoin.AreaFirstFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", virtualLinkRetransmissoin.AsFirstFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", virtualLinkRetransmissoin.AsFirstFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", virtualLinkRetransmissoin.AreaNextFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", virtualLinkRetransmissoin.AreaNextFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", virtualLinkRetransmissoin.AsNextFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", virtualLinkRetransmissoin.AsNextFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", virtualLinkRetransmissoin.LastRetransmissionLength})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", virtualLinkRetransmissoin.MaximumRetransmissionLength})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", virtualLinkRetransmissoin.LastRetransmissionTime})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", virtualLinkRetransmissoin.MaximumRetransmissionTime})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", virtualLinkRetransmissoin.LsaRetransmissionTimer})

    virtualLinkRetransmissoin.EntityData.YListKeys = []string {}

    return &(virtualLinkRetransmissoin.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey
// List of old MD keys (if any)
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (virtualLinkMdKey *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey) GetEntityData() *types.CommonEntityData {
    virtualLinkMdKey.EntityData.YFilter = virtualLinkMdKey.YFilter
    virtualLinkMdKey.EntityData.YangName = "virtual-link-md-key"
    virtualLinkMdKey.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkMdKey.EntityData.ParentYangName = "virtual-link"
    virtualLinkMdKey.EntityData.SegmentPath = "virtual-link-md-key"
    virtualLinkMdKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkMdKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkMdKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkMdKey.EntityData.Children = types.NewOrderedMap()
    virtualLinkMdKey.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkMdKey.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", virtualLinkMdKey.Entry})

    virtualLinkMdKey.EntityData.YListKeys = []string {}

    return &(virtualLinkMdKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs
// OSPF Interface Brief Table
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface brief information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs) GetEntityData() *types.CommonEntityData {
    interfaceBriefs.EntityData.YFilter = interfaceBriefs.YFilter
    interfaceBriefs.EntityData.YangName = "interface-briefs"
    interfaceBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefs.EntityData.ParentYangName = "interface-information"
    interfaceBriefs.EntityData.SegmentPath = "interface-briefs"
    interfaceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceBriefs.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefs.InterfaceBrief {
        interfaceBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefs.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefs.InterfaceBrief[i]})
    }
    interfaceBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefs.EntityData.YListKeys = []string {}

    return &(interfaceBriefs.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief
// OSPF interface brief information
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface in fast detect hold down state. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj
}

func (interfaceBrief *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-briefs"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range interfaceBrief.InterfaceMadj {
        interfaceBrief.EntityData.Children.Append(types.GetSegmentPath(interfaceBrief.InterfaceMadj[i]), types.YChild{"InterfaceMadj", interfaceBrief.InterfaceMadj[i]})
    }
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceBrief.InterfaceNameXr})
    interfaceBrief.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceBrief.InterfaceArea})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", interfaceBrief.InterfaceMask})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", interfaceBrief.InterfaceFastDetectHoldDown})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceBrief.InterfaceNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceBrief.InterfaceAdjNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", interfaceBrief.InterfaceisMadj})
    interfaceBrief.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", interfaceBrief.InterfaceMadjCount})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface-brief"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces
// OSPF Interface Table
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface.
    Interface []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface
}

func (interfaces *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interface-information"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface
// OSPF interface information
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is InterfaceState.
    InterfaceState interface{}

    // If true, line protocol is up. The type is bool.
    InterfaceLineState interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface SID. The type is interface{} with range: 0..4294967295.
    InterfaceSid interface{}

    // SID PHP Off. The type is bool.
    InterfaceSidPhpOff interface{}

    // SID N-Flag Clear. The type is bool.
    InterfaceSidNFlagClear interface{}

    // Interface Strict-SPF SID. The type is interface{} with range:
    // 0..4294967295.
    InterfaceStrictSpfSid interface{}

    // Strict-SPF SID PHP Off. The type is bool.
    InterfaceStrictSpfSidPhpOff interface{}

    // Strict-SPF SID N-Flag Clear. The type is bool.
    InterfaceStrictSpfSidNFlagClear interface{}

    // Interface Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Interface_.
    NetworkType interface{}

    // IP MTU. The type is interface{} with range: 0..65535.
    IpMtu interface{}

    // Maximum Packet Size. The type is interface{} with range: 0..65535.
    MaximumPacketSize interface{}

    // Interface tunnel flags. The type is interface{} with range: 0..4294967295.
    InterfaceTunnelFlags interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface bandwidth. The type is interface{} with range: 0..4294967295.
    InterfaceBandwidth interface{}

    // If true, cost fallback is configured. The type is bool.
    CfgCostFallback interface{}

    // Interface fallback cost. The type is interface{} with range: 0..65535.
    InterfaceCostFallback interface{}

    // If true, cost fallback is active. The type is bool.
    CostFallbackActive interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, sync igp shortcuts. The type is bool.
    ConfiguredLdpSyncIgpShortcuts interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // If true, configured as demand circuit. The type is bool.
    ConfiguredDemandCircuit interface{}

    // If true, interface running as demand circuit. The type is bool.
    InterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsaCount interface{}

    // Interface Transmission delay. The type is interface{} with range: 0..65535.
    TransmissionDelay interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    DesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // If true, backup designated router. The type is bool.
    BackupDesignatedRouter interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires. The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs. The type is bool.
    InterfaceLsaFilter interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured hello interval (ms). The type is interface{} with range:
    // 0..4294967295.
    HelloIntervalMs interface{}

    // Configured dead interval (s). The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s). The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterrval interface{}

    // If true, NSF is enabled. The type is bool.
    InterfaceNsfEnabled interface{}

    // If true, NSF restart in progress on this interface. The type is bool.
    InterfaceNsf interface{}

    // Time since last NSF restart (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceLastNsf interface{}

    // If true, passive interface. The type is bool.
    PassiveInterface interface{}

    // Time until next Hello (s). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Time until next Hello (ms). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTimeMs interface{}

    // TTL security enabled on the interface. The type is bool.
    TtlSecurityEnabled interface{}

    // TTL security hop counts. The type is interface{} with range: 0..4294967295.
    TtlSecurityHopCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Prefix Suppression for primary addresses. The type is bool.
    PrefixSuppressPrimaryAddresses interface{}

    // Prefix Suppression for secondary addresses. The type is bool.
    PrefixSuppressSecondaryAddresses interface{}

    // If true, loopback interface is advertised as a stub network. The type is
    // bool.
    IsLoopbackStubNetwork interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    InterfaceAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    InterfaceAckListHighWatermark interface{}

    // Registered for Link Down Fast Detection. The type is bool.
    RegisteredForLinkDownFastDetection interface{}

    // Hold-down time in ms for fast-detect event. The type is interface{} with
    // range: 0..4294967295.
    FastDetectHoldDownTime interface{}

    // Link in hold-down state due to fast detect event. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Remaining hold down time in ms. The type is interface{} with range:
    // 0..4294967295.
    FastDetectHoldDownTimeRemaining interface{}

    // IP Fast Reroute Type. The type is Ipfrr.
    FastRerouteType interface{}

    // Topology Independent LFA. The type is bool.
    FastRerouteTopologyIndependentLfa interface{}

    // Unnumbered interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceUnnum interface{}

    // Forward reference interface. The type is bool.
    InterfaceForw interface{}

    // Max number of primary labels. The type is interface{} with range: 0..255.
    InterfacePriLabels interface{}

    // Max number of backup labels. The type is interface{} with range: 0..255.
    InterfaceBkpLabels interface{}

    // Max number of SRTE labels. The type is interface{} with range: 0..255.
    InterfaceSrteLabels interface{}

    // PerfMeas Delay values available. The type is bool.
    PmDelaySet interface{}

    // PerfMeas Average Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayAvg interface{}

    // PerfMeas Minimum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMin interface{}

    // PerfMeas Maximum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMax interface{}

    // PerfMeas Link Delay Variance. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayVar interface{}

    // PerfMeas Link Loss values available. The type is bool.
    PmLossSet interface{}

    // PerfMeas Link Loss. The type is interface{} with range: 0..4294967295.
    LinkLoss interface{}

    // PerfMeas BW Util values available. The type is bool.
    PmbwUtilSet interface{}

    // PerfMeas Total Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    TotalBandwidth interface{}

    // PerfMeas RSVP-TE Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    RsvpteBandwidth interface{}

    // Remote LFA. The type is interface{} with range: 0..255.
    RemoteLfa interface{}

    // SRTE Metric available. The type is bool.
    SrteMetricSet interface{}

    // SRTE Metric. The type is interface{} with range: 0..4294967295.
    SrteMetric interface{}

    // SRTE App Weight. The type is interface{} with range: 0..4294967295.
    SrteAppWeight interface{}

    // SRTE Ext. Admin Group available. The type is bool.
    SrteExtAdminGroupSet interface{}

    // BFD information.
    InterfaceBfdInformation Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation

    // Active interface details.
    ActiveInterface Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface

    // SRLG Values. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_Srlg.
    Srlg []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_Srlg

    // SRTE Ext. Admin Group. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup.
    SrteteExtAdminGroup []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup

    // Information for neighbors on the interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers.
    IpfrrTiebreakers []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers

    // Secondary IP address list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpSecAddr.
    IpSecAddr []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpSecAddr
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("interface-bfd-information", types.YChild{"InterfaceBfdInformation", &self.InterfaceBfdInformation})
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("srlg", types.YChild{"Srlg", nil})
    for i := range self.Srlg {
        self.EntityData.Children.Append(types.GetSegmentPath(self.Srlg[i]), types.YChild{"Srlg", self.Srlg[i]})
    }
    self.EntityData.Children.Append("srtete-ext-admin-group", types.YChild{"SrteteExtAdminGroup", nil})
    for i := range self.SrteteExtAdminGroup {
        self.EntityData.Children.Append(types.GetSegmentPath(self.SrteteExtAdminGroup[i]), types.YChild{"SrteteExtAdminGroup", self.SrteteExtAdminGroup[i]})
    }
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range self.InterfaceMadj {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceMadj[i]), types.YChild{"InterfaceMadj", self.InterfaceMadj[i]})
    }
    self.EntityData.Children.Append("ipfrr-tiebreakers", types.YChild{"IpfrrTiebreakers", nil})
    for i := range self.IpfrrTiebreakers {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpfrrTiebreakers[i]), types.YChild{"IpfrrTiebreakers", self.IpfrrTiebreakers[i]})
    }
    self.EntityData.Children.Append("ip-sec-addr", types.YChild{"IpSecAddr", nil})
    for i := range self.IpSecAddr {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpSecAddr[i]), types.YChild{"IpSecAddr", self.IpSecAddr[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("interface-line-state", types.YLeaf{"InterfaceLineState", self.InterfaceLineState})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", self.InterfaceMask})
    self.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", self.InterfaceArea})
    self.EntityData.Leafs.Append("interface-sid", types.YLeaf{"InterfaceSid", self.InterfaceSid})
    self.EntityData.Leafs.Append("interface-sid-php-off", types.YLeaf{"InterfaceSidPhpOff", self.InterfaceSidPhpOff})
    self.EntityData.Leafs.Append("interface-sid-n-flag-clear", types.YLeaf{"InterfaceSidNFlagClear", self.InterfaceSidNFlagClear})
    self.EntityData.Leafs.Append("interface-strict-spf-sid", types.YLeaf{"InterfaceStrictSpfSid", self.InterfaceStrictSpfSid})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-php-off", types.YLeaf{"InterfaceStrictSpfSidPhpOff", self.InterfaceStrictSpfSidPhpOff})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-n-flag-clear", types.YLeaf{"InterfaceStrictSpfSidNFlagClear", self.InterfaceStrictSpfSidNFlagClear})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("ip-mtu", types.YLeaf{"IpMtu", self.IpMtu})
    self.EntityData.Leafs.Append("maximum-packet-size", types.YLeaf{"MaximumPacketSize", self.MaximumPacketSize})
    self.EntityData.Leafs.Append("interface-tunnel-flags", types.YLeaf{"InterfaceTunnelFlags", self.InterfaceTunnelFlags})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("interface-bandwidth", types.YLeaf{"InterfaceBandwidth", self.InterfaceBandwidth})
    self.EntityData.Leafs.Append("cfg-cost-fallback", types.YLeaf{"CfgCostFallback", self.CfgCostFallback})
    self.EntityData.Leafs.Append("interface-cost-fallback", types.YLeaf{"InterfaceCostFallback", self.InterfaceCostFallback})
    self.EntityData.Leafs.Append("cost-fallback-active", types.YLeaf{"CostFallbackActive", self.CostFallbackActive})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("configured-ldp-sync-igp-shortcuts", types.YLeaf{"ConfiguredLdpSyncIgpShortcuts", self.ConfiguredLdpSyncIgpShortcuts})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})
    self.EntityData.Leafs.Append("configured-demand-circuit", types.YLeaf{"ConfiguredDemandCircuit", self.ConfiguredDemandCircuit})
    self.EntityData.Leafs.Append("interface-demand-circuit", types.YLeaf{"InterfaceDemandCircuit", self.InterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-lsa-count", types.YLeaf{"InterfaceDcBitlessLsaCount", self.InterfaceDcBitlessLsaCount})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("designated-router", types.YLeaf{"DesignatedRouter", self.DesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router", types.YLeaf{"BackupDesignatedRouter", self.BackupDesignatedRouter})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("interface-lsa-filter", types.YLeaf{"InterfaceLsaFilter", self.InterfaceLsaFilter})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("hello-interval-ms", types.YLeaf{"HelloIntervalMs", self.HelloIntervalMs})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interrval", types.YLeaf{"InterfaceRetransmissionInterrval", self.InterfaceRetransmissionInterrval})
    self.EntityData.Leafs.Append("interface-nsf-enabled", types.YLeaf{"InterfaceNsfEnabled", self.InterfaceNsfEnabled})
    self.EntityData.Leafs.Append("interface-nsf", types.YLeaf{"InterfaceNsf", self.InterfaceNsf})
    self.EntityData.Leafs.Append("interface-last-nsf", types.YLeaf{"InterfaceLastNsf", self.InterfaceLastNsf})
    self.EntityData.Leafs.Append("passive-interface", types.YLeaf{"PassiveInterface", self.PassiveInterface})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("next-hello-time-ms", types.YLeaf{"NextHelloTimeMs", self.NextHelloTimeMs})
    self.EntityData.Leafs.Append("ttl-security-enabled", types.YLeaf{"TtlSecurityEnabled", self.TtlSecurityEnabled})
    self.EntityData.Leafs.Append("ttl-security-hop-count", types.YLeaf{"TtlSecurityHopCount", self.TtlSecurityHopCount})
    self.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", self.InterfaceisMadj})
    self.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", self.InterfaceMadjCount})
    self.EntityData.Leafs.Append("prefix-suppress-primary-addresses", types.YLeaf{"PrefixSuppressPrimaryAddresses", self.PrefixSuppressPrimaryAddresses})
    self.EntityData.Leafs.Append("prefix-suppress-secondary-addresses", types.YLeaf{"PrefixSuppressSecondaryAddresses", self.PrefixSuppressSecondaryAddresses})
    self.EntityData.Leafs.Append("is-loopback-stub-network", types.YLeaf{"IsLoopbackStubNetwork", self.IsLoopbackStubNetwork})
    self.EntityData.Leafs.Append("interface-ack-list-count", types.YLeaf{"InterfaceAckListCount", self.InterfaceAckListCount})
    self.EntityData.Leafs.Append("interface-ack-list-high-watermark", types.YLeaf{"InterfaceAckListHighWatermark", self.InterfaceAckListHighWatermark})
    self.EntityData.Leafs.Append("registered-for-link-down-fast-detection", types.YLeaf{"RegisteredForLinkDownFastDetection", self.RegisteredForLinkDownFastDetection})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time", types.YLeaf{"FastDetectHoldDownTime", self.FastDetectHoldDownTime})
    self.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", self.InterfaceFastDetectHoldDown})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time-remaining", types.YLeaf{"FastDetectHoldDownTimeRemaining", self.FastDetectHoldDownTimeRemaining})
    self.EntityData.Leafs.Append("fast-reroute-type", types.YLeaf{"FastRerouteType", self.FastRerouteType})
    self.EntityData.Leafs.Append("fast-reroute-topology-independent-lfa", types.YLeaf{"FastRerouteTopologyIndependentLfa", self.FastRerouteTopologyIndependentLfa})
    self.EntityData.Leafs.Append("interface-unnum", types.YLeaf{"InterfaceUnnum", self.InterfaceUnnum})
    self.EntityData.Leafs.Append("interface-forw", types.YLeaf{"InterfaceForw", self.InterfaceForw})
    self.EntityData.Leafs.Append("interface-pri-labels", types.YLeaf{"InterfacePriLabels", self.InterfacePriLabels})
    self.EntityData.Leafs.Append("interface-bkp-labels", types.YLeaf{"InterfaceBkpLabels", self.InterfaceBkpLabels})
    self.EntityData.Leafs.Append("interface-srte-labels", types.YLeaf{"InterfaceSrteLabels", self.InterfaceSrteLabels})
    self.EntityData.Leafs.Append("pm-delay-set", types.YLeaf{"PmDelaySet", self.PmDelaySet})
    self.EntityData.Leafs.Append("link-delay-avg", types.YLeaf{"LinkDelayAvg", self.LinkDelayAvg})
    self.EntityData.Leafs.Append("link-delay-min", types.YLeaf{"LinkDelayMin", self.LinkDelayMin})
    self.EntityData.Leafs.Append("link-delay-max", types.YLeaf{"LinkDelayMax", self.LinkDelayMax})
    self.EntityData.Leafs.Append("link-delay-var", types.YLeaf{"LinkDelayVar", self.LinkDelayVar})
    self.EntityData.Leafs.Append("pm-loss-set", types.YLeaf{"PmLossSet", self.PmLossSet})
    self.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", self.LinkLoss})
    self.EntityData.Leafs.Append("pmbw-util-set", types.YLeaf{"PmbwUtilSet", self.PmbwUtilSet})
    self.EntityData.Leafs.Append("total-bandwidth", types.YLeaf{"TotalBandwidth", self.TotalBandwidth})
    self.EntityData.Leafs.Append("rsvpte-bandwidth", types.YLeaf{"RsvpteBandwidth", self.RsvpteBandwidth})
    self.EntityData.Leafs.Append("remote-lfa", types.YLeaf{"RemoteLfa", self.RemoteLfa})
    self.EntityData.Leafs.Append("srte-metric-set", types.YLeaf{"SrteMetricSet", self.SrteMetricSet})
    self.EntityData.Leafs.Append("srte-metric", types.YLeaf{"SrteMetric", self.SrteMetric})
    self.EntityData.Leafs.Append("srte-app-weight", types.YLeaf{"SrteAppWeight", self.SrteAppWeight})
    self.EntityData.Leafs.Append("srte-ext-admin-group-set", types.YLeaf{"SrteExtAdminGroupSet", self.SrteExtAdminGroupSet})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation
// BFD information
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms). The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // BFD detection multiplier. The type is interface{} with range:
    // 0..4294967295.
    DetectionMultiplier interface{}
}

func (interfaceBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation) GetEntityData() *types.CommonEntityData {
    interfaceBfdInformation.EntityData.YFilter = interfaceBfdInformation.YFilter
    interfaceBfdInformation.EntityData.YangName = "interface-bfd-information"
    interfaceBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfdInformation.EntityData.ParentYangName = "interface"
    interfaceBfdInformation.EntityData.SegmentPath = "interface-bfd-information"
    interfaceBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfdInformation.EntityData.Children = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfdInformation.BfdIntfEnableMode})
    interfaceBfdInformation.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", interfaceBfdInformation.Interval})
    interfaceBfdInformation.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", interfaceBfdInformation.DetectionMultiplier})

    interfaceBfdInformation.EntityData.YListKeys = []string {}

    return &(interfaceBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface
// Active interface details
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    InterfaceFloodLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope). The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Last flood scan length. The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length. The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms). The type is interface{} with range: 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms). The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Number of neighbors for which hellos are suppressed. The type is
    // interface{} with range: 0..65535.
    SuppressHelloCount interface{}

    // Authentication type. The type is Authentication.
    InterfaceAuthenticationType interface{}

    // If true, MD key is configured. The type is bool.
    YoungestMdKey interface{}

    // Number of neighbors using the old key (if rollover in progress). The type
    // is interface{} with range: 0..4294967295.
    OldMd5KeyNeighborCount interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    YoungestMdKeyId interface{}

    // Keychain ID. The type is interface{} with range: 0..18446744073709551615.
    KeychainId interface{}

    // List of old MD keys. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys.
    MdKeys []*Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys
}

func (activeInterface *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Children.Append("md-keys", types.YChild{"MdKeys", nil})
    for i := range activeInterface.MdKeys {
        activeInterface.EntityData.Children.Append(types.GetSegmentPath(activeInterface.MdKeys[i]), types.YChild{"MdKeys", activeInterface.MdKeys[i]})
    }
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-flood-length", types.YLeaf{"InterfaceFloodLength", activeInterface.InterfaceFloodLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", activeInterface.InterfaceNeighborCount})
    activeInterface.EntityData.Leafs.Append("suppress-hello-count", types.YLeaf{"SuppressHelloCount", activeInterface.SuppressHelloCount})
    activeInterface.EntityData.Leafs.Append("interface-authentication-type", types.YLeaf{"InterfaceAuthenticationType", activeInterface.InterfaceAuthenticationType})
    activeInterface.EntityData.Leafs.Append("youngest-md-key", types.YLeaf{"YoungestMdKey", activeInterface.YoungestMdKey})
    activeInterface.EntityData.Leafs.Append("old-md5-key-neighbor-count", types.YLeaf{"OldMd5KeyNeighborCount", activeInterface.OldMd5KeyNeighborCount})
    activeInterface.EntityData.Leafs.Append("youngest-md-key-id", types.YLeaf{"YoungestMdKeyId", activeInterface.YoungestMdKeyId})
    activeInterface.EntityData.Leafs.Append("keychain-id", types.YLeaf{"KeychainId", activeInterface.KeychainId})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys
// List of old MD keys
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (mdKeys *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys) GetEntityData() *types.CommonEntityData {
    mdKeys.EntityData.YFilter = mdKeys.YFilter
    mdKeys.EntityData.YangName = "md-keys"
    mdKeys.EntityData.BundleName = "cisco_ios_xr"
    mdKeys.EntityData.ParentYangName = "active-interface"
    mdKeys.EntityData.SegmentPath = "md-keys"
    mdKeys.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mdKeys.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mdKeys.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mdKeys.EntityData.Children = types.NewOrderedMap()
    mdKeys.EntityData.Leafs = types.NewOrderedMap()
    mdKeys.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mdKeys.Entry})

    mdKeys.EntityData.YListKeys = []string {}

    return &(mdKeys.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_Srlg
// SRLG Values
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlg *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_Srlg) GetEntityData() *types.CommonEntityData {
    srlg.EntityData.YFilter = srlg.YFilter
    srlg.EntityData.YangName = "srlg"
    srlg.EntityData.BundleName = "cisco_ios_xr"
    srlg.EntityData.ParentYangName = "interface"
    srlg.EntityData.SegmentPath = "srlg"
    srlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlg.EntityData.Children = types.NewOrderedMap()
    srlg.EntityData.Leafs = types.NewOrderedMap()
    srlg.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlg.Entry})

    srlg.EntityData.YListKeys = []string {}

    return &(srlg.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup
// SRTE Ext. Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srteteExtAdminGroup *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup) GetEntityData() *types.CommonEntityData {
    srteteExtAdminGroup.EntityData.YFilter = srteteExtAdminGroup.YFilter
    srteteExtAdminGroup.EntityData.YangName = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    srteteExtAdminGroup.EntityData.ParentYangName = "interface"
    srteteExtAdminGroup.EntityData.SegmentPath = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srteteExtAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srteteExtAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srteteExtAdminGroup.EntityData.Children = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srteteExtAdminGroup.Entry})

    srteteExtAdminGroup.EntityData.YListKeys = []string {}

    return &(srteteExtAdminGroup.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, Designated router. The type is bool.
    NeighborDr interface{}

    // If true, Backup designated router. The type is bool.
    NeighborBdr interface{}

    // If true, hellos suppressed. The type is bool.
    SuppressHello interface{}
}

func (interfaceNeighbor *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor"
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-dr", types.YLeaf{"NeighborDr", interfaceNeighbor.NeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-bdr", types.YLeaf{"NeighborBdr", interfaceNeighbor.NeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("suppress-hello", types.YLeaf{"SuppressHello", interfaceNeighbor.SuppressHello})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers) GetEntityData() *types.CommonEntityData {
    ipfrrTiebreakers.EntityData.YFilter = ipfrrTiebreakers.YFilter
    ipfrrTiebreakers.EntityData.YangName = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTiebreakers.EntityData.ParentYangName = "interface"
    ipfrrTiebreakers.EntityData.SegmentPath = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTiebreakers.EntityData.Children = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-type", types.YLeaf{"TiebreakerType", ipfrrTiebreakers.TiebreakerType})
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-index", types.YLeaf{"TiebreakerIndex", ipfrrTiebreakers.TiebreakerIndex})

    ipfrrTiebreakers.EntityData.YListKeys = []string {}

    return &(ipfrrTiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpSecAddr
// Secondary IP address list
type Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpSecAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Secondary Address Type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryAddr interface{}

    // Secondary Prefix Length. The type is interface{} with range: 0..4294967295.
    SecondaryPrefix interface{}
}

func (ipSecAddr *Ospf_Processes_Process_Vrfs_Vrf_InterfaceInformation_Interfaces_Interface_IpSecAddr) GetEntityData() *types.CommonEntityData {
    ipSecAddr.EntityData.YFilter = ipSecAddr.YFilter
    ipSecAddr.EntityData.YangName = "ip-sec-addr"
    ipSecAddr.EntityData.BundleName = "cisco_ios_xr"
    ipSecAddr.EntityData.ParentYangName = "interface"
    ipSecAddr.EntityData.SegmentPath = "ip-sec-addr"
    ipSecAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSecAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSecAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSecAddr.EntityData.Children = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs.Append("secondary-addr", types.YLeaf{"SecondaryAddr", ipSecAddr.SecondaryAddr})
    ipSecAddr.EntityData.Leafs.Append("secondary-prefix", types.YLeaf{"SecondaryPrefix", ipSecAddr.SecondaryPrefix})

    ipSecAddr.EntityData.YListKeys = []string {}

    return &(ipSecAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_BorderRouters
// Border router table
type Ospf_Processes_Process_Vrfs_Vrf_BorderRouters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information for a particular border router. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter.
    BorderRouter []*Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter
}

func (borderRouters *Ospf_Processes_Process_Vrfs_Vrf_BorderRouters) GetEntityData() *types.CommonEntityData {
    borderRouters.EntityData.YFilter = borderRouters.YFilter
    borderRouters.EntityData.YangName = "border-routers"
    borderRouters.EntityData.BundleName = "cisco_ios_xr"
    borderRouters.EntityData.ParentYangName = "vrf"
    borderRouters.EntityData.SegmentPath = "border-routers"
    borderRouters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouters.EntityData.Children = types.NewOrderedMap()
    borderRouters.EntityData.Children.Append("border-router", types.YChild{"BorderRouter", nil})
    for i := range borderRouters.BorderRouter {
        borderRouters.EntityData.Children.Append(types.GetSegmentPath(borderRouters.BorderRouter[i]), types.YChild{"BorderRouter", borderRouters.BorderRouter[i]})
    }
    borderRouters.EntityData.Leafs = types.NewOrderedMap()

    borderRouters.EntityData.YListKeys = []string {}

    return &(borderRouters.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter
// Information for a particular border router
type Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterId interface{}

    // Router ID of Border Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterIdXr interface{}

    // List of Border Router paths. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath.
    BorderRouterPath []*Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath
}

func (borderRouter *Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetEntityData() *types.CommonEntityData {
    borderRouter.EntityData.YFilter = borderRouter.YFilter
    borderRouter.EntityData.YangName = "border-router"
    borderRouter.EntityData.BundleName = "cisco_ios_xr"
    borderRouter.EntityData.ParentYangName = "border-routers"
    borderRouter.EntityData.SegmentPath = "border-router" + types.AddKeyToken(borderRouter.BorderRouterId, "border-router-id")
    borderRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouter.EntityData.Children = types.NewOrderedMap()
    borderRouter.EntityData.Children.Append("border-router-path", types.YChild{"BorderRouterPath", nil})
    for i := range borderRouter.BorderRouterPath {
        borderRouter.EntityData.Children.Append(types.GetSegmentPath(borderRouter.BorderRouterPath[i]), types.YChild{"BorderRouterPath", borderRouter.BorderRouterPath[i]})
    }
    borderRouter.EntityData.Leafs = types.NewOrderedMap()
    borderRouter.EntityData.Leafs.Append("border-router-id", types.YLeaf{"BorderRouterId", borderRouter.BorderRouterId})
    borderRouter.EntityData.Leafs.Append("border-router-id-xr", types.YLeaf{"BorderRouterIdXr", borderRouter.BorderRouterIdXr})

    borderRouter.EntityData.YListKeys = []string {"BorderRouterId"}

    return &(borderRouter.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath
// List of Border Router paths
type Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route type. The type is OspfRoute.
    BorderRouterRouteType interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BorderRouterRouteMetric interface{}

    // Next hop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterNextHop interface{}

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BorderRouterNextHopInterfaceName interface{}

    // Border router type. The type is OspfBr.
    BorderRouterType interface{}

    // Area string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    BorderRouterAreaId interface{}

    // SPF run instance count. The type is interface{} with range:
    // 0..18446744073709551615.
    SpfVersion interface{}
}

func (borderRouterPath *Ospf_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetEntityData() *types.CommonEntityData {
    borderRouterPath.EntityData.YFilter = borderRouterPath.YFilter
    borderRouterPath.EntityData.YangName = "border-router-path"
    borderRouterPath.EntityData.BundleName = "cisco_ios_xr"
    borderRouterPath.EntityData.ParentYangName = "border-router"
    borderRouterPath.EntityData.SegmentPath = "border-router-path"
    borderRouterPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouterPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouterPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouterPath.EntityData.Children = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs.Append("border-router-route-type", types.YLeaf{"BorderRouterRouteType", borderRouterPath.BorderRouterRouteType})
    borderRouterPath.EntityData.Leafs.Append("border-router-route-metric", types.YLeaf{"BorderRouterRouteMetric", borderRouterPath.BorderRouterRouteMetric})
    borderRouterPath.EntityData.Leafs.Append("border-router-next-hop", types.YLeaf{"BorderRouterNextHop", borderRouterPath.BorderRouterNextHop})
    borderRouterPath.EntityData.Leafs.Append("border-router-next-hop-interface-name", types.YLeaf{"BorderRouterNextHopInterfaceName", borderRouterPath.BorderRouterNextHopInterfaceName})
    borderRouterPath.EntityData.Leafs.Append("border-router-type", types.YLeaf{"BorderRouterType", borderRouterPath.BorderRouterType})
    borderRouterPath.EntityData.Leafs.Append("border-router-area-id", types.YLeaf{"BorderRouterAreaId", borderRouterPath.BorderRouterAreaId})
    borderRouterPath.EntityData.Leafs.Append("spf-version", types.YLeaf{"SpfVersion", borderRouterPath.SpfVersion})

    borderRouterPath.EntityData.YListKeys = []string {}

    return &(borderRouterPath.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation
// Container for OSPF Process information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol Area table.
    ProtocolAreas Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas

    // Basic OSPF protocol information.
    ProtocolSummary Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolSummary

    // Redistribution information table.
    Redistributions Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions

    // Process Area table.
    ProcessAreas Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas

    // Basic OSPF summary information.
    ProcessSummary Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary
}

func (processInformation *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation) GetEntityData() *types.CommonEntityData {
    processInformation.EntityData.YFilter = processInformation.YFilter
    processInformation.EntityData.YangName = "process-information"
    processInformation.EntityData.BundleName = "cisco_ios_xr"
    processInformation.EntityData.ParentYangName = "vrf"
    processInformation.EntityData.SegmentPath = "process-information"
    processInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processInformation.EntityData.Children = types.NewOrderedMap()
    processInformation.EntityData.Children.Append("protocol-areas", types.YChild{"ProtocolAreas", &processInformation.ProtocolAreas})
    processInformation.EntityData.Children.Append("protocol-summary", types.YChild{"ProtocolSummary", &processInformation.ProtocolSummary})
    processInformation.EntityData.Children.Append("redistributions", types.YChild{"Redistributions", &processInformation.Redistributions})
    processInformation.EntityData.Children.Append("process-areas", types.YChild{"ProcessAreas", &processInformation.ProcessAreas})
    processInformation.EntityData.Children.Append("process-summary", types.YChild{"ProcessSummary", &processInformation.ProcessSummary})
    processInformation.EntityData.Leafs = types.NewOrderedMap()

    processInformation.EntityData.YListKeys = []string {}

    return &(processInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas
// Protocol Area table
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea.
    ProtocolArea []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea
}

func (protocolAreas *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas) GetEntityData() *types.CommonEntityData {
    protocolAreas.EntityData.YFilter = protocolAreas.YFilter
    protocolAreas.EntityData.YangName = "protocol-areas"
    protocolAreas.EntityData.BundleName = "cisco_ios_xr"
    protocolAreas.EntityData.ParentYangName = "process-information"
    protocolAreas.EntityData.SegmentPath = "protocol-areas"
    protocolAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolAreas.EntityData.Children = types.NewOrderedMap()
    protocolAreas.EntityData.Children.Append("protocol-area", types.YChild{"ProtocolArea", nil})
    for i := range protocolAreas.ProtocolArea {
        protocolAreas.EntityData.Children.Append(types.GetSegmentPath(protocolAreas.ProtocolArea[i]), types.YChild{"ProtocolArea", protocolAreas.ProtocolArea[i]})
    }
    protocolAreas.EntityData.Leafs = types.NewOrderedMap()

    protocolAreas.EntityData.YListKeys = []string {}

    return &(protocolAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea
// Area information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID if in integer format. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area ID if in IP address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Area ID string in decimal and dotted-decimal format. The type is string
    // with length: 0..16.
    ProtcolArea interface{}

    // MPLS-TE enabled. The type is bool.
    ProtocolMpls interface{}

    // Distribute List In. The type is string.
    ProtocolAreaDistListIn interface{}

    // Interface list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface.
    ProtocolInterface []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface
}

func (protocolArea *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea) GetEntityData() *types.CommonEntityData {
    protocolArea.EntityData.YFilter = protocolArea.YFilter
    protocolArea.EntityData.YangName = "protocol-area"
    protocolArea.EntityData.BundleName = "cisco_ios_xr"
    protocolArea.EntityData.ParentYangName = "protocol-areas"
    protocolArea.EntityData.SegmentPath = "protocol-area"
    protocolArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolArea.EntityData.Children = types.NewOrderedMap()
    protocolArea.EntityData.Children.Append("protocol-interface", types.YChild{"ProtocolInterface", nil})
    for i := range protocolArea.ProtocolInterface {
        protocolArea.EntityData.Children.Append(types.GetSegmentPath(protocolArea.ProtocolInterface[i]), types.YChild{"ProtocolInterface", protocolArea.ProtocolInterface[i]})
    }
    protocolArea.EntityData.Leafs = types.NewOrderedMap()
    protocolArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", protocolArea.AreaId})
    protocolArea.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolArea.Address})
    protocolArea.EntityData.Leafs.Append("protcol-area", types.YLeaf{"ProtcolArea", protocolArea.ProtcolArea})
    protocolArea.EntityData.Leafs.Append("protocol-mpls", types.YLeaf{"ProtocolMpls", protocolArea.ProtocolMpls})
    protocolArea.EntityData.Leafs.Append("protocol-area-dist-list-in", types.YLeaf{"ProtocolAreaDistListIn", protocolArea.ProtocolAreaDistListIn})

    protocolArea.EntityData.YListKeys = []string {}

    return &(protocolArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface
// Interface list
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProtocolInterfaceName interface{}

    // Authentication type. The type is Authentication.
    ProtocolAuthenticationType interface{}

    // Distribute List In. The type is string.
    ProtocolInterfaceDistListIn interface{}
}

func (protocolInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface) GetEntityData() *types.CommonEntityData {
    protocolInterface.EntityData.YFilter = protocolInterface.YFilter
    protocolInterface.EntityData.YangName = "protocol-interface"
    protocolInterface.EntityData.BundleName = "cisco_ios_xr"
    protocolInterface.EntityData.ParentYangName = "protocol-area"
    protocolInterface.EntityData.SegmentPath = "protocol-interface"
    protocolInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInterface.EntityData.Children = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs.Append("protocol-interface-name", types.YLeaf{"ProtocolInterfaceName", protocolInterface.ProtocolInterfaceName})
    protocolInterface.EntityData.Leafs.Append("protocol-authentication-type", types.YLeaf{"ProtocolAuthenticationType", protocolInterface.ProtocolAuthenticationType})
    protocolInterface.EntityData.Leafs.Append("protocol-interface-dist-list-in", types.YLeaf{"ProtocolInterfaceDistListIn", protocolInterface.ProtocolInterfaceDistListIn})

    protocolInterface.EntityData.YListKeys = []string {}

    return &(protocolInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolSummary
// Basic OSPF protocol information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProtocolRouterId interface{}

    // Administrative distance. The type is interface{} with range: 0..4294967295.
    ProtocolDistance interface{}

    // Administrative Distance for Inter Area routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceInterArea interface{}

    // Administrative Distance for External routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceExternal interface{}

    // True if NSF enabled. The type is bool.
    ProtocolNsf interface{}

    // Distribute List In. The type is string.
    DistListIn interface{}
}

func (protocolSummary *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProtocolSummary) GetEntityData() *types.CommonEntityData {
    protocolSummary.EntityData.YFilter = protocolSummary.YFilter
    protocolSummary.EntityData.YangName = "protocol-summary"
    protocolSummary.EntityData.BundleName = "cisco_ios_xr"
    protocolSummary.EntityData.ParentYangName = "process-information"
    protocolSummary.EntityData.SegmentPath = "protocol-summary"
    protocolSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolSummary.EntityData.Children = types.NewOrderedMap()
    protocolSummary.EntityData.Leafs = types.NewOrderedMap()
    protocolSummary.EntityData.Leafs.Append("protocol-router-id", types.YLeaf{"ProtocolRouterId", protocolSummary.ProtocolRouterId})
    protocolSummary.EntityData.Leafs.Append("protocol-distance", types.YLeaf{"ProtocolDistance", protocolSummary.ProtocolDistance})
    protocolSummary.EntityData.Leafs.Append("administrative-distance-inter-area", types.YLeaf{"AdministrativeDistanceInterArea", protocolSummary.AdministrativeDistanceInterArea})
    protocolSummary.EntityData.Leafs.Append("administrative-distance-external", types.YLeaf{"AdministrativeDistanceExternal", protocolSummary.AdministrativeDistanceExternal})
    protocolSummary.EntityData.Leafs.Append("protocol-nsf", types.YLeaf{"ProtocolNsf", protocolSummary.ProtocolNsf})
    protocolSummary.EntityData.Leafs.Append("dist-list-in", types.YLeaf{"DistListIn", protocolSummary.DistListIn})

    protocolSummary.EntityData.YListKeys = []string {}

    return &(protocolSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions
// Redistribution information table
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribution information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution.
    Redistribution []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution
}

func (redistributions *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions) GetEntityData() *types.CommonEntityData {
    redistributions.EntityData.YFilter = redistributions.YFilter
    redistributions.EntityData.YangName = "redistributions"
    redistributions.EntityData.BundleName = "cisco_ios_xr"
    redistributions.EntityData.ParentYangName = "process-information"
    redistributions.EntityData.SegmentPath = "redistributions"
    redistributions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributions.EntityData.Children = types.NewOrderedMap()
    redistributions.EntityData.Children.Append("redistribution", types.YChild{"Redistribution", nil})
    for i := range redistributions.Redistribution {
        redistributions.EntityData.Children.Append(types.GetSegmentPath(redistributions.Redistribution[i]), types.YChild{"Redistribution", redistributions.Redistribution[i]})
    }
    redistributions.EntityData.Leafs = types.NewOrderedMap()

    redistributions.EntityData.YListKeys = []string {}

    return &(redistributions.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution
// Redistribution information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProtocolName interface{}

    // Process name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // If true, Metric configured. The type is bool.
    MetricFlag interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Whether to use CIDR. The type is bool.
    Classless interface{}

    // To NSSA areas only. The type is bool.
    NssaOnly interface{}

    // Protocol Information.
    RedistributionProtocol Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "redistributions"
    redistribution.EntityData.SegmentPath = "redistribution"
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = types.NewOrderedMap()
    redistribution.EntityData.Children.Append("redistribution-protocol", types.YChild{"RedistributionProtocol", &redistribution.RedistributionProtocol})
    redistribution.EntityData.Leafs = types.NewOrderedMap()
    redistribution.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", redistribution.ProtocolName})
    redistribution.EntityData.Leafs.Append("process-name", types.YLeaf{"ProcessName", redistribution.ProcessName})
    redistribution.EntityData.Leafs.Append("metric-flag", types.YLeaf{"MetricFlag", redistribution.MetricFlag})
    redistribution.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", redistribution.Metric})
    redistribution.EntityData.Leafs.Append("classless", types.YLeaf{"Classless", redistribution.Classless})
    redistribution.EntityData.Leafs.Append("nssa-only", types.YLeaf{"NssaOnly", redistribution.NssaOnly})

    redistribution.EntityData.YListKeys = []string {}

    return &(redistribution.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol
// Protocol Information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ProtocolType. The type is RedistProtocol.
    ProtocolType interface{}

    // ISIS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // BGP Autonomous System Number. The type is string.
    BgpAsNumber interface{}

    // Autonomous System Number. The type is string.
    EigrpAsNumber interface{}

    // Connected instance name. The type is string.
    ConnectedInstance interface{}
}

func (redistributionProtocol *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol) GetEntityData() *types.CommonEntityData {
    redistributionProtocol.EntityData.YFilter = redistributionProtocol.YFilter
    redistributionProtocol.EntityData.YangName = "redistribution-protocol"
    redistributionProtocol.EntityData.BundleName = "cisco_ios_xr"
    redistributionProtocol.EntityData.ParentYangName = "redistribution"
    redistributionProtocol.EntityData.SegmentPath = "redistribution-protocol"
    redistributionProtocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionProtocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionProtocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionProtocol.EntityData.Children = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", redistributionProtocol.ProtocolType})
    redistributionProtocol.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", redistributionProtocol.IsisInstanceId})
    redistributionProtocol.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", redistributionProtocol.OspfProcessId})
    redistributionProtocol.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", redistributionProtocol.BgpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", redistributionProtocol.EigrpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("connected-instance", types.YLeaf{"ConnectedInstance", redistributionProtocol.ConnectedInstance})

    redistributionProtocol.EntityData.YListKeys = []string {}

    return &(redistributionProtocol.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas
// Process Area table
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed information for a particular area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea.
    ProcessArea []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea
}

func (processAreas *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas) GetEntityData() *types.CommonEntityData {
    processAreas.EntityData.YFilter = processAreas.YFilter
    processAreas.EntityData.YangName = "process-areas"
    processAreas.EntityData.BundleName = "cisco_ios_xr"
    processAreas.EntityData.ParentYangName = "process-information"
    processAreas.EntityData.SegmentPath = "process-areas"
    processAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processAreas.EntityData.Children = types.NewOrderedMap()
    processAreas.EntityData.Children.Append("process-area", types.YChild{"ProcessArea", nil})
    for i := range processAreas.ProcessArea {
        processAreas.EntityData.Children.Append(types.GetSegmentPath(processAreas.ProcessArea[i]), types.YChild{"ProcessArea", processAreas.ProcessArea[i]})
    }
    processAreas.EntityData.Leafs = types.NewOrderedMap()

    processAreas.EntityData.YListKeys = []string {}

    return &(processAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea
// Detailed information for a particular area
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID if in integer format. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area ID if in IP address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Area ID string. The type is string with length: 0..16.
    AreaIdString interface{}

    // If true, Backbone area is active. The type is bool.
    BackboneAreaActive interface{}

    // Number of interfaces in the area. The type is interface{} with range:
    // 0..65535.
    AreaInterfaceCount interface{}

    // If true, stub area. The type is bool.
    AreaStub interface{}

    // If true, totally stubby area. The type is bool.
    AreaTotalStub interface{}

    // Default cost for Stub or NSSA area. The type is interface{} with range:
    // 0..65535.
    StubDefaultCost interface{}

    // If true, area is a NSSA. The type is bool.
    AreaNssa interface{}

    // If true, No redistribution into this NSSA area. The type is bool.
    NssaNoRedistribution interface{}

    // If true, perform 7/5 translation. The type is bool.
    NssaTranslate interface{}

    // If true, perform 7/5 translation always. The type is bool.
    NssaTranslateAlways interface{}

    // If true, generate NSSA default route. The type is bool.
    NssaDefault interface{}

    // If true, MPLS-TE enabled. The type is bool.
    TeEnabled interface{}

    // TE area topology version number. The type is interface{} with range:
    // 0..4294967295.
    TeTopologyVersion interface{}

    // If true, advertise intra-area prefixes as external. The type is bool.
    ExternalOut interface{}

    // If true, advertise redistributedprefixes as summary. The type is bool.
    SummaryIn interface{}

    // If true, Segment Routing enabled. The type is SrDp.
    SegmentRouting interface{}

    // If true, All routers in Area are SR Strict-SPF Capable. The type is bool.
    SrStrictSpfCap interface{}

    // If true, All routers in Area have SR Strict-SPF SIDs. The type is bool.
    SrStrictSpfsidsAvailable interface{}

    // If true, Segment routing Uloop avoidance         is currently active in
    // this area. The type is bool.
    SrMicroloopAvoidanceActive interface{}

    // Event for which SR uloop is triggered            Link Up/Link Down. The
    // type is SrUloopEvent.
    SrMicroloopAvoidanceEventType interface{}

    // Link State ID of the near end                    of the topology change.
    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrMicroloopAvoidanceNearEndId interface{}

    // Link State ID of the far end                     of the topology change.
    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrMicroloopAvoidanceFarEndId interface{}

    // Link State ID of the pseudo node,                if the change is on a
    // broadcast link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrMicroloopAvoidancePseudonodeId interface{}

    // Authentication type. The type is Authentication.
    AuthenticationType interface{}

    // Number of SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpfCount interface{}

    // If true, inbound policy is configured. The type is bool.
    AreaPolicyIn interface{}

    // Inbound summary lsa filtering policy. The type is string.
    AreaPolicyInName interface{}

    // If true, outbound policy is configured. The type is bool.
    AreaPolicyOut interface{}

    // Outbound summary lsa filtering policy. The type is string.
    AreaPolicyOutName interface{}

    // Number of LSAs in the Area. The type is interface{} with range:
    // 0..4294967295.
    AreaLsaCount interface{}

    // Sum of all area LSAs checksum. The type is interface{} with range:
    // 0..4294967295.
    AreaLsaChecksum interface{}

    // Number of Opaque LSAs in the Area. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaCount interface{}

    // Sum of opaque LSA checksums. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaChecksum interface{}

    // Number of LSA with demand circuit bit not set. The type is interface{} with
    // range: 0..4294967295.
    AreaDcBitlessLsaCount interface{}

    // Number of indication LSAs. The type is interface{} with range:
    // 0..4294967295.
    IndicationLsaCount interface{}

    // Number of DoNotAge LSAs. The type is interface{} with range: 0..4294967295.
    DnaLsaCount interface{}

    // Number of LSAs which need to be flooded. The type is interface{} with
    // range: 0..4294967295.
    FloodListLength interface{}

    // Number of LFA enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    AreaLfaInterfaceCount interface{}

    // Number of Per Prefix LFA enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    AreaPerPrefixLfaInterfaceCount interface{}

    // Area LFA revision. The type is interface{} with range: 0..4294967295.
    AreaLfaRevision interface{}

    // Num of nbrs currently forming. The type is interface{} with range:
    // 0..65535.
    AreaAdjStagNumNbrForming interface{}

    // Num of full nbrs in area. The type is interface{} with range: 0..65535.
    AreaNumNbrFull interface{}

    // List of ranges to summarize. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange.
    AreaRange []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange
}

func (processArea *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea) GetEntityData() *types.CommonEntityData {
    processArea.EntityData.YFilter = processArea.YFilter
    processArea.EntityData.YangName = "process-area"
    processArea.EntityData.BundleName = "cisco_ios_xr"
    processArea.EntityData.ParentYangName = "process-areas"
    processArea.EntityData.SegmentPath = "process-area"
    processArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processArea.EntityData.Children = types.NewOrderedMap()
    processArea.EntityData.Children.Append("area-range", types.YChild{"AreaRange", nil})
    for i := range processArea.AreaRange {
        processArea.EntityData.Children.Append(types.GetSegmentPath(processArea.AreaRange[i]), types.YChild{"AreaRange", processArea.AreaRange[i]})
    }
    processArea.EntityData.Leafs = types.NewOrderedMap()
    processArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", processArea.AreaId})
    processArea.EntityData.Leafs.Append("address", types.YLeaf{"Address", processArea.Address})
    processArea.EntityData.Leafs.Append("area-id-string", types.YLeaf{"AreaIdString", processArea.AreaIdString})
    processArea.EntityData.Leafs.Append("backbone-area-active", types.YLeaf{"BackboneAreaActive", processArea.BackboneAreaActive})
    processArea.EntityData.Leafs.Append("area-interface-count", types.YLeaf{"AreaInterfaceCount", processArea.AreaInterfaceCount})
    processArea.EntityData.Leafs.Append("area-stub", types.YLeaf{"AreaStub", processArea.AreaStub})
    processArea.EntityData.Leafs.Append("area-total-stub", types.YLeaf{"AreaTotalStub", processArea.AreaTotalStub})
    processArea.EntityData.Leafs.Append("stub-default-cost", types.YLeaf{"StubDefaultCost", processArea.StubDefaultCost})
    processArea.EntityData.Leafs.Append("area-nssa", types.YLeaf{"AreaNssa", processArea.AreaNssa})
    processArea.EntityData.Leafs.Append("nssa-no-redistribution", types.YLeaf{"NssaNoRedistribution", processArea.NssaNoRedistribution})
    processArea.EntityData.Leafs.Append("nssa-translate", types.YLeaf{"NssaTranslate", processArea.NssaTranslate})
    processArea.EntityData.Leafs.Append("nssa-translate-always", types.YLeaf{"NssaTranslateAlways", processArea.NssaTranslateAlways})
    processArea.EntityData.Leafs.Append("nssa-default", types.YLeaf{"NssaDefault", processArea.NssaDefault})
    processArea.EntityData.Leafs.Append("te-enabled", types.YLeaf{"TeEnabled", processArea.TeEnabled})
    processArea.EntityData.Leafs.Append("te-topology-version", types.YLeaf{"TeTopologyVersion", processArea.TeTopologyVersion})
    processArea.EntityData.Leafs.Append("external-out", types.YLeaf{"ExternalOut", processArea.ExternalOut})
    processArea.EntityData.Leafs.Append("summary-in", types.YLeaf{"SummaryIn", processArea.SummaryIn})
    processArea.EntityData.Leafs.Append("segment-routing", types.YLeaf{"SegmentRouting", processArea.SegmentRouting})
    processArea.EntityData.Leafs.Append("sr-strict-spf-cap", types.YLeaf{"SrStrictSpfCap", processArea.SrStrictSpfCap})
    processArea.EntityData.Leafs.Append("sr-strict-spfsids-available", types.YLeaf{"SrStrictSpfsidsAvailable", processArea.SrStrictSpfsidsAvailable})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-active", types.YLeaf{"SrMicroloopAvoidanceActive", processArea.SrMicroloopAvoidanceActive})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-event-type", types.YLeaf{"SrMicroloopAvoidanceEventType", processArea.SrMicroloopAvoidanceEventType})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-near-end-id", types.YLeaf{"SrMicroloopAvoidanceNearEndId", processArea.SrMicroloopAvoidanceNearEndId})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-far-end-id", types.YLeaf{"SrMicroloopAvoidanceFarEndId", processArea.SrMicroloopAvoidanceFarEndId})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-pseudonode-id", types.YLeaf{"SrMicroloopAvoidancePseudonodeId", processArea.SrMicroloopAvoidancePseudonodeId})
    processArea.EntityData.Leafs.Append("authentication-type", types.YLeaf{"AuthenticationType", processArea.AuthenticationType})
    processArea.EntityData.Leafs.Append("spf-count", types.YLeaf{"SpfCount", processArea.SpfCount})
    processArea.EntityData.Leafs.Append("area-policy-in", types.YLeaf{"AreaPolicyIn", processArea.AreaPolicyIn})
    processArea.EntityData.Leafs.Append("area-policy-in-name", types.YLeaf{"AreaPolicyInName", processArea.AreaPolicyInName})
    processArea.EntityData.Leafs.Append("area-policy-out", types.YLeaf{"AreaPolicyOut", processArea.AreaPolicyOut})
    processArea.EntityData.Leafs.Append("area-policy-out-name", types.YLeaf{"AreaPolicyOutName", processArea.AreaPolicyOutName})
    processArea.EntityData.Leafs.Append("area-lsa-count", types.YLeaf{"AreaLsaCount", processArea.AreaLsaCount})
    processArea.EntityData.Leafs.Append("area-lsa-checksum", types.YLeaf{"AreaLsaChecksum", processArea.AreaLsaChecksum})
    processArea.EntityData.Leafs.Append("area-opaque-lsa-count", types.YLeaf{"AreaOpaqueLsaCount", processArea.AreaOpaqueLsaCount})
    processArea.EntityData.Leafs.Append("area-opaque-lsa-checksum", types.YLeaf{"AreaOpaqueLsaChecksum", processArea.AreaOpaqueLsaChecksum})
    processArea.EntityData.Leafs.Append("area-dc-bitless-lsa-count", types.YLeaf{"AreaDcBitlessLsaCount", processArea.AreaDcBitlessLsaCount})
    processArea.EntityData.Leafs.Append("indication-lsa-count", types.YLeaf{"IndicationLsaCount", processArea.IndicationLsaCount})
    processArea.EntityData.Leafs.Append("dna-lsa-count", types.YLeaf{"DnaLsaCount", processArea.DnaLsaCount})
    processArea.EntityData.Leafs.Append("flood-list-length", types.YLeaf{"FloodListLength", processArea.FloodListLength})
    processArea.EntityData.Leafs.Append("area-lfa-interface-count", types.YLeaf{"AreaLfaInterfaceCount", processArea.AreaLfaInterfaceCount})
    processArea.EntityData.Leafs.Append("area-per-prefix-lfa-interface-count", types.YLeaf{"AreaPerPrefixLfaInterfaceCount", processArea.AreaPerPrefixLfaInterfaceCount})
    processArea.EntityData.Leafs.Append("area-lfa-revision", types.YLeaf{"AreaLfaRevision", processArea.AreaLfaRevision})
    processArea.EntityData.Leafs.Append("area-adj-stag-num-nbr-forming", types.YLeaf{"AreaAdjStagNumNbrForming", processArea.AreaAdjStagNumNbrForming})
    processArea.EntityData.Leafs.Append("area-num-nbr-full", types.YLeaf{"AreaNumNbrFull", processArea.AreaNumNbrFull})

    processArea.EntityData.YListKeys = []string {}

    return &(processArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange
// List of ranges to summarize
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP prefix for summarization. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RangePrefix interface{}

    // Network mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RangeMask interface{}

    // Cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Whether to advertise Summary LSAs for this range. The type is bool.
    AdvertiseFlag interface{}
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "process-area"
    areaRange.EntityData.SegmentPath = "area-range"
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = types.NewOrderedMap()
    areaRange.EntityData.Leafs = types.NewOrderedMap()
    areaRange.EntityData.Leafs.Append("range-prefix", types.YLeaf{"RangePrefix", areaRange.RangePrefix})
    areaRange.EntityData.Leafs.Append("range-mask", types.YLeaf{"RangeMask", areaRange.RangeMask})
    areaRange.EntityData.Leafs.Append("cost", types.YLeaf{"Cost", areaRange.Cost})
    areaRange.EntityData.Leafs.Append("advertise-flag", types.YLeaf{"AdvertiseFlag", areaRange.AdvertiseFlag})

    areaRange.EntityData.YListKeys = []string {}

    return &(areaRange.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary
// Basic OSPF summary information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Role is Standby, Active otherwise. The type is bool.
    RoleStandby interface{}

    // Role, V1/V2 Active/Standby. The type is interface{} with range:
    // 0..4294967295.
    Role interface{}

    // If true, NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // Trigger RP Switchover on detectable process restart. The type is bool.
    NsrSwitchoverOnRestart interface{}

    // If true, running in IGP-Intact mode. The type is bool.
    IgpIntactOn interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Type of Service supported. The type is interface{} with range: 0..255.
    TosOptions interface{}

    // Opaque LSA capable. The type is bool.
    OpaqueCapable interface{}

    // If true, is an Area Border Router. The type is bool.
    AreaBorderRouter interface{}

    // If true, is an AS Border Router. The type is bool.
    AsBorderRouter interface{}

    // If true, vrf lite is enabled. The type is bool.
    VrfLiteEnabled interface{}

    // If true, prefer type 7 LSAs over type 5. The type is bool.
    CapabilityPreferType7 interface{}

    // If true, originate Router LSA with maximum metric. The type is bool.
    MaximumMetricStart interface{}

    // Time remaining for hold down timer (s). The type is interface{} with range:
    // 0..4294967295.
    MaximumMetricStartTimer interface{}

    // Max-metric set reason. The type is MaxMetricSetReason.
    MaximumMetricSetReason interface{}

    // If true, ABR duties temporarily disabled. The type is bool.
    MaximumMetricAbrOffMode interface{}

    // Reasons for ABR duties being temporarily disabled. The type is
    // OspfMaxMetricAbrOffReasons.
    MaximumMetricAbrOffReasons interface{}

    // Buffer time in seconds since last neighbor activity, to remain in
    // max-metric ABR off state. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumMetricAbrOffBufferTime interface{}

    // Scheduling delay for SPF (ms). The type is interface{} with range:
    // 0..4294967295.
    SpfStartTime interface{}

    // Minimum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfHoldTime interface{}

    // Maximum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfMaximumTime interface{}

    // If true, prefix-priority policy is configured. The type is bool.
    SpfPrefixPriority interface{}

    // SPF Prefix-priority route policy. The type is string.
    SpfPrefixPriorityRoutePolicy interface{}

    // Inital LSA throttle delay (ms). The type is interface{} with range:
    // -2147483648..2147483647.
    LsaStartTime interface{}

    // Second delay before generating next LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaHoldTime interface{}

    // Maximum delay before generating an LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaMaximumTime interface{}

    // Minimum time between LSA regeneration (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaInterval interface{}

    // LSA refresh interval (sec). The type is interface{} with range:
    // 0..4294967295.
    LsaRefreshInterval interface{}

    // Minimum time between accepting LSAs (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaArrivalInterval interface{}

    // Flood pacing timer (ms). The type is interface{} with range: 0..65535.
    IfFloodPacingInterval interface{}

    // Retransmission pacing timer (ms). The type is interface{} with range:
    // 0..65535.
    IfRetransPacingInterval interface{}

    // Num of nbrs brought up initially per area. The type is interface{} with
    // range: 0..65535.
    AdjStagInitNumNbr interface{}

    // Max num of nbrs brought up simultaneously per OSPF instance. The type is
    // interface{} with range: 0..65535.
    AdjStagMaxNumNbr interface{}

    // If true, OSPF Adjacency Staggering is configured. The type is bool.
    AdjStaggerEnabled interface{}

    // Num of nbrs currently forming for OSPF instance. The type is interface{}
    // with range: 0..65535.
    AdjStagNumNbrForming interface{}

    // Num of full nbrs. The type is interface{} with range: 0..65535.
    NumberNbrsFull interface{}

    // Number of AS scope LSAs. The type is interface{} with range: 0..4294967295.
    AsLsaCount interface{}

    // Sum of AS scope LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    AsLsaChecksum interface{}

    // Number of Opaque LSAs. The type is interface{} with range: 0..4294967295.
    OpaqueLsaCount interface{}

    // Sum of opaque LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    OpaqueLsaChecksum interface{}

    // Number of External and AS Opaque LSAs with demand circut bit not set. The
    // type is interface{} with range: 0..4294967295.
    AsDcBitlessLsaCount interface{}

    // Number of External and AS Opaque LSAs with DoNotAge set . The type is
    // interface{} with range: 0..4294967295.
    AsDnaLsaCount interface{}

    // Number of areas. The type is interface{} with range: 0..65535.
    AreaCount interface{}

    // Number of normal Areas. The type is interface{} with range: 0..65535.
    NormalAreaCount interface{}

    // Number of Stub and Total Stub Areas. The type is interface{} with range:
    // 0..65535.
    StubAreaCount interface{}

    // Number of NSSA Areas. The type is interface{} with range: 0..65535.
    NssaAreaCount interface{}

    // Maximum number of interfaces. The type is interface{} with range:
    // 0..4294967295.
    MaximumInterfaces interface{}

    // Length of AS LSAs flood list. The type is interface{} with range:
    // 0..4294967295.
    AsLsaFloodListLength interface{}

    // If true, NSF enabled. The type is bool.
    NsfEnabled interface{}

    // Length of time since the last NSF (s). The type is interface{} with range:
    // 0..4294967295.
    LastNsfTime interface{}

    // Total time to complete NSF (s). The type is interface{} with range:
    // 0..4294967295.
    NsfTime interface{}

    // The number of redistributed prefixes allowed. The type is interface{} with
    // range: 0..4294967295.
    RedistributionLimit interface{}

    // When the number of redistributed prefixes reaches this threshold, a warning
    // message is issued. The type is interface{} with range: 0..4294967295.
    RedistributionThreshold interface{}

    // If true, only a syslog message is printed when redistribution prefix limit
    // is reached. The type is bool.
    RedistributionLimitWarn interface{}

    // Amount of time routes are retained after graceful shutdown (s). The type is
    // interface{} with range: 0..4294967295.
    GracefulShutdownRetentionTime interface{}

    // State of graceful shutdown. The type is GsState.
    GracefulShutdownState interface{}

    // If true, prefix limit for table has been  reached. The type is bool.
    TablePrefixLimitReached interface{}

    // Non self-generated LSA count. The type is interface{} with range:
    // 0..4294967295.
    NonSelfLsaCount interface{}

    // If true, max-lsa protection enabled. The type is bool.
    MaxLsaEnabled interface{}

    // Maximum allowed number of non self-generated LSAs. The type is interface{}
    // with range: 0..4294967295.
    MaxLsaLimit interface{}

    // max-lsa protection warning threshold. The type is interface{} with range:
    // 0..4294967295.
    MaxLsaTreshold interface{}

    // Warning only when max-lsa reached. The type is bool.
    MaxLsaWarningOnly interface{}

    // Time ignoring new LSAs after max-lsa reached. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreTime interface{}

    // Time after which LSA protection counter is reset. The type is interface{}
    // with range: 0..4294967295.
    MaxLsaResetTime interface{}

    // Max allowed number of entering ignore state. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreLimit interface{}

    // How many times ignore state has been entered. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreCount interface{}

    // Remaining time when ignore timer is running. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreTimer interface{}

    // Remaining time when reset timer is running. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaResetTimer interface{}

    // Context name. The type is string with length: 0..32.
    ContextName interface{}

    // If true, snmp trap is enabled. The type is bool.
    SnmpTrapEnabled interface{}

    // If true, UCMP is enabled. The type is bool.
    Ucmp interface{}

    // UCMP Prefix-list. The type is string.
    UcmpPrefixList interface{}

    // UCMP Variance. The type is interface{} with range: -2147483648..2147483647.
    UcmpVariance interface{}

    // Delay between end of SPF and start of UCMP calculation (ms). The type is
    // interface{} with range: 0..4294967295.
    UcmpDelay interface{}

    // Microloop avoidance type configured. The type is UloopAvoidance.
    MicroloopAvoidanceType interface{}

    // Microloop delay time after which actual          post convergence paths are
    // given to RIB (s). The type is interface{} with range: 0..4294967295.
    MicroloopAvoidanceDelay interface{}

    // If true, Uloop is active. The type is bool.
    MicroloopAvoidanceActive interface{}

    // Remaining time for uloop delay timer             to expire (s). The type is
    // interface{} with range: 0..4294967295.
    MicroloopAvoidanceDelayExpiry interface{}

    // True if connected to LSD. The type is bool.
    LsdConnected interface{}

    // True if registered with LSD. The type is bool.
    LsdRegistered interface{}

    // True if bound to LSD. The type is bool.
    LsdBound interface{}

    // LSD Connection Revision. The type is interface{} with range: 0..4294967295.
    LsdConnectionRevision interface{}

    // True if Segment Routing Global Block configured. The type is bool.
    SrgbConfigured interface{}

    // Segment Routing Global Block start label value. The type is interface{}
    // with range: 0..4294967295.
    SrgbStart interface{}

    // Segment Routing Global Block end label value. The type is interface{} with
    // range: 0..4294967295.
    SrgbEnd interface{}

    // Segment Routing Global Block allocation status. The type is OspfSrgbStatus.
    SrgbStatus interface{}

    // True if Segment Routing Strict-SPF capable. The type is bool.
    SrStrictSpfCap interface{}

    // Domain ID information.
    DomainId Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId

    // Max-metric list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric.
    MaximumMetric []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric

    // Redistribution list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution.
    Redistribution []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution
}

func (processSummary *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary) GetEntityData() *types.CommonEntityData {
    processSummary.EntityData.YFilter = processSummary.YFilter
    processSummary.EntityData.YangName = "process-summary"
    processSummary.EntityData.BundleName = "cisco_ios_xr"
    processSummary.EntityData.ParentYangName = "process-information"
    processSummary.EntityData.SegmentPath = "process-summary"
    processSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processSummary.EntityData.Children = types.NewOrderedMap()
    processSummary.EntityData.Children.Append("domain-id", types.YChild{"DomainId", &processSummary.DomainId})
    processSummary.EntityData.Children.Append("maximum-metric", types.YChild{"MaximumMetric", nil})
    for i := range processSummary.MaximumMetric {
        processSummary.EntityData.Children.Append(types.GetSegmentPath(processSummary.MaximumMetric[i]), types.YChild{"MaximumMetric", processSummary.MaximumMetric[i]})
    }
    processSummary.EntityData.Children.Append("redistribution", types.YChild{"Redistribution", nil})
    for i := range processSummary.Redistribution {
        processSummary.EntityData.Children.Append(types.GetSegmentPath(processSummary.Redistribution[i]), types.YChild{"Redistribution", processSummary.Redistribution[i]})
    }
    processSummary.EntityData.Leafs = types.NewOrderedMap()
    processSummary.EntityData.Leafs.Append("role-standby", types.YLeaf{"RoleStandby", processSummary.RoleStandby})
    processSummary.EntityData.Leafs.Append("role", types.YLeaf{"Role", processSummary.Role})
    processSummary.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", processSummary.NsrEnabled})
    processSummary.EntityData.Leafs.Append("nsr-switchover-on-restart", types.YLeaf{"NsrSwitchoverOnRestart", processSummary.NsrSwitchoverOnRestart})
    processSummary.EntityData.Leafs.Append("igp-intact-on", types.YLeaf{"IgpIntactOn", processSummary.IgpIntactOn})
    processSummary.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", processSummary.RouterId})
    processSummary.EntityData.Leafs.Append("tos-options", types.YLeaf{"TosOptions", processSummary.TosOptions})
    processSummary.EntityData.Leafs.Append("opaque-capable", types.YLeaf{"OpaqueCapable", processSummary.OpaqueCapable})
    processSummary.EntityData.Leafs.Append("area-border-router", types.YLeaf{"AreaBorderRouter", processSummary.AreaBorderRouter})
    processSummary.EntityData.Leafs.Append("as-border-router", types.YLeaf{"AsBorderRouter", processSummary.AsBorderRouter})
    processSummary.EntityData.Leafs.Append("vrf-lite-enabled", types.YLeaf{"VrfLiteEnabled", processSummary.VrfLiteEnabled})
    processSummary.EntityData.Leafs.Append("capability-prefer-type7", types.YLeaf{"CapabilityPreferType7", processSummary.CapabilityPreferType7})
    processSummary.EntityData.Leafs.Append("maximum-metric-start", types.YLeaf{"MaximumMetricStart", processSummary.MaximumMetricStart})
    processSummary.EntityData.Leafs.Append("maximum-metric-start-timer", types.YLeaf{"MaximumMetricStartTimer", processSummary.MaximumMetricStartTimer})
    processSummary.EntityData.Leafs.Append("maximum-metric-set-reason", types.YLeaf{"MaximumMetricSetReason", processSummary.MaximumMetricSetReason})
    processSummary.EntityData.Leafs.Append("maximum-metric-abr-off-mode", types.YLeaf{"MaximumMetricAbrOffMode", processSummary.MaximumMetricAbrOffMode})
    processSummary.EntityData.Leafs.Append("maximum-metric-abr-off-reasons", types.YLeaf{"MaximumMetricAbrOffReasons", processSummary.MaximumMetricAbrOffReasons})
    processSummary.EntityData.Leafs.Append("maximum-metric-abr-off-buffer-time", types.YLeaf{"MaximumMetricAbrOffBufferTime", processSummary.MaximumMetricAbrOffBufferTime})
    processSummary.EntityData.Leafs.Append("spf-start-time", types.YLeaf{"SpfStartTime", processSummary.SpfStartTime})
    processSummary.EntityData.Leafs.Append("spf-hold-time", types.YLeaf{"SpfHoldTime", processSummary.SpfHoldTime})
    processSummary.EntityData.Leafs.Append("spf-maximum-time", types.YLeaf{"SpfMaximumTime", processSummary.SpfMaximumTime})
    processSummary.EntityData.Leafs.Append("spf-prefix-priority", types.YLeaf{"SpfPrefixPriority", processSummary.SpfPrefixPriority})
    processSummary.EntityData.Leafs.Append("spf-prefix-priority-route-policy", types.YLeaf{"SpfPrefixPriorityRoutePolicy", processSummary.SpfPrefixPriorityRoutePolicy})
    processSummary.EntityData.Leafs.Append("lsa-start-time", types.YLeaf{"LsaStartTime", processSummary.LsaStartTime})
    processSummary.EntityData.Leafs.Append("lsa-hold-time", types.YLeaf{"LsaHoldTime", processSummary.LsaHoldTime})
    processSummary.EntityData.Leafs.Append("lsa-maximum-time", types.YLeaf{"LsaMaximumTime", processSummary.LsaMaximumTime})
    processSummary.EntityData.Leafs.Append("minimum-lsa-interval", types.YLeaf{"MinimumLsaInterval", processSummary.MinimumLsaInterval})
    processSummary.EntityData.Leafs.Append("lsa-refresh-interval", types.YLeaf{"LsaRefreshInterval", processSummary.LsaRefreshInterval})
    processSummary.EntityData.Leafs.Append("minimum-lsa-arrival-interval", types.YLeaf{"MinimumLsaArrivalInterval", processSummary.MinimumLsaArrivalInterval})
    processSummary.EntityData.Leafs.Append("if-flood-pacing-interval", types.YLeaf{"IfFloodPacingInterval", processSummary.IfFloodPacingInterval})
    processSummary.EntityData.Leafs.Append("if-retrans-pacing-interval", types.YLeaf{"IfRetransPacingInterval", processSummary.IfRetransPacingInterval})
    processSummary.EntityData.Leafs.Append("adj-stag-init-num-nbr", types.YLeaf{"AdjStagInitNumNbr", processSummary.AdjStagInitNumNbr})
    processSummary.EntityData.Leafs.Append("adj-stag-max-num-nbr", types.YLeaf{"AdjStagMaxNumNbr", processSummary.AdjStagMaxNumNbr})
    processSummary.EntityData.Leafs.Append("adj-stagger-enabled", types.YLeaf{"AdjStaggerEnabled", processSummary.AdjStaggerEnabled})
    processSummary.EntityData.Leafs.Append("adj-stag-num-nbr-forming", types.YLeaf{"AdjStagNumNbrForming", processSummary.AdjStagNumNbrForming})
    processSummary.EntityData.Leafs.Append("number-nbrs-full", types.YLeaf{"NumberNbrsFull", processSummary.NumberNbrsFull})
    processSummary.EntityData.Leafs.Append("as-lsa-count", types.YLeaf{"AsLsaCount", processSummary.AsLsaCount})
    processSummary.EntityData.Leafs.Append("as-lsa-checksum", types.YLeaf{"AsLsaChecksum", processSummary.AsLsaChecksum})
    processSummary.EntityData.Leafs.Append("opaque-lsa-count", types.YLeaf{"OpaqueLsaCount", processSummary.OpaqueLsaCount})
    processSummary.EntityData.Leafs.Append("opaque-lsa-checksum", types.YLeaf{"OpaqueLsaChecksum", processSummary.OpaqueLsaChecksum})
    processSummary.EntityData.Leafs.Append("as-dc-bitless-lsa-count", types.YLeaf{"AsDcBitlessLsaCount", processSummary.AsDcBitlessLsaCount})
    processSummary.EntityData.Leafs.Append("as-dna-lsa-count", types.YLeaf{"AsDnaLsaCount", processSummary.AsDnaLsaCount})
    processSummary.EntityData.Leafs.Append("area-count", types.YLeaf{"AreaCount", processSummary.AreaCount})
    processSummary.EntityData.Leafs.Append("normal-area-count", types.YLeaf{"NormalAreaCount", processSummary.NormalAreaCount})
    processSummary.EntityData.Leafs.Append("stub-area-count", types.YLeaf{"StubAreaCount", processSummary.StubAreaCount})
    processSummary.EntityData.Leafs.Append("nssa-area-count", types.YLeaf{"NssaAreaCount", processSummary.NssaAreaCount})
    processSummary.EntityData.Leafs.Append("maximum-interfaces", types.YLeaf{"MaximumInterfaces", processSummary.MaximumInterfaces})
    processSummary.EntityData.Leafs.Append("as-lsa-flood-list-length", types.YLeaf{"AsLsaFloodListLength", processSummary.AsLsaFloodListLength})
    processSummary.EntityData.Leafs.Append("nsf-enabled", types.YLeaf{"NsfEnabled", processSummary.NsfEnabled})
    processSummary.EntityData.Leafs.Append("last-nsf-time", types.YLeaf{"LastNsfTime", processSummary.LastNsfTime})
    processSummary.EntityData.Leafs.Append("nsf-time", types.YLeaf{"NsfTime", processSummary.NsfTime})
    processSummary.EntityData.Leafs.Append("redistribution-limit", types.YLeaf{"RedistributionLimit", processSummary.RedistributionLimit})
    processSummary.EntityData.Leafs.Append("redistribution-threshold", types.YLeaf{"RedistributionThreshold", processSummary.RedistributionThreshold})
    processSummary.EntityData.Leafs.Append("redistribution-limit-warn", types.YLeaf{"RedistributionLimitWarn", processSummary.RedistributionLimitWarn})
    processSummary.EntityData.Leafs.Append("graceful-shutdown-retention-time", types.YLeaf{"GracefulShutdownRetentionTime", processSummary.GracefulShutdownRetentionTime})
    processSummary.EntityData.Leafs.Append("graceful-shutdown-state", types.YLeaf{"GracefulShutdownState", processSummary.GracefulShutdownState})
    processSummary.EntityData.Leafs.Append("table-prefix-limit-reached", types.YLeaf{"TablePrefixLimitReached", processSummary.TablePrefixLimitReached})
    processSummary.EntityData.Leafs.Append("non-self-lsa-count", types.YLeaf{"NonSelfLsaCount", processSummary.NonSelfLsaCount})
    processSummary.EntityData.Leafs.Append("max-lsa-enabled", types.YLeaf{"MaxLsaEnabled", processSummary.MaxLsaEnabled})
    processSummary.EntityData.Leafs.Append("max-lsa-limit", types.YLeaf{"MaxLsaLimit", processSummary.MaxLsaLimit})
    processSummary.EntityData.Leafs.Append("max-lsa-treshold", types.YLeaf{"MaxLsaTreshold", processSummary.MaxLsaTreshold})
    processSummary.EntityData.Leafs.Append("max-lsa-warning-only", types.YLeaf{"MaxLsaWarningOnly", processSummary.MaxLsaWarningOnly})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-time", types.YLeaf{"MaxLsaIgnoreTime", processSummary.MaxLsaIgnoreTime})
    processSummary.EntityData.Leafs.Append("max-lsa-reset-time", types.YLeaf{"MaxLsaResetTime", processSummary.MaxLsaResetTime})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-limit", types.YLeaf{"MaxLsaIgnoreLimit", processSummary.MaxLsaIgnoreLimit})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-count", types.YLeaf{"MaxLsaIgnoreCount", processSummary.MaxLsaIgnoreCount})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-timer", types.YLeaf{"MaxLsaIgnoreTimer", processSummary.MaxLsaIgnoreTimer})
    processSummary.EntityData.Leafs.Append("max-lsa-reset-timer", types.YLeaf{"MaxLsaResetTimer", processSummary.MaxLsaResetTimer})
    processSummary.EntityData.Leafs.Append("context-name", types.YLeaf{"ContextName", processSummary.ContextName})
    processSummary.EntityData.Leafs.Append("snmp-trap-enabled", types.YLeaf{"SnmpTrapEnabled", processSummary.SnmpTrapEnabled})
    processSummary.EntityData.Leafs.Append("ucmp", types.YLeaf{"Ucmp", processSummary.Ucmp})
    processSummary.EntityData.Leafs.Append("ucmp-prefix-list", types.YLeaf{"UcmpPrefixList", processSummary.UcmpPrefixList})
    processSummary.EntityData.Leafs.Append("ucmp-variance", types.YLeaf{"UcmpVariance", processSummary.UcmpVariance})
    processSummary.EntityData.Leafs.Append("ucmp-delay", types.YLeaf{"UcmpDelay", processSummary.UcmpDelay})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-type", types.YLeaf{"MicroloopAvoidanceType", processSummary.MicroloopAvoidanceType})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-delay", types.YLeaf{"MicroloopAvoidanceDelay", processSummary.MicroloopAvoidanceDelay})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-active", types.YLeaf{"MicroloopAvoidanceActive", processSummary.MicroloopAvoidanceActive})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-delay-expiry", types.YLeaf{"MicroloopAvoidanceDelayExpiry", processSummary.MicroloopAvoidanceDelayExpiry})
    processSummary.EntityData.Leafs.Append("lsd-connected", types.YLeaf{"LsdConnected", processSummary.LsdConnected})
    processSummary.EntityData.Leafs.Append("lsd-registered", types.YLeaf{"LsdRegistered", processSummary.LsdRegistered})
    processSummary.EntityData.Leafs.Append("lsd-bound", types.YLeaf{"LsdBound", processSummary.LsdBound})
    processSummary.EntityData.Leafs.Append("lsd-connection-revision", types.YLeaf{"LsdConnectionRevision", processSummary.LsdConnectionRevision})
    processSummary.EntityData.Leafs.Append("srgb-configured", types.YLeaf{"SrgbConfigured", processSummary.SrgbConfigured})
    processSummary.EntityData.Leafs.Append("srgb-start", types.YLeaf{"SrgbStart", processSummary.SrgbStart})
    processSummary.EntityData.Leafs.Append("srgb-end", types.YLeaf{"SrgbEnd", processSummary.SrgbEnd})
    processSummary.EntityData.Leafs.Append("srgb-status", types.YLeaf{"SrgbStatus", processSummary.SrgbStatus})
    processSummary.EntityData.Leafs.Append("sr-strict-spf-cap", types.YLeaf{"SrStrictSpfCap", processSummary.SrStrictSpfCap})

    processSummary.EntityData.YListKeys = []string {}

    return &(processSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId
// Domain ID information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary Domain ID.
    PrimaryDomainId Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId

    // List of secondary domain IDs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId.
    SecondaryDomainId []*Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId) GetEntityData() *types.CommonEntityData {
    domainId.EntityData.YFilter = domainId.YFilter
    domainId.EntityData.YangName = "domain-id"
    domainId.EntityData.BundleName = "cisco_ios_xr"
    domainId.EntityData.ParentYangName = "process-summary"
    domainId.EntityData.SegmentPath = "domain-id"
    domainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domainId.EntityData.Children = types.NewOrderedMap()
    domainId.EntityData.Children.Append("primary-domain-id", types.YChild{"PrimaryDomainId", &domainId.PrimaryDomainId})
    domainId.EntityData.Children.Append("secondary-domain-id", types.YChild{"SecondaryDomainId", nil})
    for i := range domainId.SecondaryDomainId {
        domainId.EntityData.Children.Append(types.GetSegmentPath(domainId.SecondaryDomainId[i]), types.YChild{"SecondaryDomainId", domainId.SecondaryDomainId[i]})
    }
    domainId.EntityData.Leafs = types.NewOrderedMap()

    domainId.EntityData.YListKeys = []string {}

    return &(domainId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId
// Primary Domain ID
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId) GetEntityData() *types.CommonEntityData {
    primaryDomainId.EntityData.YFilter = primaryDomainId.YFilter
    primaryDomainId.EntityData.YangName = "primary-domain-id"
    primaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    primaryDomainId.EntityData.ParentYangName = "domain-id"
    primaryDomainId.EntityData.SegmentPath = "primary-domain-id"
    primaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primaryDomainId.EntityData.Children = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", primaryDomainId.DomainIdType})
    primaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", primaryDomainId.DomainIdValue})

    primaryDomainId.EntityData.YListKeys = []string {}

    return &(primaryDomainId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId
// List of secondary domain IDs
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId) GetEntityData() *types.CommonEntityData {
    secondaryDomainId.EntityData.YFilter = secondaryDomainId.YFilter
    secondaryDomainId.EntityData.YangName = "secondary-domain-id"
    secondaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    secondaryDomainId.EntityData.ParentYangName = "domain-id"
    secondaryDomainId.EntityData.SegmentPath = "secondary-domain-id"
    secondaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaryDomainId.EntityData.Children = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", secondaryDomainId.DomainIdType})
    secondaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", secondaryDomainId.DomainIdValue})

    secondaryDomainId.EntityData.YListKeys = []string {}

    return &(secondaryDomainId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric
// Max-metric list
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max-metric reason. The type is interface{} with range: 0..255.
    MaxMetricReason interface{}

    // Max-metric enabled. The type is bool.
    MaxMetricEnabled interface{}

    // If true, BGP is up, no maximum metric Router LSA. The type is bool.
    UnsetMaximumMetric interface{}

    // Saved UnsetMaximumMetric. The type is bool.
    SavedUnsetMaximumMetric interface{}

    // Time remaining until we will start using normal metrics (s). The type is
    // interface{} with range: 0..4294967295.
    MaximumMetricStartTime interface{}

    // Hold time configured (s). The type is interface{} with range:
    // 0..4294967295.
    SavedStartupTime interface{}

    // If true, set max-metric in stub links. The type is bool.
    MaximumMetricIncludeStubs interface{}

    // If true, advertise max-metric in summary-LSAs. The type is bool.
    MaximumMetricSummaryLsa interface{}

    // Max-metric value to advertise in summary-LSAs. The type is interface{} with
    // range: 0..4294967295.
    MaximumMetricSummaryLsaMetric interface{}

    // If true, advertise max-metric in external-LSAs. The type is bool.
    MaximumMetricExternalLsa interface{}

    // Max-metric value to advertise in external-LSAs. The type is interface{}
    // with range: 0..4294967295.
    MaximumMetricExternalLsaMetric interface{}

    // Time max-metric was used for. The type is interface{} with range:
    // 0..4294967295.
    MaximumMetricOriginatedFor interface{}

    // Max-metric unset reason. The type is MaxMetricUnsetReason.
    MaximumMetricUnsetReason interface{}

    // Time max-metric condition was cleared.
    MaximumMetricTimeUnset Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset
}

func (maximumMetric *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric) GetEntityData() *types.CommonEntityData {
    maximumMetric.EntityData.YFilter = maximumMetric.YFilter
    maximumMetric.EntityData.YangName = "maximum-metric"
    maximumMetric.EntityData.BundleName = "cisco_ios_xr"
    maximumMetric.EntityData.ParentYangName = "process-summary"
    maximumMetric.EntityData.SegmentPath = "maximum-metric"
    maximumMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumMetric.EntityData.Children = types.NewOrderedMap()
    maximumMetric.EntityData.Children.Append("maximum-metric-time-unset", types.YChild{"MaximumMetricTimeUnset", &maximumMetric.MaximumMetricTimeUnset})
    maximumMetric.EntityData.Leafs = types.NewOrderedMap()
    maximumMetric.EntityData.Leafs.Append("max-metric-reason", types.YLeaf{"MaxMetricReason", maximumMetric.MaxMetricReason})
    maximumMetric.EntityData.Leafs.Append("max-metric-enabled", types.YLeaf{"MaxMetricEnabled", maximumMetric.MaxMetricEnabled})
    maximumMetric.EntityData.Leafs.Append("unset-maximum-metric", types.YLeaf{"UnsetMaximumMetric", maximumMetric.UnsetMaximumMetric})
    maximumMetric.EntityData.Leafs.Append("saved-unset-maximum-metric", types.YLeaf{"SavedUnsetMaximumMetric", maximumMetric.SavedUnsetMaximumMetric})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-start-time", types.YLeaf{"MaximumMetricStartTime", maximumMetric.MaximumMetricStartTime})
    maximumMetric.EntityData.Leafs.Append("saved-startup-time", types.YLeaf{"SavedStartupTime", maximumMetric.SavedStartupTime})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-include-stubs", types.YLeaf{"MaximumMetricIncludeStubs", maximumMetric.MaximumMetricIncludeStubs})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-summary-lsa", types.YLeaf{"MaximumMetricSummaryLsa", maximumMetric.MaximumMetricSummaryLsa})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-summary-lsa-metric", types.YLeaf{"MaximumMetricSummaryLsaMetric", maximumMetric.MaximumMetricSummaryLsaMetric})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-external-lsa", types.YLeaf{"MaximumMetricExternalLsa", maximumMetric.MaximumMetricExternalLsa})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-external-lsa-metric", types.YLeaf{"MaximumMetricExternalLsaMetric", maximumMetric.MaximumMetricExternalLsaMetric})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-originated-for", types.YLeaf{"MaximumMetricOriginatedFor", maximumMetric.MaximumMetricOriginatedFor})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-unset-reason", types.YLeaf{"MaximumMetricUnsetReason", maximumMetric.MaximumMetricUnsetReason})

    maximumMetric.EntityData.YListKeys = []string {}

    return &(maximumMetric.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset
// Time max-metric condition was cleared
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (maximumMetricTimeUnset *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset) GetEntityData() *types.CommonEntityData {
    maximumMetricTimeUnset.EntityData.YFilter = maximumMetricTimeUnset.YFilter
    maximumMetricTimeUnset.EntityData.YangName = "maximum-metric-time-unset"
    maximumMetricTimeUnset.EntityData.BundleName = "cisco_ios_xr"
    maximumMetricTimeUnset.EntityData.ParentYangName = "maximum-metric"
    maximumMetricTimeUnset.EntityData.SegmentPath = "maximum-metric-time-unset"
    maximumMetricTimeUnset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumMetricTimeUnset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumMetricTimeUnset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumMetricTimeUnset.EntityData.Children = types.NewOrderedMap()
    maximumMetricTimeUnset.EntityData.Leafs = types.NewOrderedMap()
    maximumMetricTimeUnset.EntityData.Leafs.Append("second", types.YLeaf{"Second", maximumMetricTimeUnset.Second})
    maximumMetricTimeUnset.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", maximumMetricTimeUnset.Nanosecond})

    maximumMetricTimeUnset.EntityData.YListKeys = []string {}

    return &(maximumMetricTimeUnset.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution
// Redistribution list
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Metric configured. The type is bool.
    MetricFlag interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Whether to use CIDR. The type is bool.
    Classless interface{}

    // To NSSA areas only. The type is bool.
    NssaOnly interface{}

    // Protocol Information.
    RedistributionProtocol Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "process-summary"
    redistribution.EntityData.SegmentPath = "redistribution"
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = types.NewOrderedMap()
    redistribution.EntityData.Children.Append("redistribution-protocol", types.YChild{"RedistributionProtocol", &redistribution.RedistributionProtocol})
    redistribution.EntityData.Leafs = types.NewOrderedMap()
    redistribution.EntityData.Leafs.Append("metric-flag", types.YLeaf{"MetricFlag", redistribution.MetricFlag})
    redistribution.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", redistribution.Metric})
    redistribution.EntityData.Leafs.Append("classless", types.YLeaf{"Classless", redistribution.Classless})
    redistribution.EntityData.Leafs.Append("nssa-only", types.YLeaf{"NssaOnly", redistribution.NssaOnly})

    redistribution.EntityData.YListKeys = []string {}

    return &(redistribution.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol
// Protocol Information
type Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ProtocolType. The type is RedistProtocol.
    ProtocolType interface{}

    // ISIS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // BGP Autonomous System Number. The type is string.
    BgpAsNumber interface{}

    // Autonomous System Number. The type is string.
    EigrpAsNumber interface{}

    // Connected instance name. The type is string.
    ConnectedInstance interface{}
}

func (redistributionProtocol *Ospf_Processes_Process_Vrfs_Vrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol) GetEntityData() *types.CommonEntityData {
    redistributionProtocol.EntityData.YFilter = redistributionProtocol.YFilter
    redistributionProtocol.EntityData.YangName = "redistribution-protocol"
    redistributionProtocol.EntityData.BundleName = "cisco_ios_xr"
    redistributionProtocol.EntityData.ParentYangName = "redistribution"
    redistributionProtocol.EntityData.SegmentPath = "redistribution-protocol"
    redistributionProtocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionProtocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionProtocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionProtocol.EntityData.Children = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", redistributionProtocol.ProtocolType})
    redistributionProtocol.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", redistributionProtocol.IsisInstanceId})
    redistributionProtocol.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", redistributionProtocol.OspfProcessId})
    redistributionProtocol.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", redistributionProtocol.BgpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", redistributionProtocol.EigrpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("connected-instance", types.YLeaf{"ConnectedInstance", redistributionProtocol.ConnectedInstance})

    redistributionProtocol.EntityData.YListKeys = []string {}

    return &(redistributionProtocol.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas
// Area table
type Ospf_Processes_Process_Vrfs_Vrf_Areas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Container for per area data. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area.
    Area []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area
}

func (areas *Ospf_Processes_Process_Vrfs_Vrf_Areas) GetEntityData() *types.CommonEntityData {
    areas.EntityData.YFilter = areas.YFilter
    areas.EntityData.YangName = "areas"
    areas.EntityData.BundleName = "cisco_ios_xr"
    areas.EntityData.ParentYangName = "vrf"
    areas.EntityData.SegmentPath = "areas"
    areas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areas.EntityData.Children = types.NewOrderedMap()
    areas.EntityData.Children.Append("area", types.YChild{"Area", nil})
    for i := range areas.Area {
        areas.EntityData.Children.Append(types.GetSegmentPath(areas.Area[i]), types.YChild{"Area", areas.Area[i]})
    }
    areas.EntityData.Leafs = types.NewOrderedMap()

    areas.EntityData.YListKeys = []string {}

    return &(areas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area
// Container for per area data
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area specific flood list table.
    FloodListAreaTable Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable

    // Neighbor table.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors

    // OSPF Interface Brief Table.
    InterfaceBriefs Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs

    // Request List table.
    Requests Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests

    // Retransmission list table.
    Retransmissions Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions

    // Container for Statistics.
    AreaStatistics Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics

    // Neighbor detail table.
    NeighborDetails Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails

    // OSPF Interface Table.
    Interfaces Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces
}

func (area *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area) GetEntityData() *types.CommonEntityData {
    area.EntityData.YFilter = area.YFilter
    area.EntityData.YangName = "area"
    area.EntityData.BundleName = "cisco_ios_xr"
    area.EntityData.ParentYangName = "areas"
    area.EntityData.SegmentPath = "area" + types.AddKeyToken(area.AreaId, "area-id")
    area.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    area.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    area.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    area.EntityData.Children = types.NewOrderedMap()
    area.EntityData.Children.Append("flood-list-area-table", types.YChild{"FloodListAreaTable", &area.FloodListAreaTable})
    area.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &area.Neighbors})
    area.EntityData.Children.Append("interface-briefs", types.YChild{"InterfaceBriefs", &area.InterfaceBriefs})
    area.EntityData.Children.Append("requests", types.YChild{"Requests", &area.Requests})
    area.EntityData.Children.Append("retransmissions", types.YChild{"Retransmissions", &area.Retransmissions})
    area.EntityData.Children.Append("area-statistics", types.YChild{"AreaStatistics", &area.AreaStatistics})
    area.EntityData.Children.Append("neighbor-details", types.YChild{"NeighborDetails", &area.NeighborDetails})
    area.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &area.Interfaces})
    area.EntityData.Leafs = types.NewOrderedMap()
    area.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", area.AreaId})

    area.EntityData.YListKeys = []string {"AreaId"}

    return &(area.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable
// Area specific flood list table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flooding information for a specific interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood.
    Flood []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood
}

func (floodListAreaTable *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable) GetEntityData() *types.CommonEntityData {
    floodListAreaTable.EntityData.YFilter = floodListAreaTable.YFilter
    floodListAreaTable.EntityData.YangName = "flood-list-area-table"
    floodListAreaTable.EntityData.BundleName = "cisco_ios_xr"
    floodListAreaTable.EntityData.ParentYangName = "area"
    floodListAreaTable.EntityData.SegmentPath = "flood-list-area-table"
    floodListAreaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListAreaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListAreaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListAreaTable.EntityData.Children = types.NewOrderedMap()
    floodListAreaTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListAreaTable.Flood {
        floodListAreaTable.EntityData.Children.Append(types.GetSegmentPath(floodListAreaTable.Flood[i]), types.YChild{"Flood", floodListAreaTable.Flood[i]})
    }
    floodListAreaTable.EntityData.Leafs = types.NewOrderedMap()

    floodListAreaTable.EntityData.YListKeys = []string {}

    return &(floodListAreaTable.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood
// Flooding information for a specific interface
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    FloodInterfaceName interface{}

    // Time until next LS update due (ms). The type is interface{} with range:
    // 0..4294967295.
    FloodPacingTimer interface{}

    // Number of LSAs currently being flooded. The type is interface{} with range:
    // 0..4294967295.
    FloodLsaCount interface{}

    // Area scope floodlist. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood.
    AreaFlood []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AsFlood.
    AsFlood []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AsFlood
}

func (flood *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-area-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("flood-interface-name", types.YLeaf{"FloodInterfaceName", flood.FloodInterfaceName})
    flood.EntityData.Leafs.Append("flood-pacing-timer", types.YLeaf{"FloodPacingTimer", flood.FloodPacingTimer})
    flood.EntityData.Leafs.Append("flood-lsa-count", types.YLeaf{"FloodLsaCount", flood.FloodLsaCount})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood
// Area scope floodlist
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (areaFlood *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood"
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", areaFlood.HeaderLsId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})
    areaFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", areaFlood.HeaderLsaChecksum})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AsFlood
// AS scope floodlist
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (asFlood *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListAreaTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood"
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", asFlood.HeaderLsId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})
    asFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", asFlood.HeaderLsaChecksum})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors
// Neighbor table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor.
    Neighbor []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "area"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor
// Neighbor information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighbor.NeighborBfdInformation})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighbor.NeighborId})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighbor.NeighborInterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighbor.DrBdrState})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighbor.NeighborMadjInterface})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs
// OSPF Interface Brief Table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface brief information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs) GetEntityData() *types.CommonEntityData {
    interfaceBriefs.EntityData.YFilter = interfaceBriefs.YFilter
    interfaceBriefs.EntityData.YangName = "interface-briefs"
    interfaceBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefs.EntityData.ParentYangName = "area"
    interfaceBriefs.EntityData.SegmentPath = "interface-briefs"
    interfaceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceBriefs.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefs.InterfaceBrief {
        interfaceBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefs.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefs.InterfaceBrief[i]})
    }
    interfaceBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefs.EntityData.YListKeys = []string {}

    return &(interfaceBriefs.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief
// OSPF interface brief information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface in fast detect hold down state. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj
}

func (interfaceBrief *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-briefs"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range interfaceBrief.InterfaceMadj {
        interfaceBrief.EntityData.Children.Append(types.GetSegmentPath(interfaceBrief.InterfaceMadj[i]), types.YChild{"InterfaceMadj", interfaceBrief.InterfaceMadj[i]})
    }
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceBrief.InterfaceNameXr})
    interfaceBrief.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceBrief.InterfaceArea})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", interfaceBrief.InterfaceMask})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", interfaceBrief.InterfaceFastDetectHoldDown})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceBrief.InterfaceNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceBrief.InterfaceAdjNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", interfaceBrief.InterfaceisMadj})
    interfaceBrief.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", interfaceBrief.InterfaceMadjCount})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface-brief"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests
// Request List table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Request list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request.
    Request []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request
}

func (requests *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests) GetEntityData() *types.CommonEntityData {
    requests.EntityData.YFilter = requests.YFilter
    requests.EntityData.YangName = "requests"
    requests.EntityData.BundleName = "cisco_ios_xr"
    requests.EntityData.ParentYangName = "area"
    requests.EntityData.SegmentPath = "requests"
    requests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requests.EntityData.Children = types.NewOrderedMap()
    requests.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requests.Request {
        requests.EntityData.Children.Append(types.GetSegmentPath(requests.Request[i]), types.YChild{"Request", requests.Request[i]})
    }
    requests.EntityData.Leafs = types.NewOrderedMap()

    requests.EntityData.YListKeys = []string {}

    return &(requests.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request
// Request list for a particular adjacency
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborId interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // Request list interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RequestInterfaceName interface{}

    // List of request list entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request_Request.
    Request []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request_Request
}

func (request *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "requests"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-id", types.YLeaf{"RequestNeighborId", request.RequestNeighborId})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("request-interface-name", types.YLeaf{"RequestInterfaceName", request.RequestInterfaceName})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request_Request
// List of request list entries
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (request *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Requests_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", request.HeaderLsId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})
    request.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", request.HeaderLsaChecksum})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions
// Retransmission list table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Retransmission list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission.
    Retransmission []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission
}

func (retransmissions *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions) GetEntityData() *types.CommonEntityData {
    retransmissions.EntityData.YFilter = retransmissions.YFilter
    retransmissions.EntityData.YangName = "retransmissions"
    retransmissions.EntityData.BundleName = "cisco_ios_xr"
    retransmissions.EntityData.ParentYangName = "area"
    retransmissions.EntityData.SegmentPath = "retransmissions"
    retransmissions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissions.EntityData.Children = types.NewOrderedMap()
    retransmissions.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissions.Retransmission {
        retransmissions.EntityData.Children.Append(types.GetSegmentPath(retransmissions.Retransmission[i]), types.YChild{"Retransmission", retransmissions.Retransmission[i]})
    }
    retransmissions.EntityData.Leafs = types.NewOrderedMap()

    retransmissions.EntityData.YListKeys = []string {}

    return &(retransmissions.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission
// Retransmission list for a particular adjacency
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborIpAddress interface{}

    // Retransmission list interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    RetransmissionInterfaceName interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionCount interface{}

    // List of Area scope entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb

    // List of AS Scope entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmissions"
    retransmission.EntityData.SegmentPath = "retransmission"
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-id", types.YLeaf{"RetransmissionNeighborId", retransmission.RetransmissionNeighborId})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-ip-address", types.YLeaf{"RetransmissionNeighborIpAddress", retransmission.RetransmissionNeighborIpAddress})
    retransmission.EntityData.Leafs.Append("retransmission-interface-name", types.YLeaf{"RetransmissionInterfaceName", retransmission.RetransmissionInterfaceName})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-count", types.YLeaf{"RetransmissionCount", retransmission.RetransmissionCount})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb
// List of Area scope entries
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAreaDb *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db"
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAreaDb.HeaderLsId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAreaDb.HeaderLsaChecksum})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb
// List of AS Scope entries
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAsdb *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb"
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAsdb.HeaderLsId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAsdb.HeaderLsaChecksum})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics
// Container for Statistics
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics innformation Interface table.
    InterfaceStatsEntries Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries
}

func (areaStatistics *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics) GetEntityData() *types.CommonEntityData {
    areaStatistics.EntityData.YFilter = areaStatistics.YFilter
    areaStatistics.EntityData.YangName = "area-statistics"
    areaStatistics.EntityData.BundleName = "cisco_ios_xr"
    areaStatistics.EntityData.ParentYangName = "area"
    areaStatistics.EntityData.SegmentPath = "area-statistics"
    areaStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStatistics.EntityData.Children = types.NewOrderedMap()
    areaStatistics.EntityData.Children.Append("interface-stats-entries", types.YChild{"InterfaceStatsEntries", &areaStatistics.InterfaceStatsEntries})
    areaStatistics.EntityData.Leafs = types.NewOrderedMap()

    areaStatistics.EntityData.YListKeys = []string {}

    return &(areaStatistics.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries
// Statistics innformation Interface table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics information for a specific interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry.
    InterfaceStatsEntry []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
}

func (interfaceStatsEntries *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntries.EntityData.YFilter = interfaceStatsEntries.YFilter
    interfaceStatsEntries.EntityData.YangName = "interface-stats-entries"
    interfaceStatsEntries.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntries.EntityData.ParentYangName = "area-statistics"
    interfaceStatsEntries.EntityData.SegmentPath = "interface-stats-entries"
    interfaceStatsEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntries.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntries.EntityData.Children.Append("interface-stats-entry", types.YChild{"InterfaceStatsEntry", nil})
    for i := range interfaceStatsEntries.InterfaceStatsEntry {
        interfaceStatsEntries.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntries.InterfaceStatsEntry[i]), types.YChild{"InterfaceStatsEntry", interfaceStatsEntries.InterfaceStatsEntry[i]})
    }
    interfaceStatsEntries.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatsEntries.EntityData.YListKeys = []string {}

    return &(interfaceStatsEntries.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
// Statistics information for a specific interface
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // interface handle type. The type is string with pattern: [a-zA-Z0-9./-]+.
    Handle interface{}

    // interface name. The type is string.
    IfNameStr interface{}

    // interface entry. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry.
    IfEntry []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
}

func (interfaceStatsEntry *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntry.EntityData.YFilter = interfaceStatsEntry.YFilter
    interfaceStatsEntry.EntityData.YangName = "interface-stats-entry"
    interfaceStatsEntry.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntry.EntityData.ParentYangName = "interface-stats-entries"
    interfaceStatsEntry.EntityData.SegmentPath = "interface-stats-entry" + types.AddKeyToken(interfaceStatsEntry.InterfaceName, "interface-name")
    interfaceStatsEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntry.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Children.Append("if-entry", types.YChild{"IfEntry", nil})
    for i := range interfaceStatsEntry.IfEntry {
        interfaceStatsEntry.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntry.IfEntry[i]), types.YChild{"IfEntry", interfaceStatsEntry.IfEntry[i]})
    }
    interfaceStatsEntry.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatsEntry.InterfaceName})
    interfaceStatsEntry.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", interfaceStatsEntry.Handle})
    interfaceStatsEntry.EntityData.Leafs.Append("if-name-str", types.YLeaf{"IfNameStr", interfaceStatsEntry.IfNameStr})

    interfaceStatsEntry.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatsEntry.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
// interface entry
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF madj interface. The type is bool.
    MadjIntf interface{}

    // OSPF area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // OSPF aread id string. The type is string.
    AreaIdStr interface{}

    // OSPF interface statistics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat.
    IfStat []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
}

func (ifEntry *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry) GetEntityData() *types.CommonEntityData {
    ifEntry.EntityData.YFilter = ifEntry.YFilter
    ifEntry.EntityData.YangName = "if-entry"
    ifEntry.EntityData.BundleName = "cisco_ios_xr"
    ifEntry.EntityData.ParentYangName = "interface-stats-entry"
    ifEntry.EntityData.SegmentPath = "if-entry"
    ifEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifEntry.EntityData.Children = types.NewOrderedMap()
    ifEntry.EntityData.Children.Append("if-stat", types.YChild{"IfStat", nil})
    for i := range ifEntry.IfStat {
        ifEntry.EntityData.Children.Append(types.GetSegmentPath(ifEntry.IfStat[i]), types.YChild{"IfStat", ifEntry.IfStat[i]})
    }
    ifEntry.EntityData.Leafs = types.NewOrderedMap()
    ifEntry.EntityData.Leafs.Append("madj-intf", types.YLeaf{"MadjIntf", ifEntry.MadjIntf})
    ifEntry.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", ifEntry.AreaId})
    ifEntry.EntityData.Leafs.Append("area-id-str", types.YLeaf{"AreaIdStr", ifEntry.AreaIdStr})

    ifEntry.EntityData.YListKeys = []string {}

    return &(ifEntry.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
// OSPF interface statistics
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (ifStat *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat) GetEntityData() *types.CommonEntityData {
    ifStat.EntityData.YFilter = ifStat.YFilter
    ifStat.EntityData.YangName = "if-stat"
    ifStat.EntityData.BundleName = "cisco_ios_xr"
    ifStat.EntityData.ParentYangName = "if-entry"
    ifStat.EntityData.SegmentPath = "if-stat"
    ifStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifStat.EntityData.Children = types.NewOrderedMap()
    ifStat.EntityData.Leafs = types.NewOrderedMap()
    ifStat.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", ifStat.Entry})

    ifStat.EntityData.YListKeys = []string {}

    return &(ifStat.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails
// Neighbor detail table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single neighbor's detail information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail.
    NeighborDetail []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail
}

func (neighborDetails *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails) GetEntityData() *types.CommonEntityData {
    neighborDetails.EntityData.YFilter = neighborDetails.YFilter
    neighborDetails.EntityData.YangName = "neighbor-details"
    neighborDetails.EntityData.BundleName = "cisco_ios_xr"
    neighborDetails.EntityData.ParentYangName = "area"
    neighborDetails.EntityData.SegmentPath = "neighbor-details"
    neighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetails.EntityData.Children = types.NewOrderedMap()
    neighborDetails.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetails.NeighborDetail {
        neighborDetails.EntityData.Children.Append(types.GetSegmentPath(neighborDetails.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetails.NeighborDetail[i]})
    }
    neighborDetails.EntityData.Leafs = types.NewOrderedMap()

    neighborDetails.EntityData.YListKeys = []string {}

    return &(neighborDetails.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail
// A single neighbor's detail information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    NeighborAreaId interface{}

    // Number of state changes. The type is interface{} with range: 0..65535.
    StateChangeCount interface{}

    // Cost of path to this neighbor. The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs. The type is bool.
    NeighborFilter interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Interface_.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // This is bitmaks of neighbor's option field received. The type is
    // interface{} with range: 0..255.
    NeighborOption interface{}

    // Number of pending events. The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // This is a bitmask of Link Local signalling options received from the
    // neighbor. The type is interface{} with range: 0..4294967295.
    NeighborLlsOption interface{}

    // Out-Of-Bound resynchronization in progress. The type is bool.
    OobResynchronization interface{}

    // For cisco NSF, the router is either Requester or Receiver. The type is
    // NsfRtr.
    NsfRouterState interface{}

    // The amount of time in seconds since last time Out-Of-Band resynchronization
    // was done with this neighbor. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastOobTime interface{}

    // LFA Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    LfaInterface interface{}

    // LFA Next Hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNextHop interface{}

    // LFA Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNeighborId interface{}

    // LFA Neighbor Revision. The type is interface{} with range: 0..4294967295.
    LfaNeighborRevision interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    NeighborAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    NeighborAckListHighWatermark interface{}

    // SR Adjacency SID Label. The type is interface{} with range: 0..4294967295.
    AdjacencySidLabel interface{}

    // SR Adjacency SID Protected. The type is bool.
    AdjacencySidProtected interface{}

    // SR Adjacency SID Unprotected Label. The type is interface{} with range:
    // 0..4294967295.
    AdjacencySidUnprotectedLabel interface{}

    // Interface ID of neighbor recived via LLS. The type is interface{} with
    // range: 0..65535.
    NeighborInterfaceId interface{}

    // Neighbor summary information.
    NeighborSummary Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation

    // Retransmission information with this neighbor.
    NeighborRetransmissionInformation Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
}

func (neighborDetail *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-details"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-summary", types.YChild{"NeighborSummary", &neighborDetail.NeighborSummary})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborDetail.NeighborBfdInformation})
    neighborDetail.EntityData.Children.Append("neighbor-retransmission-information", types.YChild{"NeighborRetransmissionInformation", &neighborDetail.NeighborRetransmissionInformation})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-area-id", types.YLeaf{"NeighborAreaId", neighborDetail.NeighborAreaId})
    neighborDetail.EntityData.Leafs.Append("state-change-count", types.YLeaf{"StateChangeCount", neighborDetail.StateChangeCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("neighbor-filter", types.YLeaf{"NeighborFilter", neighborDetail.NeighborFilter})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})
    neighborDetail.EntityData.Leafs.Append("neighbor-lls-option", types.YLeaf{"NeighborLlsOption", neighborDetail.NeighborLlsOption})
    neighborDetail.EntityData.Leafs.Append("oob-resynchronization", types.YLeaf{"OobResynchronization", neighborDetail.OobResynchronization})
    neighborDetail.EntityData.Leafs.Append("nsf-router-state", types.YLeaf{"NsfRouterState", neighborDetail.NsfRouterState})
    neighborDetail.EntityData.Leafs.Append("last-oob-time", types.YLeaf{"LastOobTime", neighborDetail.LastOobTime})
    neighborDetail.EntityData.Leafs.Append("lfa-interface", types.YLeaf{"LfaInterface", neighborDetail.LfaInterface})
    neighborDetail.EntityData.Leafs.Append("lfa-next-hop", types.YLeaf{"LfaNextHop", neighborDetail.LfaNextHop})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-id", types.YLeaf{"LfaNeighborId", neighborDetail.LfaNeighborId})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-revision", types.YLeaf{"LfaNeighborRevision", neighborDetail.LfaNeighborRevision})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-count", types.YLeaf{"NeighborAckListCount", neighborDetail.NeighborAckListCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-high-watermark", types.YLeaf{"NeighborAckListHighWatermark", neighborDetail.NeighborAckListHighWatermark})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-label", types.YLeaf{"AdjacencySidLabel", neighborDetail.AdjacencySidLabel})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-protected", types.YLeaf{"AdjacencySidProtected", neighborDetail.AdjacencySidProtected})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-unprotected-label", types.YLeaf{"AdjacencySidUnprotectedLabel", neighborDetail.AdjacencySidUnprotectedLabel})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary
// Neighbor summary information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
}

func (neighborSummary *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary) GetEntityData() *types.CommonEntityData {
    neighborSummary.EntityData.YFilter = neighborSummary.YFilter
    neighborSummary.EntityData.YangName = "neighbor-summary"
    neighborSummary.EntityData.BundleName = "cisco_ios_xr"
    neighborSummary.EntityData.ParentYangName = "neighbor-detail"
    neighborSummary.EntityData.SegmentPath = "neighbor-summary"
    neighborSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummary.EntityData.Children = types.NewOrderedMap()
    neighborSummary.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborSummary.NeighborBfdInformation})
    neighborSummary.EntityData.Leafs = types.NewOrderedMap()
    neighborSummary.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighborSummary.NeighborId})
    neighborSummary.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborSummary.NeighborAddressXr})
    neighborSummary.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighborSummary.NeighborInterfaceName})
    neighborSummary.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborSummary.NeighborDrPriority})
    neighborSummary.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborSummary.NeighborState})
    neighborSummary.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighborSummary.DrBdrState})
    neighborSummary.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborSummary.NeighborDeadTimer})
    neighborSummary.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborSummary.NeighborUpTime})
    neighborSummary.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighborSummary.NeighborMadjInterface})

    neighborSummary.EntityData.YListKeys = []string {}

    return &(neighborSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-summary"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
// Retransmission information with this neighbor
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmissionInformation *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation) GetEntityData() *types.CommonEntityData {
    neighborRetransmissionInformation.EntityData.YFilter = neighborRetransmissionInformation.YFilter
    neighborRetransmissionInformation.EntityData.YangName = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmissionInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmissionInformation.EntityData.SegmentPath = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmissionInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmissionInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmissionInformation.EntityData.Children = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", neighborRetransmissionInformation.DbdRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", neighborRetransmissionInformation.DbdRetransmissionTotalCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", neighborRetransmissionInformation.AreaFloodingIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmissionInformation.AsFloodIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", neighborRetransmissionInformation.NeighborRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", neighborRetransmissionInformation.NumberOfRetransmissions})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", neighborRetransmissionInformation.AreaFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", neighborRetransmissionInformation.AreaFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", neighborRetransmissionInformation.AsFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", neighborRetransmissionInformation.AsFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", neighborRetransmissionInformation.AreaNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", neighborRetransmissionInformation.AreaNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", neighborRetransmissionInformation.AsNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", neighborRetransmissionInformation.AsNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmissionInformation.LastRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmissionInformation.MaximumRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmissionInformation.LastRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmissionInformation.MaximumRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmissionInformation.LsaRetransmissionTimer})

    neighborRetransmissionInformation.EntityData.YListKeys = []string {}

    return &(neighborRetransmissionInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces
// OSPF Interface Table
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface.
    Interface []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface
}

func (interfaces *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "area"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface
// OSPF interface information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is InterfaceState.
    InterfaceState interface{}

    // If true, line protocol is up. The type is bool.
    InterfaceLineState interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface SID. The type is interface{} with range: 0..4294967295.
    InterfaceSid interface{}

    // SID PHP Off. The type is bool.
    InterfaceSidPhpOff interface{}

    // SID N-Flag Clear. The type is bool.
    InterfaceSidNFlagClear interface{}

    // Interface Strict-SPF SID. The type is interface{} with range:
    // 0..4294967295.
    InterfaceStrictSpfSid interface{}

    // Strict-SPF SID PHP Off. The type is bool.
    InterfaceStrictSpfSidPhpOff interface{}

    // Strict-SPF SID N-Flag Clear. The type is bool.
    InterfaceStrictSpfSidNFlagClear interface{}

    // Interface Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Interface_.
    NetworkType interface{}

    // IP MTU. The type is interface{} with range: 0..65535.
    IpMtu interface{}

    // Maximum Packet Size. The type is interface{} with range: 0..65535.
    MaximumPacketSize interface{}

    // Interface tunnel flags. The type is interface{} with range: 0..4294967295.
    InterfaceTunnelFlags interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface bandwidth. The type is interface{} with range: 0..4294967295.
    InterfaceBandwidth interface{}

    // If true, cost fallback is configured. The type is bool.
    CfgCostFallback interface{}

    // Interface fallback cost. The type is interface{} with range: 0..65535.
    InterfaceCostFallback interface{}

    // If true, cost fallback is active. The type is bool.
    CostFallbackActive interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, sync igp shortcuts. The type is bool.
    ConfiguredLdpSyncIgpShortcuts interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // If true, configured as demand circuit. The type is bool.
    ConfiguredDemandCircuit interface{}

    // If true, interface running as demand circuit. The type is bool.
    InterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsaCount interface{}

    // Interface Transmission delay. The type is interface{} with range: 0..65535.
    TransmissionDelay interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    DesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // If true, backup designated router. The type is bool.
    BackupDesignatedRouter interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires. The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs. The type is bool.
    InterfaceLsaFilter interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured hello interval (ms). The type is interface{} with range:
    // 0..4294967295.
    HelloIntervalMs interface{}

    // Configured dead interval (s). The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s). The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterrval interface{}

    // If true, NSF is enabled. The type is bool.
    InterfaceNsfEnabled interface{}

    // If true, NSF restart in progress on this interface. The type is bool.
    InterfaceNsf interface{}

    // Time since last NSF restart (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceLastNsf interface{}

    // If true, passive interface. The type is bool.
    PassiveInterface interface{}

    // Time until next Hello (s). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Time until next Hello (ms). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTimeMs interface{}

    // TTL security enabled on the interface. The type is bool.
    TtlSecurityEnabled interface{}

    // TTL security hop counts. The type is interface{} with range: 0..4294967295.
    TtlSecurityHopCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Prefix Suppression for primary addresses. The type is bool.
    PrefixSuppressPrimaryAddresses interface{}

    // Prefix Suppression for secondary addresses. The type is bool.
    PrefixSuppressSecondaryAddresses interface{}

    // If true, loopback interface is advertised as a stub network. The type is
    // bool.
    IsLoopbackStubNetwork interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    InterfaceAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    InterfaceAckListHighWatermark interface{}

    // Registered for Link Down Fast Detection. The type is bool.
    RegisteredForLinkDownFastDetection interface{}

    // Hold-down time in ms for fast-detect event. The type is interface{} with
    // range: 0..4294967295.
    FastDetectHoldDownTime interface{}

    // Link in hold-down state due to fast detect event. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Remaining hold down time in ms. The type is interface{} with range:
    // 0..4294967295.
    FastDetectHoldDownTimeRemaining interface{}

    // IP Fast Reroute Type. The type is Ipfrr.
    FastRerouteType interface{}

    // Topology Independent LFA. The type is bool.
    FastRerouteTopologyIndependentLfa interface{}

    // Unnumbered interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceUnnum interface{}

    // Forward reference interface. The type is bool.
    InterfaceForw interface{}

    // Max number of primary labels. The type is interface{} with range: 0..255.
    InterfacePriLabels interface{}

    // Max number of backup labels. The type is interface{} with range: 0..255.
    InterfaceBkpLabels interface{}

    // Max number of SRTE labels. The type is interface{} with range: 0..255.
    InterfaceSrteLabels interface{}

    // PerfMeas Delay values available. The type is bool.
    PmDelaySet interface{}

    // PerfMeas Average Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayAvg interface{}

    // PerfMeas Minimum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMin interface{}

    // PerfMeas Maximum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMax interface{}

    // PerfMeas Link Delay Variance. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayVar interface{}

    // PerfMeas Link Loss values available. The type is bool.
    PmLossSet interface{}

    // PerfMeas Link Loss. The type is interface{} with range: 0..4294967295.
    LinkLoss interface{}

    // PerfMeas BW Util values available. The type is bool.
    PmbwUtilSet interface{}

    // PerfMeas Total Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    TotalBandwidth interface{}

    // PerfMeas RSVP-TE Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    RsvpteBandwidth interface{}

    // Remote LFA. The type is interface{} with range: 0..255.
    RemoteLfa interface{}

    // SRTE Metric available. The type is bool.
    SrteMetricSet interface{}

    // SRTE Metric. The type is interface{} with range: 0..4294967295.
    SrteMetric interface{}

    // SRTE App Weight. The type is interface{} with range: 0..4294967295.
    SrteAppWeight interface{}

    // SRTE Ext. Admin Group available. The type is bool.
    SrteExtAdminGroupSet interface{}

    // BFD information.
    InterfaceBfdInformation Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation

    // Active interface details.
    ActiveInterface Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface

    // SRLG Values. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_Srlg.
    Srlg []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_Srlg

    // SRTE Ext. Admin Group. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup.
    SrteteExtAdminGroup []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup

    // Information for neighbors on the interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceMadj

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers.
    IpfrrTiebreakers []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers

    // Secondary IP address list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpSecAddr.
    IpSecAddr []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpSecAddr
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("interface-bfd-information", types.YChild{"InterfaceBfdInformation", &self.InterfaceBfdInformation})
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("srlg", types.YChild{"Srlg", nil})
    for i := range self.Srlg {
        self.EntityData.Children.Append(types.GetSegmentPath(self.Srlg[i]), types.YChild{"Srlg", self.Srlg[i]})
    }
    self.EntityData.Children.Append("srtete-ext-admin-group", types.YChild{"SrteteExtAdminGroup", nil})
    for i := range self.SrteteExtAdminGroup {
        self.EntityData.Children.Append(types.GetSegmentPath(self.SrteteExtAdminGroup[i]), types.YChild{"SrteteExtAdminGroup", self.SrteteExtAdminGroup[i]})
    }
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range self.InterfaceMadj {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceMadj[i]), types.YChild{"InterfaceMadj", self.InterfaceMadj[i]})
    }
    self.EntityData.Children.Append("ipfrr-tiebreakers", types.YChild{"IpfrrTiebreakers", nil})
    for i := range self.IpfrrTiebreakers {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpfrrTiebreakers[i]), types.YChild{"IpfrrTiebreakers", self.IpfrrTiebreakers[i]})
    }
    self.EntityData.Children.Append("ip-sec-addr", types.YChild{"IpSecAddr", nil})
    for i := range self.IpSecAddr {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpSecAddr[i]), types.YChild{"IpSecAddr", self.IpSecAddr[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("interface-line-state", types.YLeaf{"InterfaceLineState", self.InterfaceLineState})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", self.InterfaceMask})
    self.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", self.InterfaceArea})
    self.EntityData.Leafs.Append("interface-sid", types.YLeaf{"InterfaceSid", self.InterfaceSid})
    self.EntityData.Leafs.Append("interface-sid-php-off", types.YLeaf{"InterfaceSidPhpOff", self.InterfaceSidPhpOff})
    self.EntityData.Leafs.Append("interface-sid-n-flag-clear", types.YLeaf{"InterfaceSidNFlagClear", self.InterfaceSidNFlagClear})
    self.EntityData.Leafs.Append("interface-strict-spf-sid", types.YLeaf{"InterfaceStrictSpfSid", self.InterfaceStrictSpfSid})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-php-off", types.YLeaf{"InterfaceStrictSpfSidPhpOff", self.InterfaceStrictSpfSidPhpOff})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-n-flag-clear", types.YLeaf{"InterfaceStrictSpfSidNFlagClear", self.InterfaceStrictSpfSidNFlagClear})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("ip-mtu", types.YLeaf{"IpMtu", self.IpMtu})
    self.EntityData.Leafs.Append("maximum-packet-size", types.YLeaf{"MaximumPacketSize", self.MaximumPacketSize})
    self.EntityData.Leafs.Append("interface-tunnel-flags", types.YLeaf{"InterfaceTunnelFlags", self.InterfaceTunnelFlags})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("interface-bandwidth", types.YLeaf{"InterfaceBandwidth", self.InterfaceBandwidth})
    self.EntityData.Leafs.Append("cfg-cost-fallback", types.YLeaf{"CfgCostFallback", self.CfgCostFallback})
    self.EntityData.Leafs.Append("interface-cost-fallback", types.YLeaf{"InterfaceCostFallback", self.InterfaceCostFallback})
    self.EntityData.Leafs.Append("cost-fallback-active", types.YLeaf{"CostFallbackActive", self.CostFallbackActive})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("configured-ldp-sync-igp-shortcuts", types.YLeaf{"ConfiguredLdpSyncIgpShortcuts", self.ConfiguredLdpSyncIgpShortcuts})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})
    self.EntityData.Leafs.Append("configured-demand-circuit", types.YLeaf{"ConfiguredDemandCircuit", self.ConfiguredDemandCircuit})
    self.EntityData.Leafs.Append("interface-demand-circuit", types.YLeaf{"InterfaceDemandCircuit", self.InterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-lsa-count", types.YLeaf{"InterfaceDcBitlessLsaCount", self.InterfaceDcBitlessLsaCount})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("designated-router", types.YLeaf{"DesignatedRouter", self.DesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router", types.YLeaf{"BackupDesignatedRouter", self.BackupDesignatedRouter})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("interface-lsa-filter", types.YLeaf{"InterfaceLsaFilter", self.InterfaceLsaFilter})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("hello-interval-ms", types.YLeaf{"HelloIntervalMs", self.HelloIntervalMs})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interrval", types.YLeaf{"InterfaceRetransmissionInterrval", self.InterfaceRetransmissionInterrval})
    self.EntityData.Leafs.Append("interface-nsf-enabled", types.YLeaf{"InterfaceNsfEnabled", self.InterfaceNsfEnabled})
    self.EntityData.Leafs.Append("interface-nsf", types.YLeaf{"InterfaceNsf", self.InterfaceNsf})
    self.EntityData.Leafs.Append("interface-last-nsf", types.YLeaf{"InterfaceLastNsf", self.InterfaceLastNsf})
    self.EntityData.Leafs.Append("passive-interface", types.YLeaf{"PassiveInterface", self.PassiveInterface})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("next-hello-time-ms", types.YLeaf{"NextHelloTimeMs", self.NextHelloTimeMs})
    self.EntityData.Leafs.Append("ttl-security-enabled", types.YLeaf{"TtlSecurityEnabled", self.TtlSecurityEnabled})
    self.EntityData.Leafs.Append("ttl-security-hop-count", types.YLeaf{"TtlSecurityHopCount", self.TtlSecurityHopCount})
    self.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", self.InterfaceisMadj})
    self.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", self.InterfaceMadjCount})
    self.EntityData.Leafs.Append("prefix-suppress-primary-addresses", types.YLeaf{"PrefixSuppressPrimaryAddresses", self.PrefixSuppressPrimaryAddresses})
    self.EntityData.Leafs.Append("prefix-suppress-secondary-addresses", types.YLeaf{"PrefixSuppressSecondaryAddresses", self.PrefixSuppressSecondaryAddresses})
    self.EntityData.Leafs.Append("is-loopback-stub-network", types.YLeaf{"IsLoopbackStubNetwork", self.IsLoopbackStubNetwork})
    self.EntityData.Leafs.Append("interface-ack-list-count", types.YLeaf{"InterfaceAckListCount", self.InterfaceAckListCount})
    self.EntityData.Leafs.Append("interface-ack-list-high-watermark", types.YLeaf{"InterfaceAckListHighWatermark", self.InterfaceAckListHighWatermark})
    self.EntityData.Leafs.Append("registered-for-link-down-fast-detection", types.YLeaf{"RegisteredForLinkDownFastDetection", self.RegisteredForLinkDownFastDetection})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time", types.YLeaf{"FastDetectHoldDownTime", self.FastDetectHoldDownTime})
    self.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", self.InterfaceFastDetectHoldDown})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time-remaining", types.YLeaf{"FastDetectHoldDownTimeRemaining", self.FastDetectHoldDownTimeRemaining})
    self.EntityData.Leafs.Append("fast-reroute-type", types.YLeaf{"FastRerouteType", self.FastRerouteType})
    self.EntityData.Leafs.Append("fast-reroute-topology-independent-lfa", types.YLeaf{"FastRerouteTopologyIndependentLfa", self.FastRerouteTopologyIndependentLfa})
    self.EntityData.Leafs.Append("interface-unnum", types.YLeaf{"InterfaceUnnum", self.InterfaceUnnum})
    self.EntityData.Leafs.Append("interface-forw", types.YLeaf{"InterfaceForw", self.InterfaceForw})
    self.EntityData.Leafs.Append("interface-pri-labels", types.YLeaf{"InterfacePriLabels", self.InterfacePriLabels})
    self.EntityData.Leafs.Append("interface-bkp-labels", types.YLeaf{"InterfaceBkpLabels", self.InterfaceBkpLabels})
    self.EntityData.Leafs.Append("interface-srte-labels", types.YLeaf{"InterfaceSrteLabels", self.InterfaceSrteLabels})
    self.EntityData.Leafs.Append("pm-delay-set", types.YLeaf{"PmDelaySet", self.PmDelaySet})
    self.EntityData.Leafs.Append("link-delay-avg", types.YLeaf{"LinkDelayAvg", self.LinkDelayAvg})
    self.EntityData.Leafs.Append("link-delay-min", types.YLeaf{"LinkDelayMin", self.LinkDelayMin})
    self.EntityData.Leafs.Append("link-delay-max", types.YLeaf{"LinkDelayMax", self.LinkDelayMax})
    self.EntityData.Leafs.Append("link-delay-var", types.YLeaf{"LinkDelayVar", self.LinkDelayVar})
    self.EntityData.Leafs.Append("pm-loss-set", types.YLeaf{"PmLossSet", self.PmLossSet})
    self.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", self.LinkLoss})
    self.EntityData.Leafs.Append("pmbw-util-set", types.YLeaf{"PmbwUtilSet", self.PmbwUtilSet})
    self.EntityData.Leafs.Append("total-bandwidth", types.YLeaf{"TotalBandwidth", self.TotalBandwidth})
    self.EntityData.Leafs.Append("rsvpte-bandwidth", types.YLeaf{"RsvpteBandwidth", self.RsvpteBandwidth})
    self.EntityData.Leafs.Append("remote-lfa", types.YLeaf{"RemoteLfa", self.RemoteLfa})
    self.EntityData.Leafs.Append("srte-metric-set", types.YLeaf{"SrteMetricSet", self.SrteMetricSet})
    self.EntityData.Leafs.Append("srte-metric", types.YLeaf{"SrteMetric", self.SrteMetric})
    self.EntityData.Leafs.Append("srte-app-weight", types.YLeaf{"SrteAppWeight", self.SrteAppWeight})
    self.EntityData.Leafs.Append("srte-ext-admin-group-set", types.YLeaf{"SrteExtAdminGroupSet", self.SrteExtAdminGroupSet})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation
// BFD information
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms). The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // BFD detection multiplier. The type is interface{} with range:
    // 0..4294967295.
    DetectionMultiplier interface{}
}

func (interfaceBfdInformation *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation) GetEntityData() *types.CommonEntityData {
    interfaceBfdInformation.EntityData.YFilter = interfaceBfdInformation.YFilter
    interfaceBfdInformation.EntityData.YangName = "interface-bfd-information"
    interfaceBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfdInformation.EntityData.ParentYangName = "interface"
    interfaceBfdInformation.EntityData.SegmentPath = "interface-bfd-information"
    interfaceBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfdInformation.EntityData.Children = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfdInformation.BfdIntfEnableMode})
    interfaceBfdInformation.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", interfaceBfdInformation.Interval})
    interfaceBfdInformation.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", interfaceBfdInformation.DetectionMultiplier})

    interfaceBfdInformation.EntityData.YListKeys = []string {}

    return &(interfaceBfdInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface
// Active interface details
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    InterfaceFloodLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope). The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Last flood scan length. The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length. The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms). The type is interface{} with range: 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms). The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Number of neighbors for which hellos are suppressed. The type is
    // interface{} with range: 0..65535.
    SuppressHelloCount interface{}

    // Authentication type. The type is Authentication.
    InterfaceAuthenticationType interface{}

    // If true, MD key is configured. The type is bool.
    YoungestMdKey interface{}

    // Number of neighbors using the old key (if rollover in progress). The type
    // is interface{} with range: 0..4294967295.
    OldMd5KeyNeighborCount interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    YoungestMdKeyId interface{}

    // Keychain ID. The type is interface{} with range: 0..18446744073709551615.
    KeychainId interface{}

    // List of old MD keys. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys.
    MdKeys []*Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys
}

func (activeInterface *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Children.Append("md-keys", types.YChild{"MdKeys", nil})
    for i := range activeInterface.MdKeys {
        activeInterface.EntityData.Children.Append(types.GetSegmentPath(activeInterface.MdKeys[i]), types.YChild{"MdKeys", activeInterface.MdKeys[i]})
    }
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-flood-length", types.YLeaf{"InterfaceFloodLength", activeInterface.InterfaceFloodLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", activeInterface.InterfaceNeighborCount})
    activeInterface.EntityData.Leafs.Append("suppress-hello-count", types.YLeaf{"SuppressHelloCount", activeInterface.SuppressHelloCount})
    activeInterface.EntityData.Leafs.Append("interface-authentication-type", types.YLeaf{"InterfaceAuthenticationType", activeInterface.InterfaceAuthenticationType})
    activeInterface.EntityData.Leafs.Append("youngest-md-key", types.YLeaf{"YoungestMdKey", activeInterface.YoungestMdKey})
    activeInterface.EntityData.Leafs.Append("old-md5-key-neighbor-count", types.YLeaf{"OldMd5KeyNeighborCount", activeInterface.OldMd5KeyNeighborCount})
    activeInterface.EntityData.Leafs.Append("youngest-md-key-id", types.YLeaf{"YoungestMdKeyId", activeInterface.YoungestMdKeyId})
    activeInterface.EntityData.Leafs.Append("keychain-id", types.YLeaf{"KeychainId", activeInterface.KeychainId})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys
// List of old MD keys
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (mdKeys *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys) GetEntityData() *types.CommonEntityData {
    mdKeys.EntityData.YFilter = mdKeys.YFilter
    mdKeys.EntityData.YangName = "md-keys"
    mdKeys.EntityData.BundleName = "cisco_ios_xr"
    mdKeys.EntityData.ParentYangName = "active-interface"
    mdKeys.EntityData.SegmentPath = "md-keys"
    mdKeys.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mdKeys.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mdKeys.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mdKeys.EntityData.Children = types.NewOrderedMap()
    mdKeys.EntityData.Leafs = types.NewOrderedMap()
    mdKeys.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mdKeys.Entry})

    mdKeys.EntityData.YListKeys = []string {}

    return &(mdKeys.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_Srlg
// SRLG Values
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlg *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_Srlg) GetEntityData() *types.CommonEntityData {
    srlg.EntityData.YFilter = srlg.YFilter
    srlg.EntityData.YangName = "srlg"
    srlg.EntityData.BundleName = "cisco_ios_xr"
    srlg.EntityData.ParentYangName = "interface"
    srlg.EntityData.SegmentPath = "srlg"
    srlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlg.EntityData.Children = types.NewOrderedMap()
    srlg.EntityData.Leafs = types.NewOrderedMap()
    srlg.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlg.Entry})

    srlg.EntityData.YListKeys = []string {}

    return &(srlg.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup
// SRTE Ext. Admin Group
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srteteExtAdminGroup *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup) GetEntityData() *types.CommonEntityData {
    srteteExtAdminGroup.EntityData.YFilter = srteteExtAdminGroup.YFilter
    srteteExtAdminGroup.EntityData.YangName = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    srteteExtAdminGroup.EntityData.ParentYangName = "interface"
    srteteExtAdminGroup.EntityData.SegmentPath = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srteteExtAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srteteExtAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srteteExtAdminGroup.EntityData.Children = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srteteExtAdminGroup.Entry})

    srteteExtAdminGroup.EntityData.YListKeys = []string {}

    return &(srteteExtAdminGroup.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, Designated router. The type is bool.
    NeighborDr interface{}

    // If true, Backup designated router. The type is bool.
    NeighborBdr interface{}

    // If true, hellos suppressed. The type is bool.
    SuppressHello interface{}
}

func (interfaceNeighbor *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor"
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-dr", types.YLeaf{"NeighborDr", interfaceNeighbor.NeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-bdr", types.YLeaf{"NeighborBdr", interfaceNeighbor.NeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("suppress-hello", types.YLeaf{"SuppressHello", interfaceNeighbor.SuppressHello})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers) GetEntityData() *types.CommonEntityData {
    ipfrrTiebreakers.EntityData.YFilter = ipfrrTiebreakers.YFilter
    ipfrrTiebreakers.EntityData.YangName = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTiebreakers.EntityData.ParentYangName = "interface"
    ipfrrTiebreakers.EntityData.SegmentPath = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTiebreakers.EntityData.Children = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-type", types.YLeaf{"TiebreakerType", ipfrrTiebreakers.TiebreakerType})
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-index", types.YLeaf{"TiebreakerIndex", ipfrrTiebreakers.TiebreakerIndex})

    ipfrrTiebreakers.EntityData.YListKeys = []string {}

    return &(ipfrrTiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpSecAddr
// Secondary IP address list
type Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpSecAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Secondary Address Type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryAddr interface{}

    // Secondary Prefix Length. The type is interface{} with range: 0..4294967295.
    SecondaryPrefix interface{}
}

func (ipSecAddr *Ospf_Processes_Process_Vrfs_Vrf_Areas_Area_Interfaces_Interface_IpSecAddr) GetEntityData() *types.CommonEntityData {
    ipSecAddr.EntityData.YFilter = ipSecAddr.YFilter
    ipSecAddr.EntityData.YangName = "ip-sec-addr"
    ipSecAddr.EntityData.BundleName = "cisco_ios_xr"
    ipSecAddr.EntityData.ParentYangName = "interface"
    ipSecAddr.EntityData.SegmentPath = "ip-sec-addr"
    ipSecAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSecAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSecAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSecAddr.EntityData.Children = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs.Append("secondary-addr", types.YLeaf{"SecondaryAddr", ipSecAddr.SecondaryAddr})
    ipSecAddr.EntityData.Leafs.Append("secondary-prefix", types.YLeaf{"SecondaryPrefix", ipSecAddr.SecondaryPrefix})

    ipSecAddr.EntityData.YListKeys = []string {}

    return &(ipSecAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database
// OSPF Link State Database
type Ospf_Processes_Process_Vrfs_Vrf_Database struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-Area view of Link state database.
    DatabaseAreas Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas

    // Link State database summary table.
    DatabaseSummaries Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries

    // Link State Database summary for the AS.
    DatabaseSummaryAs Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs

    // Link State Database Table.
    Lsas Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas

    // Link state advertisement summary table.
    LsaSummaries Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries
}

func (database *Ospf_Processes_Process_Vrfs_Vrf_Database) GetEntityData() *types.CommonEntityData {
    database.EntityData.YFilter = database.YFilter
    database.EntityData.YangName = "database"
    database.EntityData.BundleName = "cisco_ios_xr"
    database.EntityData.ParentYangName = "vrf"
    database.EntityData.SegmentPath = "database"
    database.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    database.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    database.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    database.EntityData.Children = types.NewOrderedMap()
    database.EntityData.Children.Append("database-areas", types.YChild{"DatabaseAreas", &database.DatabaseAreas})
    database.EntityData.Children.Append("database-summaries", types.YChild{"DatabaseSummaries", &database.DatabaseSummaries})
    database.EntityData.Children.Append("database-summary-as", types.YChild{"DatabaseSummaryAs", &database.DatabaseSummaryAs})
    database.EntityData.Children.Append("lsas", types.YChild{"Lsas", &database.Lsas})
    database.EntityData.Children.Append("lsa-summaries", types.YChild{"LsaSummaries", &database.LsaSummaries})
    database.EntityData.Leafs = types.NewOrderedMap()

    database.EntityData.YListKeys = []string {}

    return &(database.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas
// Per-Area view of Link state database
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-Area Link State Database data. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea.
    DatabaseArea []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea
}

func (databaseAreas *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas) GetEntityData() *types.CommonEntityData {
    databaseAreas.EntityData.YFilter = databaseAreas.YFilter
    databaseAreas.EntityData.YangName = "database-areas"
    databaseAreas.EntityData.BundleName = "cisco_ios_xr"
    databaseAreas.EntityData.ParentYangName = "database"
    databaseAreas.EntityData.SegmentPath = "database-areas"
    databaseAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseAreas.EntityData.Children = types.NewOrderedMap()
    databaseAreas.EntityData.Children.Append("database-area", types.YChild{"DatabaseArea", nil})
    for i := range databaseAreas.DatabaseArea {
        databaseAreas.EntityData.Children.Append(types.GetSegmentPath(databaseAreas.DatabaseArea[i]), types.YChild{"DatabaseArea", databaseAreas.DatabaseArea[i]})
    }
    databaseAreas.EntityData.Leafs = types.NewOrderedMap()

    databaseAreas.EntityData.YListKeys = []string {}

    return &(databaseAreas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea
// Per-Area Link State Database data
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Link State Database Table.
    Lsas Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas

    // Link state advertisement summary table.
    LsaSummaries Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries
}

func (databaseArea *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea) GetEntityData() *types.CommonEntityData {
    databaseArea.EntityData.YFilter = databaseArea.YFilter
    databaseArea.EntityData.YangName = "database-area"
    databaseArea.EntityData.BundleName = "cisco_ios_xr"
    databaseArea.EntityData.ParentYangName = "database-areas"
    databaseArea.EntityData.SegmentPath = "database-area" + types.AddKeyToken(databaseArea.AreaId, "area-id")
    databaseArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseArea.EntityData.Children = types.NewOrderedMap()
    databaseArea.EntityData.Children.Append("lsas", types.YChild{"Lsas", &databaseArea.Lsas})
    databaseArea.EntityData.Children.Append("lsa-summaries", types.YChild{"LsaSummaries", &databaseArea.LsaSummaries})
    databaseArea.EntityData.Leafs = types.NewOrderedMap()
    databaseArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", databaseArea.AreaId})

    databaseArea.EntityData.YListKeys = []string {"AreaId"}

    return &(databaseArea.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas
// Link State Database Table
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link State Advertisement information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa.
    Lsa []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa
}

func (lsas *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas) GetEntityData() *types.CommonEntityData {
    lsas.EntityData.YFilter = lsas.YFilter
    lsas.EntityData.YangName = "lsas"
    lsas.EntityData.BundleName = "cisco_ios_xr"
    lsas.EntityData.ParentYangName = "database-area"
    lsas.EntityData.SegmentPath = "lsas"
    lsas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsas.EntityData.Children = types.NewOrderedMap()
    lsas.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsas.Lsa {
        lsas.EntityData.Children.Append(types.GetSegmentPath(lsas.Lsa[i]), types.YChild{"Lsa", lsas.Lsa[i]})
    }
    lsas.EntityData.Leafs = types.NewOrderedMap()

    lsas.EntityData.YListKeys = []string {}

    return &(lsas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa
// Link State Advertisement information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Header information.
    LsaHeader Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader

    // Detailed LSA Information.
    LsaDetailData Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData

    // Information pertaining to a specific LSA type.
    LsaInternalData Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData
}

func (lsa *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsas"
    lsa.EntityData.SegmentPath = "lsa"
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsa.LsaHeader})
    lsa.EntityData.Children.Append("lsa-detail-data", types.YChild{"LsaDetailData", &lsa.LsaDetailData})
    lsa.EntityData.Children.Append("lsa-internal-data", types.YChild{"LsaInternalData", &lsa.LsaInternalData})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader
// Header information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData
// Detailed LSA Information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, type of service capable indicated by LSA's option field. The type
    // is bool.
    TosCapable interface{}

    // If true,  capable of type 7 to 5 translation indicated by LSA's option
    // field. The type is bool.
    NssaTranslation interface{}

    // If true, capable of demand circuit as indicated by LSA's option field. The
    // type is bool.
    DemandCircuit interface{}

    // if true, DN bit set on the summary LSA indicated by LSA's option field. The
    // type is bool.
    DnBit interface{}

    // Due time for rate-limit timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRateLimitDueTime interface{}

    // Clock stamp since boot. The type is interface{} with range:
    // 0..18446744073709551615.
    LsadbBaseClock interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    RoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    AdvertisingRouterReachable interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    Length interface{}

    // Summary Origin. The type is interface{} with range: 0..65535.
    SumOrigin interface{}

    // External Origin. The type is interface{} with range: 0..65535.
    AseOrigin interface{}

    // Not In Sync With Active. The type is interface{} with range: 0..255.
    InSync interface{}

    // Current LSA prefix priority. The type is interface{} with range: 0..255.
    LsaPrefixPriority interface{}

    // New LSA prefix priority. The type is interface{} with range: 0..255.
    NewLsaPrefixPriority interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // LSA throttle timer table information.
    LsaThrottleTimer Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer

    // Time LSA was last updated.
    LsaLastUpdatedTime Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime

    // Current time stamp.
    LsadbBaseTimeStamp Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp

    // Reason why LSA is not deleted.
    NotDelete Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete
}

func (lsaDetailData *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData) GetEntityData() *types.CommonEntityData {
    lsaDetailData.EntityData.YFilter = lsaDetailData.YFilter
    lsaDetailData.EntityData.YangName = "lsa-detail-data"
    lsaDetailData.EntityData.BundleName = "cisco_ios_xr"
    lsaDetailData.EntityData.ParentYangName = "lsa"
    lsaDetailData.EntityData.SegmentPath = "lsa-detail-data"
    lsaDetailData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetailData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetailData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetailData.EntityData.Children = types.NewOrderedMap()
    lsaDetailData.EntityData.Children.Append("lsa-throttle-timer", types.YChild{"LsaThrottleTimer", &lsaDetailData.LsaThrottleTimer})
    lsaDetailData.EntityData.Children.Append("lsa-last-updated-time", types.YChild{"LsaLastUpdatedTime", &lsaDetailData.LsaLastUpdatedTime})
    lsaDetailData.EntityData.Children.Append("lsadb-base-time-stamp", types.YChild{"LsadbBaseTimeStamp", &lsaDetailData.LsadbBaseTimeStamp})
    lsaDetailData.EntityData.Children.Append("not-delete", types.YChild{"NotDelete", &lsaDetailData.NotDelete})
    lsaDetailData.EntityData.Leafs = types.NewOrderedMap()
    lsaDetailData.EntityData.Leafs.Append("tos-capable", types.YLeaf{"TosCapable", lsaDetailData.TosCapable})
    lsaDetailData.EntityData.Leafs.Append("nssa-translation", types.YLeaf{"NssaTranslation", lsaDetailData.NssaTranslation})
    lsaDetailData.EntityData.Leafs.Append("demand-circuit", types.YLeaf{"DemandCircuit", lsaDetailData.DemandCircuit})
    lsaDetailData.EntityData.Leafs.Append("dn-bit", types.YLeaf{"DnBit", lsaDetailData.DnBit})
    lsaDetailData.EntityData.Leafs.Append("lsa-rate-limit-due-time", types.YLeaf{"LsaRateLimitDueTime", lsaDetailData.LsaRateLimitDueTime})
    lsaDetailData.EntityData.Leafs.Append("lsadb-base-clock", types.YLeaf{"LsadbBaseClock", lsaDetailData.LsadbBaseClock})
    lsaDetailData.EntityData.Leafs.Append("routing-bit", types.YLeaf{"RoutingBit", lsaDetailData.RoutingBit})
    lsaDetailData.EntityData.Leafs.Append("advertising-router-reachable", types.YLeaf{"AdvertisingRouterReachable", lsaDetailData.AdvertisingRouterReachable})
    lsaDetailData.EntityData.Leafs.Append("length", types.YLeaf{"Length", lsaDetailData.Length})
    lsaDetailData.EntityData.Leafs.Append("sum-origin", types.YLeaf{"SumOrigin", lsaDetailData.SumOrigin})
    lsaDetailData.EntityData.Leafs.Append("ase-origin", types.YLeaf{"AseOrigin", lsaDetailData.AseOrigin})
    lsaDetailData.EntityData.Leafs.Append("in-sync", types.YLeaf{"InSync", lsaDetailData.InSync})
    lsaDetailData.EntityData.Leafs.Append("lsa-prefix-priority", types.YLeaf{"LsaPrefixPriority", lsaDetailData.LsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("new-lsa-prefix-priority", types.YLeaf{"NewLsaPrefixPriority", lsaDetailData.NewLsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetailData.LsaFloodRequiredPostFailOver})

    lsaDetailData.EntityData.YListKeys = []string {}

    return &(lsaDetailData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer
// LSA throttle timer table information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timer table. The type is TimerTable.
    TimerLocation interface{}

    // Timer type. The type is Timer.
    TimerType interface{}

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // Last Second table index processed. The type is interface{} with range:
    // 0..255.
    LastInstSecondTableIndex interface{}

    // Last Minute table index processed. The type is interface{} with range:
    // 0..255.
    LastInstMinuteTableIndex interface{}
}

func (lsaThrottleTimer *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer) GetEntityData() *types.CommonEntityData {
    lsaThrottleTimer.EntityData.YFilter = lsaThrottleTimer.YFilter
    lsaThrottleTimer.EntityData.YangName = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.BundleName = "cisco_ios_xr"
    lsaThrottleTimer.EntityData.ParentYangName = "lsa-detail-data"
    lsaThrottleTimer.EntityData.SegmentPath = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaThrottleTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaThrottleTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaThrottleTimer.EntityData.Children = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs.Append("timer-location", types.YLeaf{"TimerLocation", lsaThrottleTimer.TimerLocation})
    lsaThrottleTimer.EntityData.Leafs.Append("timer-type", types.YLeaf{"TimerType", lsaThrottleTimer.TimerType})
    lsaThrottleTimer.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaThrottleTimer.SecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaThrottleTimer.MinuteTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-second-table-index", types.YLeaf{"LastInstSecondTableIndex", lsaThrottleTimer.LastInstSecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-minute-table-index", types.YLeaf{"LastInstMinuteTableIndex", lsaThrottleTimer.LastInstMinuteTableIndex})

    lsaThrottleTimer.EntityData.YListKeys = []string {}

    return &(lsaThrottleTimer.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime
// Time LSA was last updated
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsaLastUpdatedTime *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime) GetEntityData() *types.CommonEntityData {
    lsaLastUpdatedTime.EntityData.YFilter = lsaLastUpdatedTime.YFilter
    lsaLastUpdatedTime.EntityData.YangName = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.BundleName = "cisco_ios_xr"
    lsaLastUpdatedTime.EntityData.ParentYangName = "lsa-detail-data"
    lsaLastUpdatedTime.EntityData.SegmentPath = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaLastUpdatedTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaLastUpdatedTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaLastUpdatedTime.EntityData.Children = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsaLastUpdatedTime.Second})
    lsaLastUpdatedTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsaLastUpdatedTime.Nanosecond})

    lsaLastUpdatedTime.EntityData.YListKeys = []string {}

    return &(lsaLastUpdatedTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp
// Current time stamp
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsadbBaseTimeStamp *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp) GetEntityData() *types.CommonEntityData {
    lsadbBaseTimeStamp.EntityData.YFilter = lsadbBaseTimeStamp.YFilter
    lsadbBaseTimeStamp.EntityData.YangName = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.BundleName = "cisco_ios_xr"
    lsadbBaseTimeStamp.EntityData.ParentYangName = "lsa-detail-data"
    lsadbBaseTimeStamp.EntityData.SegmentPath = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsadbBaseTimeStamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsadbBaseTimeStamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsadbBaseTimeStamp.EntityData.Children = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsadbBaseTimeStamp.Second})
    lsadbBaseTimeStamp.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsadbBaseTimeStamp.Nanosecond})

    lsadbBaseTimeStamp.EntityData.YListKeys = []string {}

    return &(lsadbBaseTimeStamp.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete
// Reason why LSA is not deleted
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    NoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    NeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table. The type is bool.
    RoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty. The type is bool.
    Acknowledgement interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    MaximumAge interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    PartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    FloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    NsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending summary
    // LSA originating. The type is bool.
    SumOrigPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}
}

func (notDelete *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete) GetEntityData() *types.CommonEntityData {
    notDelete.EntityData.YFilter = notDelete.YFilter
    notDelete.EntityData.YangName = "not-delete"
    notDelete.EntityData.BundleName = "cisco_ios_xr"
    notDelete.EntityData.ParentYangName = "lsa-detail-data"
    notDelete.EntityData.SegmentPath = "not-delete"
    notDelete.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notDelete.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notDelete.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notDelete.EntityData.Children = types.NewOrderedMap()
    notDelete.EntityData.Leafs = types.NewOrderedMap()
    notDelete.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", notDelete.FreeTime})
    notDelete.EntityData.Leafs.Append("no-delete", types.YLeaf{"NoDelete", notDelete.NoDelete})
    notDelete.EntityData.Leafs.Append("neighbor-exchange", types.YLeaf{"NeighborExchange", notDelete.NeighborExchange})
    notDelete.EntityData.Leafs.Append("routing-table", types.YLeaf{"RoutingTable", notDelete.RoutingTable})
    notDelete.EntityData.Leafs.Append("acknowledgement", types.YLeaf{"Acknowledgement", notDelete.Acknowledgement})
    notDelete.EntityData.Leafs.Append("maximum-age", types.YLeaf{"MaximumAge", notDelete.MaximumAge})
    notDelete.EntityData.Leafs.Append("partial-spf", types.YLeaf{"PartialSpf", notDelete.PartialSpf})
    notDelete.EntityData.Leafs.Append("flood-pending", types.YLeaf{"FloodPending", notDelete.FloodPending})
    notDelete.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", notDelete.RateLimit})
    notDelete.EntityData.Leafs.Append("nsr-ack-pending", types.YLeaf{"NsrAckPending", notDelete.NsrAckPending})
    notDelete.EntityData.Leafs.Append("sum-orig-pending", types.YLeaf{"SumOrigPending", notDelete.SumOrigPending})
    notDelete.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", notDelete.NsrFloodRequired})

    notDelete.EntityData.YListKeys = []string {}

    return &(notDelete.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData
// Information pertaining to a specific LSA type
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // InternalLSAType. The type is OspfInternalLsaTypes.
    InternalLsaType interface{}

    // Router LSA.
    RouterLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType

    // Summary LSA.
    SummaryLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType

    // External LSA.
    ExternalLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType

    // Opaque-Link LSA.
    OpaqueLinkLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType

    // Opaque-Area, opaque type 1 LSA.
    OpaqueMplsTeLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType

    // Opaque-link, opaque type 3 Grace LSA.
    OpaqueGraceLsa Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa

    // Opaque Router Information LSA.
    OpaqueRouterInfoLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType

    // Extende Prefix LSA type.
    OpaqueEpLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType

    // Extended Link LSA type.
    OpaqueElLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
}

func (lsaInternalData *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData) GetEntityData() *types.CommonEntityData {
    lsaInternalData.EntityData.YFilter = lsaInternalData.YFilter
    lsaInternalData.EntityData.YangName = "lsa-internal-data"
    lsaInternalData.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalData.EntityData.ParentYangName = "lsa"
    lsaInternalData.EntityData.SegmentPath = "lsa-internal-data"
    lsaInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalData.EntityData.Children = types.NewOrderedMap()
    lsaInternalData.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInternalData.RouterLsaType})
    lsaInternalData.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInternalData.NetworkLsaType})
    lsaInternalData.EntityData.Children.Append("summary-lsa-type", types.YChild{"SummaryLsaType", &lsaInternalData.SummaryLsaType})
    lsaInternalData.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInternalData.ExternalLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-link-lsa-type", types.YChild{"OpaqueLinkLsaType", &lsaInternalData.OpaqueLinkLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-mpls-te-lsa-type", types.YChild{"OpaqueMplsTeLsaType", &lsaInternalData.OpaqueMplsTeLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-grace-lsa", types.YChild{"OpaqueGraceLsa", &lsaInternalData.OpaqueGraceLsa})
    lsaInternalData.EntityData.Children.Append("opaque-router-info-lsa-type", types.YChild{"OpaqueRouterInfoLsaType", &lsaInternalData.OpaqueRouterInfoLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-ep-lsa-type", types.YChild{"OpaqueEpLsaType", &lsaInternalData.OpaqueEpLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-el-lsa-type", types.YChild{"OpaqueElLsaType", &lsaInternalData.OpaqueElLsaType})
    lsaInternalData.EntityData.Leafs = types.NewOrderedMap()
    lsaInternalData.EntityData.Leafs.Append("internal-lsa-type", types.YLeaf{"InternalLsaType", lsaInternalData.InternalLsaType})

    lsaInternalData.EntityData.YListKeys = []string {}

    return &(lsaInternalData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType
// Router LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If True, router is an Autonomous system Border Router. The type is bool.
    RouterAsbr interface{}

    // If True, router is an Area Border Router. The type is bool.
    RouterAbr interface{}

    // If true, internal LSA. The type is bool.
    InternalLsa interface{}

    // List of links in this LSA. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link.
    Link []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link

    // List of links for internal LSA. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink.
    InternalLink []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
}

func (routerLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-internal-data"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Children.Append("internal-link", types.YChild{"InternalLink", nil})
    for i := range routerLsaType.InternalLink {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.InternalLink[i]), types.YChild{"InternalLink", routerLsaType.InternalLink[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-asbr", types.YLeaf{"RouterAsbr", routerLsaType.RouterAsbr})
    routerLsaType.EntityData.Leafs.Append("router-abr", types.YLeaf{"RouterAbr", routerLsaType.RouterAbr})
    routerLsaType.EntityData.Leafs.Append("internal-lsa", types.YLeaf{"InternalLsa", routerLsaType.InternalLsa})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link
// List of links in this LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos.
    LinkTos []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
}

func (link *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range link.LinkTos {
        link.EntityData.Children.Append(types.GetSegmentPath(link.LinkTos[i]), types.YChild{"LinkTos", link.LinkTos[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", link.LinkId})
    link.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", link.LinkData})
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
// List of links for internal LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos.
    LinkTos []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
}

func (internalLink *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink) GetEntityData() *types.CommonEntityData {
    internalLink.EntityData.YFilter = internalLink.YFilter
    internalLink.EntityData.YangName = "internal-link"
    internalLink.EntityData.BundleName = "cisco_ios_xr"
    internalLink.EntityData.ParentYangName = "router-lsa-type"
    internalLink.EntityData.SegmentPath = "internal-link"
    internalLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalLink.EntityData.Children = types.NewOrderedMap()
    internalLink.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range internalLink.LinkTos {
        internalLink.EntityData.Children.Append(types.GetSegmentPath(internalLink.LinkTos[i]), types.YChild{"LinkTos", internalLink.LinkTos[i]})
    }
    internalLink.EntityData.Leafs = types.NewOrderedMap()
    internalLink.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", internalLink.LinkId})
    internalLink.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", internalLink.LinkData})
    internalLink.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", internalLink.LinkType})
    internalLink.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", internalLink.LinkMetric})

    internalLink.EntityData.YListKeys = []string {}

    return &(internalLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "internal-link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType
// Network LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network prefix length. The type is interface{} with range: 0..4294967295.
    NetworkPrefixLength interface{}

    // Neighbor router list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter.
    NeighborRouter []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
}

func (networkLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("neighbor-router", types.YChild{"NeighborRouter", nil})
    for i := range networkLsaType.NeighborRouter {
        networkLsaType.EntityData.Children.Append(types.GetSegmentPath(networkLsaType.NeighborRouter[i]), types.YChild{"NeighborRouter", networkLsaType.NeighborRouter[i]})
    }
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("network-prefix-length", types.YLeaf{"NetworkPrefixLength", networkLsaType.NetworkPrefixLength})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
// Neighbor router list
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (neighborRouter *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter) GetEntityData() *types.CommonEntityData {
    neighborRouter.EntityData.YFilter = neighborRouter.YFilter
    neighborRouter.EntityData.YangName = "neighbor-router"
    neighborRouter.EntityData.BundleName = "cisco_ios_xr"
    neighborRouter.EntityData.ParentYangName = "network-lsa-type"
    neighborRouter.EntityData.SegmentPath = "neighbor-router"
    neighborRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRouter.EntityData.Children = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborRouter.Entry})

    neighborRouter.EntityData.YListKeys = []string {}

    return &(neighborRouter.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType
// Summary LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary LSA prefix length. The type is interface{} with range:
    // 0..4294967295.
    SummaryPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalSumLsa interface{}

    // Metric. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric.
    SummaryLsaMetric []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
}

func (summaryLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType) GetEntityData() *types.CommonEntityData {
    summaryLsaType.EntityData.YFilter = summaryLsaType.YFilter
    summaryLsaType.EntityData.YangName = "summary-lsa-type"
    summaryLsaType.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaType.EntityData.ParentYangName = "lsa-internal-data"
    summaryLsaType.EntityData.SegmentPath = "summary-lsa-type"
    summaryLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaType.EntityData.Children = types.NewOrderedMap()
    summaryLsaType.EntityData.Children.Append("summary-lsa-metric", types.YChild{"SummaryLsaMetric", nil})
    for i := range summaryLsaType.SummaryLsaMetric {
        summaryLsaType.EntityData.Children.Append(types.GetSegmentPath(summaryLsaType.SummaryLsaMetric[i]), types.YChild{"SummaryLsaMetric", summaryLsaType.SummaryLsaMetric[i]})
    }
    summaryLsaType.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaType.EntityData.Leafs.Append("summary-prefix-length", types.YLeaf{"SummaryPrefixLength", summaryLsaType.SummaryPrefixLength})
    summaryLsaType.EntityData.Leafs.Append("internal-sum-lsa", types.YLeaf{"InternalSumLsa", summaryLsaType.InternalSumLsa})

    summaryLsaType.EntityData.YListKeys = []string {}

    return &(summaryLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
// Metric
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (summaryLsaMetric *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric) GetEntityData() *types.CommonEntityData {
    summaryLsaMetric.EntityData.YFilter = summaryLsaMetric.YFilter
    summaryLsaMetric.EntityData.YangName = "summary-lsa-metric"
    summaryLsaMetric.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaMetric.EntityData.ParentYangName = "summary-lsa-type"
    summaryLsaMetric.EntityData.SegmentPath = "summary-lsa-metric"
    summaryLsaMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaMetric.EntityData.Children = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", summaryLsaMetric.Entry})

    summaryLsaMetric.EntityData.YListKeys = []string {}

    return &(summaryLsaMetric.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType
// External LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix length. The type is interface{} with range: 0..4294967295.
    ExternalPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalExternalLsa interface{}

    // Type of service information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric.
    ExternalTosMetric []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
}

func (externalLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-internal-data"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("external-tos-metric", types.YChild{"ExternalTosMetric", nil})
    for i := range externalLsaType.ExternalTosMetric {
        externalLsaType.EntityData.Children.Append(types.GetSegmentPath(externalLsaType.ExternalTosMetric[i]), types.YChild{"ExternalTosMetric", externalLsaType.ExternalTosMetric[i]})
    }
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("external-prefix-length", types.YLeaf{"ExternalPrefixLength", externalLsaType.ExternalPrefixLength})
    externalLsaType.EntityData.Leafs.Append("internal-external-lsa", types.YLeaf{"InternalExternalLsa", externalLsaType.InternalExternalLsa})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
// Type of service information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cost of this route. The type is interface{} with range: 0..4294967295.
    ExternalMetric interface{}

    // External LSA metric type. The type is ExMetric.
    ExternalMetricType interface{}

    // Type of Service. The type is interface{} with range: 0..4294967295.
    ExternalTos interface{}

    // Forwarding Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}
}

func (externalTosMetric *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric) GetEntityData() *types.CommonEntityData {
    externalTosMetric.EntityData.YFilter = externalTosMetric.YFilter
    externalTosMetric.EntityData.YangName = "external-tos-metric"
    externalTosMetric.EntityData.BundleName = "cisco_ios_xr"
    externalTosMetric.EntityData.ParentYangName = "external-lsa-type"
    externalTosMetric.EntityData.SegmentPath = "external-tos-metric"
    externalTosMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalTosMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalTosMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalTosMetric.EntityData.Children = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs.Append("external-metric", types.YLeaf{"ExternalMetric", externalTosMetric.ExternalMetric})
    externalTosMetric.EntityData.Leafs.Append("external-metric-type", types.YLeaf{"ExternalMetricType", externalTosMetric.ExternalMetricType})
    externalTosMetric.EntityData.Leafs.Append("external-tos", types.YLeaf{"ExternalTos", externalTosMetric.ExternalTos})
    externalTosMetric.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalTosMetric.ForwardingAddress})
    externalTosMetric.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalTosMetric.ExternalTag})

    externalTosMetric.EntityData.YListKeys = []string {}

    return &(externalTosMetric.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType
// Opaque-Link LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface on which the Opaque link LSA is received. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    OpaqueInterfaceName interface{}
}

func (opaqueLinkLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType) GetEntityData() *types.CommonEntityData {
    opaqueLinkLsaType.EntityData.YFilter = opaqueLinkLsaType.YFilter
    opaqueLinkLsaType.EntityData.YangName = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueLinkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueLinkLsaType.EntityData.SegmentPath = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueLinkLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs.Append("opaque-interface-name", types.YLeaf{"OpaqueInterfaceName", opaqueLinkLsaType.OpaqueInterfaceName})

    opaqueLinkLsaType.EntityData.YListKeys = []string {}

    return &(opaqueLinkLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType
// Opaque-Area, opaque type 1 LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
}

func (opaqueMplsTeLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType) GetEntityData() *types.CommonEntityData {
    opaqueMplsTeLsaType.EntityData.YFilter = opaqueMplsTeLsaType.YFilter
    opaqueMplsTeLsaType.EntityData.YangName = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueMplsTeLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueMplsTeLsaType.EntityData.SegmentPath = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueMplsTeLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueMplsTeLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueMplsTeLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueMplsTeLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueMplsTeLsaType.Tlv {
        opaqueMplsTeLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueMplsTeLsaType.Tlv[i]), types.YChild{"Tlv", opaqueMplsTeLsaType.Tlv[i]})
    }
    opaqueMplsTeLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueMplsTeLsaType.EntityData.YListKeys = []string {}

    return &(opaqueMplsTeLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-mpls-te-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa
// Opaque-link, opaque type 3 Grace LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time the router's neighbor should advertise it fully adjacent
    // (s). The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is OspfGrReason.
    GraceReason interface{}

    // IP interface address on the subnet associated with the grace LSA. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpAddress interface{}
}

func (opaqueGraceLsa *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa) GetEntityData() *types.CommonEntityData {
    opaqueGraceLsa.EntityData.YFilter = opaqueGraceLsa.YFilter
    opaqueGraceLsa.EntityData.YangName = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.BundleName = "cisco_ios_xr"
    opaqueGraceLsa.EntityData.ParentYangName = "lsa-internal-data"
    opaqueGraceLsa.EntityData.SegmentPath = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueGraceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueGraceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueGraceLsa.EntityData.Children = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", opaqueGraceLsa.GracePeriod})
    opaqueGraceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", opaqueGraceLsa.GraceReason})
    opaqueGraceLsa.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", opaqueGraceLsa.IpAddress})

    opaqueGraceLsa.EntityData.YListKeys = []string {}

    return &(opaqueGraceLsa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType
// Opaque Router Information LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Opaque LSA flooding scope, a.k.a., Opaque LSA Type. The type is
    // OspfLsaOpqRiScope.
    OpaqueRilsaScope interface{}

    // Interface on which this Link-Local Opaque link LSA is received. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    OpaqueRiInterfaceName interface{}

    // Router Information TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv.
    OpaqueRitlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
}

func (opaqueRouterInfoLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType) GetEntityData() *types.CommonEntityData {
    opaqueRouterInfoLsaType.EntityData.YFilter = opaqueRouterInfoLsaType.YFilter
    opaqueRouterInfoLsaType.EntityData.YangName = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueRouterInfoLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueRouterInfoLsaType.EntityData.SegmentPath = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRouterInfoLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRouterInfoLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRouterInfoLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Children.Append("opaque-ritlv", types.YChild{"OpaqueRitlv", nil})
    for i := range opaqueRouterInfoLsaType.OpaqueRitlv {
        opaqueRouterInfoLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueRouterInfoLsaType.OpaqueRitlv[i]), types.YChild{"OpaqueRitlv", opaqueRouterInfoLsaType.OpaqueRitlv[i]})
    }
    opaqueRouterInfoLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-rilsa-scope", types.YLeaf{"OpaqueRilsaScope", opaqueRouterInfoLsaType.OpaqueRilsaScope})
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-ri-interface-name", types.YLeaf{"OpaqueRiInterfaceName", opaqueRouterInfoLsaType.OpaqueRiInterfaceName})

    opaqueRouterInfoLsaType.EntityData.YListKeys = []string {}

    return &(opaqueRouterInfoLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
// Router Information TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RITLVInternalType. The type is OspfShOpqRiTlvTypes.
    RitlvInternalType interface{}

    // Unknown Rtr Info TLV.
    UnknownTlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv

    // Rtr Cap TLV.
    RtrCapTlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv

    // PCE Discovery TLV.
    Pcedtlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv

    // SR Algorithm TLV.
    SrAlgoTlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv

    // SR Range TLV.
    SrRangeTlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv

    // Node MSD TLV.
    NodeMsdtlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
}

func (opaqueRitlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv) GetEntityData() *types.CommonEntityData {
    opaqueRitlv.EntityData.YFilter = opaqueRitlv.YFilter
    opaqueRitlv.EntityData.YangName = "opaque-ritlv"
    opaqueRitlv.EntityData.BundleName = "cisco_ios_xr"
    opaqueRitlv.EntityData.ParentYangName = "opaque-router-info-lsa-type"
    opaqueRitlv.EntityData.SegmentPath = "opaque-ritlv"
    opaqueRitlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRitlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRitlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRitlv.EntityData.Children = types.NewOrderedMap()
    opaqueRitlv.EntityData.Children.Append("unknown-tlv", types.YChild{"UnknownTlv", &opaqueRitlv.UnknownTlv})
    opaqueRitlv.EntityData.Children.Append("rtr-cap-tlv", types.YChild{"RtrCapTlv", &opaqueRitlv.RtrCapTlv})
    opaqueRitlv.EntityData.Children.Append("pcedtlv", types.YChild{"Pcedtlv", &opaqueRitlv.Pcedtlv})
    opaqueRitlv.EntityData.Children.Append("sr-algo-tlv", types.YChild{"SrAlgoTlv", &opaqueRitlv.SrAlgoTlv})
    opaqueRitlv.EntityData.Children.Append("sr-range-tlv", types.YChild{"SrRangeTlv", &opaqueRitlv.SrRangeTlv})
    opaqueRitlv.EntityData.Children.Append("node-msdtlv", types.YChild{"NodeMsdtlv", &opaqueRitlv.NodeMsdtlv})
    opaqueRitlv.EntityData.Leafs = types.NewOrderedMap()
    opaqueRitlv.EntityData.Leafs.Append("ritlv-internal-type", types.YLeaf{"RitlvInternalType", opaqueRitlv.RitlvInternalType})

    opaqueRitlv.EntityData.YListKeys = []string {}

    return &(opaqueRitlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv
// Unknown Rtr Info TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (unknownTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv) GetEntityData() *types.CommonEntityData {
    unknownTlv.EntityData.YFilter = unknownTlv.YFilter
    unknownTlv.EntityData.YangName = "unknown-tlv"
    unknownTlv.EntityData.BundleName = "cisco_ios_xr"
    unknownTlv.EntityData.ParentYangName = "opaque-ritlv"
    unknownTlv.EntityData.SegmentPath = "unknown-tlv"
    unknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownTlv.EntityData.Children = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", unknownTlv.RiGenTlvType})
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", unknownTlv.RiGenTlvLength})
    unknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", unknownTlv.RiGenvalue})

    unknownTlv.EntityData.YListKeys = []string {}

    return &(unknownTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv
// Rtr Cap TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    RtrCapTlvLength interface{}

    // Graceful Restart Capability. The type is bool.
    RtrCapGracefulRestart interface{}

    // Graceful Restart Helper Capability. The type is bool.
    RtrCapGracefulRestartHelper interface{}

    // Stub Router capability. The type is bool.
    RtrCapStubRtr interface{}

    // Traffic Engineering capability of area. The type is bool.
    RtrCapAreaTe interface{}

    // P2P LAN Capability. The type is bool.
    RtrCapP2plan interface{}

    // TE Experimental bit. The type is bool.
    RtrCapTeExp interface{}

    // All capability bits. The type is interface{} with range: 0..4294967295.
    RtrCapAllBits interface{}

    // Additional Information in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RtrCapAdditionalInfo interface{}
}

func (rtrCapTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv) GetEntityData() *types.CommonEntityData {
    rtrCapTlv.EntityData.YFilter = rtrCapTlv.YFilter
    rtrCapTlv.EntityData.YangName = "rtr-cap-tlv"
    rtrCapTlv.EntityData.BundleName = "cisco_ios_xr"
    rtrCapTlv.EntityData.ParentYangName = "opaque-ritlv"
    rtrCapTlv.EntityData.SegmentPath = "rtr-cap-tlv"
    rtrCapTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtrCapTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtrCapTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtrCapTlv.EntityData.Children = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-tlv-length", types.YLeaf{"RtrCapTlvLength", rtrCapTlv.RtrCapTlvLength})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart", types.YLeaf{"RtrCapGracefulRestart", rtrCapTlv.RtrCapGracefulRestart})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart-helper", types.YLeaf{"RtrCapGracefulRestartHelper", rtrCapTlv.RtrCapGracefulRestartHelper})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-stub-rtr", types.YLeaf{"RtrCapStubRtr", rtrCapTlv.RtrCapStubRtr})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-area-te", types.YLeaf{"RtrCapAreaTe", rtrCapTlv.RtrCapAreaTe})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-p2plan", types.YLeaf{"RtrCapP2plan", rtrCapTlv.RtrCapP2plan})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-te-exp", types.YLeaf{"RtrCapTeExp", rtrCapTlv.RtrCapTeExp})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-all-bits", types.YLeaf{"RtrCapAllBits", rtrCapTlv.RtrCapAllBits})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-additional-info", types.YLeaf{"RtrCapAdditionalInfo", rtrCapTlv.RtrCapAdditionalInfo})

    rtrCapTlv.EntityData.YListKeys = []string {}

    return &(rtrCapTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv
// PCE Discovery TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    PcedtlvLength interface{}

    // PCE Address.
    PcedAddr Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr

    // PCE Scope Information.
    PcedScope Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
}

func (pcedtlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv) GetEntityData() *types.CommonEntityData {
    pcedtlv.EntityData.YFilter = pcedtlv.YFilter
    pcedtlv.EntityData.YangName = "pcedtlv"
    pcedtlv.EntityData.BundleName = "cisco_ios_xr"
    pcedtlv.EntityData.ParentYangName = "opaque-ritlv"
    pcedtlv.EntityData.SegmentPath = "pcedtlv"
    pcedtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedtlv.EntityData.Children = types.NewOrderedMap()
    pcedtlv.EntityData.Children.Append("pced-addr", types.YChild{"PcedAddr", &pcedtlv.PcedAddr})
    pcedtlv.EntityData.Children.Append("pced-scope", types.YChild{"PcedScope", &pcedtlv.PcedScope})
    pcedtlv.EntityData.Leafs = types.NewOrderedMap()
    pcedtlv.EntityData.Leafs.Append("pcedtlv-length", types.YLeaf{"PcedtlvLength", pcedtlv.PcedtlvLength})

    pcedtlv.EntityData.YListKeys = []string {}

    return &(pcedtlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr
// PCE Address
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCEAddrType. The type is OspfShOpqRiPceAddrTypes.
    PceAddrType interface{}

    // Unknown PCE Addr TLV.
    PceAddrUnknownTlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv

    // IPv4 PCE Address.
    Ipv4pceAddr Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr

    // IPv6 PCE Address.
    Ipv6pceAddr Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
}

func (pcedAddr *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr) GetEntityData() *types.CommonEntityData {
    pcedAddr.EntityData.YFilter = pcedAddr.YFilter
    pcedAddr.EntityData.YangName = "pced-addr"
    pcedAddr.EntityData.BundleName = "cisco_ios_xr"
    pcedAddr.EntityData.ParentYangName = "pcedtlv"
    pcedAddr.EntityData.SegmentPath = "pced-addr"
    pcedAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedAddr.EntityData.Children = types.NewOrderedMap()
    pcedAddr.EntityData.Children.Append("pce-addr-unknown-tlv", types.YChild{"PceAddrUnknownTlv", &pcedAddr.PceAddrUnknownTlv})
    pcedAddr.EntityData.Children.Append("ipv4pce-addr", types.YChild{"Ipv4pceAddr", &pcedAddr.Ipv4pceAddr})
    pcedAddr.EntityData.Children.Append("ipv6pce-addr", types.YChild{"Ipv6pceAddr", &pcedAddr.Ipv6pceAddr})
    pcedAddr.EntityData.Leafs = types.NewOrderedMap()
    pcedAddr.EntityData.Leafs.Append("pce-addr-type", types.YLeaf{"PceAddrType", pcedAddr.PceAddrType})

    pcedAddr.EntityData.YListKeys = []string {}

    return &(pcedAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv
// Unknown PCE Addr TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (pceAddrUnknownTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv) GetEntityData() *types.CommonEntityData {
    pceAddrUnknownTlv.EntityData.YFilter = pceAddrUnknownTlv.YFilter
    pceAddrUnknownTlv.EntityData.YangName = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.BundleName = "cisco_ios_xr"
    pceAddrUnknownTlv.EntityData.ParentYangName = "pced-addr"
    pceAddrUnknownTlv.EntityData.SegmentPath = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pceAddrUnknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pceAddrUnknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pceAddrUnknownTlv.EntityData.Children = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", pceAddrUnknownTlv.RiGenTlvType})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", pceAddrUnknownTlv.RiGenTlvLength})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", pceAddrUnknownTlv.RiGenvalue})

    pceAddrUnknownTlv.EntityData.YListKeys = []string {}

    return &(pceAddrUnknownTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr
// IPv4 PCE Address
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Pceipv4Addr interface{}
}

func (ipv4pceAddr *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr) GetEntityData() *types.CommonEntityData {
    ipv4pceAddr.EntityData.YFilter = ipv4pceAddr.YFilter
    ipv4pceAddr.EntityData.YangName = "ipv4pce-addr"
    ipv4pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv4pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv4pceAddr.EntityData.SegmentPath = "ipv4pce-addr"
    ipv4pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs.Append("pceipv4-addr", types.YLeaf{"Pceipv4Addr", ipv4pceAddr.Pceipv4Addr})

    ipv4pceAddr.EntityData.YListKeys = []string {}

    return &(ipv4pceAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
// IPv6 PCE Address
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv6 Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Pceipv6Addr interface{}
}

func (ipv6pceAddr *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr) GetEntityData() *types.CommonEntityData {
    ipv6pceAddr.EntityData.YFilter = ipv6pceAddr.YFilter
    ipv6pceAddr.EntityData.YangName = "ipv6pce-addr"
    ipv6pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv6pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv6pceAddr.EntityData.SegmentPath = "ipv6pce-addr"
    ipv6pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs.Append("pceipv6-addr", types.YLeaf{"Pceipv6Addr", ipv6pceAddr.Pceipv6Addr})

    ipv6pceAddr.EntityData.YListKeys = []string {}

    return &(ipv6pceAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
// PCE Scope Information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L Bit. The type is bool.
    Lbit interface{}

    // R Bit. The type is bool.
    Rbit interface{}

    // Rd Bit. The type is bool.
    RdBit interface{}

    // S Bit. The type is bool.
    Sbit interface{}

    // Sd Bit. The type is bool.
    SdBit interface{}

    // Y Bit. The type is bool.
    Ybit interface{}

    // Pref L. The type is interface{} with range: 0..255.
    PrefL interface{}

    // Pref R. The type is interface{} with range: 0..255.
    PrefR interface{}

    // Pref S. The type is interface{} with range: 0..255.
    PrefS interface{}

    // Pref Y. The type is interface{} with range: 0..255.
    PrefY interface{}

    // PCE Scope Information. The type is interface{} with range: 0..4294967295.
    AllScopeInfoBits interface{}
}

func (pcedScope *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope) GetEntityData() *types.CommonEntityData {
    pcedScope.EntityData.YFilter = pcedScope.YFilter
    pcedScope.EntityData.YangName = "pced-scope"
    pcedScope.EntityData.BundleName = "cisco_ios_xr"
    pcedScope.EntityData.ParentYangName = "pcedtlv"
    pcedScope.EntityData.SegmentPath = "pced-scope"
    pcedScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedScope.EntityData.Children = types.NewOrderedMap()
    pcedScope.EntityData.Leafs = types.NewOrderedMap()
    pcedScope.EntityData.Leafs.Append("lbit", types.YLeaf{"Lbit", pcedScope.Lbit})
    pcedScope.EntityData.Leafs.Append("rbit", types.YLeaf{"Rbit", pcedScope.Rbit})
    pcedScope.EntityData.Leafs.Append("rd-bit", types.YLeaf{"RdBit", pcedScope.RdBit})
    pcedScope.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", pcedScope.Sbit})
    pcedScope.EntityData.Leafs.Append("sd-bit", types.YLeaf{"SdBit", pcedScope.SdBit})
    pcedScope.EntityData.Leafs.Append("ybit", types.YLeaf{"Ybit", pcedScope.Ybit})
    pcedScope.EntityData.Leafs.Append("pref-l", types.YLeaf{"PrefL", pcedScope.PrefL})
    pcedScope.EntityData.Leafs.Append("pref-r", types.YLeaf{"PrefR", pcedScope.PrefR})
    pcedScope.EntityData.Leafs.Append("pref-s", types.YLeaf{"PrefS", pcedScope.PrefS})
    pcedScope.EntityData.Leafs.Append("pref-y", types.YLeaf{"PrefY", pcedScope.PrefY})
    pcedScope.EntityData.Leafs.Append("all-scope-info-bits", types.YLeaf{"AllScopeInfoBits", pcedScope.AllScopeInfoBits})

    pcedScope.EntityData.YListKeys = []string {}

    return &(pcedScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv
// SR Algorithm TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Algorithms. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue.
    SrAlgoValue []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
}

func (srAlgoTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv) GetEntityData() *types.CommonEntityData {
    srAlgoTlv.EntityData.YFilter = srAlgoTlv.YFilter
    srAlgoTlv.EntityData.YangName = "sr-algo-tlv"
    srAlgoTlv.EntityData.BundleName = "cisco_ios_xr"
    srAlgoTlv.EntityData.ParentYangName = "opaque-ritlv"
    srAlgoTlv.EntityData.SegmentPath = "sr-algo-tlv"
    srAlgoTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoTlv.EntityData.Children = types.NewOrderedMap()
    srAlgoTlv.EntityData.Children.Append("sr-algo-value", types.YChild{"SrAlgoValue", nil})
    for i := range srAlgoTlv.SrAlgoValue {
        srAlgoTlv.EntityData.Children.Append(types.GetSegmentPath(srAlgoTlv.SrAlgoValue[i]), types.YChild{"SrAlgoValue", srAlgoTlv.SrAlgoValue[i]})
    }
    srAlgoTlv.EntityData.Leafs = types.NewOrderedMap()

    srAlgoTlv.EntityData.YListKeys = []string {}

    return &(srAlgoTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
// SR Algorithms
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..255.
    Entry interface{}
}

func (srAlgoValue *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue) GetEntityData() *types.CommonEntityData {
    srAlgoValue.EntityData.YFilter = srAlgoValue.YFilter
    srAlgoValue.EntityData.YangName = "sr-algo-value"
    srAlgoValue.EntityData.BundleName = "cisco_ios_xr"
    srAlgoValue.EntityData.ParentYangName = "sr-algo-tlv"
    srAlgoValue.EntityData.SegmentPath = "sr-algo-value"
    srAlgoValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoValue.EntityData.Children = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srAlgoValue.Entry})

    srAlgoValue.EntityData.YListKeys = []string {}

    return &(srAlgoValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv
// SR Range TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    SrRangeLength interface{}

    // SR Range Size. The type is interface{} with range: 0..4294967295.
    SrRangeSize interface{}

    // SID sub-TLV.
    Sidtlv Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
}

func (srRangeTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv) GetEntityData() *types.CommonEntityData {
    srRangeTlv.EntityData.YFilter = srRangeTlv.YFilter
    srRangeTlv.EntityData.YangName = "sr-range-tlv"
    srRangeTlv.EntityData.BundleName = "cisco_ios_xr"
    srRangeTlv.EntityData.ParentYangName = "opaque-ritlv"
    srRangeTlv.EntityData.SegmentPath = "sr-range-tlv"
    srRangeTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srRangeTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srRangeTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srRangeTlv.EntityData.Children = types.NewOrderedMap()
    srRangeTlv.EntityData.Children.Append("sidtlv", types.YChild{"Sidtlv", &srRangeTlv.Sidtlv})
    srRangeTlv.EntityData.Leafs = types.NewOrderedMap()
    srRangeTlv.EntityData.Leafs.Append("sr-range-length", types.YLeaf{"SrRangeLength", srRangeTlv.SrRangeLength})
    srRangeTlv.EntityData.Leafs.Append("sr-range-size", types.YLeaf{"SrRangeSize", srRangeTlv.SrRangeSize})

    srRangeTlv.EntityData.YListKeys = []string {}

    return &(srRangeTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
// SID sub-TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of sub-TLV. The type is interface{} with range: 0..65535.
    SrSidLength interface{}

    // SID Value. The type is interface{} with range: 0..4294967295.
    SrSidValue interface{}
}

func (sidtlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv) GetEntityData() *types.CommonEntityData {
    sidtlv.EntityData.YFilter = sidtlv.YFilter
    sidtlv.EntityData.YangName = "sidtlv"
    sidtlv.EntityData.BundleName = "cisco_ios_xr"
    sidtlv.EntityData.ParentYangName = "sr-range-tlv"
    sidtlv.EntityData.SegmentPath = "sidtlv"
    sidtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sidtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sidtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sidtlv.EntityData.Children = types.NewOrderedMap()
    sidtlv.EntityData.Leafs = types.NewOrderedMap()
    sidtlv.EntityData.Leafs.Append("sr-sid-length", types.YLeaf{"SrSidLength", sidtlv.SrSidLength})
    sidtlv.EntityData.Leafs.Append("sr-sid-value", types.YLeaf{"SrSidValue", sidtlv.SrSidValue})

    sidtlv.EntityData.YListKeys = []string {}

    return &(sidtlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
// Node MSD TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    NodeMsdtlvLength interface{}

    // Node MSD Subtypes.
    NodeMsdSubTypes Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
}

func (nodeMsdtlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv) GetEntityData() *types.CommonEntityData {
    nodeMsdtlv.EntityData.YFilter = nodeMsdtlv.YFilter
    nodeMsdtlv.EntityData.YangName = "node-msdtlv"
    nodeMsdtlv.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdtlv.EntityData.ParentYangName = "opaque-ritlv"
    nodeMsdtlv.EntityData.SegmentPath = "node-msdtlv"
    nodeMsdtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdtlv.EntityData.Children = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Children.Append("node-msd-sub-types", types.YChild{"NodeMsdSubTypes", &nodeMsdtlv.NodeMsdSubTypes})
    nodeMsdtlv.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Leafs.Append("node-msdtlv-length", types.YLeaf{"NodeMsdtlvLength", nodeMsdtlv.NodeMsdtlvLength})

    nodeMsdtlv.EntityData.YListKeys = []string {}

    return &(nodeMsdtlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
// Node MSD Subtypes
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MSD SubType. The type is interface{} with range: 0..255.
    MsdSubType interface{}

    // MSD Value. The type is interface{} with range: 0..255.
    MsdValue interface{}
}

func (nodeMsdSubTypes *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes) GetEntityData() *types.CommonEntityData {
    nodeMsdSubTypes.EntityData.YFilter = nodeMsdSubTypes.YFilter
    nodeMsdSubTypes.EntityData.YangName = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdSubTypes.EntityData.ParentYangName = "node-msdtlv"
    nodeMsdSubTypes.EntityData.SegmentPath = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdSubTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdSubTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdSubTypes.EntityData.Children = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-sub-type", types.YLeaf{"MsdSubType", nodeMsdSubTypes.MsdSubType})
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-value", types.YLeaf{"MsdValue", nodeMsdSubTypes.MsdValue})

    nodeMsdSubTypes.EntityData.YListKeys = []string {}

    return &(nodeMsdSubTypes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType
// Extende Prefix LSA type
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
}

func (opaqueEpLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType) GetEntityData() *types.CommonEntityData {
    opaqueEpLsaType.EntityData.YFilter = opaqueEpLsaType.YFilter
    opaqueEpLsaType.EntityData.YangName = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueEpLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueEpLsaType.EntityData.SegmentPath = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueEpLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueEpLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueEpLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueEpLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueEpLsaType.Tlv {
        opaqueEpLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueEpLsaType.Tlv[i]), types.YChild{"Tlv", opaqueEpLsaType.Tlv[i]})
    }
    opaqueEpLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueEpLsaType.EntityData.YListKeys = []string {}

    return &(opaqueEpLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-ep-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
// Extended Link LSA type
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
}

func (opaqueElLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType) GetEntityData() *types.CommonEntityData {
    opaqueElLsaType.EntityData.YFilter = opaqueElLsaType.YFilter
    opaqueElLsaType.EntityData.YangName = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueElLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueElLsaType.EntityData.SegmentPath = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueElLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueElLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueElLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueElLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueElLsaType.Tlv {
        opaqueElLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueElLsaType.Tlv[i]), types.YChild{"Tlv", opaqueElLsaType.Tlv[i]})
    }
    opaqueElLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueElLsaType.EntityData.YListKeys = []string {}

    return &(opaqueElLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-el-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries
// Link state advertisement summary table
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA summary information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary.
    LsaSummary []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary
}

func (lsaSummaries *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries) GetEntityData() *types.CommonEntityData {
    lsaSummaries.EntityData.YFilter = lsaSummaries.YFilter
    lsaSummaries.EntityData.YangName = "lsa-summaries"
    lsaSummaries.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaries.EntityData.ParentYangName = "database-area"
    lsaSummaries.EntityData.SegmentPath = "lsa-summaries"
    lsaSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaries.EntityData.Children = types.NewOrderedMap()
    lsaSummaries.EntityData.Children.Append("lsa-summary", types.YChild{"LsaSummary", nil})
    for i := range lsaSummaries.LsaSummary {
        lsaSummaries.EntityData.Children.Append(types.GetSegmentPath(lsaSummaries.LsaSummary[i]), types.YChild{"LsaSummary", lsaSummaries.LsaSummary[i]})
    }
    lsaSummaries.EntityData.Leafs = types.NewOrderedMap()

    lsaSummaries.EntityData.YListKeys = []string {}

    return &(lsaSummaries.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary
// LSA summary information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Number of links. The type is interface{} with range: 0..65535.
    LinkCount interface{}

    // LSA header information.
    LsaHeader Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader
}

func (lsaSummary *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary) GetEntityData() *types.CommonEntityData {
    lsaSummary.EntityData.YFilter = lsaSummary.YFilter
    lsaSummary.EntityData.YangName = "lsa-summary"
    lsaSummary.EntityData.BundleName = "cisco_ios_xr"
    lsaSummary.EntityData.ParentYangName = "lsa-summaries"
    lsaSummary.EntityData.SegmentPath = "lsa-summary"
    lsaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummary.EntityData.Children = types.NewOrderedMap()
    lsaSummary.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummary.LsaHeader})
    lsaSummary.EntityData.Leafs = types.NewOrderedMap()
    lsaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsaSummary.AreaId})
    lsaSummary.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaSummary.LsType})
    lsaSummary.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaSummary.LsId})
    lsaSummary.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaSummary.AdvertisingRouter})
    lsaSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummary.InterfaceName})
    lsaSummary.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", lsaSummary.ExternalTag})
    lsaSummary.EntityData.Leafs.Append("link-count", types.YLeaf{"LinkCount", lsaSummary.LinkCount})

    lsaSummary.EntityData.YListKeys = []string {}

    return &(lsaSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader
// LSA header information
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries
// Link State database summary table
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link State Database summary for a particular area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary.
    DatabaseSummary []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary
}

func (databaseSummaries *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries) GetEntityData() *types.CommonEntityData {
    databaseSummaries.EntityData.YFilter = databaseSummaries.YFilter
    databaseSummaries.EntityData.YangName = "database-summaries"
    databaseSummaries.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaries.EntityData.ParentYangName = "database"
    databaseSummaries.EntityData.SegmentPath = "database-summaries"
    databaseSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaries.EntityData.Children = types.NewOrderedMap()
    databaseSummaries.EntityData.Children.Append("database-summary", types.YChild{"DatabaseSummary", nil})
    for i := range databaseSummaries.DatabaseSummary {
        databaseSummaries.EntityData.Children.Append(types.GetSegmentPath(databaseSummaries.DatabaseSummary[i]), types.YChild{"DatabaseSummary", databaseSummaries.DatabaseSummary[i]})
    }
    databaseSummaries.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaries.EntityData.YListKeys = []string {}

    return &(databaseSummaries.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary
// Link State Database summary for a particular
// area
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area id. The type is string with length: 0..16.
    DbaseSumAreaIdString interface{}

    // Summary counters for Area scope LSAs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter.
    AreaLsaCounter []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter
}

func (databaseSummary *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary) GetEntityData() *types.CommonEntityData {
    databaseSummary.EntityData.YFilter = databaseSummary.YFilter
    databaseSummary.EntityData.YangName = "database-summary"
    databaseSummary.EntityData.BundleName = "cisco_ios_xr"
    databaseSummary.EntityData.ParentYangName = "database-summaries"
    databaseSummary.EntityData.SegmentPath = "database-summary" + types.AddKeyToken(databaseSummary.AreaId, "area-id")
    databaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummary.EntityData.Children = types.NewOrderedMap()
    databaseSummary.EntityData.Children.Append("area-lsa-counter", types.YChild{"AreaLsaCounter", nil})
    for i := range databaseSummary.AreaLsaCounter {
        databaseSummary.EntityData.Children.Append(types.GetSegmentPath(databaseSummary.AreaLsaCounter[i]), types.YChild{"AreaLsaCounter", databaseSummary.AreaLsaCounter[i]})
    }
    databaseSummary.EntityData.Leafs = types.NewOrderedMap()
    databaseSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", databaseSummary.AreaId})
    databaseSummary.EntityData.Leafs.Append("dbase-sum-area-id-string", types.YLeaf{"DbaseSumAreaIdString", databaseSummary.DbaseSumAreaIdString})

    databaseSummary.EntityData.YListKeys = []string {"AreaId"}

    return &(databaseSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter
// Summary counters for Area scope LSAs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of LSAs. The type is Lsa.
    LsaType interface{}

    // Number of LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaCount interface{}

    // Number of deleted LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaDeleteCount interface{}

    // Number of MaxAged LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaMaxageCount interface{}

    // Number of self-generated LSAs. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaSelfCount interface{}
}

func (areaLsaCounter *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter) GetEntityData() *types.CommonEntityData {
    areaLsaCounter.EntityData.YFilter = areaLsaCounter.YFilter
    areaLsaCounter.EntityData.YangName = "area-lsa-counter"
    areaLsaCounter.EntityData.BundleName = "cisco_ios_xr"
    areaLsaCounter.EntityData.ParentYangName = "database-summary"
    areaLsaCounter.EntityData.SegmentPath = "area-lsa-counter"
    areaLsaCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaLsaCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaLsaCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaLsaCounter.EntityData.Children = types.NewOrderedMap()
    areaLsaCounter.EntityData.Leafs = types.NewOrderedMap()
    areaLsaCounter.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", areaLsaCounter.LsaType})
    areaLsaCounter.EntityData.Leafs.Append("lsa-count", types.YLeaf{"LsaCount", areaLsaCounter.LsaCount})
    areaLsaCounter.EntityData.Leafs.Append("lsa-delete-count", types.YLeaf{"LsaDeleteCount", areaLsaCounter.LsaDeleteCount})
    areaLsaCounter.EntityData.Leafs.Append("lsa-maxage-count", types.YLeaf{"LsaMaxageCount", areaLsaCounter.LsaMaxageCount})
    areaLsaCounter.EntityData.Leafs.Append("lsa-self-count", types.YLeaf{"LsaSelfCount", areaLsaCounter.LsaSelfCount})

    areaLsaCounter.EntityData.YListKeys = []string {}

    return &(areaLsaCounter.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs
// Link State Database summary for the AS
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary counter for AS scope LSAs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs_AsLsaCounter.
    AsLsaCounter []*Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs_AsLsaCounter
}

func (databaseSummaryAs *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs) GetEntityData() *types.CommonEntityData {
    databaseSummaryAs.EntityData.YFilter = databaseSummaryAs.YFilter
    databaseSummaryAs.EntityData.YangName = "database-summary-as"
    databaseSummaryAs.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaryAs.EntityData.ParentYangName = "database"
    databaseSummaryAs.EntityData.SegmentPath = "database-summary-as"
    databaseSummaryAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaryAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaryAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaryAs.EntityData.Children = types.NewOrderedMap()
    databaseSummaryAs.EntityData.Children.Append("as-lsa-counter", types.YChild{"AsLsaCounter", nil})
    for i := range databaseSummaryAs.AsLsaCounter {
        databaseSummaryAs.EntityData.Children.Append(types.GetSegmentPath(databaseSummaryAs.AsLsaCounter[i]), types.YChild{"AsLsaCounter", databaseSummaryAs.AsLsaCounter[i]})
    }
    databaseSummaryAs.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaryAs.EntityData.YListKeys = []string {}

    return &(databaseSummaryAs.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs_AsLsaCounter
// Summary counter for AS scope LSAs
type Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs_AsLsaCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of LSAs. The type is Lsa.
    LsaType interface{}

    // Number of LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaCount interface{}

    // Number of deleted LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaDeleteCount interface{}

    // Number of MaxAged LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaMaxageCount interface{}

    // Number of self-generated LSAs. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaSelfCount interface{}
}

func (asLsaCounter *Ospf_Processes_Process_Vrfs_Vrf_Database_DatabaseSummaryAs_AsLsaCounter) GetEntityData() *types.CommonEntityData {
    asLsaCounter.EntityData.YFilter = asLsaCounter.YFilter
    asLsaCounter.EntityData.YangName = "as-lsa-counter"
    asLsaCounter.EntityData.BundleName = "cisco_ios_xr"
    asLsaCounter.EntityData.ParentYangName = "database-summary-as"
    asLsaCounter.EntityData.SegmentPath = "as-lsa-counter"
    asLsaCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asLsaCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asLsaCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asLsaCounter.EntityData.Children = types.NewOrderedMap()
    asLsaCounter.EntityData.Leafs = types.NewOrderedMap()
    asLsaCounter.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", asLsaCounter.LsaType})
    asLsaCounter.EntityData.Leafs.Append("lsa-count", types.YLeaf{"LsaCount", asLsaCounter.LsaCount})
    asLsaCounter.EntityData.Leafs.Append("lsa-delete-count", types.YLeaf{"LsaDeleteCount", asLsaCounter.LsaDeleteCount})
    asLsaCounter.EntityData.Leafs.Append("lsa-maxage-count", types.YLeaf{"LsaMaxageCount", asLsaCounter.LsaMaxageCount})
    asLsaCounter.EntityData.Leafs.Append("lsa-self-count", types.YLeaf{"LsaSelfCount", asLsaCounter.LsaSelfCount})

    asLsaCounter.EntityData.YListKeys = []string {}

    return &(asLsaCounter.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas
// Link State Database Table
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link State Advertisement information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa.
    Lsa []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa
}

func (lsas *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas) GetEntityData() *types.CommonEntityData {
    lsas.EntityData.YFilter = lsas.YFilter
    lsas.EntityData.YangName = "lsas"
    lsas.EntityData.BundleName = "cisco_ios_xr"
    lsas.EntityData.ParentYangName = "database"
    lsas.EntityData.SegmentPath = "lsas"
    lsas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsas.EntityData.Children = types.NewOrderedMap()
    lsas.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsas.Lsa {
        lsas.EntityData.Children.Append(types.GetSegmentPath(lsas.Lsa[i]), types.YChild{"Lsa", lsas.Lsa[i]})
    }
    lsas.EntityData.Leafs = types.NewOrderedMap()

    lsas.EntityData.YListKeys = []string {}

    return &(lsas.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa
// Link State Advertisement information
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Header information.
    LsaHeader Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaHeader

    // Detailed LSA Information.
    LsaDetailData Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData

    // Information pertaining to a specific LSA type.
    LsaInternalData Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData
}

func (lsa *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsas"
    lsa.EntityData.SegmentPath = "lsa"
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsa.LsaHeader})
    lsa.EntityData.Children.Append("lsa-detail-data", types.YChild{"LsaDetailData", &lsa.LsaDetailData})
    lsa.EntityData.Children.Append("lsa-internal-data", types.YChild{"LsaInternalData", &lsa.LsaInternalData})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaHeader
// Header information
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData
// Detailed LSA Information
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, type of service capable indicated by LSA's option field. The type
    // is bool.
    TosCapable interface{}

    // If true,  capable of type 7 to 5 translation indicated by LSA's option
    // field. The type is bool.
    NssaTranslation interface{}

    // If true, capable of demand circuit as indicated by LSA's option field. The
    // type is bool.
    DemandCircuit interface{}

    // if true, DN bit set on the summary LSA indicated by LSA's option field. The
    // type is bool.
    DnBit interface{}

    // Due time for rate-limit timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRateLimitDueTime interface{}

    // Clock stamp since boot. The type is interface{} with range:
    // 0..18446744073709551615.
    LsadbBaseClock interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    RoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    AdvertisingRouterReachable interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    Length interface{}

    // Summary Origin. The type is interface{} with range: 0..65535.
    SumOrigin interface{}

    // External Origin. The type is interface{} with range: 0..65535.
    AseOrigin interface{}

    // Not In Sync With Active. The type is interface{} with range: 0..255.
    InSync interface{}

    // Current LSA prefix priority. The type is interface{} with range: 0..255.
    LsaPrefixPriority interface{}

    // New LSA prefix priority. The type is interface{} with range: 0..255.
    NewLsaPrefixPriority interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // LSA throttle timer table information.
    LsaThrottleTimer Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer

    // Time LSA was last updated.
    LsaLastUpdatedTime Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime

    // Current time stamp.
    LsadbBaseTimeStamp Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp

    // Reason why LSA is not deleted.
    NotDelete Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_NotDelete
}

func (lsaDetailData *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData) GetEntityData() *types.CommonEntityData {
    lsaDetailData.EntityData.YFilter = lsaDetailData.YFilter
    lsaDetailData.EntityData.YangName = "lsa-detail-data"
    lsaDetailData.EntityData.BundleName = "cisco_ios_xr"
    lsaDetailData.EntityData.ParentYangName = "lsa"
    lsaDetailData.EntityData.SegmentPath = "lsa-detail-data"
    lsaDetailData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetailData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetailData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetailData.EntityData.Children = types.NewOrderedMap()
    lsaDetailData.EntityData.Children.Append("lsa-throttle-timer", types.YChild{"LsaThrottleTimer", &lsaDetailData.LsaThrottleTimer})
    lsaDetailData.EntityData.Children.Append("lsa-last-updated-time", types.YChild{"LsaLastUpdatedTime", &lsaDetailData.LsaLastUpdatedTime})
    lsaDetailData.EntityData.Children.Append("lsadb-base-time-stamp", types.YChild{"LsadbBaseTimeStamp", &lsaDetailData.LsadbBaseTimeStamp})
    lsaDetailData.EntityData.Children.Append("not-delete", types.YChild{"NotDelete", &lsaDetailData.NotDelete})
    lsaDetailData.EntityData.Leafs = types.NewOrderedMap()
    lsaDetailData.EntityData.Leafs.Append("tos-capable", types.YLeaf{"TosCapable", lsaDetailData.TosCapable})
    lsaDetailData.EntityData.Leafs.Append("nssa-translation", types.YLeaf{"NssaTranslation", lsaDetailData.NssaTranslation})
    lsaDetailData.EntityData.Leafs.Append("demand-circuit", types.YLeaf{"DemandCircuit", lsaDetailData.DemandCircuit})
    lsaDetailData.EntityData.Leafs.Append("dn-bit", types.YLeaf{"DnBit", lsaDetailData.DnBit})
    lsaDetailData.EntityData.Leafs.Append("lsa-rate-limit-due-time", types.YLeaf{"LsaRateLimitDueTime", lsaDetailData.LsaRateLimitDueTime})
    lsaDetailData.EntityData.Leafs.Append("lsadb-base-clock", types.YLeaf{"LsadbBaseClock", lsaDetailData.LsadbBaseClock})
    lsaDetailData.EntityData.Leafs.Append("routing-bit", types.YLeaf{"RoutingBit", lsaDetailData.RoutingBit})
    lsaDetailData.EntityData.Leafs.Append("advertising-router-reachable", types.YLeaf{"AdvertisingRouterReachable", lsaDetailData.AdvertisingRouterReachable})
    lsaDetailData.EntityData.Leafs.Append("length", types.YLeaf{"Length", lsaDetailData.Length})
    lsaDetailData.EntityData.Leafs.Append("sum-origin", types.YLeaf{"SumOrigin", lsaDetailData.SumOrigin})
    lsaDetailData.EntityData.Leafs.Append("ase-origin", types.YLeaf{"AseOrigin", lsaDetailData.AseOrigin})
    lsaDetailData.EntityData.Leafs.Append("in-sync", types.YLeaf{"InSync", lsaDetailData.InSync})
    lsaDetailData.EntityData.Leafs.Append("lsa-prefix-priority", types.YLeaf{"LsaPrefixPriority", lsaDetailData.LsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("new-lsa-prefix-priority", types.YLeaf{"NewLsaPrefixPriority", lsaDetailData.NewLsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetailData.LsaFloodRequiredPostFailOver})

    lsaDetailData.EntityData.YListKeys = []string {}

    return &(lsaDetailData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer
// LSA throttle timer table information
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timer table. The type is TimerTable.
    TimerLocation interface{}

    // Timer type. The type is Timer.
    TimerType interface{}

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // Last Second table index processed. The type is interface{} with range:
    // 0..255.
    LastInstSecondTableIndex interface{}

    // Last Minute table index processed. The type is interface{} with range:
    // 0..255.
    LastInstMinuteTableIndex interface{}
}

func (lsaThrottleTimer *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer) GetEntityData() *types.CommonEntityData {
    lsaThrottleTimer.EntityData.YFilter = lsaThrottleTimer.YFilter
    lsaThrottleTimer.EntityData.YangName = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.BundleName = "cisco_ios_xr"
    lsaThrottleTimer.EntityData.ParentYangName = "lsa-detail-data"
    lsaThrottleTimer.EntityData.SegmentPath = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaThrottleTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaThrottleTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaThrottleTimer.EntityData.Children = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs.Append("timer-location", types.YLeaf{"TimerLocation", lsaThrottleTimer.TimerLocation})
    lsaThrottleTimer.EntityData.Leafs.Append("timer-type", types.YLeaf{"TimerType", lsaThrottleTimer.TimerType})
    lsaThrottleTimer.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaThrottleTimer.SecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaThrottleTimer.MinuteTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-second-table-index", types.YLeaf{"LastInstSecondTableIndex", lsaThrottleTimer.LastInstSecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-minute-table-index", types.YLeaf{"LastInstMinuteTableIndex", lsaThrottleTimer.LastInstMinuteTableIndex})

    lsaThrottleTimer.EntityData.YListKeys = []string {}

    return &(lsaThrottleTimer.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime
// Time LSA was last updated
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsaLastUpdatedTime *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime) GetEntityData() *types.CommonEntityData {
    lsaLastUpdatedTime.EntityData.YFilter = lsaLastUpdatedTime.YFilter
    lsaLastUpdatedTime.EntityData.YangName = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.BundleName = "cisco_ios_xr"
    lsaLastUpdatedTime.EntityData.ParentYangName = "lsa-detail-data"
    lsaLastUpdatedTime.EntityData.SegmentPath = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaLastUpdatedTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaLastUpdatedTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaLastUpdatedTime.EntityData.Children = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsaLastUpdatedTime.Second})
    lsaLastUpdatedTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsaLastUpdatedTime.Nanosecond})

    lsaLastUpdatedTime.EntityData.YListKeys = []string {}

    return &(lsaLastUpdatedTime.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp
// Current time stamp
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsadbBaseTimeStamp *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp) GetEntityData() *types.CommonEntityData {
    lsadbBaseTimeStamp.EntityData.YFilter = lsadbBaseTimeStamp.YFilter
    lsadbBaseTimeStamp.EntityData.YangName = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.BundleName = "cisco_ios_xr"
    lsadbBaseTimeStamp.EntityData.ParentYangName = "lsa-detail-data"
    lsadbBaseTimeStamp.EntityData.SegmentPath = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsadbBaseTimeStamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsadbBaseTimeStamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsadbBaseTimeStamp.EntityData.Children = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsadbBaseTimeStamp.Second})
    lsadbBaseTimeStamp.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsadbBaseTimeStamp.Nanosecond})

    lsadbBaseTimeStamp.EntityData.YListKeys = []string {}

    return &(lsadbBaseTimeStamp.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_NotDelete
// Reason why LSA is not deleted
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_NotDelete struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    NoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    NeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table. The type is bool.
    RoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty. The type is bool.
    Acknowledgement interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    MaximumAge interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    PartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    FloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    NsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending summary
    // LSA originating. The type is bool.
    SumOrigPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}
}

func (notDelete *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaDetailData_NotDelete) GetEntityData() *types.CommonEntityData {
    notDelete.EntityData.YFilter = notDelete.YFilter
    notDelete.EntityData.YangName = "not-delete"
    notDelete.EntityData.BundleName = "cisco_ios_xr"
    notDelete.EntityData.ParentYangName = "lsa-detail-data"
    notDelete.EntityData.SegmentPath = "not-delete"
    notDelete.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notDelete.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notDelete.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notDelete.EntityData.Children = types.NewOrderedMap()
    notDelete.EntityData.Leafs = types.NewOrderedMap()
    notDelete.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", notDelete.FreeTime})
    notDelete.EntityData.Leafs.Append("no-delete", types.YLeaf{"NoDelete", notDelete.NoDelete})
    notDelete.EntityData.Leafs.Append("neighbor-exchange", types.YLeaf{"NeighborExchange", notDelete.NeighborExchange})
    notDelete.EntityData.Leafs.Append("routing-table", types.YLeaf{"RoutingTable", notDelete.RoutingTable})
    notDelete.EntityData.Leafs.Append("acknowledgement", types.YLeaf{"Acknowledgement", notDelete.Acknowledgement})
    notDelete.EntityData.Leafs.Append("maximum-age", types.YLeaf{"MaximumAge", notDelete.MaximumAge})
    notDelete.EntityData.Leafs.Append("partial-spf", types.YLeaf{"PartialSpf", notDelete.PartialSpf})
    notDelete.EntityData.Leafs.Append("flood-pending", types.YLeaf{"FloodPending", notDelete.FloodPending})
    notDelete.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", notDelete.RateLimit})
    notDelete.EntityData.Leafs.Append("nsr-ack-pending", types.YLeaf{"NsrAckPending", notDelete.NsrAckPending})
    notDelete.EntityData.Leafs.Append("sum-orig-pending", types.YLeaf{"SumOrigPending", notDelete.SumOrigPending})
    notDelete.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", notDelete.NsrFloodRequired})

    notDelete.EntityData.YListKeys = []string {}

    return &(notDelete.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData
// Information pertaining to a specific LSA type
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // InternalLSAType. The type is OspfInternalLsaTypes.
    InternalLsaType interface{}

    // Router LSA.
    RouterLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType

    // Summary LSA.
    SummaryLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType

    // External LSA.
    ExternalLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType

    // Opaque-Link LSA.
    OpaqueLinkLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType

    // Opaque-Area, opaque type 1 LSA.
    OpaqueMplsTeLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType

    // Opaque-link, opaque type 3 Grace LSA.
    OpaqueGraceLsa Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa

    // Opaque Router Information LSA.
    OpaqueRouterInfoLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType

    // Extende Prefix LSA type.
    OpaqueEpLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType

    // Extended Link LSA type.
    OpaqueElLsaType Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
}

func (lsaInternalData *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData) GetEntityData() *types.CommonEntityData {
    lsaInternalData.EntityData.YFilter = lsaInternalData.YFilter
    lsaInternalData.EntityData.YangName = "lsa-internal-data"
    lsaInternalData.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalData.EntityData.ParentYangName = "lsa"
    lsaInternalData.EntityData.SegmentPath = "lsa-internal-data"
    lsaInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalData.EntityData.Children = types.NewOrderedMap()
    lsaInternalData.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInternalData.RouterLsaType})
    lsaInternalData.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInternalData.NetworkLsaType})
    lsaInternalData.EntityData.Children.Append("summary-lsa-type", types.YChild{"SummaryLsaType", &lsaInternalData.SummaryLsaType})
    lsaInternalData.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInternalData.ExternalLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-link-lsa-type", types.YChild{"OpaqueLinkLsaType", &lsaInternalData.OpaqueLinkLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-mpls-te-lsa-type", types.YChild{"OpaqueMplsTeLsaType", &lsaInternalData.OpaqueMplsTeLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-grace-lsa", types.YChild{"OpaqueGraceLsa", &lsaInternalData.OpaqueGraceLsa})
    lsaInternalData.EntityData.Children.Append("opaque-router-info-lsa-type", types.YChild{"OpaqueRouterInfoLsaType", &lsaInternalData.OpaqueRouterInfoLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-ep-lsa-type", types.YChild{"OpaqueEpLsaType", &lsaInternalData.OpaqueEpLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-el-lsa-type", types.YChild{"OpaqueElLsaType", &lsaInternalData.OpaqueElLsaType})
    lsaInternalData.EntityData.Leafs = types.NewOrderedMap()
    lsaInternalData.EntityData.Leafs.Append("internal-lsa-type", types.YLeaf{"InternalLsaType", lsaInternalData.InternalLsaType})

    lsaInternalData.EntityData.YListKeys = []string {}

    return &(lsaInternalData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType
// Router LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If True, router is an Autonomous system Border Router. The type is bool.
    RouterAsbr interface{}

    // If True, router is an Area Border Router. The type is bool.
    RouterAbr interface{}

    // If true, internal LSA. The type is bool.
    InternalLsa interface{}

    // List of links in this LSA. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link.
    Link []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link

    // List of links for internal LSA. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink.
    InternalLink []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
}

func (routerLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-internal-data"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Children.Append("internal-link", types.YChild{"InternalLink", nil})
    for i := range routerLsaType.InternalLink {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.InternalLink[i]), types.YChild{"InternalLink", routerLsaType.InternalLink[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-asbr", types.YLeaf{"RouterAsbr", routerLsaType.RouterAsbr})
    routerLsaType.EntityData.Leafs.Append("router-abr", types.YLeaf{"RouterAbr", routerLsaType.RouterAbr})
    routerLsaType.EntityData.Leafs.Append("internal-lsa", types.YLeaf{"InternalLsa", routerLsaType.InternalLsa})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link
// List of links in this LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos.
    LinkTos []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
}

func (link *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range link.LinkTos {
        link.EntityData.Children.Append(types.GetSegmentPath(link.LinkTos[i]), types.YChild{"LinkTos", link.LinkTos[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", link.LinkId})
    link.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", link.LinkData})
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
// List of links for internal LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos.
    LinkTos []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
}

func (internalLink *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink) GetEntityData() *types.CommonEntityData {
    internalLink.EntityData.YFilter = internalLink.YFilter
    internalLink.EntityData.YangName = "internal-link"
    internalLink.EntityData.BundleName = "cisco_ios_xr"
    internalLink.EntityData.ParentYangName = "router-lsa-type"
    internalLink.EntityData.SegmentPath = "internal-link"
    internalLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalLink.EntityData.Children = types.NewOrderedMap()
    internalLink.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range internalLink.LinkTos {
        internalLink.EntityData.Children.Append(types.GetSegmentPath(internalLink.LinkTos[i]), types.YChild{"LinkTos", internalLink.LinkTos[i]})
    }
    internalLink.EntityData.Leafs = types.NewOrderedMap()
    internalLink.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", internalLink.LinkId})
    internalLink.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", internalLink.LinkData})
    internalLink.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", internalLink.LinkType})
    internalLink.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", internalLink.LinkMetric})

    internalLink.EntityData.YListKeys = []string {}

    return &(internalLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "internal-link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType
// Network LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network prefix length. The type is interface{} with range: 0..4294967295.
    NetworkPrefixLength interface{}

    // Neighbor router list. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter.
    NeighborRouter []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
}

func (networkLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("neighbor-router", types.YChild{"NeighborRouter", nil})
    for i := range networkLsaType.NeighborRouter {
        networkLsaType.EntityData.Children.Append(types.GetSegmentPath(networkLsaType.NeighborRouter[i]), types.YChild{"NeighborRouter", networkLsaType.NeighborRouter[i]})
    }
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("network-prefix-length", types.YLeaf{"NetworkPrefixLength", networkLsaType.NetworkPrefixLength})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
// Neighbor router list
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (neighborRouter *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter) GetEntityData() *types.CommonEntityData {
    neighborRouter.EntityData.YFilter = neighborRouter.YFilter
    neighborRouter.EntityData.YangName = "neighbor-router"
    neighborRouter.EntityData.BundleName = "cisco_ios_xr"
    neighborRouter.EntityData.ParentYangName = "network-lsa-type"
    neighborRouter.EntityData.SegmentPath = "neighbor-router"
    neighborRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRouter.EntityData.Children = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborRouter.Entry})

    neighborRouter.EntityData.YListKeys = []string {}

    return &(neighborRouter.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType
// Summary LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary LSA prefix length. The type is interface{} with range:
    // 0..4294967295.
    SummaryPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalSumLsa interface{}

    // Metric. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric.
    SummaryLsaMetric []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
}

func (summaryLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType) GetEntityData() *types.CommonEntityData {
    summaryLsaType.EntityData.YFilter = summaryLsaType.YFilter
    summaryLsaType.EntityData.YangName = "summary-lsa-type"
    summaryLsaType.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaType.EntityData.ParentYangName = "lsa-internal-data"
    summaryLsaType.EntityData.SegmentPath = "summary-lsa-type"
    summaryLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaType.EntityData.Children = types.NewOrderedMap()
    summaryLsaType.EntityData.Children.Append("summary-lsa-metric", types.YChild{"SummaryLsaMetric", nil})
    for i := range summaryLsaType.SummaryLsaMetric {
        summaryLsaType.EntityData.Children.Append(types.GetSegmentPath(summaryLsaType.SummaryLsaMetric[i]), types.YChild{"SummaryLsaMetric", summaryLsaType.SummaryLsaMetric[i]})
    }
    summaryLsaType.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaType.EntityData.Leafs.Append("summary-prefix-length", types.YLeaf{"SummaryPrefixLength", summaryLsaType.SummaryPrefixLength})
    summaryLsaType.EntityData.Leafs.Append("internal-sum-lsa", types.YLeaf{"InternalSumLsa", summaryLsaType.InternalSumLsa})

    summaryLsaType.EntityData.YListKeys = []string {}

    return &(summaryLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
// Metric
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (summaryLsaMetric *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric) GetEntityData() *types.CommonEntityData {
    summaryLsaMetric.EntityData.YFilter = summaryLsaMetric.YFilter
    summaryLsaMetric.EntityData.YangName = "summary-lsa-metric"
    summaryLsaMetric.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaMetric.EntityData.ParentYangName = "summary-lsa-type"
    summaryLsaMetric.EntityData.SegmentPath = "summary-lsa-metric"
    summaryLsaMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaMetric.EntityData.Children = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", summaryLsaMetric.Entry})

    summaryLsaMetric.EntityData.YListKeys = []string {}

    return &(summaryLsaMetric.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType
// External LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix length. The type is interface{} with range: 0..4294967295.
    ExternalPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalExternalLsa interface{}

    // Type of service information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric.
    ExternalTosMetric []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
}

func (externalLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-internal-data"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("external-tos-metric", types.YChild{"ExternalTosMetric", nil})
    for i := range externalLsaType.ExternalTosMetric {
        externalLsaType.EntityData.Children.Append(types.GetSegmentPath(externalLsaType.ExternalTosMetric[i]), types.YChild{"ExternalTosMetric", externalLsaType.ExternalTosMetric[i]})
    }
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("external-prefix-length", types.YLeaf{"ExternalPrefixLength", externalLsaType.ExternalPrefixLength})
    externalLsaType.EntityData.Leafs.Append("internal-external-lsa", types.YLeaf{"InternalExternalLsa", externalLsaType.InternalExternalLsa})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
// Type of service information
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cost of this route. The type is interface{} with range: 0..4294967295.
    ExternalMetric interface{}

    // External LSA metric type. The type is ExMetric.
    ExternalMetricType interface{}

    // Type of Service. The type is interface{} with range: 0..4294967295.
    ExternalTos interface{}

    // Forwarding Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}
}

func (externalTosMetric *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric) GetEntityData() *types.CommonEntityData {
    externalTosMetric.EntityData.YFilter = externalTosMetric.YFilter
    externalTosMetric.EntityData.YangName = "external-tos-metric"
    externalTosMetric.EntityData.BundleName = "cisco_ios_xr"
    externalTosMetric.EntityData.ParentYangName = "external-lsa-type"
    externalTosMetric.EntityData.SegmentPath = "external-tos-metric"
    externalTosMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalTosMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalTosMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalTosMetric.EntityData.Children = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs.Append("external-metric", types.YLeaf{"ExternalMetric", externalTosMetric.ExternalMetric})
    externalTosMetric.EntityData.Leafs.Append("external-metric-type", types.YLeaf{"ExternalMetricType", externalTosMetric.ExternalMetricType})
    externalTosMetric.EntityData.Leafs.Append("external-tos", types.YLeaf{"ExternalTos", externalTosMetric.ExternalTos})
    externalTosMetric.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalTosMetric.ForwardingAddress})
    externalTosMetric.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalTosMetric.ExternalTag})

    externalTosMetric.EntityData.YListKeys = []string {}

    return &(externalTosMetric.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType
// Opaque-Link LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface on which the Opaque link LSA is received. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    OpaqueInterfaceName interface{}
}

func (opaqueLinkLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType) GetEntityData() *types.CommonEntityData {
    opaqueLinkLsaType.EntityData.YFilter = opaqueLinkLsaType.YFilter
    opaqueLinkLsaType.EntityData.YangName = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueLinkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueLinkLsaType.EntityData.SegmentPath = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueLinkLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs.Append("opaque-interface-name", types.YLeaf{"OpaqueInterfaceName", opaqueLinkLsaType.OpaqueInterfaceName})

    opaqueLinkLsaType.EntityData.YListKeys = []string {}

    return &(opaqueLinkLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType
// Opaque-Area, opaque type 1 LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
}

func (opaqueMplsTeLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType) GetEntityData() *types.CommonEntityData {
    opaqueMplsTeLsaType.EntityData.YFilter = opaqueMplsTeLsaType.YFilter
    opaqueMplsTeLsaType.EntityData.YangName = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueMplsTeLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueMplsTeLsaType.EntityData.SegmentPath = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueMplsTeLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueMplsTeLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueMplsTeLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueMplsTeLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueMplsTeLsaType.Tlv {
        opaqueMplsTeLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueMplsTeLsaType.Tlv[i]), types.YChild{"Tlv", opaqueMplsTeLsaType.Tlv[i]})
    }
    opaqueMplsTeLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueMplsTeLsaType.EntityData.YListKeys = []string {}

    return &(opaqueMplsTeLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-mpls-te-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa
// Opaque-link, opaque type 3 Grace LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time the router's neighbor should advertise it fully adjacent
    // (s). The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is OspfGrReason.
    GraceReason interface{}

    // IP interface address on the subnet associated with the grace LSA. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpAddress interface{}
}

func (opaqueGraceLsa *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa) GetEntityData() *types.CommonEntityData {
    opaqueGraceLsa.EntityData.YFilter = opaqueGraceLsa.YFilter
    opaqueGraceLsa.EntityData.YangName = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.BundleName = "cisco_ios_xr"
    opaqueGraceLsa.EntityData.ParentYangName = "lsa-internal-data"
    opaqueGraceLsa.EntityData.SegmentPath = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueGraceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueGraceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueGraceLsa.EntityData.Children = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", opaqueGraceLsa.GracePeriod})
    opaqueGraceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", opaqueGraceLsa.GraceReason})
    opaqueGraceLsa.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", opaqueGraceLsa.IpAddress})

    opaqueGraceLsa.EntityData.YListKeys = []string {}

    return &(opaqueGraceLsa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType
// Opaque Router Information LSA
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Opaque LSA flooding scope, a.k.a., Opaque LSA Type. The type is
    // OspfLsaOpqRiScope.
    OpaqueRilsaScope interface{}

    // Interface on which this Link-Local Opaque link LSA is received. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    OpaqueRiInterfaceName interface{}

    // Router Information TLV. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv.
    OpaqueRitlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
}

func (opaqueRouterInfoLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType) GetEntityData() *types.CommonEntityData {
    opaqueRouterInfoLsaType.EntityData.YFilter = opaqueRouterInfoLsaType.YFilter
    opaqueRouterInfoLsaType.EntityData.YangName = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueRouterInfoLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueRouterInfoLsaType.EntityData.SegmentPath = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRouterInfoLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRouterInfoLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRouterInfoLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Children.Append("opaque-ritlv", types.YChild{"OpaqueRitlv", nil})
    for i := range opaqueRouterInfoLsaType.OpaqueRitlv {
        opaqueRouterInfoLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueRouterInfoLsaType.OpaqueRitlv[i]), types.YChild{"OpaqueRitlv", opaqueRouterInfoLsaType.OpaqueRitlv[i]})
    }
    opaqueRouterInfoLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-rilsa-scope", types.YLeaf{"OpaqueRilsaScope", opaqueRouterInfoLsaType.OpaqueRilsaScope})
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-ri-interface-name", types.YLeaf{"OpaqueRiInterfaceName", opaqueRouterInfoLsaType.OpaqueRiInterfaceName})

    opaqueRouterInfoLsaType.EntityData.YListKeys = []string {}

    return &(opaqueRouterInfoLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
// Router Information TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RITLVInternalType. The type is OspfShOpqRiTlvTypes.
    RitlvInternalType interface{}

    // Unknown Rtr Info TLV.
    UnknownTlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv

    // Rtr Cap TLV.
    RtrCapTlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv

    // PCE Discovery TLV.
    Pcedtlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv

    // SR Algorithm TLV.
    SrAlgoTlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv

    // SR Range TLV.
    SrRangeTlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv

    // Node MSD TLV.
    NodeMsdtlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
}

func (opaqueRitlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv) GetEntityData() *types.CommonEntityData {
    opaqueRitlv.EntityData.YFilter = opaqueRitlv.YFilter
    opaqueRitlv.EntityData.YangName = "opaque-ritlv"
    opaqueRitlv.EntityData.BundleName = "cisco_ios_xr"
    opaqueRitlv.EntityData.ParentYangName = "opaque-router-info-lsa-type"
    opaqueRitlv.EntityData.SegmentPath = "opaque-ritlv"
    opaqueRitlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRitlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRitlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRitlv.EntityData.Children = types.NewOrderedMap()
    opaqueRitlv.EntityData.Children.Append("unknown-tlv", types.YChild{"UnknownTlv", &opaqueRitlv.UnknownTlv})
    opaqueRitlv.EntityData.Children.Append("rtr-cap-tlv", types.YChild{"RtrCapTlv", &opaqueRitlv.RtrCapTlv})
    opaqueRitlv.EntityData.Children.Append("pcedtlv", types.YChild{"Pcedtlv", &opaqueRitlv.Pcedtlv})
    opaqueRitlv.EntityData.Children.Append("sr-algo-tlv", types.YChild{"SrAlgoTlv", &opaqueRitlv.SrAlgoTlv})
    opaqueRitlv.EntityData.Children.Append("sr-range-tlv", types.YChild{"SrRangeTlv", &opaqueRitlv.SrRangeTlv})
    opaqueRitlv.EntityData.Children.Append("node-msdtlv", types.YChild{"NodeMsdtlv", &opaqueRitlv.NodeMsdtlv})
    opaqueRitlv.EntityData.Leafs = types.NewOrderedMap()
    opaqueRitlv.EntityData.Leafs.Append("ritlv-internal-type", types.YLeaf{"RitlvInternalType", opaqueRitlv.RitlvInternalType})

    opaqueRitlv.EntityData.YListKeys = []string {}

    return &(opaqueRitlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv
// Unknown Rtr Info TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (unknownTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv) GetEntityData() *types.CommonEntityData {
    unknownTlv.EntityData.YFilter = unknownTlv.YFilter
    unknownTlv.EntityData.YangName = "unknown-tlv"
    unknownTlv.EntityData.BundleName = "cisco_ios_xr"
    unknownTlv.EntityData.ParentYangName = "opaque-ritlv"
    unknownTlv.EntityData.SegmentPath = "unknown-tlv"
    unknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownTlv.EntityData.Children = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", unknownTlv.RiGenTlvType})
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", unknownTlv.RiGenTlvLength})
    unknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", unknownTlv.RiGenvalue})

    unknownTlv.EntityData.YListKeys = []string {}

    return &(unknownTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv
// Rtr Cap TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    RtrCapTlvLength interface{}

    // Graceful Restart Capability. The type is bool.
    RtrCapGracefulRestart interface{}

    // Graceful Restart Helper Capability. The type is bool.
    RtrCapGracefulRestartHelper interface{}

    // Stub Router capability. The type is bool.
    RtrCapStubRtr interface{}

    // Traffic Engineering capability of area. The type is bool.
    RtrCapAreaTe interface{}

    // P2P LAN Capability. The type is bool.
    RtrCapP2plan interface{}

    // TE Experimental bit. The type is bool.
    RtrCapTeExp interface{}

    // All capability bits. The type is interface{} with range: 0..4294967295.
    RtrCapAllBits interface{}

    // Additional Information in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RtrCapAdditionalInfo interface{}
}

func (rtrCapTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv) GetEntityData() *types.CommonEntityData {
    rtrCapTlv.EntityData.YFilter = rtrCapTlv.YFilter
    rtrCapTlv.EntityData.YangName = "rtr-cap-tlv"
    rtrCapTlv.EntityData.BundleName = "cisco_ios_xr"
    rtrCapTlv.EntityData.ParentYangName = "opaque-ritlv"
    rtrCapTlv.EntityData.SegmentPath = "rtr-cap-tlv"
    rtrCapTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtrCapTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtrCapTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtrCapTlv.EntityData.Children = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-tlv-length", types.YLeaf{"RtrCapTlvLength", rtrCapTlv.RtrCapTlvLength})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart", types.YLeaf{"RtrCapGracefulRestart", rtrCapTlv.RtrCapGracefulRestart})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart-helper", types.YLeaf{"RtrCapGracefulRestartHelper", rtrCapTlv.RtrCapGracefulRestartHelper})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-stub-rtr", types.YLeaf{"RtrCapStubRtr", rtrCapTlv.RtrCapStubRtr})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-area-te", types.YLeaf{"RtrCapAreaTe", rtrCapTlv.RtrCapAreaTe})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-p2plan", types.YLeaf{"RtrCapP2plan", rtrCapTlv.RtrCapP2plan})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-te-exp", types.YLeaf{"RtrCapTeExp", rtrCapTlv.RtrCapTeExp})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-all-bits", types.YLeaf{"RtrCapAllBits", rtrCapTlv.RtrCapAllBits})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-additional-info", types.YLeaf{"RtrCapAdditionalInfo", rtrCapTlv.RtrCapAdditionalInfo})

    rtrCapTlv.EntityData.YListKeys = []string {}

    return &(rtrCapTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv
// PCE Discovery TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    PcedtlvLength interface{}

    // PCE Address.
    PcedAddr Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr

    // PCE Scope Information.
    PcedScope Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
}

func (pcedtlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv) GetEntityData() *types.CommonEntityData {
    pcedtlv.EntityData.YFilter = pcedtlv.YFilter
    pcedtlv.EntityData.YangName = "pcedtlv"
    pcedtlv.EntityData.BundleName = "cisco_ios_xr"
    pcedtlv.EntityData.ParentYangName = "opaque-ritlv"
    pcedtlv.EntityData.SegmentPath = "pcedtlv"
    pcedtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedtlv.EntityData.Children = types.NewOrderedMap()
    pcedtlv.EntityData.Children.Append("pced-addr", types.YChild{"PcedAddr", &pcedtlv.PcedAddr})
    pcedtlv.EntityData.Children.Append("pced-scope", types.YChild{"PcedScope", &pcedtlv.PcedScope})
    pcedtlv.EntityData.Leafs = types.NewOrderedMap()
    pcedtlv.EntityData.Leafs.Append("pcedtlv-length", types.YLeaf{"PcedtlvLength", pcedtlv.PcedtlvLength})

    pcedtlv.EntityData.YListKeys = []string {}

    return &(pcedtlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr
// PCE Address
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCEAddrType. The type is OspfShOpqRiPceAddrTypes.
    PceAddrType interface{}

    // Unknown PCE Addr TLV.
    PceAddrUnknownTlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv

    // IPv4 PCE Address.
    Ipv4pceAddr Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr

    // IPv6 PCE Address.
    Ipv6pceAddr Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
}

func (pcedAddr *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr) GetEntityData() *types.CommonEntityData {
    pcedAddr.EntityData.YFilter = pcedAddr.YFilter
    pcedAddr.EntityData.YangName = "pced-addr"
    pcedAddr.EntityData.BundleName = "cisco_ios_xr"
    pcedAddr.EntityData.ParentYangName = "pcedtlv"
    pcedAddr.EntityData.SegmentPath = "pced-addr"
    pcedAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedAddr.EntityData.Children = types.NewOrderedMap()
    pcedAddr.EntityData.Children.Append("pce-addr-unknown-tlv", types.YChild{"PceAddrUnknownTlv", &pcedAddr.PceAddrUnknownTlv})
    pcedAddr.EntityData.Children.Append("ipv4pce-addr", types.YChild{"Ipv4pceAddr", &pcedAddr.Ipv4pceAddr})
    pcedAddr.EntityData.Children.Append("ipv6pce-addr", types.YChild{"Ipv6pceAddr", &pcedAddr.Ipv6pceAddr})
    pcedAddr.EntityData.Leafs = types.NewOrderedMap()
    pcedAddr.EntityData.Leafs.Append("pce-addr-type", types.YLeaf{"PceAddrType", pcedAddr.PceAddrType})

    pcedAddr.EntityData.YListKeys = []string {}

    return &(pcedAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv
// Unknown PCE Addr TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (pceAddrUnknownTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv) GetEntityData() *types.CommonEntityData {
    pceAddrUnknownTlv.EntityData.YFilter = pceAddrUnknownTlv.YFilter
    pceAddrUnknownTlv.EntityData.YangName = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.BundleName = "cisco_ios_xr"
    pceAddrUnknownTlv.EntityData.ParentYangName = "pced-addr"
    pceAddrUnknownTlv.EntityData.SegmentPath = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pceAddrUnknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pceAddrUnknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pceAddrUnknownTlv.EntityData.Children = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", pceAddrUnknownTlv.RiGenTlvType})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", pceAddrUnknownTlv.RiGenTlvLength})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", pceAddrUnknownTlv.RiGenvalue})

    pceAddrUnknownTlv.EntityData.YListKeys = []string {}

    return &(pceAddrUnknownTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr
// IPv4 PCE Address
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Pceipv4Addr interface{}
}

func (ipv4pceAddr *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr) GetEntityData() *types.CommonEntityData {
    ipv4pceAddr.EntityData.YFilter = ipv4pceAddr.YFilter
    ipv4pceAddr.EntityData.YangName = "ipv4pce-addr"
    ipv4pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv4pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv4pceAddr.EntityData.SegmentPath = "ipv4pce-addr"
    ipv4pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs.Append("pceipv4-addr", types.YLeaf{"Pceipv4Addr", ipv4pceAddr.Pceipv4Addr})

    ipv4pceAddr.EntityData.YListKeys = []string {}

    return &(ipv4pceAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
// IPv6 PCE Address
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv6 Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Pceipv6Addr interface{}
}

func (ipv6pceAddr *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr) GetEntityData() *types.CommonEntityData {
    ipv6pceAddr.EntityData.YFilter = ipv6pceAddr.YFilter
    ipv6pceAddr.EntityData.YangName = "ipv6pce-addr"
    ipv6pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv6pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv6pceAddr.EntityData.SegmentPath = "ipv6pce-addr"
    ipv6pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs.Append("pceipv6-addr", types.YLeaf{"Pceipv6Addr", ipv6pceAddr.Pceipv6Addr})

    ipv6pceAddr.EntityData.YListKeys = []string {}

    return &(ipv6pceAddr.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
// PCE Scope Information
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L Bit. The type is bool.
    Lbit interface{}

    // R Bit. The type is bool.
    Rbit interface{}

    // Rd Bit. The type is bool.
    RdBit interface{}

    // S Bit. The type is bool.
    Sbit interface{}

    // Sd Bit. The type is bool.
    SdBit interface{}

    // Y Bit. The type is bool.
    Ybit interface{}

    // Pref L. The type is interface{} with range: 0..255.
    PrefL interface{}

    // Pref R. The type is interface{} with range: 0..255.
    PrefR interface{}

    // Pref S. The type is interface{} with range: 0..255.
    PrefS interface{}

    // Pref Y. The type is interface{} with range: 0..255.
    PrefY interface{}

    // PCE Scope Information. The type is interface{} with range: 0..4294967295.
    AllScopeInfoBits interface{}
}

func (pcedScope *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope) GetEntityData() *types.CommonEntityData {
    pcedScope.EntityData.YFilter = pcedScope.YFilter
    pcedScope.EntityData.YangName = "pced-scope"
    pcedScope.EntityData.BundleName = "cisco_ios_xr"
    pcedScope.EntityData.ParentYangName = "pcedtlv"
    pcedScope.EntityData.SegmentPath = "pced-scope"
    pcedScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedScope.EntityData.Children = types.NewOrderedMap()
    pcedScope.EntityData.Leafs = types.NewOrderedMap()
    pcedScope.EntityData.Leafs.Append("lbit", types.YLeaf{"Lbit", pcedScope.Lbit})
    pcedScope.EntityData.Leafs.Append("rbit", types.YLeaf{"Rbit", pcedScope.Rbit})
    pcedScope.EntityData.Leafs.Append("rd-bit", types.YLeaf{"RdBit", pcedScope.RdBit})
    pcedScope.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", pcedScope.Sbit})
    pcedScope.EntityData.Leafs.Append("sd-bit", types.YLeaf{"SdBit", pcedScope.SdBit})
    pcedScope.EntityData.Leafs.Append("ybit", types.YLeaf{"Ybit", pcedScope.Ybit})
    pcedScope.EntityData.Leafs.Append("pref-l", types.YLeaf{"PrefL", pcedScope.PrefL})
    pcedScope.EntityData.Leafs.Append("pref-r", types.YLeaf{"PrefR", pcedScope.PrefR})
    pcedScope.EntityData.Leafs.Append("pref-s", types.YLeaf{"PrefS", pcedScope.PrefS})
    pcedScope.EntityData.Leafs.Append("pref-y", types.YLeaf{"PrefY", pcedScope.PrefY})
    pcedScope.EntityData.Leafs.Append("all-scope-info-bits", types.YLeaf{"AllScopeInfoBits", pcedScope.AllScopeInfoBits})

    pcedScope.EntityData.YListKeys = []string {}

    return &(pcedScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv
// SR Algorithm TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Algorithms. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue.
    SrAlgoValue []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
}

func (srAlgoTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv) GetEntityData() *types.CommonEntityData {
    srAlgoTlv.EntityData.YFilter = srAlgoTlv.YFilter
    srAlgoTlv.EntityData.YangName = "sr-algo-tlv"
    srAlgoTlv.EntityData.BundleName = "cisco_ios_xr"
    srAlgoTlv.EntityData.ParentYangName = "opaque-ritlv"
    srAlgoTlv.EntityData.SegmentPath = "sr-algo-tlv"
    srAlgoTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoTlv.EntityData.Children = types.NewOrderedMap()
    srAlgoTlv.EntityData.Children.Append("sr-algo-value", types.YChild{"SrAlgoValue", nil})
    for i := range srAlgoTlv.SrAlgoValue {
        srAlgoTlv.EntityData.Children.Append(types.GetSegmentPath(srAlgoTlv.SrAlgoValue[i]), types.YChild{"SrAlgoValue", srAlgoTlv.SrAlgoValue[i]})
    }
    srAlgoTlv.EntityData.Leafs = types.NewOrderedMap()

    srAlgoTlv.EntityData.YListKeys = []string {}

    return &(srAlgoTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
// SR Algorithms
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..255.
    Entry interface{}
}

func (srAlgoValue *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue) GetEntityData() *types.CommonEntityData {
    srAlgoValue.EntityData.YFilter = srAlgoValue.YFilter
    srAlgoValue.EntityData.YangName = "sr-algo-value"
    srAlgoValue.EntityData.BundleName = "cisco_ios_xr"
    srAlgoValue.EntityData.ParentYangName = "sr-algo-tlv"
    srAlgoValue.EntityData.SegmentPath = "sr-algo-value"
    srAlgoValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoValue.EntityData.Children = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srAlgoValue.Entry})

    srAlgoValue.EntityData.YListKeys = []string {}

    return &(srAlgoValue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv
// SR Range TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    SrRangeLength interface{}

    // SR Range Size. The type is interface{} with range: 0..4294967295.
    SrRangeSize interface{}

    // SID sub-TLV.
    Sidtlv Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
}

func (srRangeTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv) GetEntityData() *types.CommonEntityData {
    srRangeTlv.EntityData.YFilter = srRangeTlv.YFilter
    srRangeTlv.EntityData.YangName = "sr-range-tlv"
    srRangeTlv.EntityData.BundleName = "cisco_ios_xr"
    srRangeTlv.EntityData.ParentYangName = "opaque-ritlv"
    srRangeTlv.EntityData.SegmentPath = "sr-range-tlv"
    srRangeTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srRangeTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srRangeTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srRangeTlv.EntityData.Children = types.NewOrderedMap()
    srRangeTlv.EntityData.Children.Append("sidtlv", types.YChild{"Sidtlv", &srRangeTlv.Sidtlv})
    srRangeTlv.EntityData.Leafs = types.NewOrderedMap()
    srRangeTlv.EntityData.Leafs.Append("sr-range-length", types.YLeaf{"SrRangeLength", srRangeTlv.SrRangeLength})
    srRangeTlv.EntityData.Leafs.Append("sr-range-size", types.YLeaf{"SrRangeSize", srRangeTlv.SrRangeSize})

    srRangeTlv.EntityData.YListKeys = []string {}

    return &(srRangeTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
// SID sub-TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of sub-TLV. The type is interface{} with range: 0..65535.
    SrSidLength interface{}

    // SID Value. The type is interface{} with range: 0..4294967295.
    SrSidValue interface{}
}

func (sidtlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv) GetEntityData() *types.CommonEntityData {
    sidtlv.EntityData.YFilter = sidtlv.YFilter
    sidtlv.EntityData.YangName = "sidtlv"
    sidtlv.EntityData.BundleName = "cisco_ios_xr"
    sidtlv.EntityData.ParentYangName = "sr-range-tlv"
    sidtlv.EntityData.SegmentPath = "sidtlv"
    sidtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sidtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sidtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sidtlv.EntityData.Children = types.NewOrderedMap()
    sidtlv.EntityData.Leafs = types.NewOrderedMap()
    sidtlv.EntityData.Leafs.Append("sr-sid-length", types.YLeaf{"SrSidLength", sidtlv.SrSidLength})
    sidtlv.EntityData.Leafs.Append("sr-sid-value", types.YLeaf{"SrSidValue", sidtlv.SrSidValue})

    sidtlv.EntityData.YListKeys = []string {}

    return &(sidtlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
// Node MSD TLV
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    NodeMsdtlvLength interface{}

    // Node MSD Subtypes.
    NodeMsdSubTypes Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
}

func (nodeMsdtlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv) GetEntityData() *types.CommonEntityData {
    nodeMsdtlv.EntityData.YFilter = nodeMsdtlv.YFilter
    nodeMsdtlv.EntityData.YangName = "node-msdtlv"
    nodeMsdtlv.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdtlv.EntityData.ParentYangName = "opaque-ritlv"
    nodeMsdtlv.EntityData.SegmentPath = "node-msdtlv"
    nodeMsdtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdtlv.EntityData.Children = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Children.Append("node-msd-sub-types", types.YChild{"NodeMsdSubTypes", &nodeMsdtlv.NodeMsdSubTypes})
    nodeMsdtlv.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Leafs.Append("node-msdtlv-length", types.YLeaf{"NodeMsdtlvLength", nodeMsdtlv.NodeMsdtlvLength})

    nodeMsdtlv.EntityData.YListKeys = []string {}

    return &(nodeMsdtlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
// Node MSD Subtypes
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MSD SubType. The type is interface{} with range: 0..255.
    MsdSubType interface{}

    // MSD Value. The type is interface{} with range: 0..255.
    MsdValue interface{}
}

func (nodeMsdSubTypes *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes) GetEntityData() *types.CommonEntityData {
    nodeMsdSubTypes.EntityData.YFilter = nodeMsdSubTypes.YFilter
    nodeMsdSubTypes.EntityData.YangName = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdSubTypes.EntityData.ParentYangName = "node-msdtlv"
    nodeMsdSubTypes.EntityData.SegmentPath = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdSubTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdSubTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdSubTypes.EntityData.Children = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-sub-type", types.YLeaf{"MsdSubType", nodeMsdSubTypes.MsdSubType})
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-value", types.YLeaf{"MsdValue", nodeMsdSubTypes.MsdValue})

    nodeMsdSubTypes.EntityData.YListKeys = []string {}

    return &(nodeMsdSubTypes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType
// Extende Prefix LSA type
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
}

func (opaqueEpLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType) GetEntityData() *types.CommonEntityData {
    opaqueEpLsaType.EntityData.YFilter = opaqueEpLsaType.YFilter
    opaqueEpLsaType.EntityData.YangName = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueEpLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueEpLsaType.EntityData.SegmentPath = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueEpLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueEpLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueEpLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueEpLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueEpLsaType.Tlv {
        opaqueEpLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueEpLsaType.Tlv[i]), types.YChild{"Tlv", opaqueEpLsaType.Tlv[i]})
    }
    opaqueEpLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueEpLsaType.EntityData.YListKeys = []string {}

    return &(opaqueEpLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-ep-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
// Extended Link LSA type
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
}

func (opaqueElLsaType *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType) GetEntityData() *types.CommonEntityData {
    opaqueElLsaType.EntityData.YFilter = opaqueElLsaType.YFilter
    opaqueElLsaType.EntityData.YangName = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueElLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueElLsaType.EntityData.SegmentPath = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueElLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueElLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueElLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueElLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueElLsaType.Tlv {
        opaqueElLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueElLsaType.Tlv[i]), types.YChild{"Tlv", opaqueElLsaType.Tlv[i]})
    }
    opaqueElLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueElLsaType.EntityData.YListKeys = []string {}

    return &(opaqueElLsaType.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-el-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_Vrfs_Vrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries
// Link state advertisement summary table
type Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA summary information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary.
    LsaSummary []*Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary
}

func (lsaSummaries *Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries) GetEntityData() *types.CommonEntityData {
    lsaSummaries.EntityData.YFilter = lsaSummaries.YFilter
    lsaSummaries.EntityData.YangName = "lsa-summaries"
    lsaSummaries.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaries.EntityData.ParentYangName = "database"
    lsaSummaries.EntityData.SegmentPath = "lsa-summaries"
    lsaSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaries.EntityData.Children = types.NewOrderedMap()
    lsaSummaries.EntityData.Children.Append("lsa-summary", types.YChild{"LsaSummary", nil})
    for i := range lsaSummaries.LsaSummary {
        lsaSummaries.EntityData.Children.Append(types.GetSegmentPath(lsaSummaries.LsaSummary[i]), types.YChild{"LsaSummary", lsaSummaries.LsaSummary[i]})
    }
    lsaSummaries.EntityData.Leafs = types.NewOrderedMap()

    lsaSummaries.EntityData.YListKeys = []string {}

    return &(lsaSummaries.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary
// LSA summary information
type Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Number of links. The type is interface{} with range: 0..65535.
    LinkCount interface{}

    // LSA header information.
    LsaHeader Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary_LsaHeader
}

func (lsaSummary *Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary) GetEntityData() *types.CommonEntityData {
    lsaSummary.EntityData.YFilter = lsaSummary.YFilter
    lsaSummary.EntityData.YangName = "lsa-summary"
    lsaSummary.EntityData.BundleName = "cisco_ios_xr"
    lsaSummary.EntityData.ParentYangName = "lsa-summaries"
    lsaSummary.EntityData.SegmentPath = "lsa-summary"
    lsaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummary.EntityData.Children = types.NewOrderedMap()
    lsaSummary.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummary.LsaHeader})
    lsaSummary.EntityData.Leafs = types.NewOrderedMap()
    lsaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsaSummary.AreaId})
    lsaSummary.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaSummary.LsType})
    lsaSummary.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaSummary.LsId})
    lsaSummary.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaSummary.AdvertisingRouter})
    lsaSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummary.InterfaceName})
    lsaSummary.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", lsaSummary.ExternalTag})
    lsaSummary.EntityData.Leafs.Append("link-count", types.YLeaf{"LinkCount", lsaSummary.LinkCount})

    lsaSummary.EntityData.YListKeys = []string {}

    return &(lsaSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary_LsaHeader
// LSA header information
type Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_Vrfs_Vrf_Database_LsaSummaries_LsaSummary_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes
// Summary prefix table
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary prefix information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []*Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetEntityData() *types.CommonEntityData {
    summaryPrefixes.EntityData.YFilter = summaryPrefixes.YFilter
    summaryPrefixes.EntityData.YangName = "summary-prefixes"
    summaryPrefixes.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixes.EntityData.ParentYangName = "vrf"
    summaryPrefixes.EntityData.SegmentPath = "summary-prefixes"
    summaryPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixes.EntityData.Children = types.NewOrderedMap()
    summaryPrefixes.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", nil})
    for i := range summaryPrefixes.SummaryPrefix {
        summaryPrefixes.EntityData.Children.Append(types.GetSegmentPath(summaryPrefixes.SummaryPrefix[i]), types.YChild{"SummaryPrefix", summaryPrefixes.SummaryPrefix[i]})
    }
    summaryPrefixes.EntityData.Leafs = types.NewOrderedMap()

    summaryPrefixes.EntityData.YListKeys = []string {}

    return &(summaryPrefixes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
// Summary prefix information
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Summary Mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Summary prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SummaryPrefix interface{}

    // Summary Netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SummaryMask interface{}

    // Cost of Summary. The type is interface{} with range: 0..4294967295.
    SummaryMetric interface{}

    // Type of Metric. The type is ExMetric.
    SummaryMetricType interface{}

    // Tag associated with this summary prefix. The type is interface{} with
    // range: 0..4294967295.
    SummaryTag interface{}
}

func (summaryPrefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summary-prefixes"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("netmask", types.YLeaf{"Netmask", summaryPrefix.Netmask})
    summaryPrefix.EntityData.Leafs.Append("summary-prefix", types.YLeaf{"SummaryPrefix", summaryPrefix.SummaryPrefix})
    summaryPrefix.EntityData.Leafs.Append("summary-mask", types.YLeaf{"SummaryMask", summaryPrefix.SummaryMask})
    summaryPrefix.EntityData.Leafs.Append("summary-metric", types.YLeaf{"SummaryMetric", summaryPrefix.SummaryMetric})
    summaryPrefix.EntityData.Leafs.Append("summary-metric-type", types.YLeaf{"SummaryMetricType", summaryPrefix.SummaryMetricType})
    summaryPrefix.EntityData.Leafs.Append("summary-tag", types.YLeaf{"SummaryTag", summaryPrefix.SummaryTag})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics
// Container for Statistics
type Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics innformation Interface table.
    InterfaceStatsEntries Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries
}

func (areaStatistics *Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics) GetEntityData() *types.CommonEntityData {
    areaStatistics.EntityData.YFilter = areaStatistics.YFilter
    areaStatistics.EntityData.YangName = "area-statistics"
    areaStatistics.EntityData.BundleName = "cisco_ios_xr"
    areaStatistics.EntityData.ParentYangName = "vrf"
    areaStatistics.EntityData.SegmentPath = "area-statistics"
    areaStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStatistics.EntityData.Children = types.NewOrderedMap()
    areaStatistics.EntityData.Children.Append("interface-stats-entries", types.YChild{"InterfaceStatsEntries", &areaStatistics.InterfaceStatsEntries})
    areaStatistics.EntityData.Leafs = types.NewOrderedMap()

    areaStatistics.EntityData.YListKeys = []string {}

    return &(areaStatistics.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries
// Statistics innformation Interface table
type Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics information for a specific interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry.
    InterfaceStatsEntry []*Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
}

func (interfaceStatsEntries *Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntries.EntityData.YFilter = interfaceStatsEntries.YFilter
    interfaceStatsEntries.EntityData.YangName = "interface-stats-entries"
    interfaceStatsEntries.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntries.EntityData.ParentYangName = "area-statistics"
    interfaceStatsEntries.EntityData.SegmentPath = "interface-stats-entries"
    interfaceStatsEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntries.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntries.EntityData.Children.Append("interface-stats-entry", types.YChild{"InterfaceStatsEntry", nil})
    for i := range interfaceStatsEntries.InterfaceStatsEntry {
        interfaceStatsEntries.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntries.InterfaceStatsEntry[i]), types.YChild{"InterfaceStatsEntry", interfaceStatsEntries.InterfaceStatsEntry[i]})
    }
    interfaceStatsEntries.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatsEntries.EntityData.YListKeys = []string {}

    return &(interfaceStatsEntries.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
// Statistics information for a specific interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // interface handle type. The type is string with pattern: [a-zA-Z0-9./-]+.
    Handle interface{}

    // interface name. The type is string.
    IfNameStr interface{}

    // interface entry. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry.
    IfEntry []*Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
}

func (interfaceStatsEntry *Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntry.EntityData.YFilter = interfaceStatsEntry.YFilter
    interfaceStatsEntry.EntityData.YangName = "interface-stats-entry"
    interfaceStatsEntry.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntry.EntityData.ParentYangName = "interface-stats-entries"
    interfaceStatsEntry.EntityData.SegmentPath = "interface-stats-entry" + types.AddKeyToken(interfaceStatsEntry.InterfaceName, "interface-name")
    interfaceStatsEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntry.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Children.Append("if-entry", types.YChild{"IfEntry", nil})
    for i := range interfaceStatsEntry.IfEntry {
        interfaceStatsEntry.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntry.IfEntry[i]), types.YChild{"IfEntry", interfaceStatsEntry.IfEntry[i]})
    }
    interfaceStatsEntry.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatsEntry.InterfaceName})
    interfaceStatsEntry.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", interfaceStatsEntry.Handle})
    interfaceStatsEntry.EntityData.Leafs.Append("if-name-str", types.YLeaf{"IfNameStr", interfaceStatsEntry.IfNameStr})

    interfaceStatsEntry.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatsEntry.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
// interface entry
type Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF madj interface. The type is bool.
    MadjIntf interface{}

    // OSPF area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // OSPF aread id string. The type is string.
    AreaIdStr interface{}

    // OSPF interface statistics. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat.
    IfStat []*Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
}

func (ifEntry *Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry) GetEntityData() *types.CommonEntityData {
    ifEntry.EntityData.YFilter = ifEntry.YFilter
    ifEntry.EntityData.YangName = "if-entry"
    ifEntry.EntityData.BundleName = "cisco_ios_xr"
    ifEntry.EntityData.ParentYangName = "interface-stats-entry"
    ifEntry.EntityData.SegmentPath = "if-entry"
    ifEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifEntry.EntityData.Children = types.NewOrderedMap()
    ifEntry.EntityData.Children.Append("if-stat", types.YChild{"IfStat", nil})
    for i := range ifEntry.IfStat {
        ifEntry.EntityData.Children.Append(types.GetSegmentPath(ifEntry.IfStat[i]), types.YChild{"IfStat", ifEntry.IfStat[i]})
    }
    ifEntry.EntityData.Leafs = types.NewOrderedMap()
    ifEntry.EntityData.Leafs.Append("madj-intf", types.YLeaf{"MadjIntf", ifEntry.MadjIntf})
    ifEntry.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", ifEntry.AreaId})
    ifEntry.EntityData.Leafs.Append("area-id-str", types.YLeaf{"AreaIdStr", ifEntry.AreaIdStr})

    ifEntry.EntityData.YListKeys = []string {}

    return &(ifEntry.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
// OSPF interface statistics
type Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (ifStat *Ospf_Processes_Process_Vrfs_Vrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat) GetEntityData() *types.CommonEntityData {
    ifStat.EntityData.YFilter = ifStat.YFilter
    ifStat.EntityData.YangName = "if-stat"
    ifStat.EntityData.BundleName = "cisco_ios_xr"
    ifStat.EntityData.ParentYangName = "if-entry"
    ifStat.EntityData.SegmentPath = "if-stat"
    ifStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifStat.EntityData.Children = types.NewOrderedMap()
    ifStat.EntityData.Leafs = types.NewOrderedMap()
    ifStat.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", ifStat.Entry})

    ifStat.EntityData.YListKeys = []string {}

    return &(ifStat.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_OspfSummary
// Fast-reroute topology information
type Ospf_Processes_Process_Vrfs_Vrf_OspfSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sa num nbrs. The type is interface{} with range: 0..4294967295.
    SaNumNbrs interface{}

    // sa num nbrs up. The type is interface{} with range: 0..4294967295.
    SaNumNbrsUp interface{}

    // sa num intf. The type is interface{} with range: 0..4294967295.
    SaNumIntf interface{}

    // sa num intf up. The type is interface{} with range: 0..4294967295.
    SaNumIntfUp interface{}

    // sa num vintf up. The type is interface{} with range: 0..4294967295.
    SaNumVintfUp interface{}

    // sa num slintf up. The type is interface{} with range: 0..4294967295.
    SaNumSlintfUp interface{}

    // sa num areas. The type is interface{} with range: 0..4294967295.
    SaNumAreas interface{}

    // sa lsa cnt type rtr. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeRtr interface{}

    // sa lsa cnt type net. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeNet interface{}

    // sa lsa cnt type sum net. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeSumNet interface{}

    // sa lsa cnt type sum asb. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeSumAsb interface{}

    // sa lsa cnt type ase. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeAse interface{}

    // sa lsa cnt type mospf. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeMospf interface{}

    // sa lsa cnt type 7ase. The type is interface{} with range: 0..4294967295.
    SaLsaCntType7ase interface{}

    // sa lsa cnt type 8 ignore. The type is interface{} with range:
    // 0..4294967295.
    SaLsaCntType8Ignore interface{}

    // sa lsa cnt type opq link. The type is interface{} with range:
    // 0..4294967295.
    SaLsaCntTypeOpqLink interface{}

    // sa lsa cnt type opq area. The type is interface{} with range:
    // 0..4294967295.
    SaLsaCntTypeOpqArea interface{}

    // sa lsa cnt type opq as. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeOpqAs interface{}
}

func (ospfSummary *Ospf_Processes_Process_Vrfs_Vrf_OspfSummary) GetEntityData() *types.CommonEntityData {
    ospfSummary.EntityData.YFilter = ospfSummary.YFilter
    ospfSummary.EntityData.YangName = "ospf-summary"
    ospfSummary.EntityData.BundleName = "cisco_ios_xr"
    ospfSummary.EntityData.ParentYangName = "vrf"
    ospfSummary.EntityData.SegmentPath = "ospf-summary"
    ospfSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfSummary.EntityData.Children = types.NewOrderedMap()
    ospfSummary.EntityData.Leafs = types.NewOrderedMap()
    ospfSummary.EntityData.Leafs.Append("sa-num-nbrs", types.YLeaf{"SaNumNbrs", ospfSummary.SaNumNbrs})
    ospfSummary.EntityData.Leafs.Append("sa-num-nbrs-up", types.YLeaf{"SaNumNbrsUp", ospfSummary.SaNumNbrsUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-intf", types.YLeaf{"SaNumIntf", ospfSummary.SaNumIntf})
    ospfSummary.EntityData.Leafs.Append("sa-num-intf-up", types.YLeaf{"SaNumIntfUp", ospfSummary.SaNumIntfUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-vintf-up", types.YLeaf{"SaNumVintfUp", ospfSummary.SaNumVintfUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-slintf-up", types.YLeaf{"SaNumSlintfUp", ospfSummary.SaNumSlintfUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-areas", types.YLeaf{"SaNumAreas", ospfSummary.SaNumAreas})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-rtr", types.YLeaf{"SaLsaCntTypeRtr", ospfSummary.SaLsaCntTypeRtr})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-net", types.YLeaf{"SaLsaCntTypeNet", ospfSummary.SaLsaCntTypeNet})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-sum-net", types.YLeaf{"SaLsaCntTypeSumNet", ospfSummary.SaLsaCntTypeSumNet})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-sum-asb", types.YLeaf{"SaLsaCntTypeSumAsb", ospfSummary.SaLsaCntTypeSumAsb})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-ase", types.YLeaf{"SaLsaCntTypeAse", ospfSummary.SaLsaCntTypeAse})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-mospf", types.YLeaf{"SaLsaCntTypeMospf", ospfSummary.SaLsaCntTypeMospf})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-7ase", types.YLeaf{"SaLsaCntType7ase", ospfSummary.SaLsaCntType7ase})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-8-ignore", types.YLeaf{"SaLsaCntType8Ignore", ospfSummary.SaLsaCntType8Ignore})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-opq-link", types.YLeaf{"SaLsaCntTypeOpqLink", ospfSummary.SaLsaCntTypeOpqLink})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-opq-area", types.YLeaf{"SaLsaCntTypeOpqArea", ospfSummary.SaLsaCntTypeOpqArea})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-opq-as", types.YLeaf{"SaLsaCntTypeOpqAs", ospfSummary.SaLsaCntTypeOpqAs})

    ospfSummary.EntityData.YListKeys = []string {}

    return &(ospfSummary.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute
// Container for FastReroute
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute topology information table.
    Topologies Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "vrf"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = types.NewOrderedMap()
    fastReroute.EntityData.Children.Append("topologies", types.YChild{"Topologies", &fastReroute.Topologies})
    fastReroute.EntityData.Leafs = types.NewOrderedMap()

    fastReroute.EntityData.YListKeys = []string {}

    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies
// Fast-reroute topology information table
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute topology information. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology.
    Topology []*Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology
}

func (topologies *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "fast-reroute"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology
// Fast-reroute topology information
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    IpfrrTopoAreaId interface{}

    // OSPF Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpfrrRouterId interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    IpfrrAreaRevision interface{}

    // IPFRR Topology entries. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology_IpfrrTopo.
    IpfrrTopo []*Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology_IpfrrTopo
}

func (topology *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology"
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("ipfrr-topo", types.YChild{"IpfrrTopo", nil})
    for i := range topology.IpfrrTopo {
        topology.EntityData.Children.Append(types.GetSegmentPath(topology.IpfrrTopo[i]), types.YChild{"IpfrrTopo", topology.IpfrrTopo[i]})
    }
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", topology.RouterId})
    topology.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", topology.AreaId})
    topology.EntityData.Leafs.Append("ipfrr-topo-area-id", types.YLeaf{"IpfrrTopoAreaId", topology.IpfrrTopoAreaId})
    topology.EntityData.Leafs.Append("ipfrr-router-id", types.YLeaf{"IpfrrRouterId", topology.IpfrrRouterId})
    topology.EntityData.Leafs.Append("ipfrr-area-revision", types.YLeaf{"IpfrrAreaRevision", topology.IpfrrAreaRevision})

    topology.EntityData.YListKeys = []string {}

    return &(topology.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology_IpfrrTopo
// IPFRR Topology entries
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology_IpfrrTopo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPFRR Topology Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // IPFRR Topology Distance. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // IPFRR Topology Reverse Distance. The type is interface{} with range:
    // 0..4294967295.
    DistanceReverse interface{}

    // IPFRR Topoogy Type-4 entry. The type is bool.
    Type4 interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    Revision interface{}

    // IPFRR Topology Neighbor Sourced. The type is bool.
    NeighborSourced interface{}

    // IPFRR Topology DR entry. The type is bool.
    Dr interface{}

    // IPFRR Topology rSPT poison. The type is bool.
    Poison interface{}
}

func (ipfrrTopo *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_Topologies_Topology_IpfrrTopo) GetEntityData() *types.CommonEntityData {
    ipfrrTopo.EntityData.YFilter = ipfrrTopo.YFilter
    ipfrrTopo.EntityData.YangName = "ipfrr-topo"
    ipfrrTopo.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTopo.EntityData.ParentYangName = "topology"
    ipfrrTopo.EntityData.SegmentPath = "ipfrr-topo"
    ipfrrTopo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTopo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTopo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTopo.EntityData.Children = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", ipfrrTopo.NodeId})
    ipfrrTopo.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", ipfrrTopo.Distance})
    ipfrrTopo.EntityData.Leafs.Append("distance-reverse", types.YLeaf{"DistanceReverse", ipfrrTopo.DistanceReverse})
    ipfrrTopo.EntityData.Leafs.Append("type4", types.YLeaf{"Type4", ipfrrTopo.Type4})
    ipfrrTopo.EntityData.Leafs.Append("revision", types.YLeaf{"Revision", ipfrrTopo.Revision})
    ipfrrTopo.EntityData.Leafs.Append("neighbor-sourced", types.YLeaf{"NeighborSourced", ipfrrTopo.NeighborSourced})
    ipfrrTopo.EntityData.Leafs.Append("dr", types.YLeaf{"Dr", ipfrrTopo.Dr})
    ipfrrTopo.EntityData.Leafs.Append("poison", types.YLeaf{"Poison", ipfrrTopo.Poison})

    ipfrrTopo.EntityData.YListKeys = []string {}

    return &(ipfrrTopo.EntityData)
}

// Ospf_Processes_Process_Srms
// Segment Routing Mapping Server operational
// data
type Ospf_Processes_Process_Srms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy operational data.
    Policy Ospf_Processes_Process_Srms_Policy
}

func (srms *Ospf_Processes_Process_Srms) GetEntityData() *types.CommonEntityData {
    srms.EntityData.YFilter = srms.YFilter
    srms.EntityData.YangName = "srms"
    srms.EntityData.BundleName = "cisco_ios_xr"
    srms.EntityData.ParentYangName = "process"
    srms.EntityData.SegmentPath = "srms"
    srms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srms.EntityData.Children = types.NewOrderedMap()
    srms.EntityData.Children.Append("policy", types.YChild{"Policy", &srms.Policy})
    srms.EntityData.Leafs = types.NewOrderedMap()

    srms.EntityData.YListKeys = []string {}

    return &(srms.EntityData)
}

// Ospf_Processes_Process_Srms_Policy
// Policy operational data
type Ospf_Processes_Process_Srms_Policy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 policy operational data.
    PolicyIpv4 Ospf_Processes_Process_Srms_Policy_PolicyIpv4
}

func (policy *Ospf_Processes_Process_Srms_Policy) GetEntityData() *types.CommonEntityData {
    policy.EntityData.YFilter = policy.YFilter
    policy.EntityData.YangName = "policy"
    policy.EntityData.BundleName = "cisco_ios_xr"
    policy.EntityData.ParentYangName = "srms"
    policy.EntityData.SegmentPath = "policy"
    policy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policy.EntityData.Children = types.NewOrderedMap()
    policy.EntityData.Children.Append("policy-ipv4", types.YChild{"PolicyIpv4", &policy.PolicyIpv4})
    policy.EntityData.Leafs = types.NewOrderedMap()

    policy.EntityData.YListKeys = []string {}

    return &(policy.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4
// IPv4 policy operational data
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 backup policy operational data.
    PolicyIpv4Backup Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup

    // IPv4 active policy operational data.
    PolicyIpv4Active Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active
}

func (policyIpv4 *Ospf_Processes_Process_Srms_Policy_PolicyIpv4) GetEntityData() *types.CommonEntityData {
    policyIpv4.EntityData.YFilter = policyIpv4.YFilter
    policyIpv4.EntityData.YangName = "policy-ipv4"
    policyIpv4.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4.EntityData.ParentYangName = "policy"
    policyIpv4.EntityData.SegmentPath = "policy-ipv4"
    policyIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4.EntityData.Children = types.NewOrderedMap()
    policyIpv4.EntityData.Children.Append("policy-ipv4-backup", types.YChild{"PolicyIpv4Backup", &policyIpv4.PolicyIpv4Backup})
    policyIpv4.EntityData.Children.Append("policy-ipv4-active", types.YChild{"PolicyIpv4Active", &policyIpv4.PolicyIpv4Active})
    policyIpv4.EntityData.Leafs = types.NewOrderedMap()

    policyIpv4.EntityData.YListKeys = []string {}

    return &(policyIpv4.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
// IPv4 backup policy operational data
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi.
    PolicyMi []*Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
}

func (policyIpv4Backup *Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetEntityData() *types.CommonEntityData {
    policyIpv4Backup.EntityData.YFilter = policyIpv4Backup.YFilter
    policyIpv4Backup.EntityData.YangName = "policy-ipv4-backup"
    policyIpv4Backup.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4Backup.EntityData.ParentYangName = "policy-ipv4"
    policyIpv4Backup.EntityData.SegmentPath = "policy-ipv4-backup"
    policyIpv4Backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4Backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4Backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4Backup.EntityData.Children = types.NewOrderedMap()
    policyIpv4Backup.EntityData.Children.Append("policy-mi", types.YChild{"PolicyMi", nil})
    for i := range policyIpv4Backup.PolicyMi {
        policyIpv4Backup.EntityData.Children.Append(types.GetSegmentPath(policyIpv4Backup.PolicyMi[i]), types.YChild{"PolicyMi", policyIpv4Backup.PolicyMi[i]})
    }
    policyIpv4Backup.EntityData.Leafs = types.NewOrderedMap()

    policyIpv4Backup.EntityData.YListKeys = []string {}

    return &(policyIpv4Backup.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
// Mapping Item
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
}

func (policyMi *Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv4-backup"
    policyMi.EntityData.SegmentPath = "policy-mi" + types.AddKeyToken(policyMi.MiId, "mi-id")
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = types.NewOrderedMap()
    policyMi.EntityData.Children.Append("addr", types.YChild{"Addr", &policyMi.Addr})
    policyMi.EntityData.Leafs = types.NewOrderedMap()
    policyMi.EntityData.Leafs.Append("mi-id", types.YLeaf{"MiId", policyMi.MiId})
    policyMi.EntityData.Leafs.Append("src", types.YLeaf{"Src", policyMi.Src})
    policyMi.EntityData.Leafs.Append("router", types.YLeaf{"Router", policyMi.Router})
    policyMi.EntityData.Leafs.Append("area", types.YLeaf{"Area", policyMi.Area})
    policyMi.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", policyMi.Prefix})
    policyMi.EntityData.Leafs.Append("sid-start", types.YLeaf{"SidStart", policyMi.SidStart})
    policyMi.EntityData.Leafs.Append("sid-count", types.YLeaf{"SidCount", policyMi.SidCount})
    policyMi.EntityData.Leafs.Append("last-prefix", types.YLeaf{"LastPrefix", policyMi.LastPrefix})
    policyMi.EntityData.Leafs.Append("last-sid-index", types.YLeaf{"LastSidIndex", policyMi.LastSidIndex})
    policyMi.EntityData.Leafs.Append("flag-attached", types.YLeaf{"FlagAttached", policyMi.FlagAttached})

    policyMi.EntityData.YListKeys = []string {"MiId"}

    return &(policyMi.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
// addr
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = types.NewOrderedMap()
    addr.EntityData.Leafs = types.NewOrderedMap()
    addr.EntityData.Leafs.Append("af", types.YLeaf{"Af", addr.Af})
    addr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", addr.Ipv4})
    addr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", addr.Ipv6})

    addr.EntityData.YListKeys = []string {}

    return &(addr.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active
// IPv4 active policy operational data
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi.
    PolicyMi []*Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
}

func (policyIpv4Active *Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetEntityData() *types.CommonEntityData {
    policyIpv4Active.EntityData.YFilter = policyIpv4Active.YFilter
    policyIpv4Active.EntityData.YangName = "policy-ipv4-active"
    policyIpv4Active.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4Active.EntityData.ParentYangName = "policy-ipv4"
    policyIpv4Active.EntityData.SegmentPath = "policy-ipv4-active"
    policyIpv4Active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4Active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4Active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4Active.EntityData.Children = types.NewOrderedMap()
    policyIpv4Active.EntityData.Children.Append("policy-mi", types.YChild{"PolicyMi", nil})
    for i := range policyIpv4Active.PolicyMi {
        policyIpv4Active.EntityData.Children.Append(types.GetSegmentPath(policyIpv4Active.PolicyMi[i]), types.YChild{"PolicyMi", policyIpv4Active.PolicyMi[i]})
    }
    policyIpv4Active.EntityData.Leafs = types.NewOrderedMap()

    policyIpv4Active.EntityData.YListKeys = []string {}

    return &(policyIpv4Active.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
// Mapping Item
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
}

func (policyMi *Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv4-active"
    policyMi.EntityData.SegmentPath = "policy-mi" + types.AddKeyToken(policyMi.MiId, "mi-id")
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = types.NewOrderedMap()
    policyMi.EntityData.Children.Append("addr", types.YChild{"Addr", &policyMi.Addr})
    policyMi.EntityData.Leafs = types.NewOrderedMap()
    policyMi.EntityData.Leafs.Append("mi-id", types.YLeaf{"MiId", policyMi.MiId})
    policyMi.EntityData.Leafs.Append("src", types.YLeaf{"Src", policyMi.Src})
    policyMi.EntityData.Leafs.Append("router", types.YLeaf{"Router", policyMi.Router})
    policyMi.EntityData.Leafs.Append("area", types.YLeaf{"Area", policyMi.Area})
    policyMi.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", policyMi.Prefix})
    policyMi.EntityData.Leafs.Append("sid-start", types.YLeaf{"SidStart", policyMi.SidStart})
    policyMi.EntityData.Leafs.Append("sid-count", types.YLeaf{"SidCount", policyMi.SidCount})
    policyMi.EntityData.Leafs.Append("last-prefix", types.YLeaf{"LastPrefix", policyMi.LastPrefix})
    policyMi.EntityData.Leafs.Append("last-sid-index", types.YLeaf{"LastSidIndex", policyMi.LastSidIndex})
    policyMi.EntityData.Leafs.Append("flag-attached", types.YLeaf{"FlagAttached", policyMi.FlagAttached})

    policyMi.EntityData.YListKeys = []string {"MiId"}

    return &(policyMi.EntityData)
}

// Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
// addr
type Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Ospf_Processes_Process_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = types.NewOrderedMap()
    addr.EntityData.Leafs = types.NewOrderedMap()
    addr.EntityData.Leafs.Append("af", types.YLeaf{"Af", addr.Af})
    addr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", addr.Ipv4})
    addr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", addr.Ipv6})

    addr.EntityData.YListKeys = []string {}

    return &(addr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf
// Operational data for the default VRF
// (instance) in the OSPF process
type Ospf_Processes_Process_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flood list table.
    FloodListTable Ospf_Processes_Process_DefaultVrf_FloodListTable

    // Container for Segment Routing.
    SegmentRouting Ospf_Processes_Process_DefaultVrf_SegmentRouting

    // Container for MPLS TE.
    MplsTe Ospf_Processes_Process_DefaultVrf_MplsTe

    // Container for Statistics.
    Statistics Ospf_Processes_Process_DefaultVrf_Statistics

    // Container for OSPF Interfaces.
    AdjacencyInformation Ospf_Processes_Process_DefaultVrf_AdjacencyInformation

    // Container for OSPF routing tables.
    RouteInformation Ospf_Processes_Process_DefaultVrf_RouteInformation

    // Container for OSPF Interfaces/links.
    InterfaceInformation Ospf_Processes_Process_DefaultVrf_InterfaceInformation

    // Border router table.
    BorderRouters Ospf_Processes_Process_DefaultVrf_BorderRouters

    // Container for OSPF Process information.
    ProcessInformation Ospf_Processes_Process_DefaultVrf_ProcessInformation

    // Area table.
    Areas Ospf_Processes_Process_DefaultVrf_Areas

    // OSPF Link State Database.
    Database Ospf_Processes_Process_DefaultVrf_Database

    // Summary prefix table.
    SummaryPrefixes Ospf_Processes_Process_DefaultVrf_SummaryPrefixes

    // Container for Statistics.
    AreaStatistics Ospf_Processes_Process_DefaultVrf_AreaStatistics

    // Fast-reroute topology information.
    OspfSummary Ospf_Processes_Process_DefaultVrf_OspfSummary

    // Container for FastReroute.
    FastReroute Ospf_Processes_Process_DefaultVrf_FastReroute
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "process"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("flood-list-table", types.YChild{"FloodListTable", &defaultVrf.FloodListTable})
    defaultVrf.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &defaultVrf.SegmentRouting})
    defaultVrf.EntityData.Children.Append("mpls-te", types.YChild{"MplsTe", &defaultVrf.MplsTe})
    defaultVrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &defaultVrf.Statistics})
    defaultVrf.EntityData.Children.Append("adjacency-information", types.YChild{"AdjacencyInformation", &defaultVrf.AdjacencyInformation})
    defaultVrf.EntityData.Children.Append("route-information", types.YChild{"RouteInformation", &defaultVrf.RouteInformation})
    defaultVrf.EntityData.Children.Append("interface-information", types.YChild{"InterfaceInformation", &defaultVrf.InterfaceInformation})
    defaultVrf.EntityData.Children.Append("border-routers", types.YChild{"BorderRouters", &defaultVrf.BorderRouters})
    defaultVrf.EntityData.Children.Append("process-information", types.YChild{"ProcessInformation", &defaultVrf.ProcessInformation})
    defaultVrf.EntityData.Children.Append("areas", types.YChild{"Areas", &defaultVrf.Areas})
    defaultVrf.EntityData.Children.Append("database", types.YChild{"Database", &defaultVrf.Database})
    defaultVrf.EntityData.Children.Append("summary-prefixes", types.YChild{"SummaryPrefixes", &defaultVrf.SummaryPrefixes})
    defaultVrf.EntityData.Children.Append("area-statistics", types.YChild{"AreaStatistics", &defaultVrf.AreaStatistics})
    defaultVrf.EntityData.Children.Append("ospf-summary", types.YChild{"OspfSummary", &defaultVrf.OspfSummary})
    defaultVrf.EntityData.Children.Append("fast-reroute", types.YChild{"FastReroute", &defaultVrf.FastReroute})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FloodListTable
// Flood list table
type Ospf_Processes_Process_DefaultVrf_FloodListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flooding information for a specific interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood.
    Flood []*Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood
}

func (floodListTable *Ospf_Processes_Process_DefaultVrf_FloodListTable) GetEntityData() *types.CommonEntityData {
    floodListTable.EntityData.YFilter = floodListTable.YFilter
    floodListTable.EntityData.YangName = "flood-list-table"
    floodListTable.EntityData.BundleName = "cisco_ios_xr"
    floodListTable.EntityData.ParentYangName = "default-vrf"
    floodListTable.EntityData.SegmentPath = "flood-list-table"
    floodListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListTable.EntityData.Children = types.NewOrderedMap()
    floodListTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListTable.Flood {
        floodListTable.EntityData.Children.Append(types.GetSegmentPath(floodListTable.Flood[i]), types.YChild{"Flood", floodListTable.Flood[i]})
    }
    floodListTable.EntityData.Leafs = types.NewOrderedMap()

    floodListTable.EntityData.YListKeys = []string {}

    return &(floodListTable.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood
// Flooding information for a specific interface
type Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    FloodInterfaceName interface{}

    // Time until next LS update due (ms). The type is interface{} with range:
    // 0..4294967295.
    FloodPacingTimer interface{}

    // Number of LSAs currently being flooded. The type is interface{} with range:
    // 0..4294967295.
    FloodLsaCount interface{}

    // Area scope floodlist. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AreaFlood.
    AreaFlood []*Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AsFlood.
    AsFlood []*Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AsFlood
}

func (flood *Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("flood-interface-name", types.YLeaf{"FloodInterfaceName", flood.FloodInterfaceName})
    flood.EntityData.Leafs.Append("flood-pacing-timer", types.YLeaf{"FloodPacingTimer", flood.FloodPacingTimer})
    flood.EntityData.Leafs.Append("flood-lsa-count", types.YLeaf{"FloodLsaCount", flood.FloodLsaCount})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AreaFlood
// Area scope floodlist
type Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (areaFlood *Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood"
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", areaFlood.HeaderLsId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})
    areaFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", areaFlood.HeaderLsaChecksum})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AsFlood
// AS scope floodlist
type Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (asFlood *Ospf_Processes_Process_DefaultVrf_FloodListTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood"
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", asFlood.HeaderLsId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})
    asFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", asFlood.HeaderLsaChecksum})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SegmentRouting
// Container for Segment Routing
type Ospf_Processes_Process_DefaultVrf_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Container for SR Policies.
    SrEndpointPolicies Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "cisco_ios_xr"
    segmentRouting.EntityData.ParentYangName = "default-vrf"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("sr-endpoint-policies", types.YChild{"SrEndpointPolicies", &segmentRouting.SrEndpointPolicies})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies
// Container for SR Policies
type Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Endpoint Policy Bag. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy.
    SrEndpointPolicy []*Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy
}

func (srEndpointPolicies *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies) GetEntityData() *types.CommonEntityData {
    srEndpointPolicies.EntityData.YFilter = srEndpointPolicies.YFilter
    srEndpointPolicies.EntityData.YangName = "sr-endpoint-policies"
    srEndpointPolicies.EntityData.BundleName = "cisco_ios_xr"
    srEndpointPolicies.EntityData.ParentYangName = "segment-routing"
    srEndpointPolicies.EntityData.SegmentPath = "sr-endpoint-policies"
    srEndpointPolicies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srEndpointPolicies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srEndpointPolicies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srEndpointPolicies.EntityData.Children = types.NewOrderedMap()
    srEndpointPolicies.EntityData.Children.Append("sr-endpoint-policy", types.YChild{"SrEndpointPolicy", nil})
    for i := range srEndpointPolicies.SrEndpointPolicy {
        srEndpointPolicies.EntityData.Children.Append(types.GetSegmentPath(srEndpointPolicies.SrEndpointPolicy[i]), types.YChild{"SrEndpointPolicy", srEndpointPolicies.SrEndpointPolicy[i]})
    }
    srEndpointPolicies.EntityData.Leafs = types.NewOrderedMap()

    srEndpointPolicies.EntityData.YListKeys = []string {}

    return &(srEndpointPolicies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy
// SR Endpoint Policy Bag
type Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Endpoint IP Address. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    EndpointIp interface{}

    // SR Endpoint. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrEndpoint interface{}

    // SR Endpoint Router ID. The type is interface{} with range: 0..4294967295.
    SrRouterId interface{}

    // SR Endpoint Area ID. The type is string.
    SrAreaIdString interface{}

    // SR Policy count. The type is interface{} with range: 0..4294967295.
    SrPolicyCount interface{}

    // SR Valid Policy count. The type is interface{} with range: 0..4294967295.
    SrValidPolicyCount interface{}

    // SR Endpoint state is valid. The type is bool.
    SrEndpStateIsValid interface{}

    // SR Endpoint state is stale. The type is bool.
    SrEndpStateIsStale interface{}

    // SR Endpoint state is unresolved. The type is bool.
    SrEndpStateIsUnres interface{}

    // SR Endpoint resolution failed reason. The type is OspfSrEndpResFailReason.
    SrEndpResolutionFailReason interface{}

    // SR Policy List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy.
    SrPolicy []*Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy
}

func (srEndpointPolicy *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy) GetEntityData() *types.CommonEntityData {
    srEndpointPolicy.EntityData.YFilter = srEndpointPolicy.YFilter
    srEndpointPolicy.EntityData.YangName = "sr-endpoint-policy"
    srEndpointPolicy.EntityData.BundleName = "cisco_ios_xr"
    srEndpointPolicy.EntityData.ParentYangName = "sr-endpoint-policies"
    srEndpointPolicy.EntityData.SegmentPath = "sr-endpoint-policy" + types.AddKeyToken(srEndpointPolicy.EndpointIp, "endpoint-ip")
    srEndpointPolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srEndpointPolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srEndpointPolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srEndpointPolicy.EntityData.Children = types.NewOrderedMap()
    srEndpointPolicy.EntityData.Children.Append("sr-policy", types.YChild{"SrPolicy", nil})
    for i := range srEndpointPolicy.SrPolicy {
        srEndpointPolicy.EntityData.Children.Append(types.GetSegmentPath(srEndpointPolicy.SrPolicy[i]), types.YChild{"SrPolicy", srEndpointPolicy.SrPolicy[i]})
    }
    srEndpointPolicy.EntityData.Leafs = types.NewOrderedMap()
    srEndpointPolicy.EntityData.Leafs.Append("endpoint-ip", types.YLeaf{"EndpointIp", srEndpointPolicy.EndpointIp})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endpoint", types.YLeaf{"SrEndpoint", srEndpointPolicy.SrEndpoint})
    srEndpointPolicy.EntityData.Leafs.Append("sr-router-id", types.YLeaf{"SrRouterId", srEndpointPolicy.SrRouterId})
    srEndpointPolicy.EntityData.Leafs.Append("sr-area-id-string", types.YLeaf{"SrAreaIdString", srEndpointPolicy.SrAreaIdString})
    srEndpointPolicy.EntityData.Leafs.Append("sr-policy-count", types.YLeaf{"SrPolicyCount", srEndpointPolicy.SrPolicyCount})
    srEndpointPolicy.EntityData.Leafs.Append("sr-valid-policy-count", types.YLeaf{"SrValidPolicyCount", srEndpointPolicy.SrValidPolicyCount})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-state-is-valid", types.YLeaf{"SrEndpStateIsValid", srEndpointPolicy.SrEndpStateIsValid})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-state-is-stale", types.YLeaf{"SrEndpStateIsStale", srEndpointPolicy.SrEndpStateIsStale})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-state-is-unres", types.YLeaf{"SrEndpStateIsUnres", srEndpointPolicy.SrEndpStateIsUnres})
    srEndpointPolicy.EntityData.Leafs.Append("sr-endp-resolution-fail-reason", types.YLeaf{"SrEndpResolutionFailReason", srEndpointPolicy.SrEndpResolutionFailReason})

    srEndpointPolicy.EntityData.YListKeys = []string {"EndpointIp"}

    return &(srEndpointPolicy.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy
// SR Policy List
type Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Policy Name. The type is string.
    PolicyName interface{}

    // SR Policy Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PolicyIfHandle interface{}

    // SR Policy Metric. The type is interface{} with range:
    // -2147483648..2147483647.
    PolicyMetric interface{}

    // SR Policy Metric mode. The type is OspfSrPolMetricMode.
    PolicyMetricMode interface{}

    // SR Policy is Strict SPF. The type is bool.
    PolicyIsSspf interface{}

    // SR Policy is autoroute Include. The type is bool.
    PolicyIsAutorouteInclude interface{}

    // SR Policy State is valid. The type is bool.
    PolicyStateIsValid interface{}

    // SR Policy State is stale. The type is bool.
    PolicyStateIsStale interface{}

    // SR Policy State is IF Handle error. The type is bool.
    PolicyStateIsIfhError interface{}

    // SR Policy State is IDB pending. The type is bool.
    PolicyStateIsIdbPending interface{}

    // SR Policy update time. The type is interface{} with range: 0..4294967295.
    PolicyUpdateTimestamp interface{}
}

func (srPolicy *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrEndpointPolicies_SrEndpointPolicy_SrPolicy) GetEntityData() *types.CommonEntityData {
    srPolicy.EntityData.YFilter = srPolicy.YFilter
    srPolicy.EntityData.YangName = "sr-policy"
    srPolicy.EntityData.BundleName = "cisco_ios_xr"
    srPolicy.EntityData.ParentYangName = "sr-endpoint-policy"
    srPolicy.EntityData.SegmentPath = "sr-policy"
    srPolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPolicy.EntityData.Children = types.NewOrderedMap()
    srPolicy.EntityData.Leafs = types.NewOrderedMap()
    srPolicy.EntityData.Leafs.Append("policy-name", types.YLeaf{"PolicyName", srPolicy.PolicyName})
    srPolicy.EntityData.Leafs.Append("policy-if-handle", types.YLeaf{"PolicyIfHandle", srPolicy.PolicyIfHandle})
    srPolicy.EntityData.Leafs.Append("policy-metric", types.YLeaf{"PolicyMetric", srPolicy.PolicyMetric})
    srPolicy.EntityData.Leafs.Append("policy-metric-mode", types.YLeaf{"PolicyMetricMode", srPolicy.PolicyMetricMode})
    srPolicy.EntityData.Leafs.Append("policy-is-sspf", types.YLeaf{"PolicyIsSspf", srPolicy.PolicyIsSspf})
    srPolicy.EntityData.Leafs.Append("policy-is-autoroute-include", types.YLeaf{"PolicyIsAutorouteInclude", srPolicy.PolicyIsAutorouteInclude})
    srPolicy.EntityData.Leafs.Append("policy-state-is-valid", types.YLeaf{"PolicyStateIsValid", srPolicy.PolicyStateIsValid})
    srPolicy.EntityData.Leafs.Append("policy-state-is-stale", types.YLeaf{"PolicyStateIsStale", srPolicy.PolicyStateIsStale})
    srPolicy.EntityData.Leafs.Append("policy-state-is-ifh-error", types.YLeaf{"PolicyStateIsIfhError", srPolicy.PolicyStateIsIfhError})
    srPolicy.EntityData.Leafs.Append("policy-state-is-idb-pending", types.YLeaf{"PolicyStateIsIdbPending", srPolicy.PolicyStateIsIdbPending})
    srPolicy.EntityData.Leafs.Append("policy-update-timestamp", types.YLeaf{"PolicyUpdateTimestamp", srPolicy.PolicyUpdateTimestamp})

    srPolicy.EntityData.YListKeys = []string {}

    return &(srPolicy.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe
// Container for MPLS TE
type Ospf_Processes_Process_DefaultVrf_MplsTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS TE link information table.
    MplsTeLinks Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks

    // MPLS TE Fragment information table.
    MplsTeFragments Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments
}

func (mplsTe *Ospf_Processes_Process_DefaultVrf_MplsTe) GetEntityData() *types.CommonEntityData {
    mplsTe.EntityData.YFilter = mplsTe.YFilter
    mplsTe.EntityData.YangName = "mpls-te"
    mplsTe.EntityData.BundleName = "cisco_ios_xr"
    mplsTe.EntityData.ParentYangName = "default-vrf"
    mplsTe.EntityData.SegmentPath = "mpls-te"
    mplsTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTe.EntityData.Children = types.NewOrderedMap()
    mplsTe.EntityData.Children.Append("mpls-te-links", types.YChild{"MplsTeLinks", &mplsTe.MplsTeLinks})
    mplsTe.EntityData.Children.Append("mpls-te-fragments", types.YChild{"MplsTeFragments", &mplsTe.MplsTeFragments})
    mplsTe.EntityData.Leafs = types.NewOrderedMap()

    mplsTe.EntityData.YListKeys = []string {}

    return &(mplsTe.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks
// MPLS TE link information table
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS TE link information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink
}

func (mplsTeLinks *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks) GetEntityData() *types.CommonEntityData {
    mplsTeLinks.EntityData.YFilter = mplsTeLinks.YFilter
    mplsTeLinks.EntityData.YangName = "mpls-te-links"
    mplsTeLinks.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLinks.EntityData.ParentYangName = "mpls-te"
    mplsTeLinks.EntityData.SegmentPath = "mpls-te-links"
    mplsTeLinks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLinks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLinks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLinks.EntityData.Children = types.NewOrderedMap()
    mplsTeLinks.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeLinks.MplsTeLink {
        mplsTeLinks.EntityData.Children.Append(types.GetSegmentPath(mplsTeLinks.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeLinks.MplsTeLink[i]})
    }
    mplsTeLinks.EntityData.Leafs = types.NewOrderedMap()

    mplsTeLinks.EntityData.YListKeys = []string {}

    return &(mplsTeLinks.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink
// MPLS TE link information
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPF MPLS-TE router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterId interface{}

    // If true, MPLS-TE enabled in area. The type is bool.
    MplsTeEnabled interface{}

    // If true, MPLS-TE initialized in the area. The type is bool.
    MplsTeInitialized interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    MplsTeAreaId interface{}

    // Area information instance. The type is interface{} with range:
    // 0..4294967295.
    MplsTeAreaInstance interface{}

    // MPLS-TE router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterAddress interface{}

    // Next MPLS-TE fragment ID. The type is interface{} with range:
    // 0..4294967295.
    MplsTeNextFragmentId interface{}

    // If true, fragment has space for next link. The type is bool.
    SpaciousFragment interface{}

    // MPLS-TE links in the area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink

    // MPLS TE fragments in the area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment.
    MplsTeFragment []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment
}

func (mplsTeLink *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-links"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link" + types.AddKeyToken(mplsTeLink.AreaId, "area-id")
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeLink.MplsTeLink {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeLink.MplsTeLink[i]})
    }
    mplsTeLink.EntityData.Children.Append("mpls-te-fragment", types.YChild{"MplsTeFragment", nil})
    for i := range mplsTeLink.MplsTeFragment {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsTeFragment[i]), types.YChild{"MplsTeFragment", mplsTeLink.MplsTeFragment[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", mplsTeLink.AreaId})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-router-id", types.YLeaf{"MplsTeRouterId", mplsTeLink.MplsTeRouterId})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-enabled", types.YLeaf{"MplsTeEnabled", mplsTeLink.MplsTeEnabled})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-initialized", types.YLeaf{"MplsTeInitialized", mplsTeLink.MplsTeInitialized})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-area-id", types.YLeaf{"MplsTeAreaId", mplsTeLink.MplsTeAreaId})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-area-instance", types.YLeaf{"MplsTeAreaInstance", mplsTeLink.MplsTeAreaInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-router-address", types.YLeaf{"MplsTeRouterAddress", mplsTeLink.MplsTeRouterAddress})
    mplsTeLink.EntityData.Leafs.Append("mpls-te-next-fragment-id", types.YLeaf{"MplsTeNextFragmentId", mplsTeLink.MplsTeNextFragmentId})
    mplsTeLink.EntityData.Leafs.Append("spacious-fragment", types.YLeaf{"SpaciousFragment", mplsTeLink.SpaciousFragment})

    mplsTeLink.EntityData.YListKeys = []string {"AreaId"}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink
// MPLS-TE links in the area
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-link"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment
// MPLS TE fragments in the area
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fragment instance. The type is interface{} with range: 0..4294967295.
    FragmentInstance interface{}

    // Fragment ID. The type is interface{} with range: 0..4294967295.
    FragmentId interface{}

    // DS-TE Allocation Model ID. The type is interface{} with range: 0..255.
    DsteModelId interface{}

    // Number of fragment links which haven't changed since the last update. The
    // type is interface{} with range: 0..255.
    SameFragmentCount interface{}

    // List of fragment links. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink
}

func (mplsTeFragment *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment) GetEntityData() *types.CommonEntityData {
    mplsTeFragment.EntityData.YFilter = mplsTeFragment.YFilter
    mplsTeFragment.EntityData.YangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragment.EntityData.ParentYangName = "mpls-te-link"
    mplsTeFragment.EntityData.SegmentPath = "mpls-te-fragment"
    mplsTeFragment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragment.EntityData.Children = types.NewOrderedMap()
    mplsTeFragment.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeFragment.MplsTeLink {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeFragment.MplsTeLink[i]})
    }
    mplsTeFragment.EntityData.Leafs = types.NewOrderedMap()
    mplsTeFragment.EntityData.Leafs.Append("fragment-instance", types.YLeaf{"FragmentInstance", mplsTeFragment.FragmentInstance})
    mplsTeFragment.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeFragment.FragmentId})
    mplsTeFragment.EntityData.Leafs.Append("dste-model-id", types.YLeaf{"DsteModelId", mplsTeFragment.DsteModelId})
    mplsTeFragment.EntityData.Leafs.Append("same-fragment-count", types.YLeaf{"SameFragmentCount", mplsTeFragment.SameFragmentCount})

    mplsTeFragment.EntityData.YListKeys = []string {}

    return &(mplsTeFragment.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink
// List of fragment links
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeLinks_MplsTeLink_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments
// MPLS TE Fragment information table
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS TE Fragment. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment.
    MplsTeFragment []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment
}

func (mplsTeFragments *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments) GetEntityData() *types.CommonEntityData {
    mplsTeFragments.EntityData.YFilter = mplsTeFragments.YFilter
    mplsTeFragments.EntityData.YangName = "mpls-te-fragments"
    mplsTeFragments.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragments.EntityData.ParentYangName = "mpls-te"
    mplsTeFragments.EntityData.SegmentPath = "mpls-te-fragments"
    mplsTeFragments.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragments.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragments.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragments.EntityData.Children = types.NewOrderedMap()
    mplsTeFragments.EntityData.Children.Append("mpls-te-fragment", types.YChild{"MplsTeFragment", nil})
    for i := range mplsTeFragments.MplsTeFragment {
        mplsTeFragments.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragments.MplsTeFragment[i]), types.YChild{"MplsTeFragment", mplsTeFragments.MplsTeFragment[i]})
    }
    mplsTeFragments.EntityData.Leafs = types.NewOrderedMap()

    mplsTeFragments.EntityData.YListKeys = []string {}

    return &(mplsTeFragments.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment
// MPLS TE Fragment
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPF MPLS-TE router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterId interface{}

    // If true, MPLS-TE enabled in area. The type is bool.
    MplsTeEnabled interface{}

    // If true, MPLS-TE initialized in the area. The type is bool.
    MplsTeInitialized interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    MplsTeAreaId interface{}

    // Area information instance. The type is interface{} with range:
    // 0..4294967295.
    MplsTeAreaInstance interface{}

    // MPLS-TE router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsTeRouterAddress interface{}

    // Next MPLS-TE fragment ID. The type is interface{} with range:
    // 0..4294967295.
    MplsTeNextFragmentId interface{}

    // If true, fragment has space for next link. The type is bool.
    SpaciousFragment interface{}

    // MPLS-TE links in the area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink

    // MPLS TE fragments in the area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment.
    MplsTeFragment []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment
}

func (mplsTeFragment *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment) GetEntityData() *types.CommonEntityData {
    mplsTeFragment.EntityData.YFilter = mplsTeFragment.YFilter
    mplsTeFragment.EntityData.YangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragment.EntityData.ParentYangName = "mpls-te-fragments"
    mplsTeFragment.EntityData.SegmentPath = "mpls-te-fragment" + types.AddKeyToken(mplsTeFragment.AreaId, "area-id")
    mplsTeFragment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragment.EntityData.Children = types.NewOrderedMap()
    mplsTeFragment.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeFragment.MplsTeLink {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeFragment.MplsTeLink[i]})
    }
    mplsTeFragment.EntityData.Children.Append("mpls-te-fragment", types.YChild{"MplsTeFragment", nil})
    for i := range mplsTeFragment.MplsTeFragment {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeFragment[i]), types.YChild{"MplsTeFragment", mplsTeFragment.MplsTeFragment[i]})
    }
    mplsTeFragment.EntityData.Leafs = types.NewOrderedMap()
    mplsTeFragment.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", mplsTeFragment.AreaId})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-router-id", types.YLeaf{"MplsTeRouterId", mplsTeFragment.MplsTeRouterId})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-enabled", types.YLeaf{"MplsTeEnabled", mplsTeFragment.MplsTeEnabled})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-initialized", types.YLeaf{"MplsTeInitialized", mplsTeFragment.MplsTeInitialized})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-area-id", types.YLeaf{"MplsTeAreaId", mplsTeFragment.MplsTeAreaId})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-area-instance", types.YLeaf{"MplsTeAreaInstance", mplsTeFragment.MplsTeAreaInstance})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-router-address", types.YLeaf{"MplsTeRouterAddress", mplsTeFragment.MplsTeRouterAddress})
    mplsTeFragment.EntityData.Leafs.Append("mpls-te-next-fragment-id", types.YLeaf{"MplsTeNextFragmentId", mplsTeFragment.MplsTeNextFragmentId})
    mplsTeFragment.EntityData.Leafs.Append("spacious-fragment", types.YLeaf{"SpaciousFragment", mplsTeFragment.SpaciousFragment})

    mplsTeFragment.EntityData.YListKeys = []string {"AreaId"}

    return &(mplsTeFragment.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink
// MPLS-TE links in the area
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment
// MPLS TE fragments in the area
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fragment instance. The type is interface{} with range: 0..4294967295.
    FragmentInstance interface{}

    // Fragment ID. The type is interface{} with range: 0..4294967295.
    FragmentId interface{}

    // DS-TE Allocation Model ID. The type is interface{} with range: 0..255.
    DsteModelId interface{}

    // Number of fragment links which haven't changed since the last update. The
    // type is interface{} with range: 0..255.
    SameFragmentCount interface{}

    // List of fragment links. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink.
    MplsTeLink []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink
}

func (mplsTeFragment *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment) GetEntityData() *types.CommonEntityData {
    mplsTeFragment.EntityData.YFilter = mplsTeFragment.YFilter
    mplsTeFragment.EntityData.YangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.BundleName = "cisco_ios_xr"
    mplsTeFragment.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeFragment.EntityData.SegmentPath = "mpls-te-fragment"
    mplsTeFragment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeFragment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeFragment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeFragment.EntityData.Children = types.NewOrderedMap()
    mplsTeFragment.EntityData.Children.Append("mpls-te-link", types.YChild{"MplsTeLink", nil})
    for i := range mplsTeFragment.MplsTeLink {
        mplsTeFragment.EntityData.Children.Append(types.GetSegmentPath(mplsTeFragment.MplsTeLink[i]), types.YChild{"MplsTeLink", mplsTeFragment.MplsTeLink[i]})
    }
    mplsTeFragment.EntityData.Leafs = types.NewOrderedMap()
    mplsTeFragment.EntityData.Leafs.Append("fragment-instance", types.YLeaf{"FragmentInstance", mplsTeFragment.FragmentInstance})
    mplsTeFragment.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeFragment.FragmentId})
    mplsTeFragment.EntityData.Leafs.Append("dste-model-id", types.YLeaf{"DsteModelId", mplsTeFragment.DsteModelId})
    mplsTeFragment.EntityData.Leafs.Append("same-fragment-count", types.YLeaf{"SameFragmentCount", mplsTeFragment.SameFragmentCount})

    mplsTeFragment.EntityData.YListKeys = []string {}

    return &(mplsTeFragment.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink
// List of fragment links
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Link is new. The type is bool.
    NewLink interface{}

    // Fragment ID for this link. The type is interface{} with range:
    // 0..4294967295.
    FragmentId interface{}

    // Link instance. The type is interface{} with range: 0..4294967295.
    MplsLinkInstance interface{}

    // Type of link. The type is LinkSubnet.
    MplsLinkType interface{}

    // Neighbor system ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborSystemId interface{}

    // The local interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Link IGP metric. The type is interface{} with range: 0..4294967295.
    IgpMetric interface{}

    // Link TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Maximum link bandwidth (bytes/s). The type is interface{} with range:
    // 0..4294967295. Units are byte/s.
    MaximumLinkBw interface{}

    // Maximum link global pool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkReservableBw interface{}

    // Maximum link subpool reservable bandwidth (bytes/s). The type is
    // interface{} with range: 0..4294967295. Units are byte/s.
    MaximumLinkSubReservableBw interface{}

    // Number of priorities. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityCount interface{}

    // Affinity. The type is interface{} with range: 0..4294967295.
    Affinity interface{}

    // Output interface ID. The type is interface{} with range: 0..4294967295.
    OutputInterfaceId interface{}

    // Input interface ID. The type is interface{} with range: 0..4294967295.
    InputInterfaceId interface{}

    // A DS-TE Allocation Model in use. The type is bool.
    DsteInUse interface{}

    // DS-TE Allocation Model ID. The type is IgpteLibBwModel.
    DsteAllocationModelId interface{}

    // Number of Optional TLVs. The type is interface{} with range: 0..255.
    NumberOfOptionalTlVs interface{}

    // Global pool unreserved bandwidth for each priority (bytes/s).
    GlobalUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority

    // Sub pool unreserved bandwidth for each priority (bytes/s).
    SubPoolUnreserveBwPerPriority Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority

    // Link protocol and protocol priority capability.
    LinkProtocolPriorityCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability

    // Link switching capability.
    LinkSwCapability Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability

    // Extended Admin Group.
    ExtendedAdminGroupList Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList

    // List of Optional TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv.
    MplsteLinkOptTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
}

func (mplsTeLink *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink) GetEntityData() *types.CommonEntityData {
    mplsTeLink.EntityData.YFilter = mplsTeLink.YFilter
    mplsTeLink.EntityData.YangName = "mpls-te-link"
    mplsTeLink.EntityData.BundleName = "cisco_ios_xr"
    mplsTeLink.EntityData.ParentYangName = "mpls-te-fragment"
    mplsTeLink.EntityData.SegmentPath = "mpls-te-link"
    mplsTeLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsTeLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsTeLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsTeLink.EntityData.Children = types.NewOrderedMap()
    mplsTeLink.EntityData.Children.Append("global-unreserve-bw-per-priority", types.YChild{"GlobalUnreserveBwPerPriority", &mplsTeLink.GlobalUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("sub-pool-unreserve-bw-per-priority", types.YChild{"SubPoolUnreserveBwPerPriority", &mplsTeLink.SubPoolUnreserveBwPerPriority})
    mplsTeLink.EntityData.Children.Append("link-protocol-priority-capability", types.YChild{"LinkProtocolPriorityCapability", &mplsTeLink.LinkProtocolPriorityCapability})
    mplsTeLink.EntityData.Children.Append("link-sw-capability", types.YChild{"LinkSwCapability", &mplsTeLink.LinkSwCapability})
    mplsTeLink.EntityData.Children.Append("extended-admin-group-list", types.YChild{"ExtendedAdminGroupList", &mplsTeLink.ExtendedAdminGroupList})
    mplsTeLink.EntityData.Children.Append("mplste-link-opt-tlv", types.YChild{"MplsteLinkOptTlv", nil})
    for i := range mplsTeLink.MplsteLinkOptTlv {
        mplsTeLink.EntityData.Children.Append(types.GetSegmentPath(mplsTeLink.MplsteLinkOptTlv[i]), types.YChild{"MplsteLinkOptTlv", mplsTeLink.MplsteLinkOptTlv[i]})
    }
    mplsTeLink.EntityData.Leafs = types.NewOrderedMap()
    mplsTeLink.EntityData.Leafs.Append("new-link", types.YLeaf{"NewLink", mplsTeLink.NewLink})
    mplsTeLink.EntityData.Leafs.Append("fragment-id", types.YLeaf{"FragmentId", mplsTeLink.FragmentId})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-instance", types.YLeaf{"MplsLinkInstance", mplsTeLink.MplsLinkInstance})
    mplsTeLink.EntityData.Leafs.Append("mpls-link-type", types.YLeaf{"MplsLinkType", mplsTeLink.MplsLinkType})
    mplsTeLink.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", mplsTeLink.NeighborSystemId})
    mplsTeLink.EntityData.Leafs.Append("link-address", types.YLeaf{"LinkAddress", mplsTeLink.LinkAddress})
    mplsTeLink.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", mplsTeLink.NeighborIpAddress})
    mplsTeLink.EntityData.Leafs.Append("igp-metric", types.YLeaf{"IgpMetric", mplsTeLink.IgpMetric})
    mplsTeLink.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", mplsTeLink.TeMetric})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-bw", types.YLeaf{"MaximumLinkBw", mplsTeLink.MaximumLinkBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-reservable-bw", types.YLeaf{"MaximumLinkReservableBw", mplsTeLink.MaximumLinkReservableBw})
    mplsTeLink.EntityData.Leafs.Append("maximum-link-sub-reservable-bw", types.YLeaf{"MaximumLinkSubReservableBw", mplsTeLink.MaximumLinkSubReservableBw})
    mplsTeLink.EntityData.Leafs.Append("priority-count", types.YLeaf{"PriorityCount", mplsTeLink.PriorityCount})
    mplsTeLink.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", mplsTeLink.Affinity})
    mplsTeLink.EntityData.Leafs.Append("output-interface-id", types.YLeaf{"OutputInterfaceId", mplsTeLink.OutputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("input-interface-id", types.YLeaf{"InputInterfaceId", mplsTeLink.InputInterfaceId})
    mplsTeLink.EntityData.Leafs.Append("dste-in-use", types.YLeaf{"DsteInUse", mplsTeLink.DsteInUse})
    mplsTeLink.EntityData.Leafs.Append("dste-allocation-model-id", types.YLeaf{"DsteAllocationModelId", mplsTeLink.DsteAllocationModelId})
    mplsTeLink.EntityData.Leafs.Append("number-of-optional-tl-vs", types.YLeaf{"NumberOfOptionalTlVs", mplsTeLink.NumberOfOptionalTlVs})

    mplsTeLink.EntityData.YListKeys = []string {}

    return &(mplsTeLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority
// Global pool unreserved bandwidth for each
// priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
}

func (globalUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    globalUnreserveBwPerPriority.EntityData.YFilter = globalUnreserveBwPerPriority.YFilter
    globalUnreserveBwPerPriority.EntityData.YangName = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    globalUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    globalUnreserveBwPerPriority.EntityData.SegmentPath = "global-unreserve-bw-per-priority"
    globalUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    globalUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range globalUnreserveBwPerPriority.BwPerPriority {
        globalUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(globalUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", globalUnreserveBwPerPriority.BwPerPriority[i]})
    }
    globalUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    globalUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(globalUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_GlobalUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "global-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority
// Sub pool unreserved bandwidth for each priority
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unreserved bandwidth for each priority (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority.
    BwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
}

func (subPoolUnreserveBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority) GetEntityData() *types.CommonEntityData {
    subPoolUnreserveBwPerPriority.EntityData.YFilter = subPoolUnreserveBwPerPriority.YFilter
    subPoolUnreserveBwPerPriority.EntityData.YangName = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    subPoolUnreserveBwPerPriority.EntityData.ParentYangName = "mpls-te-link"
    subPoolUnreserveBwPerPriority.EntityData.SegmentPath = "sub-pool-unreserve-bw-per-priority"
    subPoolUnreserveBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subPoolUnreserveBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subPoolUnreserveBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subPoolUnreserveBwPerPriority.EntityData.Children = types.NewOrderedMap()
    subPoolUnreserveBwPerPriority.EntityData.Children.Append("bw-per-priority", types.YChild{"BwPerPriority", nil})
    for i := range subPoolUnreserveBwPerPriority.BwPerPriority {
        subPoolUnreserveBwPerPriority.EntityData.Children.Append(types.GetSegmentPath(subPoolUnreserveBwPerPriority.BwPerPriority[i]), types.YChild{"BwPerPriority", subPoolUnreserveBwPerPriority.BwPerPriority[i]})
    }
    subPoolUnreserveBwPerPriority.EntityData.Leafs = types.NewOrderedMap()

    subPoolUnreserveBwPerPriority.EntityData.YListKeys = []string {}

    return &(subPoolUnreserveBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority
// Unreserved bandwidth for each priority (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (bwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_SubPoolUnreserveBwPerPriority_BwPerPriority) GetEntityData() *types.CommonEntityData {
    bwPerPriority.EntityData.YFilter = bwPerPriority.YFilter
    bwPerPriority.EntityData.YangName = "bw-per-priority"
    bwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    bwPerPriority.EntityData.ParentYangName = "sub-pool-unreserve-bw-per-priority"
    bwPerPriority.EntityData.SegmentPath = "bw-per-priority"
    bwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPerPriority.EntityData.Children = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    bwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", bwPerPriority.Entry})

    bwPerPriority.EntityData.YListKeys = []string {}

    return &(bwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability
// Link protocol and protocol priority capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protocol capability. The type is interface{} with range: 0..255.
    LinkProtocolCapability interface{}

    // Link protocol priority. The type is interface{} with range: 0..255.
    LinkProtocolPriority interface{}
}

func (linkProtocolPriorityCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkProtocolPriorityCapability) GetEntityData() *types.CommonEntityData {
    linkProtocolPriorityCapability.EntityData.YFilter = linkProtocolPriorityCapability.YFilter
    linkProtocolPriorityCapability.EntityData.YangName = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.BundleName = "cisco_ios_xr"
    linkProtocolPriorityCapability.EntityData.ParentYangName = "mpls-te-link"
    linkProtocolPriorityCapability.EntityData.SegmentPath = "link-protocol-priority-capability"
    linkProtocolPriorityCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkProtocolPriorityCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkProtocolPriorityCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkProtocolPriorityCapability.EntityData.Children = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs = types.NewOrderedMap()
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-capability", types.YLeaf{"LinkProtocolCapability", linkProtocolPriorityCapability.LinkProtocolCapability})
    linkProtocolPriorityCapability.EntityData.Leafs.Append("link-protocol-priority", types.YLeaf{"LinkProtocolPriority", linkProtocolPriorityCapability.LinkProtocolPriority})

    linkProtocolPriorityCapability.EntityData.YListKeys = []string {}

    return &(linkProtocolPriorityCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability
// Link switching capability
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link Switching Capability. The type is interface{} with range: 0..255.
    LinkSwitchingCapability interface{}

    // Link Encoding. The type is interface{} with range: 0..255.
    LinkEncoding interface{}

    // Minimum LSP bandwidth (bytes/s). The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    MinimumLspBw interface{}

    // Link MTU size (bytes). The type is interface{} with range: 0..65535. Units
    // are byte.
    LinkMtu interface{}

    // Maximum LSP bandwidth for each priority  (bytes/s). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority.
    MaximumLspBwPerPriority []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
}

func (linkSwCapability *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability) GetEntityData() *types.CommonEntityData {
    linkSwCapability.EntityData.YFilter = linkSwCapability.YFilter
    linkSwCapability.EntityData.YangName = "link-sw-capability"
    linkSwCapability.EntityData.BundleName = "cisco_ios_xr"
    linkSwCapability.EntityData.ParentYangName = "mpls-te-link"
    linkSwCapability.EntityData.SegmentPath = "link-sw-capability"
    linkSwCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkSwCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkSwCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkSwCapability.EntityData.Children = types.NewOrderedMap()
    linkSwCapability.EntityData.Children.Append("maximum-lsp-bw-per-priority", types.YChild{"MaximumLspBwPerPriority", nil})
    for i := range linkSwCapability.MaximumLspBwPerPriority {
        linkSwCapability.EntityData.Children.Append(types.GetSegmentPath(linkSwCapability.MaximumLspBwPerPriority[i]), types.YChild{"MaximumLspBwPerPriority", linkSwCapability.MaximumLspBwPerPriority[i]})
    }
    linkSwCapability.EntityData.Leafs = types.NewOrderedMap()
    linkSwCapability.EntityData.Leafs.Append("link-switching-capability", types.YLeaf{"LinkSwitchingCapability", linkSwCapability.LinkSwitchingCapability})
    linkSwCapability.EntityData.Leafs.Append("link-encoding", types.YLeaf{"LinkEncoding", linkSwCapability.LinkEncoding})
    linkSwCapability.EntityData.Leafs.Append("minimum-lsp-bw", types.YLeaf{"MinimumLspBw", linkSwCapability.MinimumLspBw})
    linkSwCapability.EntityData.Leafs.Append("link-mtu", types.YLeaf{"LinkMtu", linkSwCapability.LinkMtu})

    linkSwCapability.EntityData.YListKeys = []string {}

    return &(linkSwCapability.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority
// Maximum LSP bandwidth for each priority
// 
// (bytes/s)
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615. Units are
    // byte/s.
    Entry interface{}
}

func (maximumLspBwPerPriority *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_LinkSwCapability_MaximumLspBwPerPriority) GetEntityData() *types.CommonEntityData {
    maximumLspBwPerPriority.EntityData.YFilter = maximumLspBwPerPriority.YFilter
    maximumLspBwPerPriority.EntityData.YangName = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.BundleName = "cisco_ios_xr"
    maximumLspBwPerPriority.EntityData.ParentYangName = "link-sw-capability"
    maximumLspBwPerPriority.EntityData.SegmentPath = "maximum-lsp-bw-per-priority"
    maximumLspBwPerPriority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumLspBwPerPriority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumLspBwPerPriority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumLspBwPerPriority.EntityData.Children = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs = types.NewOrderedMap()
    maximumLspBwPerPriority.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maximumLspBwPerPriority.Entry})

    maximumLspBwPerPriority.EntityData.YListKeys = []string {}

    return &(maximumLspBwPerPriority.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList
// Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the extended admin group. The type is interface{} with range:
    // 0..4294967295.
    ExtendedAdminSize interface{}

    // Value of Extended Admin Group. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData.
    ExtAdminData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
}

func (extendedAdminGroupList *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList) GetEntityData() *types.CommonEntityData {
    extendedAdminGroupList.EntityData.YFilter = extendedAdminGroupList.YFilter
    extendedAdminGroupList.EntityData.YangName = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroupList.EntityData.ParentYangName = "mpls-te-link"
    extendedAdminGroupList.EntityData.SegmentPath = "extended-admin-group-list"
    extendedAdminGroupList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroupList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroupList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroupList.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Children.Append("ext-admin-data", types.YChild{"ExtAdminData", nil})
    for i := range extendedAdminGroupList.ExtAdminData {
        extendedAdminGroupList.EntityData.Children.Append(types.GetSegmentPath(extendedAdminGroupList.ExtAdminData[i]), types.YChild{"ExtAdminData", extendedAdminGroupList.ExtAdminData[i]})
    }
    extendedAdminGroupList.EntityData.Leafs = types.NewOrderedMap()
    extendedAdminGroupList.EntityData.Leafs.Append("extended-admin-size", types.YLeaf{"ExtendedAdminSize", extendedAdminGroupList.ExtendedAdminSize})

    extendedAdminGroupList.EntityData.YListKeys = []string {}

    return &(extendedAdminGroupList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData
// Value of Extended Admin Group
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extAdminData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_ExtendedAdminGroupList_ExtAdminData) GetEntityData() *types.CommonEntityData {
    extAdminData.EntityData.YFilter = extAdminData.YFilter
    extAdminData.EntityData.YangName = "ext-admin-data"
    extAdminData.EntityData.BundleName = "cisco_ios_xr"
    extAdminData.EntityData.ParentYangName = "extended-admin-group-list"
    extAdminData.EntityData.SegmentPath = "ext-admin-data"
    extAdminData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extAdminData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extAdminData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extAdminData.EntityData.Children = types.NewOrderedMap()
    extAdminData.EntityData.Leafs = types.NewOrderedMap()
    extAdminData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extAdminData.Entry})

    extAdminData.EntityData.YListKeys = []string {}

    return &(extAdminData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv
// List of Optional TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Opt TLV. The type is MplsTeOptTlv.
    MplsteLinkOptTlvType interface{}

    // Length of Opt TLV. The type is interface{} with range: 0..65535.
    MplsteLinkOptTlvLen interface{}

    // Value of Opt TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue.
    MplsteLinkOptTlvValue []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
}

func (mplsteLinkOptTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlv.EntityData.YFilter = mplsteLinkOptTlv.YFilter
    mplsteLinkOptTlv.EntityData.YangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlv.EntityData.ParentYangName = "mpls-te-link"
    mplsteLinkOptTlv.EntityData.SegmentPath = "mplste-link-opt-tlv"
    mplsteLinkOptTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlv.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Children.Append("mplste-link-opt-tlv-value", types.YChild{"MplsteLinkOptTlvValue", nil})
    for i := range mplsteLinkOptTlv.MplsteLinkOptTlvValue {
        mplsteLinkOptTlv.EntityData.Children.Append(types.GetSegmentPath(mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]), types.YChild{"MplsteLinkOptTlvValue", mplsteLinkOptTlv.MplsteLinkOptTlvValue[i]})
    }
    mplsteLinkOptTlv.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-type", types.YLeaf{"MplsteLinkOptTlvType", mplsteLinkOptTlv.MplsteLinkOptTlvType})
    mplsteLinkOptTlv.EntityData.Leafs.Append("mplste-link-opt-tlv-len", types.YLeaf{"MplsteLinkOptTlvLen", mplsteLinkOptTlv.MplsteLinkOptTlvLen})

    mplsteLinkOptTlv.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue
// Value of Opt TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OpaqueTLVType. The type is MplsTeOptTlv.
    OpaqueTlvType interface{}

    // Value of Bandwidth Constraints TLV.
    BctlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue

    // Value of SRLG TLV.
    SrlgtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue

    // Value of IXCD TLV.
    IxcdtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue

    // Value of Uni Delay TLV.
    UnidtlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
}

func (mplsteLinkOptTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue) GetEntityData() *types.CommonEntityData {
    mplsteLinkOptTlvValue.EntityData.YFilter = mplsteLinkOptTlvValue.YFilter
    mplsteLinkOptTlvValue.EntityData.YangName = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkOptTlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv"
    mplsteLinkOptTlvValue.EntityData.SegmentPath = "mplste-link-opt-tlv-value"
    mplsteLinkOptTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkOptTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkOptTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkOptTlvValue.EntityData.Children = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Children.Append("bctlv-value", types.YChild{"BctlvValue", &mplsteLinkOptTlvValue.BctlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("srlgtlv-value", types.YChild{"SrlgtlvValue", &mplsteLinkOptTlvValue.SrlgtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("ixcdtlv-value", types.YChild{"IxcdtlvValue", &mplsteLinkOptTlvValue.IxcdtlvValue})
    mplsteLinkOptTlvValue.EntityData.Children.Append("unidtlv-value", types.YChild{"UnidtlvValue", &mplsteLinkOptTlvValue.UnidtlvValue})
    mplsteLinkOptTlvValue.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkOptTlvValue.EntityData.Leafs.Append("opaque-tlv-type", types.YLeaf{"OpaqueTlvType", mplsteLinkOptTlvValue.OpaqueTlvType})

    mplsteLinkOptTlvValue.EntityData.YListKeys = []string {}

    return &(mplsteLinkOptTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue
// Value of Bandwidth Constraints TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allocation Model ID. The type is interface{} with range: 0..255.
    ModelId interface{}

    // Number of BC TLVs. The type is interface{} with range: 0..4294967295.
    NumBCs interface{}

    // Value of BC TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth.
    MplsteLinkBcBandwidth []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
}

func (bctlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue) GetEntityData() *types.CommonEntityData {
    bctlvValue.EntityData.YFilter = bctlvValue.YFilter
    bctlvValue.EntityData.YangName = "bctlv-value"
    bctlvValue.EntityData.BundleName = "cisco_ios_xr"
    bctlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    bctlvValue.EntityData.SegmentPath = "bctlv-value"
    bctlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bctlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bctlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bctlvValue.EntityData.Children = types.NewOrderedMap()
    bctlvValue.EntityData.Children.Append("mplste-link-bc-bandwidth", types.YChild{"MplsteLinkBcBandwidth", nil})
    for i := range bctlvValue.MplsteLinkBcBandwidth {
        bctlvValue.EntityData.Children.Append(types.GetSegmentPath(bctlvValue.MplsteLinkBcBandwidth[i]), types.YChild{"MplsteLinkBcBandwidth", bctlvValue.MplsteLinkBcBandwidth[i]})
    }
    bctlvValue.EntityData.Leafs = types.NewOrderedMap()
    bctlvValue.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bctlvValue.ModelId})
    bctlvValue.EntityData.Leafs.Append("num-b-cs", types.YLeaf{"NumBCs", bctlvValue.NumBCs})

    bctlvValue.EntityData.YListKeys = []string {}

    return &(bctlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth
// Value of BC TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (mplsteLinkBcBandwidth *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_BctlvValue_MplsteLinkBcBandwidth) GetEntityData() *types.CommonEntityData {
    mplsteLinkBcBandwidth.EntityData.YFilter = mplsteLinkBcBandwidth.YFilter
    mplsteLinkBcBandwidth.EntityData.YangName = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkBcBandwidth.EntityData.ParentYangName = "bctlv-value"
    mplsteLinkBcBandwidth.EntityData.SegmentPath = "mplste-link-bc-bandwidth"
    mplsteLinkBcBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkBcBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkBcBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkBcBandwidth.EntityData.Children = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkBcBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkBcBandwidth.Entry})

    mplsteLinkBcBandwidth.EntityData.YListKeys = []string {}

    return &(mplsteLinkBcBandwidth.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of SRLG TLV. The type is interface{} with range: 0..4294967295.
    SrlgLen interface{}

    // Number of SRLG TLVs. The type is interface{} with range: 0..4294967295.
    NumSrlGs interface{}

    // Value of SRLG TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData.
    MplsteLinkSrlgData []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
}

func (srlgtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue) GetEntityData() *types.CommonEntityData {
    srlgtlvValue.EntityData.YFilter = srlgtlvValue.YFilter
    srlgtlvValue.EntityData.YangName = "srlgtlv-value"
    srlgtlvValue.EntityData.BundleName = "cisco_ios_xr"
    srlgtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    srlgtlvValue.EntityData.SegmentPath = "srlgtlv-value"
    srlgtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgtlvValue.EntityData.Children = types.NewOrderedMap()
    srlgtlvValue.EntityData.Children.Append("mplste-link-srlg-data", types.YChild{"MplsteLinkSrlgData", nil})
    for i := range srlgtlvValue.MplsteLinkSrlgData {
        srlgtlvValue.EntityData.Children.Append(types.GetSegmentPath(srlgtlvValue.MplsteLinkSrlgData[i]), types.YChild{"MplsteLinkSrlgData", srlgtlvValue.MplsteLinkSrlgData[i]})
    }
    srlgtlvValue.EntityData.Leafs = types.NewOrderedMap()
    srlgtlvValue.EntityData.Leafs.Append("srlg-len", types.YLeaf{"SrlgLen", srlgtlvValue.SrlgLen})
    srlgtlvValue.EntityData.Leafs.Append("num-srl-gs", types.YLeaf{"NumSrlGs", srlgtlvValue.NumSrlGs})

    srlgtlvValue.EntityData.YListKeys = []string {}

    return &(srlgtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData
// Value of SRLG TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (mplsteLinkSrlgData *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_SrlgtlvValue_MplsteLinkSrlgData) GetEntityData() *types.CommonEntityData {
    mplsteLinkSrlgData.EntityData.YFilter = mplsteLinkSrlgData.YFilter
    mplsteLinkSrlgData.EntityData.YangName = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.BundleName = "cisco_ios_xr"
    mplsteLinkSrlgData.EntityData.ParentYangName = "srlgtlv-value"
    mplsteLinkSrlgData.EntityData.SegmentPath = "mplste-link-srlg-data"
    mplsteLinkSrlgData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsteLinkSrlgData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsteLinkSrlgData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsteLinkSrlgData.EntityData.Children = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs = types.NewOrderedMap()
    mplsteLinkSrlgData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mplsteLinkSrlgData.Entry})

    mplsteLinkSrlgData.EntityData.YListKeys = []string {}

    return &(mplsteLinkSrlgData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue
// Value of IXCD TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SCap. The type is interface{} with range: 0..255.
    SwitchingCap interface{}

    // Rile LenCode. The type is interface{} with range: 0..255.
    RileLenCode interface{}

    // Fixed SCSI count. The type is interface{} with range: 0..4294967295.
    FixedScsiCount interface{}

    // Flexible SCSI count. The type is interface{} with range: 0..4294967295.
    FlexScsiCount interface{}

    // Switching Cap type.
    IxcdSwitchingCapType Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType

    // Max LSP bandwidth array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
}

func (ixcdtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue) GetEntityData() *types.CommonEntityData {
    ixcdtlvValue.EntityData.YFilter = ixcdtlvValue.YFilter
    ixcdtlvValue.EntityData.YangName = "ixcdtlv-value"
    ixcdtlvValue.EntityData.BundleName = "cisco_ios_xr"
    ixcdtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    ixcdtlvValue.EntityData.SegmentPath = "ixcdtlv-value"
    ixcdtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdtlvValue.EntityData.Children = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Children.Append("ixcd-switching-cap-type", types.YChild{"IxcdSwitchingCapType", &ixcdtlvValue.IxcdSwitchingCapType})
    ixcdtlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range ixcdtlvValue.MaxLspbw {
        ixcdtlvValue.EntityData.Children.Append(types.GetSegmentPath(ixcdtlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", ixcdtlvValue.MaxLspbw[i]})
    }
    ixcdtlvValue.EntityData.Leafs = types.NewOrderedMap()
    ixcdtlvValue.EntityData.Leafs.Append("switching-cap", types.YLeaf{"SwitchingCap", ixcdtlvValue.SwitchingCap})
    ixcdtlvValue.EntityData.Leafs.Append("rile-len-code", types.YLeaf{"RileLenCode", ixcdtlvValue.RileLenCode})
    ixcdtlvValue.EntityData.Leafs.Append("fixed-scsi-count", types.YLeaf{"FixedScsiCount", ixcdtlvValue.FixedScsiCount})
    ixcdtlvValue.EntityData.Leafs.Append("flex-scsi-count", types.YLeaf{"FlexScsiCount", ixcdtlvValue.FlexScsiCount})

    ixcdtlvValue.EntityData.YListKeys = []string {}

    return &(ixcdtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType
// Switching Cap type
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SwitchingCapType. The type is interface{} with range: 0..255.
    SwitchingCapType interface{}

    // IXCD PSC information.
    IxcdpscInfo Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo

    // Sub TLVs.
    IxcdbwSubTlv Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
}

func (ixcdSwitchingCapType *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType) GetEntityData() *types.CommonEntityData {
    ixcdSwitchingCapType.EntityData.YFilter = ixcdSwitchingCapType.YFilter
    ixcdSwitchingCapType.EntityData.YangName = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.BundleName = "cisco_ios_xr"
    ixcdSwitchingCapType.EntityData.ParentYangName = "ixcdtlv-value"
    ixcdSwitchingCapType.EntityData.SegmentPath = "ixcd-switching-cap-type"
    ixcdSwitchingCapType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdSwitchingCapType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdSwitchingCapType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdSwitchingCapType.EntityData.Children = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdpsc-info", types.YChild{"IxcdpscInfo", &ixcdSwitchingCapType.IxcdpscInfo})
    ixcdSwitchingCapType.EntityData.Children.Append("ixcdbw-sub-tlv", types.YChild{"IxcdbwSubTlv", &ixcdSwitchingCapType.IxcdbwSubTlv})
    ixcdSwitchingCapType.EntityData.Leafs = types.NewOrderedMap()
    ixcdSwitchingCapType.EntityData.Leafs.Append("switching-cap-type", types.YLeaf{"SwitchingCapType", ixcdSwitchingCapType.SwitchingCapType})

    ixcdSwitchingCapType.EntityData.YListKeys = []string {}

    return &(ixcdSwitchingCapType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo
// IXCD PSC information
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Min LSP bandwidth. The type is interface{} with range:
    // 0..18446744073709551615.
    MinLspBandwidth interface{}

    // Interface MTU. The type is interface{} with range: 0..65535.
    PscInterfaceMtu interface{}
}

func (ixcdpscInfo *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdpscInfo) GetEntityData() *types.CommonEntityData {
    ixcdpscInfo.EntityData.YFilter = ixcdpscInfo.YFilter
    ixcdpscInfo.EntityData.YangName = "ixcdpsc-info"
    ixcdpscInfo.EntityData.BundleName = "cisco_ios_xr"
    ixcdpscInfo.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdpscInfo.EntityData.SegmentPath = "ixcdpsc-info"
    ixcdpscInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdpscInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdpscInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdpscInfo.EntityData.Children = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs = types.NewOrderedMap()
    ixcdpscInfo.EntityData.Leafs.Append("min-lsp-bandwidth", types.YLeaf{"MinLspBandwidth", ixcdpscInfo.MinLspBandwidth})
    ixcdpscInfo.EntityData.Leafs.Append("psc-interface-mtu", types.YLeaf{"PscInterfaceMtu", ixcdpscInfo.PscInterfaceMtu})

    ixcdpscInfo.EntityData.YListKeys = []string {}

    return &(ixcdpscInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv
// Sub TLVs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of sub tlvs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv.
    ArrBwSubTlv []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
}

func (ixcdbwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv) GetEntityData() *types.CommonEntityData {
    ixcdbwSubTlv.EntityData.YFilter = ixcdbwSubTlv.YFilter
    ixcdbwSubTlv.EntityData.YangName = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    ixcdbwSubTlv.EntityData.ParentYangName = "ixcd-switching-cap-type"
    ixcdbwSubTlv.EntityData.SegmentPath = "ixcdbw-sub-tlv"
    ixcdbwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ixcdbwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ixcdbwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ixcdbwSubTlv.EntityData.Children = types.NewOrderedMap()
    ixcdbwSubTlv.EntityData.Children.Append("arr-bw-sub-tlv", types.YChild{"ArrBwSubTlv", nil})
    for i := range ixcdbwSubTlv.ArrBwSubTlv {
        ixcdbwSubTlv.EntityData.Children.Append(types.GetSegmentPath(ixcdbwSubTlv.ArrBwSubTlv[i]), types.YChild{"ArrBwSubTlv", ixcdbwSubTlv.ArrBwSubTlv[i]})
    }
    ixcdbwSubTlv.EntityData.Leafs = types.NewOrderedMap()

    ixcdbwSubTlv.EntityData.YListKeys = []string {}

    return &(ixcdbwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv
// Array of sub tlvs
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvType interface{}

    // Length of BW Sub TLV. The type is interface{} with range: 0..65535.
    BwSubTlvLength interface{}

    // Value of BW Sub TLV.
    BwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
}

func (arrBwSubTlv *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv) GetEntityData() *types.CommonEntityData {
    arrBwSubTlv.EntityData.YFilter = arrBwSubTlv.YFilter
    arrBwSubTlv.EntityData.YangName = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.BundleName = "cisco_ios_xr"
    arrBwSubTlv.EntityData.ParentYangName = "ixcdbw-sub-tlv"
    arrBwSubTlv.EntityData.SegmentPath = "arr-bw-sub-tlv"
    arrBwSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrBwSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrBwSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrBwSubTlv.EntityData.Children = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Children.Append("bw-sub-tlv-value", types.YChild{"BwSubTlvValue", &arrBwSubTlv.BwSubTlvValue})
    arrBwSubTlv.EntityData.Leafs = types.NewOrderedMap()
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-type", types.YLeaf{"BwSubTlvType", arrBwSubTlv.BwSubTlvType})
    arrBwSubTlv.EntityData.Leafs.Append("bw-sub-tlv-length", types.YLeaf{"BwSubTlvLength", arrBwSubTlv.BwSubTlvLength})

    arrBwSubTlv.EntityData.YListKeys = []string {}

    return &(arrBwSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue
// Value of BW Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IXCDBWSubTLVType. The type is interface{} with range: 0..65535.
    IxcdbwSubTlvType interface{}

    // Value of Fixed Sub TLV.
    FixedBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue

    // Value of Flex Sub TLV.
    FlexBwSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
}

func (bwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue) GetEntityData() *types.CommonEntityData {
    bwSubTlvValue.EntityData.YFilter = bwSubTlvValue.YFilter
    bwSubTlvValue.EntityData.YangName = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    bwSubTlvValue.EntityData.ParentYangName = "arr-bw-sub-tlv"
    bwSubTlvValue.EntityData.SegmentPath = "bw-sub-tlv-value"
    bwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Children.Append("fixed-bw-sub-tlv-value", types.YChild{"FixedBwSubTlvValue", &bwSubTlvValue.FixedBwSubTlvValue})
    bwSubTlvValue.EntityData.Children.Append("flex-bw-sub-tlv-value", types.YChild{"FlexBwSubTlvValue", &bwSubTlvValue.FlexBwSubTlvValue})
    bwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    bwSubTlvValue.EntityData.Leafs.Append("ixcdbw-sub-tlv-type", types.YLeaf{"IxcdbwSubTlvType", bwSubTlvValue.IxcdbwSubTlvType})

    bwSubTlvValue.EntityData.YListKeys = []string {}

    return &(bwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of Fixed Sub TLV.
    FixedSubTlvValue Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue

    // Array of Unres Oduj Prio. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio.
    UnresOdujPrio []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
}

func (fixedBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedBwSubTlvValue.EntityData.YFilter = fixedBwSubTlvValue.YFilter
    fixedBwSubTlvValue.EntityData.YangName = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.SegmentPath = "fixed-bw-sub-tlv-value"
    fixedBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedBwSubTlvValue.EntityData.Children.Append("fixed-sub-tlv-value", types.YChild{"FixedSubTlvValue", &fixedBwSubTlvValue.FixedSubTlvValue})
    fixedBwSubTlvValue.EntityData.Children.Append("unres-oduj-prio", types.YChild{"UnresOdujPrio", nil})
    for i := range fixedBwSubTlvValue.UnresOdujPrio {
        fixedBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(fixedBwSubTlvValue.UnresOdujPrio[i]), types.YChild{"UnresOdujPrio", fixedBwSubTlvValue.UnresOdujPrio[i]})
    }
    fixedBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    fixedBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue
// Value of Fixed Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (fixedSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_FixedSubTlvValue) GetEntityData() *types.CommonEntityData {
    fixedSubTlvValue.EntityData.YFilter = fixedSubTlvValue.YFilter
    fixedSubTlvValue.EntityData.YangName = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    fixedSubTlvValue.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    fixedSubTlvValue.EntityData.SegmentPath = "fixed-sub-tlv-value"
    fixedSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fixedSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fixedSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fixedSubTlvValue.EntityData.Children = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs = types.NewOrderedMap()
    fixedSubTlvValue.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", fixedSubTlvValue.SignalType})
    fixedSubTlvValue.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", fixedSubTlvValue.NumStages})
    fixedSubTlvValue.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", fixedSubTlvValue.Tbit})
    fixedSubTlvValue.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", fixedSubTlvValue.Sbit})
    fixedSubTlvValue.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", fixedSubTlvValue.Tsg})
    fixedSubTlvValue.EntityData.Leafs.Append("res", types.YLeaf{"Res", fixedSubTlvValue.Res})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", fixedSubTlvValue.PriorityBit0})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", fixedSubTlvValue.PriorityBit1})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", fixedSubTlvValue.PriorityBit2})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", fixedSubTlvValue.PriorityBit3})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", fixedSubTlvValue.PriorityBit4})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", fixedSubTlvValue.PriorityBit5})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", fixedSubTlvValue.PriorityBit6})
    fixedSubTlvValue.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", fixedSubTlvValue.PriorityBit7})
    fixedSubTlvValue.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", fixedSubTlvValue.Stage})

    fixedSubTlvValue.EntityData.YListKeys = []string {}

    return &(fixedSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio
// Array of Unres Oduj Prio
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (unresOdujPrio *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FixedBwSubTlvValue_UnresOdujPrio) GetEntityData() *types.CommonEntityData {
    unresOdujPrio.EntityData.YFilter = unresOdujPrio.YFilter
    unresOdujPrio.EntityData.YangName = "unres-oduj-prio"
    unresOdujPrio.EntityData.BundleName = "cisco_ios_xr"
    unresOdujPrio.EntityData.ParentYangName = "fixed-bw-sub-tlv-value"
    unresOdujPrio.EntityData.SegmentPath = "unres-oduj-prio"
    unresOdujPrio.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresOdujPrio.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresOdujPrio.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresOdujPrio.EntityData.Children = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs = types.NewOrderedMap()
    unresOdujPrio.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresOdujPrio.Entry})

    unresOdujPrio.EntityData.YListKeys = []string {}

    return &(unresOdujPrio.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue
// Value of Flex Sub TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex Sub TLV Value.
    FlexSubTlvValueCommon Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon

    // Array of Unres LSP BW. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw.
    UnresLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw

    // Max LSP BW Array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw.
    MaxLspbw []*Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
}

func (flexBwSubTlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue) GetEntityData() *types.CommonEntityData {
    flexBwSubTlvValue.EntityData.YFilter = flexBwSubTlvValue.YFilter
    flexBwSubTlvValue.EntityData.YangName = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.BundleName = "cisco_ios_xr"
    flexBwSubTlvValue.EntityData.ParentYangName = "bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.SegmentPath = "flex-bw-sub-tlv-value"
    flexBwSubTlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexBwSubTlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexBwSubTlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexBwSubTlvValue.EntityData.Children = types.NewOrderedMap()
    flexBwSubTlvValue.EntityData.Children.Append("flex-sub-tlv-value-common", types.YChild{"FlexSubTlvValueCommon", &flexBwSubTlvValue.FlexSubTlvValueCommon})
    flexBwSubTlvValue.EntityData.Children.Append("unres-lspbw", types.YChild{"UnresLspbw", nil})
    for i := range flexBwSubTlvValue.UnresLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.UnresLspbw[i]), types.YChild{"UnresLspbw", flexBwSubTlvValue.UnresLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Children.Append("max-lspbw", types.YChild{"MaxLspbw", nil})
    for i := range flexBwSubTlvValue.MaxLspbw {
        flexBwSubTlvValue.EntityData.Children.Append(types.GetSegmentPath(flexBwSubTlvValue.MaxLspbw[i]), types.YChild{"MaxLspbw", flexBwSubTlvValue.MaxLspbw[i]})
    }
    flexBwSubTlvValue.EntityData.Leafs = types.NewOrderedMap()

    flexBwSubTlvValue.EntityData.YListKeys = []string {}

    return &(flexBwSubTlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon
// Flex Sub TLV Value
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal Type. The type is interface{} with range: 0..255.
    SignalType interface{}

    // Number of stages. The type is interface{} with range: 0..255.
    NumStages interface{}

    // T Bit. The type is interface{} with range: 0..255.
    Tbit interface{}

    // S Bit. The type is interface{} with range: 0..255.
    Sbit interface{}

    // TSG. The type is interface{} with range: 0..255.
    Tsg interface{}

    // Res. The type is interface{} with range: 0..255.
    Res interface{}

    // Priority 0. The type is interface{} with range: 0..255.
    PriorityBit0 interface{}

    // Priority 1. The type is interface{} with range: 0..255.
    PriorityBit1 interface{}

    // Priority 2. The type is interface{} with range: 0..255.
    PriorityBit2 interface{}

    // Priority 3. The type is interface{} with range: 0..255.
    PriorityBit3 interface{}

    // Priority 4. The type is interface{} with range: 0..255.
    PriorityBit4 interface{}

    // Priority 5. The type is interface{} with range: 0..255.
    PriorityBit5 interface{}

    // Priority 6. The type is interface{} with range: 0..255.
    PriorityBit6 interface{}

    // Priority 7. The type is interface{} with range: 0..255.
    PriorityBit7 interface{}

    // Array of Stages. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Stage interface{}
}

func (flexSubTlvValueCommon *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_FlexSubTlvValueCommon) GetEntityData() *types.CommonEntityData {
    flexSubTlvValueCommon.EntityData.YFilter = flexSubTlvValueCommon.YFilter
    flexSubTlvValueCommon.EntityData.YangName = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.BundleName = "cisco_ios_xr"
    flexSubTlvValueCommon.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    flexSubTlvValueCommon.EntityData.SegmentPath = "flex-sub-tlv-value-common"
    flexSubTlvValueCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexSubTlvValueCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexSubTlvValueCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexSubTlvValueCommon.EntityData.Children = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs = types.NewOrderedMap()
    flexSubTlvValueCommon.EntityData.Leafs.Append("signal-type", types.YLeaf{"SignalType", flexSubTlvValueCommon.SignalType})
    flexSubTlvValueCommon.EntityData.Leafs.Append("num-stages", types.YLeaf{"NumStages", flexSubTlvValueCommon.NumStages})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tbit", types.YLeaf{"Tbit", flexSubTlvValueCommon.Tbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", flexSubTlvValueCommon.Sbit})
    flexSubTlvValueCommon.EntityData.Leafs.Append("tsg", types.YLeaf{"Tsg", flexSubTlvValueCommon.Tsg})
    flexSubTlvValueCommon.EntityData.Leafs.Append("res", types.YLeaf{"Res", flexSubTlvValueCommon.Res})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit0", types.YLeaf{"PriorityBit0", flexSubTlvValueCommon.PriorityBit0})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit1", types.YLeaf{"PriorityBit1", flexSubTlvValueCommon.PriorityBit1})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit2", types.YLeaf{"PriorityBit2", flexSubTlvValueCommon.PriorityBit2})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit3", types.YLeaf{"PriorityBit3", flexSubTlvValueCommon.PriorityBit3})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit4", types.YLeaf{"PriorityBit4", flexSubTlvValueCommon.PriorityBit4})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit5", types.YLeaf{"PriorityBit5", flexSubTlvValueCommon.PriorityBit5})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit6", types.YLeaf{"PriorityBit6", flexSubTlvValueCommon.PriorityBit6})
    flexSubTlvValueCommon.EntityData.Leafs.Append("priority-bit7", types.YLeaf{"PriorityBit7", flexSubTlvValueCommon.PriorityBit7})
    flexSubTlvValueCommon.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", flexSubTlvValueCommon.Stage})

    flexSubTlvValueCommon.EntityData.YListKeys = []string {}

    return &(flexSubTlvValueCommon.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw
// Array of Unres LSP BW
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (unresLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_UnresLspbw) GetEntityData() *types.CommonEntityData {
    unresLspbw.EntityData.YFilter = unresLspbw.YFilter
    unresLspbw.EntityData.YangName = "unres-lspbw"
    unresLspbw.EntityData.BundleName = "cisco_ios_xr"
    unresLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    unresLspbw.EntityData.SegmentPath = "unres-lspbw"
    unresLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unresLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unresLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unresLspbw.EntityData.Children = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs = types.NewOrderedMap()
    unresLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", unresLspbw.Entry})

    unresLspbw.EntityData.YListKeys = []string {}

    return &(unresLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw
// Max LSP BW Array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_IxcdSwitchingCapType_IxcdbwSubTlv_ArrBwSubTlv_BwSubTlvValue_FlexBwSubTlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "flex-bw-sub-tlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw
// Max LSP bandwidth array
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Entry interface{}
}

func (maxLspbw *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_IxcdtlvValue_MaxLspbw) GetEntityData() *types.CommonEntityData {
    maxLspbw.EntityData.YFilter = maxLspbw.YFilter
    maxLspbw.EntityData.YangName = "max-lspbw"
    maxLspbw.EntityData.BundleName = "cisco_ios_xr"
    maxLspbw.EntityData.ParentYangName = "ixcdtlv-value"
    maxLspbw.EntityData.SegmentPath = "max-lspbw"
    maxLspbw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLspbw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLspbw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLspbw.EntityData.Children = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs = types.NewOrderedMap()
    maxLspbw.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", maxLspbw.Entry})

    maxLspbw.EntityData.YListKeys = []string {}

    return &(maxLspbw.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue
// Value of Uni Delay TLV
type Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uni Dir Delay. The type is interface{} with range: 0..4294967295.
    UniDirDelay interface{}
}

func (unidtlvValue *Ospf_Processes_Process_DefaultVrf_MplsTe_MplsTeFragments_MplsTeFragment_MplsTeFragment_MplsTeLink_MplsteLinkOptTlv_MplsteLinkOptTlvValue_UnidtlvValue) GetEntityData() *types.CommonEntityData {
    unidtlvValue.EntityData.YFilter = unidtlvValue.YFilter
    unidtlvValue.EntityData.YangName = "unidtlv-value"
    unidtlvValue.EntityData.BundleName = "cisco_ios_xr"
    unidtlvValue.EntityData.ParentYangName = "mplste-link-opt-tlv-value"
    unidtlvValue.EntityData.SegmentPath = "unidtlv-value"
    unidtlvValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unidtlvValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unidtlvValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unidtlvValue.EntityData.Children = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs = types.NewOrderedMap()
    unidtlvValue.EntityData.Leafs.Append("uni-dir-delay", types.YLeaf{"UniDirDelay", unidtlvValue.UniDirDelay})

    unidtlvValue.EntityData.YListKeys = []string {}

    return &(unidtlvValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics
// Container for Statistics
type Ospf_Processes_Process_DefaultVrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF SPF statistics.
    SpfStats Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats

    // Stats concerning RIB route updates using the Batching API.
    RibBatchStats Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats

    // OSPF ISSU statistics.
    IssuStats Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats

    // OSPF RIB thread statistics.
    RibThreadStats Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats

    // OSPF NSR packet library statistics.
    NsrPlStats Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats

    // OSPF NSR thread statistics.
    NsrStats Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats

    // OSPF fast-reroute statistics.
    FrrStats Ospf_Processes_Process_DefaultVrf_Statistics_FrrStats

    // OSPF TE IO statistics.
    TeStats Ospf_Processes_Process_DefaultVrf_Statistics_TeStats

    // OSPF Protocol statistics.
    ProtocolStats Ospf_Processes_Process_DefaultVrf_Statistics_ProtocolStats

    // OSPF RAW IO statistics.
    RawIoStats Ospf_Processes_Process_DefaultVrf_Statistics_RawIoStats

    // Statistics innformation Interface table.
    InterfaceStatsEntries Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries
}

func (statistics *Ospf_Processes_Process_DefaultVrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "default-vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("spf-stats", types.YChild{"SpfStats", &statistics.SpfStats})
    statistics.EntityData.Children.Append("rib-batch-stats", types.YChild{"RibBatchStats", &statistics.RibBatchStats})
    statistics.EntityData.Children.Append("issu-stats", types.YChild{"IssuStats", &statistics.IssuStats})
    statistics.EntityData.Children.Append("rib-thread-stats", types.YChild{"RibThreadStats", &statistics.RibThreadStats})
    statistics.EntityData.Children.Append("nsr-pl-stats", types.YChild{"NsrPlStats", &statistics.NsrPlStats})
    statistics.EntityData.Children.Append("nsr-stats", types.YChild{"NsrStats", &statistics.NsrStats})
    statistics.EntityData.Children.Append("frr-stats", types.YChild{"FrrStats", &statistics.FrrStats})
    statistics.EntityData.Children.Append("te-stats", types.YChild{"TeStats", &statistics.TeStats})
    statistics.EntityData.Children.Append("protocol-stats", types.YChild{"ProtocolStats", &statistics.ProtocolStats})
    statistics.EntityData.Children.Append("raw-io-stats", types.YChild{"RawIoStats", &statistics.RawIoStats})
    statistics.EntityData.Children.Append("interface-stats-entries", types.YChild{"InterfaceStatsEntries", &statistics.InterfaceStatsEntries})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats
// OSPF SPF statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf header.
    SpfHeader Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader

    // os runtime. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime.
    OsRuntime []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime

    // os sum runtime. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime.
    OsSumRuntime []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime

    // os ex runtime. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime.
    OsExRuntime []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime

    // runtime. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime.
    Runtime []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime
}

func (spfStats *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats) GetEntityData() *types.CommonEntityData {
    spfStats.EntityData.YFilter = spfStats.YFilter
    spfStats.EntityData.YangName = "spf-stats"
    spfStats.EntityData.BundleName = "cisco_ios_xr"
    spfStats.EntityData.ParentYangName = "statistics"
    spfStats.EntityData.SegmentPath = "spf-stats"
    spfStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStats.EntityData.Children = types.NewOrderedMap()
    spfStats.EntityData.Children.Append("spf-header", types.YChild{"SpfHeader", &spfStats.SpfHeader})
    spfStats.EntityData.Children.Append("os-runtime", types.YChild{"OsRuntime", nil})
    for i := range spfStats.OsRuntime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.OsRuntime[i]), types.YChild{"OsRuntime", spfStats.OsRuntime[i]})
    }
    spfStats.EntityData.Children.Append("os-sum-runtime", types.YChild{"OsSumRuntime", nil})
    for i := range spfStats.OsSumRuntime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.OsSumRuntime[i]), types.YChild{"OsSumRuntime", spfStats.OsSumRuntime[i]})
    }
    spfStats.EntityData.Children.Append("os-ex-runtime", types.YChild{"OsExRuntime", nil})
    for i := range spfStats.OsExRuntime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.OsExRuntime[i]), types.YChild{"OsExRuntime", spfStats.OsExRuntime[i]})
    }
    spfStats.EntityData.Children.Append("runtime", types.YChild{"Runtime", nil})
    for i := range spfStats.Runtime {
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.Runtime[i]), types.YChild{"Runtime", spfStats.Runtime[i]})
    }
    spfStats.EntityData.Leafs = types.NewOrderedMap()

    spfStats.EntityData.YListKeys = []string {}

    return &(spfStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader
// spf header
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // spf count. The type is interface{} with range: 0..4294967295.
    SpfCount interface{}

    // area summ. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader_AreaSumm.
    AreaSumm []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader_AreaSumm
}

func (spfHeader *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader) GetEntityData() *types.CommonEntityData {
    spfHeader.EntityData.YFilter = spfHeader.YFilter
    spfHeader.EntityData.YangName = "spf-header"
    spfHeader.EntityData.BundleName = "cisco_ios_xr"
    spfHeader.EntityData.ParentYangName = "spf-stats"
    spfHeader.EntityData.SegmentPath = "spf-header"
    spfHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfHeader.EntityData.Children = types.NewOrderedMap()
    spfHeader.EntityData.Children.Append("area-summ", types.YChild{"AreaSumm", nil})
    for i := range spfHeader.AreaSumm {
        spfHeader.EntityData.Children.Append(types.GetSegmentPath(spfHeader.AreaSumm[i]), types.YChild{"AreaSumm", spfHeader.AreaSumm[i]})
    }
    spfHeader.EntityData.Leafs = types.NewOrderedMap()
    spfHeader.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", spfHeader.RouterId})
    spfHeader.EntityData.Leafs.Append("spf-count", types.YLeaf{"SpfCount", spfHeader.SpfCount})

    spfHeader.EntityData.YListKeys = []string {}

    return &(spfHeader.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader_AreaSumm
// area summ
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader_AreaSumm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // spf count. The type is interface{} with range: 0..4294967295.
    SpfCount interface{}
}

func (areaSumm *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_SpfHeader_AreaSumm) GetEntityData() *types.CommonEntityData {
    areaSumm.EntityData.YFilter = areaSumm.YFilter
    areaSumm.EntityData.YangName = "area-summ"
    areaSumm.EntityData.BundleName = "cisco_ios_xr"
    areaSumm.EntityData.ParentYangName = "spf-header"
    areaSumm.EntityData.SegmentPath = "area-summ"
    areaSumm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaSumm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaSumm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaSumm.EntityData.Children = types.NewOrderedMap()
    areaSumm.EntityData.Leafs = types.NewOrderedMap()
    areaSumm.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaSumm.AreaId})
    areaSumm.EntityData.Leafs.Append("spf-count", types.YLeaf{"SpfCount", areaSumm.SpfCount})

    areaSumm.EntityData.YListKeys = []string {}

    return &(areaSumm.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime
// os runtime
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // si area id str. The type is string.
    SiAreaIdStr interface{}

    // si change flags. The type is interface{} with range: 0..65535.
    SiChangeFlags interface{}

    // si start time.
    SiStartTime Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiStartTime

    // si duration.
    SiDuration Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiDuration
}

func (osRuntime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime) GetEntityData() *types.CommonEntityData {
    osRuntime.EntityData.YFilter = osRuntime.YFilter
    osRuntime.EntityData.YangName = "os-runtime"
    osRuntime.EntityData.BundleName = "cisco_ios_xr"
    osRuntime.EntityData.ParentYangName = "spf-stats"
    osRuntime.EntityData.SegmentPath = "os-runtime"
    osRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    osRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    osRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    osRuntime.EntityData.Children = types.NewOrderedMap()
    osRuntime.EntityData.Children.Append("si-start-time", types.YChild{"SiStartTime", &osRuntime.SiStartTime})
    osRuntime.EntityData.Children.Append("si-duration", types.YChild{"SiDuration", &osRuntime.SiDuration})
    osRuntime.EntityData.Leafs = types.NewOrderedMap()
    osRuntime.EntityData.Leafs.Append("si-area-id-str", types.YLeaf{"SiAreaIdStr", osRuntime.SiAreaIdStr})
    osRuntime.EntityData.Leafs.Append("si-change-flags", types.YLeaf{"SiChangeFlags", osRuntime.SiChangeFlags})

    osRuntime.EntityData.YListKeys = []string {}

    return &(osRuntime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiStartTime
// si start time
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiStartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (siStartTime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiStartTime) GetEntityData() *types.CommonEntityData {
    siStartTime.EntityData.YFilter = siStartTime.YFilter
    siStartTime.EntityData.YangName = "si-start-time"
    siStartTime.EntityData.BundleName = "cisco_ios_xr"
    siStartTime.EntityData.ParentYangName = "os-runtime"
    siStartTime.EntityData.SegmentPath = "si-start-time"
    siStartTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siStartTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siStartTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siStartTime.EntityData.Children = types.NewOrderedMap()
    siStartTime.EntityData.Leafs = types.NewOrderedMap()
    siStartTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", siStartTime.Second})
    siStartTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", siStartTime.Nanosecond})

    siStartTime.EntityData.YListKeys = []string {}

    return &(siStartTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiDuration
// si duration
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiDuration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (siDuration *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsRuntime_SiDuration) GetEntityData() *types.CommonEntityData {
    siDuration.EntityData.YFilter = siDuration.YFilter
    siDuration.EntityData.YangName = "si-duration"
    siDuration.EntityData.BundleName = "cisco_ios_xr"
    siDuration.EntityData.ParentYangName = "os-runtime"
    siDuration.EntityData.SegmentPath = "si-duration"
    siDuration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siDuration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siDuration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siDuration.EntityData.Children = types.NewOrderedMap()
    siDuration.EntityData.Leafs = types.NewOrderedMap()
    siDuration.EntityData.Leafs.Append("second", types.YLeaf{"Second", siDuration.Second})
    siDuration.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", siDuration.Nanosecond})

    siDuration.EntityData.YListKeys = []string {}

    return &(siDuration.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime
// os sum runtime
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sp adv rtr id. The type is interface{} with range: 0..4294967295.
    SpAdvRtrId interface{}

    // sp dest count. The type is interface{} with range: 0..4294967295.
    SpDestCount interface{}

    // sp dest addr. The type is interface{} with range: 0..4294967295.
    SpDestAddr interface{}

    // sp start time.
    SpStartTime Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpStartTime

    // sp duration.
    SpDuration Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpDuration
}

func (osSumRuntime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime) GetEntityData() *types.CommonEntityData {
    osSumRuntime.EntityData.YFilter = osSumRuntime.YFilter
    osSumRuntime.EntityData.YangName = "os-sum-runtime"
    osSumRuntime.EntityData.BundleName = "cisco_ios_xr"
    osSumRuntime.EntityData.ParentYangName = "spf-stats"
    osSumRuntime.EntityData.SegmentPath = "os-sum-runtime"
    osSumRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    osSumRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    osSumRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    osSumRuntime.EntityData.Children = types.NewOrderedMap()
    osSumRuntime.EntityData.Children.Append("sp-start-time", types.YChild{"SpStartTime", &osSumRuntime.SpStartTime})
    osSumRuntime.EntityData.Children.Append("sp-duration", types.YChild{"SpDuration", &osSumRuntime.SpDuration})
    osSumRuntime.EntityData.Leafs = types.NewOrderedMap()
    osSumRuntime.EntityData.Leafs.Append("sp-adv-rtr-id", types.YLeaf{"SpAdvRtrId", osSumRuntime.SpAdvRtrId})
    osSumRuntime.EntityData.Leafs.Append("sp-dest-count", types.YLeaf{"SpDestCount", osSumRuntime.SpDestCount})
    osSumRuntime.EntityData.Leafs.Append("sp-dest-addr", types.YLeaf{"SpDestAddr", osSumRuntime.SpDestAddr})

    osSumRuntime.EntityData.YListKeys = []string {}

    return &(osSumRuntime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpStartTime
// sp start time
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpStartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spStartTime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpStartTime) GetEntityData() *types.CommonEntityData {
    spStartTime.EntityData.YFilter = spStartTime.YFilter
    spStartTime.EntityData.YangName = "sp-start-time"
    spStartTime.EntityData.BundleName = "cisco_ios_xr"
    spStartTime.EntityData.ParentYangName = "os-sum-runtime"
    spStartTime.EntityData.SegmentPath = "sp-start-time"
    spStartTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spStartTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spStartTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spStartTime.EntityData.Children = types.NewOrderedMap()
    spStartTime.EntityData.Leafs = types.NewOrderedMap()
    spStartTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", spStartTime.Second})
    spStartTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spStartTime.Nanosecond})

    spStartTime.EntityData.YListKeys = []string {}

    return &(spStartTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpDuration
// sp duration
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpDuration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spDuration *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsSumRuntime_SpDuration) GetEntityData() *types.CommonEntityData {
    spDuration.EntityData.YFilter = spDuration.YFilter
    spDuration.EntityData.YangName = "sp-duration"
    spDuration.EntityData.BundleName = "cisco_ios_xr"
    spDuration.EntityData.ParentYangName = "os-sum-runtime"
    spDuration.EntityData.SegmentPath = "sp-duration"
    spDuration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spDuration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spDuration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spDuration.EntityData.Children = types.NewOrderedMap()
    spDuration.EntityData.Leafs = types.NewOrderedMap()
    spDuration.EntityData.Leafs.Append("second", types.YLeaf{"Second", spDuration.Second})
    spDuration.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spDuration.Nanosecond})

    spDuration.EntityData.YListKeys = []string {}

    return &(spDuration.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime
// os ex runtime
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sp adv rtr id. The type is interface{} with range: 0..4294967295.
    SpAdvRtrId interface{}

    // sp dest count. The type is interface{} with range: 0..4294967295.
    SpDestCount interface{}

    // sp dest addr. The type is interface{} with range: 0..4294967295.
    SpDestAddr interface{}

    // sp start time.
    SpStartTime Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpStartTime

    // sp duration.
    SpDuration Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpDuration
}

func (osExRuntime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime) GetEntityData() *types.CommonEntityData {
    osExRuntime.EntityData.YFilter = osExRuntime.YFilter
    osExRuntime.EntityData.YangName = "os-ex-runtime"
    osExRuntime.EntityData.BundleName = "cisco_ios_xr"
    osExRuntime.EntityData.ParentYangName = "spf-stats"
    osExRuntime.EntityData.SegmentPath = "os-ex-runtime"
    osExRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    osExRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    osExRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    osExRuntime.EntityData.Children = types.NewOrderedMap()
    osExRuntime.EntityData.Children.Append("sp-start-time", types.YChild{"SpStartTime", &osExRuntime.SpStartTime})
    osExRuntime.EntityData.Children.Append("sp-duration", types.YChild{"SpDuration", &osExRuntime.SpDuration})
    osExRuntime.EntityData.Leafs = types.NewOrderedMap()
    osExRuntime.EntityData.Leafs.Append("sp-adv-rtr-id", types.YLeaf{"SpAdvRtrId", osExRuntime.SpAdvRtrId})
    osExRuntime.EntityData.Leafs.Append("sp-dest-count", types.YLeaf{"SpDestCount", osExRuntime.SpDestCount})
    osExRuntime.EntityData.Leafs.Append("sp-dest-addr", types.YLeaf{"SpDestAddr", osExRuntime.SpDestAddr})

    osExRuntime.EntityData.YListKeys = []string {}

    return &(osExRuntime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpStartTime
// sp start time
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpStartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spStartTime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpStartTime) GetEntityData() *types.CommonEntityData {
    spStartTime.EntityData.YFilter = spStartTime.YFilter
    spStartTime.EntityData.YangName = "sp-start-time"
    spStartTime.EntityData.BundleName = "cisco_ios_xr"
    spStartTime.EntityData.ParentYangName = "os-ex-runtime"
    spStartTime.EntityData.SegmentPath = "sp-start-time"
    spStartTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spStartTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spStartTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spStartTime.EntityData.Children = types.NewOrderedMap()
    spStartTime.EntityData.Leafs = types.NewOrderedMap()
    spStartTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", spStartTime.Second})
    spStartTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spStartTime.Nanosecond})

    spStartTime.EntityData.YListKeys = []string {}

    return &(spStartTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpDuration
// sp duration
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpDuration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (spDuration *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_OsExRuntime_SpDuration) GetEntityData() *types.CommonEntityData {
    spDuration.EntityData.YFilter = spDuration.YFilter
    spDuration.EntityData.YangName = "sp-duration"
    spDuration.EntityData.BundleName = "cisco_ios_xr"
    spDuration.EntityData.ParentYangName = "os-ex-runtime"
    spDuration.EntityData.SegmentPath = "sp-duration"
    spDuration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spDuration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spDuration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spDuration.EntityData.Children = types.NewOrderedMap()
    spDuration.EntityData.Leafs = types.NewOrderedMap()
    spDuration.EntityData.Leafs.Append("second", types.YLeaf{"Second", spDuration.Second})
    spDuration.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", spDuration.Nanosecond})

    spDuration.EntityData.YListKeys = []string {}

    return &(spDuration.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime
// runtime
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf start time. The type is interface{} with range: 0..4294967295.
    SpfStartTime interface{}

    // lsa change cnt. The type is interface{} with range: -32768..32767.
    LsaChangeCnt interface{}

    // gbl spf time.
    GblSpfTime Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_GblSpfTime

    // lsa info. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_LsaInfo.
    LsaInfo []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_LsaInfo

    // area stat. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat.
    AreaStat []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat
}

func (runtime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime) GetEntityData() *types.CommonEntityData {
    runtime.EntityData.YFilter = runtime.YFilter
    runtime.EntityData.YangName = "runtime"
    runtime.EntityData.BundleName = "cisco_ios_xr"
    runtime.EntityData.ParentYangName = "spf-stats"
    runtime.EntityData.SegmentPath = "runtime"
    runtime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    runtime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    runtime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    runtime.EntityData.Children = types.NewOrderedMap()
    runtime.EntityData.Children.Append("gbl-spf-time", types.YChild{"GblSpfTime", &runtime.GblSpfTime})
    runtime.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", nil})
    for i := range runtime.LsaInfo {
        runtime.EntityData.Children.Append(types.GetSegmentPath(runtime.LsaInfo[i]), types.YChild{"LsaInfo", runtime.LsaInfo[i]})
    }
    runtime.EntityData.Children.Append("area-stat", types.YChild{"AreaStat", nil})
    for i := range runtime.AreaStat {
        runtime.EntityData.Children.Append(types.GetSegmentPath(runtime.AreaStat[i]), types.YChild{"AreaStat", runtime.AreaStat[i]})
    }
    runtime.EntityData.Leafs = types.NewOrderedMap()
    runtime.EntityData.Leafs.Append("spf-start-time", types.YLeaf{"SpfStartTime", runtime.SpfStartTime})
    runtime.EntityData.Leafs.Append("lsa-change-cnt", types.YLeaf{"LsaChangeCnt", runtime.LsaChangeCnt})

    runtime.EntityData.YListKeys = []string {}

    return &(runtime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_GblSpfTime
// gbl spf time
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_GblSpfTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf dijkstra. The type is interface{} with range: 0..4294967295.
    SpfDijkstra interface{}

    // spf intra prefix. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefix interface{}

    // spf intra prefix del. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefixDel interface{}

    // spf inter prefix. The type is interface{} with range: 0..4294967295.
    SpfInterPrefix interface{}

    // spf inter prefix del. The type is interface{} with range: 0..4294967295.
    SpfInterPrefixDel interface{}

    // spf ext prefix. The type is interface{} with range: 0..4294967295.
    SpfExtPrefix interface{}

    // spf ext prefix del. The type is interface{} with range: 0..4294967295.
    SpfExtPrefixDel interface{}
}

func (gblSpfTime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_GblSpfTime) GetEntityData() *types.CommonEntityData {
    gblSpfTime.EntityData.YFilter = gblSpfTime.YFilter
    gblSpfTime.EntityData.YangName = "gbl-spf-time"
    gblSpfTime.EntityData.BundleName = "cisco_ios_xr"
    gblSpfTime.EntityData.ParentYangName = "runtime"
    gblSpfTime.EntityData.SegmentPath = "gbl-spf-time"
    gblSpfTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gblSpfTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gblSpfTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gblSpfTime.EntityData.Children = types.NewOrderedMap()
    gblSpfTime.EntityData.Leafs = types.NewOrderedMap()
    gblSpfTime.EntityData.Leafs.Append("spf-dijkstra", types.YLeaf{"SpfDijkstra", gblSpfTime.SpfDijkstra})
    gblSpfTime.EntityData.Leafs.Append("spf-intra-prefix", types.YLeaf{"SpfIntraPrefix", gblSpfTime.SpfIntraPrefix})
    gblSpfTime.EntityData.Leafs.Append("spf-intra-prefix-del", types.YLeaf{"SpfIntraPrefixDel", gblSpfTime.SpfIntraPrefixDel})
    gblSpfTime.EntityData.Leafs.Append("spf-inter-prefix", types.YLeaf{"SpfInterPrefix", gblSpfTime.SpfInterPrefix})
    gblSpfTime.EntityData.Leafs.Append("spf-inter-prefix-del", types.YLeaf{"SpfInterPrefixDel", gblSpfTime.SpfInterPrefixDel})
    gblSpfTime.EntityData.Leafs.Append("spf-ext-prefix", types.YLeaf{"SpfExtPrefix", gblSpfTime.SpfExtPrefix})
    gblSpfTime.EntityData.Leafs.Append("spf-ext-prefix-del", types.YLeaf{"SpfExtPrefixDel", gblSpfTime.SpfExtPrefixDel})

    gblSpfTime.EntityData.YListKeys = []string {}

    return &(gblSpfTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_LsaInfo
// lsa info
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // adv rtr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvRtr interface{}

    // id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Id interface{}

    // type. The type is interface{} with range: 0..255.
    Type interface{}

    // flush. The type is bool.
    Flush interface{}
}

func (lsaInfo *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "runtime"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsaInfo.AreaId})
    lsaInfo.EntityData.Leafs.Append("adv-rtr", types.YLeaf{"AdvRtr", lsaInfo.AdvRtr})
    lsaInfo.EntityData.Leafs.Append("id", types.YLeaf{"Id", lsaInfo.Id})
    lsaInfo.EntityData.Leafs.Append("type", types.YLeaf{"Type", lsaInfo.Type})
    lsaInfo.EntityData.Leafs.Append("flush", types.YLeaf{"Flush", lsaInfo.Flush})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat
// area stat
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // spf time.
    SpfTime Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime

    // lsa type cnt. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt.
    LsaTypeCnt []*Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt
}

func (areaStat *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat) GetEntityData() *types.CommonEntityData {
    areaStat.EntityData.YFilter = areaStat.YFilter
    areaStat.EntityData.YangName = "area-stat"
    areaStat.EntityData.BundleName = "cisco_ios_xr"
    areaStat.EntityData.ParentYangName = "runtime"
    areaStat.EntityData.SegmentPath = "area-stat"
    areaStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStat.EntityData.Children = types.NewOrderedMap()
    areaStat.EntityData.Children.Append("spf-time", types.YChild{"SpfTime", &areaStat.SpfTime})
    areaStat.EntityData.Children.Append("lsa-type-cnt", types.YChild{"LsaTypeCnt", nil})
    for i := range areaStat.LsaTypeCnt {
        areaStat.EntityData.Children.Append(types.GetSegmentPath(areaStat.LsaTypeCnt[i]), types.YChild{"LsaTypeCnt", areaStat.LsaTypeCnt[i]})
    }
    areaStat.EntityData.Leafs = types.NewOrderedMap()
    areaStat.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaStat.AreaId})

    areaStat.EntityData.YListKeys = []string {}

    return &(areaStat.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime
// spf time
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // spf dijkstra. The type is interface{} with range: 0..4294967295.
    SpfDijkstra interface{}

    // spf intra prefix. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefix interface{}

    // spf intra prefix del. The type is interface{} with range: 0..4294967295.
    SpfIntraPrefixDel interface{}

    // spf inter prefix. The type is interface{} with range: 0..4294967295.
    SpfInterPrefix interface{}

    // spf inter prefix del. The type is interface{} with range: 0..4294967295.
    SpfInterPrefixDel interface{}

    // spf ext prefix. The type is interface{} with range: 0..4294967295.
    SpfExtPrefix interface{}

    // spf ext prefix del. The type is interface{} with range: 0..4294967295.
    SpfExtPrefixDel interface{}
}

func (spfTime *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_SpfTime) GetEntityData() *types.CommonEntityData {
    spfTime.EntityData.YFilter = spfTime.YFilter
    spfTime.EntityData.YangName = "spf-time"
    spfTime.EntityData.BundleName = "cisco_ios_xr"
    spfTime.EntityData.ParentYangName = "area-stat"
    spfTime.EntityData.SegmentPath = "spf-time"
    spfTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfTime.EntityData.Children = types.NewOrderedMap()
    spfTime.EntityData.Leafs = types.NewOrderedMap()
    spfTime.EntityData.Leafs.Append("spf-dijkstra", types.YLeaf{"SpfDijkstra", spfTime.SpfDijkstra})
    spfTime.EntityData.Leafs.Append("spf-intra-prefix", types.YLeaf{"SpfIntraPrefix", spfTime.SpfIntraPrefix})
    spfTime.EntityData.Leafs.Append("spf-intra-prefix-del", types.YLeaf{"SpfIntraPrefixDel", spfTime.SpfIntraPrefixDel})
    spfTime.EntityData.Leafs.Append("spf-inter-prefix", types.YLeaf{"SpfInterPrefix", spfTime.SpfInterPrefix})
    spfTime.EntityData.Leafs.Append("spf-inter-prefix-del", types.YLeaf{"SpfInterPrefixDel", spfTime.SpfInterPrefixDel})
    spfTime.EntityData.Leafs.Append("spf-ext-prefix", types.YLeaf{"SpfExtPrefix", spfTime.SpfExtPrefix})
    spfTime.EntityData.Leafs.Append("spf-ext-prefix-del", types.YLeaf{"SpfExtPrefixDel", spfTime.SpfExtPrefixDel})

    spfTime.EntityData.YListKeys = []string {}

    return &(spfTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt
// lsa type cnt
type Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lsaTypeCnt *Ospf_Processes_Process_DefaultVrf_Statistics_SpfStats_Runtime_AreaStat_LsaTypeCnt) GetEntityData() *types.CommonEntityData {
    lsaTypeCnt.EntityData.YFilter = lsaTypeCnt.YFilter
    lsaTypeCnt.EntityData.YangName = "lsa-type-cnt"
    lsaTypeCnt.EntityData.BundleName = "cisco_ios_xr"
    lsaTypeCnt.EntityData.ParentYangName = "area-stat"
    lsaTypeCnt.EntityData.SegmentPath = "lsa-type-cnt"
    lsaTypeCnt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaTypeCnt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaTypeCnt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaTypeCnt.EntityData.Children = types.NewOrderedMap()
    lsaTypeCnt.EntityData.Leafs = types.NewOrderedMap()
    lsaTypeCnt.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lsaTypeCnt.Entry})

    lsaTypeCnt.EntityData.YListKeys = []string {}

    return &(lsaTypeCnt.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats
// Stats concerning RIB route updates using the
// Batching API
type Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // priority batch. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats_PriorityBatch.
    PriorityBatch []*Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats_PriorityBatch
}

func (ribBatchStats *Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats) GetEntityData() *types.CommonEntityData {
    ribBatchStats.EntityData.YFilter = ribBatchStats.YFilter
    ribBatchStats.EntityData.YangName = "rib-batch-stats"
    ribBatchStats.EntityData.BundleName = "cisco_ios_xr"
    ribBatchStats.EntityData.ParentYangName = "statistics"
    ribBatchStats.EntityData.SegmentPath = "rib-batch-stats"
    ribBatchStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBatchStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBatchStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBatchStats.EntityData.Children = types.NewOrderedMap()
    ribBatchStats.EntityData.Children.Append("priority-batch", types.YChild{"PriorityBatch", nil})
    for i := range ribBatchStats.PriorityBatch {
        ribBatchStats.EntityData.Children.Append(types.GetSegmentPath(ribBatchStats.PriorityBatch[i]), types.YChild{"PriorityBatch", ribBatchStats.PriorityBatch[i]})
    }
    ribBatchStats.EntityData.Leafs = types.NewOrderedMap()

    ribBatchStats.EntityData.YListKeys = []string {}

    return &(ribBatchStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats_PriorityBatch
// priority batch
type Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats_PriorityBatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // routes sent. The type is interface{} with range: 0..4294967295.
    RoutesSent interface{}

    // routes pending. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // max routes. The type is interface{} with range: 0..4294967295.
    MaxRoutes interface{}

    // paths sent. The type is interface{} with range: 0..4294967295.
    PathsSent interface{}

    // paths pending. The type is interface{} with range: 0..4294967295.
    PathsPending interface{}

    // paths add. The type is interface{} with range: 0..4294967295.
    PathsAdd interface{}

    // paths add errs. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // paths del. The type is interface{} with range: 0..4294967295.
    PathsDel interface{}

    // paths del errs. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}

    // lfas pending. The type is interface{} with range: 0..4294967295.
    LfasPending interface{}

    // lfas add. The type is interface{} with range: 0..4294967295.
    LfasAdd interface{}

    // lfas del. The type is interface{} with range: 0..4294967295.
    LfasDel interface{}

    // lfas sent. The type is interface{} with range: 0..4294967295.
    LfasSent interface{}

    // priority level. The type is string with length: 0..40.
    PriorityLevel interface{}
}

func (priorityBatch *Ospf_Processes_Process_DefaultVrf_Statistics_RibBatchStats_PriorityBatch) GetEntityData() *types.CommonEntityData {
    priorityBatch.EntityData.YFilter = priorityBatch.YFilter
    priorityBatch.EntityData.YangName = "priority-batch"
    priorityBatch.EntityData.BundleName = "cisco_ios_xr"
    priorityBatch.EntityData.ParentYangName = "rib-batch-stats"
    priorityBatch.EntityData.SegmentPath = "priority-batch"
    priorityBatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    priorityBatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    priorityBatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    priorityBatch.EntityData.Children = types.NewOrderedMap()
    priorityBatch.EntityData.Leafs = types.NewOrderedMap()
    priorityBatch.EntityData.Leafs.Append("batches-sent", types.YLeaf{"BatchesSent", priorityBatch.BatchesSent})
    priorityBatch.EntityData.Leafs.Append("routes-sent", types.YLeaf{"RoutesSent", priorityBatch.RoutesSent})
    priorityBatch.EntityData.Leafs.Append("routes-pending", types.YLeaf{"RoutesPending", priorityBatch.RoutesPending})
    priorityBatch.EntityData.Leafs.Append("max-routes", types.YLeaf{"MaxRoutes", priorityBatch.MaxRoutes})
    priorityBatch.EntityData.Leafs.Append("paths-sent", types.YLeaf{"PathsSent", priorityBatch.PathsSent})
    priorityBatch.EntityData.Leafs.Append("paths-pending", types.YLeaf{"PathsPending", priorityBatch.PathsPending})
    priorityBatch.EntityData.Leafs.Append("paths-add", types.YLeaf{"PathsAdd", priorityBatch.PathsAdd})
    priorityBatch.EntityData.Leafs.Append("paths-add-errs", types.YLeaf{"PathsAddErrs", priorityBatch.PathsAddErrs})
    priorityBatch.EntityData.Leafs.Append("paths-del", types.YLeaf{"PathsDel", priorityBatch.PathsDel})
    priorityBatch.EntityData.Leafs.Append("paths-del-errs", types.YLeaf{"PathsDelErrs", priorityBatch.PathsDelErrs})
    priorityBatch.EntityData.Leafs.Append("lfas-pending", types.YLeaf{"LfasPending", priorityBatch.LfasPending})
    priorityBatch.EntityData.Leafs.Append("lfas-add", types.YLeaf{"LfasAdd", priorityBatch.LfasAdd})
    priorityBatch.EntityData.Leafs.Append("lfas-del", types.YLeaf{"LfasDel", priorityBatch.LfasDel})
    priorityBatch.EntityData.Leafs.Append("lfas-sent", types.YLeaf{"LfasSent", priorityBatch.LfasSent})
    priorityBatch.EntityData.Leafs.Append("priority-level", types.YLeaf{"PriorityLevel", priorityBatch.PriorityLevel})

    priorityBatch.EntityData.YListKeys = []string {}

    return &(priorityBatch.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats
// OSPF ISSU statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr rev. The type is interface{} with range: -2147483648..2147483647.
    NsrRev interface{}

    // nsr fsm state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // nsr version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // nsr nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeid interface{}

    // nsr peer version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // nsr peer nodeid. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeid interface{}

    // nsr fabric mtu. The type is interface{} with range: 0..4294967295.
    NsrFabricMtu interface{}

    // nsr nbr qad qid. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // nsr lsa qad qid. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // nsr nbr qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // nsr lsa qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // nsr nbr init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // nsr lsa init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // nsr nbr seq no. The type is interface{} with range: 0..4294967295.
    NsrNbrSeqNo interface{}

    // nsr intf seq no. The type is interface{} with range: 0..4294967295.
    NsrIntfSeqNo interface{}

    // nsr tmr quant. The type is interface{} with range: -2147483648..2147483647.
    NsrTmrQuant interface{}

    // nsr conn to active attempts. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // nsr conn to active fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // nsr conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // nsr conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // nsr conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // nsr thd sched.
    NsrThdSched Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched

    // nsr rtr thd sched.
    NsrRtrThdSched Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched

    // Nsr Fsm Flags information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmFlag.
    NsrFsmFlag []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmFlag

    // Nsr Fsm Running Timers. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmRunningTimer.
    NsrFsmRunningTimer []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmRunningTimer

    // Nsr Issu Milestones. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrIssuMilestone.
    NsrIssuMilestone []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrIssuMilestone

    // Nsr Error History List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory.
    NsrErrHistory []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory
}

func (issuStats *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats) GetEntityData() *types.CommonEntityData {
    issuStats.EntityData.YFilter = issuStats.YFilter
    issuStats.EntityData.YangName = "issu-stats"
    issuStats.EntityData.BundleName = "cisco_ios_xr"
    issuStats.EntityData.ParentYangName = "statistics"
    issuStats.EntityData.SegmentPath = "issu-stats"
    issuStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issuStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issuStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issuStats.EntityData.Children = types.NewOrderedMap()
    issuStats.EntityData.Children.Append("nsr-thd-sched", types.YChild{"NsrThdSched", &issuStats.NsrThdSched})
    issuStats.EntityData.Children.Append("nsr-rtr-thd-sched", types.YChild{"NsrRtrThdSched", &issuStats.NsrRtrThdSched})
    issuStats.EntityData.Children.Append("nsr-fsm-flag", types.YChild{"NsrFsmFlag", nil})
    for i := range issuStats.NsrFsmFlag {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrFsmFlag[i]), types.YChild{"NsrFsmFlag", issuStats.NsrFsmFlag[i]})
    }
    issuStats.EntityData.Children.Append("nsr-fsm-running-timer", types.YChild{"NsrFsmRunningTimer", nil})
    for i := range issuStats.NsrFsmRunningTimer {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrFsmRunningTimer[i]), types.YChild{"NsrFsmRunningTimer", issuStats.NsrFsmRunningTimer[i]})
    }
    issuStats.EntityData.Children.Append("nsr-issu-milestone", types.YChild{"NsrIssuMilestone", nil})
    for i := range issuStats.NsrIssuMilestone {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrIssuMilestone[i]), types.YChild{"NsrIssuMilestone", issuStats.NsrIssuMilestone[i]})
    }
    issuStats.EntityData.Children.Append("nsr-err-history", types.YChild{"NsrErrHistory", nil})
    for i := range issuStats.NsrErrHistory {
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrErrHistory[i]), types.YChild{"NsrErrHistory", issuStats.NsrErrHistory[i]})
    }
    issuStats.EntityData.Leafs = types.NewOrderedMap()
    issuStats.EntityData.Leafs.Append("nsr-rev", types.YLeaf{"NsrRev", issuStats.NsrRev})
    issuStats.EntityData.Leafs.Append("nsr-fsm-state", types.YLeaf{"NsrFsmState", issuStats.NsrFsmState})
    issuStats.EntityData.Leafs.Append("nsr-version", types.YLeaf{"NsrVersion", issuStats.NsrVersion})
    issuStats.EntityData.Leafs.Append("nsr-nodeid", types.YLeaf{"NsrNodeid", issuStats.NsrNodeid})
    issuStats.EntityData.Leafs.Append("nsr-peer-version", types.YLeaf{"NsrPeerVersion", issuStats.NsrPeerVersion})
    issuStats.EntityData.Leafs.Append("nsr-peer-nodeid", types.YLeaf{"NsrPeerNodeid", issuStats.NsrPeerNodeid})
    issuStats.EntityData.Leafs.Append("nsr-fabric-mtu", types.YLeaf{"NsrFabricMtu", issuStats.NsrFabricMtu})
    issuStats.EntityData.Leafs.Append("nsr-nbr-qad-qid", types.YLeaf{"NsrNbrQadQid", issuStats.NsrNbrQadQid})
    issuStats.EntityData.Leafs.Append("nsr-lsa-qad-qid", types.YLeaf{"NsrLsaQadQid", issuStats.NsrLsaQadQid})
    issuStats.EntityData.Leafs.Append("nsr-nbr-qad-mdata-count", types.YLeaf{"NsrNbrQadMdataCount", issuStats.NsrNbrQadMdataCount})
    issuStats.EntityData.Leafs.Append("nsr-lsa-qad-mdata-count", types.YLeaf{"NsrLsaQadMdataCount", issuStats.NsrLsaQadMdataCount})
    issuStats.EntityData.Leafs.Append("nsr-nbr-init-sync-pend-count", types.YLeaf{"NsrNbrInitSyncPendCount", issuStats.NsrNbrInitSyncPendCount})
    issuStats.EntityData.Leafs.Append("nsr-lsa-init-sync-pend-count", types.YLeaf{"NsrLsaInitSyncPendCount", issuStats.NsrLsaInitSyncPendCount})
    issuStats.EntityData.Leafs.Append("nsr-nbr-seq-no", types.YLeaf{"NsrNbrSeqNo", issuStats.NsrNbrSeqNo})
    issuStats.EntityData.Leafs.Append("nsr-intf-seq-no", types.YLeaf{"NsrIntfSeqNo", issuStats.NsrIntfSeqNo})
    issuStats.EntityData.Leafs.Append("nsr-tmr-quant", types.YLeaf{"NsrTmrQuant", issuStats.NsrTmrQuant})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-attempts", types.YLeaf{"NsrConnToActiveAttempts", issuStats.NsrConnToActiveAttempts})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-fails", types.YLeaf{"NsrConnToActiveFails", issuStats.NsrConnToActiveFails})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-opens", types.YLeaf{"NsrConnToActiveOpens", issuStats.NsrConnToActiveOpens})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-closes", types.YLeaf{"NsrConnToActiveCloses", issuStats.NsrConnToActiveCloses})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-errors", types.YLeaf{"NsrConnToActiveErrors", issuStats.NsrConnToActiveErrors})

    issuStats.EntityData.YListKeys = []string {}

    return &(issuStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched
// nsr thd sched
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched_NsrPri
}

func (nsrThdSched *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched) GetEntityData() *types.CommonEntityData {
    nsrThdSched.EntityData.YFilter = nsrThdSched.YFilter
    nsrThdSched.EntityData.YangName = "nsr-thd-sched"
    nsrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrThdSched.EntityData.ParentYangName = "issu-stats"
    nsrThdSched.EntityData.SegmentPath = "nsr-thd-sched"
    nsrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrThdSched.NsrPri {
        nsrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrThdSched.NsrPri[i]})
    }
    nsrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrThdSched.NsrPulseQuant})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrThdSched.NsrEventsInQ})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrThdSched.NsrEventsTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrThdSched.NsrEventsRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrThdSched.NsrBadPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrThdSched.NsrGoodPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrThdSched.NsrPulsesTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrThdSched.NsrPulseTxFails})

    nsrThdSched.EntityData.YListKeys = []string {}

    return &(nsrThdSched.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched
// nsr rtr thd sched
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched) GetEntityData() *types.CommonEntityData {
    nsrRtrThdSched.EntityData.YFilter = nsrRtrThdSched.YFilter
    nsrRtrThdSched.EntityData.YangName = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrRtrThdSched.EntityData.ParentYangName = "issu-stats"
    nsrRtrThdSched.EntityData.SegmentPath = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrRtrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrRtrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrRtrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrRtrThdSched.NsrPri {
        nsrRtrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrRtrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrRtrThdSched.NsrPri[i]})
    }
    nsrRtrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrRtrThdSched.NsrPulseQuant})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrRtrThdSched.NsrEventsInQ})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrRtrThdSched.NsrEventsTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrRtrThdSched.NsrEventsRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrRtrThdSched.NsrBadPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrRtrThdSched.NsrGoodPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrRtrThdSched.NsrPulsesTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrRtrThdSched.NsrPulseTxFails})

    nsrRtrThdSched.EntityData.YListKeys = []string {}

    return &(nsrRtrThdSched.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-rtr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmFlag
// Nsr Fsm Flags information
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmFlag *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmFlag) GetEntityData() *types.CommonEntityData {
    nsrFsmFlag.EntityData.YFilter = nsrFsmFlag.YFilter
    nsrFsmFlag.EntityData.YangName = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmFlag.EntityData.ParentYangName = "issu-stats"
    nsrFsmFlag.EntityData.SegmentPath = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmFlag.EntityData.Children = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmFlag.Entry})

    nsrFsmFlag.EntityData.YListKeys = []string {}

    return &(nsrFsmFlag.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmRunningTimer
// Nsr Fsm Running Timers
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmRunningTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmRunningTimer *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrFsmRunningTimer) GetEntityData() *types.CommonEntityData {
    nsrFsmRunningTimer.EntityData.YFilter = nsrFsmRunningTimer.YFilter
    nsrFsmRunningTimer.EntityData.YangName = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmRunningTimer.EntityData.ParentYangName = "issu-stats"
    nsrFsmRunningTimer.EntityData.SegmentPath = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmRunningTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmRunningTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmRunningTimer.EntityData.Children = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmRunningTimer.Entry})

    nsrFsmRunningTimer.EntityData.YListKeys = []string {}

    return &(nsrFsmRunningTimer.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrIssuMilestone
// Nsr Issu Milestones
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrIssuMilestone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Milestone Name. The type is string.
    MilestoneName interface{}

    // Milestone Status. The type is string.
    MilestoneStatus interface{}
}

func (nsrIssuMilestone *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrIssuMilestone) GetEntityData() *types.CommonEntityData {
    nsrIssuMilestone.EntityData.YFilter = nsrIssuMilestone.YFilter
    nsrIssuMilestone.EntityData.YangName = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.BundleName = "cisco_ios_xr"
    nsrIssuMilestone.EntityData.ParentYangName = "issu-stats"
    nsrIssuMilestone.EntityData.SegmentPath = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrIssuMilestone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrIssuMilestone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrIssuMilestone.EntityData.Children = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-name", types.YLeaf{"MilestoneName", nsrIssuMilestone.MilestoneName})
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-status", types.YLeaf{"MilestoneStatus", nsrIssuMilestone.MilestoneStatus})

    nsrIssuMilestone.EntityData.YListKeys = []string {}

    return &(nsrIssuMilestone.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory
// Nsr Error History List
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nsr Revision version. The type is interface{} with range: 0..4294967295.
    NsrRevisionversion interface{}

    // Total errors for this nsr revision version. The type is interface{} with
    // range: -2147483648..2147483647.
    TotalErrors interface{}

    // List of erros. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo.
    NsrErrorInfo []*Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo
}

func (nsrErrHistory *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory) GetEntityData() *types.CommonEntityData {
    nsrErrHistory.EntityData.YFilter = nsrErrHistory.YFilter
    nsrErrHistory.EntityData.YangName = "nsr-err-history"
    nsrErrHistory.EntityData.BundleName = "cisco_ios_xr"
    nsrErrHistory.EntityData.ParentYangName = "issu-stats"
    nsrErrHistory.EntityData.SegmentPath = "nsr-err-history"
    nsrErrHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrHistory.EntityData.Children = types.NewOrderedMap()
    nsrErrHistory.EntityData.Children.Append("nsr-error-info", types.YChild{"NsrErrorInfo", nil})
    for i := range nsrErrHistory.NsrErrorInfo {
        nsrErrHistory.EntityData.Children.Append(types.GetSegmentPath(nsrErrHistory.NsrErrorInfo[i]), types.YChild{"NsrErrorInfo", nsrErrHistory.NsrErrorInfo[i]})
    }
    nsrErrHistory.EntityData.Leafs = types.NewOrderedMap()
    nsrErrHistory.EntityData.Leafs.Append("nsr-revisionversion", types.YLeaf{"NsrRevisionversion", nsrErrHistory.NsrRevisionversion})
    nsrErrHistory.EntityData.Leafs.Append("total-errors", types.YLeaf{"TotalErrors", nsrErrHistory.TotalErrors})

    nsrErrHistory.EntityData.YListKeys = []string {}

    return &(nsrErrHistory.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo
// List of erros
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count this error hit during the Nsr Revision. The type is interface{} with
    // range: -2147483648..2147483647.
    ErrCount interface{}

    // Error Information. The type is string.
    ErrInfoString interface{}

    // Time this error was last hit.
    LastErrTime Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime
}

func (nsrErrorInfo *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo) GetEntityData() *types.CommonEntityData {
    nsrErrorInfo.EntityData.YFilter = nsrErrorInfo.YFilter
    nsrErrorInfo.EntityData.YangName = "nsr-error-info"
    nsrErrorInfo.EntityData.BundleName = "cisco_ios_xr"
    nsrErrorInfo.EntityData.ParentYangName = "nsr-err-history"
    nsrErrorInfo.EntityData.SegmentPath = "nsr-error-info"
    nsrErrorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrorInfo.EntityData.Children = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Children.Append("last-err-time", types.YChild{"LastErrTime", &nsrErrorInfo.LastErrTime})
    nsrErrorInfo.EntityData.Leafs = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Leafs.Append("err-count", types.YLeaf{"ErrCount", nsrErrorInfo.ErrCount})
    nsrErrorInfo.EntityData.Leafs.Append("err-info-string", types.YLeaf{"ErrInfoString", nsrErrorInfo.ErrInfoString})

    nsrErrorInfo.EntityData.YListKeys = []string {}

    return &(nsrErrorInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime
// Time this error was last hit
type Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lastErrTime *Ospf_Processes_Process_DefaultVrf_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime) GetEntityData() *types.CommonEntityData {
    lastErrTime.EntityData.YFilter = lastErrTime.YFilter
    lastErrTime.EntityData.YangName = "last-err-time"
    lastErrTime.EntityData.BundleName = "cisco_ios_xr"
    lastErrTime.EntityData.ParentYangName = "nsr-error-info"
    lastErrTime.EntityData.SegmentPath = "last-err-time"
    lastErrTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastErrTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastErrTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastErrTime.EntityData.Children = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lastErrTime.Second})
    lastErrTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lastErrTime.Nanosecond})

    lastErrTime.EntityData.YListKeys = []string {}

    return &(lastErrTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats
// OSPF RIB thread statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // internalwq.
    Internalwq Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq

    // ribqueue. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue.
    Ribqueue []*Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue
}

func (ribThreadStats *Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats) GetEntityData() *types.CommonEntityData {
    ribThreadStats.EntityData.YFilter = ribThreadStats.YFilter
    ribThreadStats.EntityData.YangName = "rib-thread-stats"
    ribThreadStats.EntityData.BundleName = "cisco_ios_xr"
    ribThreadStats.EntityData.ParentYangName = "statistics"
    ribThreadStats.EntityData.SegmentPath = "rib-thread-stats"
    ribThreadStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribThreadStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribThreadStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribThreadStats.EntityData.Children = types.NewOrderedMap()
    ribThreadStats.EntityData.Children.Append("internalwq", types.YChild{"Internalwq", &ribThreadStats.Internalwq})
    ribThreadStats.EntityData.Children.Append("ribqueue", types.YChild{"Ribqueue", nil})
    for i := range ribThreadStats.Ribqueue {
        ribThreadStats.EntityData.Children.Append(types.GetSegmentPath(ribThreadStats.Ribqueue[i]), types.YChild{"Ribqueue", ribThreadStats.Ribqueue[i]})
    }
    ribThreadStats.EntityData.Leafs = types.NewOrderedMap()

    ribThreadStats.EntityData.YListKeys = []string {}

    return &(ribThreadStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq
// internalwq
type Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // wq thread active. The type is bool.
    WqThreadActive interface{}

    // wq dqtime. The type is interface{} with range: 0..18446744073709551615.
    WqDqtime interface{}

    // wqe qtime. The type is interface{} with range: 0..18446744073709551615.
    WqeQtime interface{}

    // wq len cur. The type is interface{} with range: -2147483648..2147483647.
    WqLenCur interface{}

    // wq len max. The type is interface{} with range: -2147483648..2147483647.
    WqLenMax interface{}

    // wq total queued. The type is interface{} with range: 0..4294967295.
    WqTotalQueued interface{}

    // wq total dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // rib version. The type is interface{} with range: 0..4294967295.
    RibVersion interface{}

    // rib pkts sent. The type is interface{} with range: 0..4294967295.
    RibPktsSent interface{}

    // rib signals. The type is interface{} with range: 0..4294967295.
    RibSignals interface{}

    // rib send errs. The type is interface{} with range: 0..4294967295.
    RibSendErrs interface{}

    // rib queue errs. The type is interface{} with range: 0..4294967295.
    RibQueueErrs interface{}

    // rib pfx limit errs. The type is interface{} with range: 0..4294967295.
    RibPfxLimitErrs interface{}

    // rib dequeue errs. The type is interface{} with range: 0..4294967295.
    RibDequeueErrs interface{}

    // rib empty batches. The type is interface{} with range: 0..4294967295.
    RibEmptyBatches interface{}

    // rib drop before. The type is interface{} with range: 0..4294967295.
    RibDropBefore interface{}

    // rib drop after. The type is interface{} with range: 0..4294967295.
    RibDropAfter interface{}

    // rib drop conn. The type is interface{} with range: 0..4294967295.
    RibDropConn interface{}

    // rib table not created. The type is interface{} with range: 0..4294967295.
    RibTableNotCreated interface{}

    // priority level. The type is string with length: 0..40.
    PriorityLevel interface{}

    // rib base clock. The type is interface{} with range:
    // 0..18446744073709551615.
    RibBaseClock interface{}

    // rib base time.
    RibBaseTime Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq_RibBaseTime
}

func (internalwq *Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq) GetEntityData() *types.CommonEntityData {
    internalwq.EntityData.YFilter = internalwq.YFilter
    internalwq.EntityData.YangName = "internalwq"
    internalwq.EntityData.BundleName = "cisco_ios_xr"
    internalwq.EntityData.ParentYangName = "rib-thread-stats"
    internalwq.EntityData.SegmentPath = "internalwq"
    internalwq.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalwq.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalwq.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalwq.EntityData.Children = types.NewOrderedMap()
    internalwq.EntityData.Children.Append("rib-base-time", types.YChild{"RibBaseTime", &internalwq.RibBaseTime})
    internalwq.EntityData.Leafs = types.NewOrderedMap()
    internalwq.EntityData.Leafs.Append("wq-thread-active", types.YLeaf{"WqThreadActive", internalwq.WqThreadActive})
    internalwq.EntityData.Leafs.Append("wq-dqtime", types.YLeaf{"WqDqtime", internalwq.WqDqtime})
    internalwq.EntityData.Leafs.Append("wqe-qtime", types.YLeaf{"WqeQtime", internalwq.WqeQtime})
    internalwq.EntityData.Leafs.Append("wq-len-cur", types.YLeaf{"WqLenCur", internalwq.WqLenCur})
    internalwq.EntityData.Leafs.Append("wq-len-max", types.YLeaf{"WqLenMax", internalwq.WqLenMax})
    internalwq.EntityData.Leafs.Append("wq-total-queued", types.YLeaf{"WqTotalQueued", internalwq.WqTotalQueued})
    internalwq.EntityData.Leafs.Append("wq-total-dequeued", types.YLeaf{"WqTotalDequeued", internalwq.WqTotalDequeued})
    internalwq.EntityData.Leafs.Append("rib-version", types.YLeaf{"RibVersion", internalwq.RibVersion})
    internalwq.EntityData.Leafs.Append("rib-pkts-sent", types.YLeaf{"RibPktsSent", internalwq.RibPktsSent})
    internalwq.EntityData.Leafs.Append("rib-signals", types.YLeaf{"RibSignals", internalwq.RibSignals})
    internalwq.EntityData.Leafs.Append("rib-send-errs", types.YLeaf{"RibSendErrs", internalwq.RibSendErrs})
    internalwq.EntityData.Leafs.Append("rib-queue-errs", types.YLeaf{"RibQueueErrs", internalwq.RibQueueErrs})
    internalwq.EntityData.Leafs.Append("rib-pfx-limit-errs", types.YLeaf{"RibPfxLimitErrs", internalwq.RibPfxLimitErrs})
    internalwq.EntityData.Leafs.Append("rib-dequeue-errs", types.YLeaf{"RibDequeueErrs", internalwq.RibDequeueErrs})
    internalwq.EntityData.Leafs.Append("rib-empty-batches", types.YLeaf{"RibEmptyBatches", internalwq.RibEmptyBatches})
    internalwq.EntityData.Leafs.Append("rib-drop-before", types.YLeaf{"RibDropBefore", internalwq.RibDropBefore})
    internalwq.EntityData.Leafs.Append("rib-drop-after", types.YLeaf{"RibDropAfter", internalwq.RibDropAfter})
    internalwq.EntityData.Leafs.Append("rib-drop-conn", types.YLeaf{"RibDropConn", internalwq.RibDropConn})
    internalwq.EntityData.Leafs.Append("rib-table-not-created", types.YLeaf{"RibTableNotCreated", internalwq.RibTableNotCreated})
    internalwq.EntityData.Leafs.Append("priority-level", types.YLeaf{"PriorityLevel", internalwq.PriorityLevel})
    internalwq.EntityData.Leafs.Append("rib-base-clock", types.YLeaf{"RibBaseClock", internalwq.RibBaseClock})

    internalwq.EntityData.YListKeys = []string {}

    return &(internalwq.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq_RibBaseTime
// rib base time
type Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq_RibBaseTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (ribBaseTime *Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Internalwq_RibBaseTime) GetEntityData() *types.CommonEntityData {
    ribBaseTime.EntityData.YFilter = ribBaseTime.YFilter
    ribBaseTime.EntityData.YangName = "rib-base-time"
    ribBaseTime.EntityData.BundleName = "cisco_ios_xr"
    ribBaseTime.EntityData.ParentYangName = "internalwq"
    ribBaseTime.EntityData.SegmentPath = "rib-base-time"
    ribBaseTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBaseTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBaseTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBaseTime.EntityData.Children = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", ribBaseTime.Second})
    ribBaseTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", ribBaseTime.Nanosecond})

    ribBaseTime.EntityData.YListKeys = []string {}

    return &(ribBaseTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue
// ribqueue
type Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // wq thread active. The type is bool.
    WqThreadActive interface{}

    // wq dqtime. The type is interface{} with range: 0..18446744073709551615.
    WqDqtime interface{}

    // wqe qtime. The type is interface{} with range: 0..18446744073709551615.
    WqeQtime interface{}

    // wq len cur. The type is interface{} with range: -2147483648..2147483647.
    WqLenCur interface{}

    // wq len max. The type is interface{} with range: -2147483648..2147483647.
    WqLenMax interface{}

    // wq total queued. The type is interface{} with range: 0..4294967295.
    WqTotalQueued interface{}

    // wq total dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // rib version. The type is interface{} with range: 0..4294967295.
    RibVersion interface{}

    // rib pkts sent. The type is interface{} with range: 0..4294967295.
    RibPktsSent interface{}

    // rib signals. The type is interface{} with range: 0..4294967295.
    RibSignals interface{}

    // rib send errs. The type is interface{} with range: 0..4294967295.
    RibSendErrs interface{}

    // rib queue errs. The type is interface{} with range: 0..4294967295.
    RibQueueErrs interface{}

    // rib pfx limit errs. The type is interface{} with range: 0..4294967295.
    RibPfxLimitErrs interface{}

    // rib dequeue errs. The type is interface{} with range: 0..4294967295.
    RibDequeueErrs interface{}

    // rib empty batches. The type is interface{} with range: 0..4294967295.
    RibEmptyBatches interface{}

    // rib drop before. The type is interface{} with range: 0..4294967295.
    RibDropBefore interface{}

    // rib drop after. The type is interface{} with range: 0..4294967295.
    RibDropAfter interface{}

    // rib drop conn. The type is interface{} with range: 0..4294967295.
    RibDropConn interface{}

    // rib table not created. The type is interface{} with range: 0..4294967295.
    RibTableNotCreated interface{}

    // priority level. The type is string with length: 0..40.
    PriorityLevel interface{}

    // rib base clock. The type is interface{} with range:
    // 0..18446744073709551615.
    RibBaseClock interface{}

    // rib base time.
    RibBaseTime Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime
}

func (ribqueue *Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue) GetEntityData() *types.CommonEntityData {
    ribqueue.EntityData.YFilter = ribqueue.YFilter
    ribqueue.EntityData.YangName = "ribqueue"
    ribqueue.EntityData.BundleName = "cisco_ios_xr"
    ribqueue.EntityData.ParentYangName = "rib-thread-stats"
    ribqueue.EntityData.SegmentPath = "ribqueue"
    ribqueue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribqueue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribqueue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribqueue.EntityData.Children = types.NewOrderedMap()
    ribqueue.EntityData.Children.Append("rib-base-time", types.YChild{"RibBaseTime", &ribqueue.RibBaseTime})
    ribqueue.EntityData.Leafs = types.NewOrderedMap()
    ribqueue.EntityData.Leafs.Append("wq-thread-active", types.YLeaf{"WqThreadActive", ribqueue.WqThreadActive})
    ribqueue.EntityData.Leafs.Append("wq-dqtime", types.YLeaf{"WqDqtime", ribqueue.WqDqtime})
    ribqueue.EntityData.Leafs.Append("wqe-qtime", types.YLeaf{"WqeQtime", ribqueue.WqeQtime})
    ribqueue.EntityData.Leafs.Append("wq-len-cur", types.YLeaf{"WqLenCur", ribqueue.WqLenCur})
    ribqueue.EntityData.Leafs.Append("wq-len-max", types.YLeaf{"WqLenMax", ribqueue.WqLenMax})
    ribqueue.EntityData.Leafs.Append("wq-total-queued", types.YLeaf{"WqTotalQueued", ribqueue.WqTotalQueued})
    ribqueue.EntityData.Leafs.Append("wq-total-dequeued", types.YLeaf{"WqTotalDequeued", ribqueue.WqTotalDequeued})
    ribqueue.EntityData.Leafs.Append("rib-version", types.YLeaf{"RibVersion", ribqueue.RibVersion})
    ribqueue.EntityData.Leafs.Append("rib-pkts-sent", types.YLeaf{"RibPktsSent", ribqueue.RibPktsSent})
    ribqueue.EntityData.Leafs.Append("rib-signals", types.YLeaf{"RibSignals", ribqueue.RibSignals})
    ribqueue.EntityData.Leafs.Append("rib-send-errs", types.YLeaf{"RibSendErrs", ribqueue.RibSendErrs})
    ribqueue.EntityData.Leafs.Append("rib-queue-errs", types.YLeaf{"RibQueueErrs", ribqueue.RibQueueErrs})
    ribqueue.EntityData.Leafs.Append("rib-pfx-limit-errs", types.YLeaf{"RibPfxLimitErrs", ribqueue.RibPfxLimitErrs})
    ribqueue.EntityData.Leafs.Append("rib-dequeue-errs", types.YLeaf{"RibDequeueErrs", ribqueue.RibDequeueErrs})
    ribqueue.EntityData.Leafs.Append("rib-empty-batches", types.YLeaf{"RibEmptyBatches", ribqueue.RibEmptyBatches})
    ribqueue.EntityData.Leafs.Append("rib-drop-before", types.YLeaf{"RibDropBefore", ribqueue.RibDropBefore})
    ribqueue.EntityData.Leafs.Append("rib-drop-after", types.YLeaf{"RibDropAfter", ribqueue.RibDropAfter})
    ribqueue.EntityData.Leafs.Append("rib-drop-conn", types.YLeaf{"RibDropConn", ribqueue.RibDropConn})
    ribqueue.EntityData.Leafs.Append("rib-table-not-created", types.YLeaf{"RibTableNotCreated", ribqueue.RibTableNotCreated})
    ribqueue.EntityData.Leafs.Append("priority-level", types.YLeaf{"PriorityLevel", ribqueue.PriorityLevel})
    ribqueue.EntityData.Leafs.Append("rib-base-clock", types.YLeaf{"RibBaseClock", ribqueue.RibBaseClock})

    ribqueue.EntityData.YListKeys = []string {}

    return &(ribqueue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime
// rib base time
type Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (ribBaseTime *Ospf_Processes_Process_DefaultVrf_Statistics_RibThreadStats_Ribqueue_RibBaseTime) GetEntityData() *types.CommonEntityData {
    ribBaseTime.EntityData.YFilter = ribBaseTime.YFilter
    ribBaseTime.EntityData.YangName = "rib-base-time"
    ribBaseTime.EntityData.BundleName = "cisco_ios_xr"
    ribBaseTime.EntityData.ParentYangName = "ribqueue"
    ribBaseTime.EntityData.SegmentPath = "rib-base-time"
    ribBaseTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBaseTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBaseTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBaseTime.EntityData.Children = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", ribBaseTime.Second})
    ribBaseTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", ribBaseTime.Nanosecond})

    ribBaseTime.EntityData.YListKeys = []string {}

    return &(ribBaseTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats
// OSPF NSR packet library statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ncd pri. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri.
    NcdPri []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri
}

func (nsrPlStats *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats) GetEntityData() *types.CommonEntityData {
    nsrPlStats.EntityData.YFilter = nsrPlStats.YFilter
    nsrPlStats.EntityData.YangName = "nsr-pl-stats"
    nsrPlStats.EntityData.BundleName = "cisco_ios_xr"
    nsrPlStats.EntityData.ParentYangName = "statistics"
    nsrPlStats.EntityData.SegmentPath = "nsr-pl-stats"
    nsrPlStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlStats.EntityData.Children = types.NewOrderedMap()
    nsrPlStats.EntityData.Children.Append("ncd-pri", types.YChild{"NcdPri", nil})
    for i := range nsrPlStats.NcdPri {
        nsrPlStats.EntityData.Children.Append(types.GetSegmentPath(nsrPlStats.NcdPri[i]), types.YChild{"NcdPri", nsrPlStats.NcdPri[i]})
    }
    nsrPlStats.EntityData.Leafs = types.NewOrderedMap()

    nsrPlStats.EntityData.YListKeys = []string {}

    return &(nsrPlStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri
// ncd pri
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sent. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSent.
    NumSent []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSent

    // Total recvd. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecv.
    NumRecv []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecv

    // Sent Error/drops. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop.
    NumSentDrop []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop

    // Recv Errors/drops. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop.
    NumRecvDrop []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop
}

func (ncdPri *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri) GetEntityData() *types.CommonEntityData {
    ncdPri.EntityData.YFilter = ncdPri.YFilter
    ncdPri.EntityData.YangName = "ncd-pri"
    ncdPri.EntityData.BundleName = "cisco_ios_xr"
    ncdPri.EntityData.ParentYangName = "nsr-pl-stats"
    ncdPri.EntityData.SegmentPath = "ncd-pri"
    ncdPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ncdPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ncdPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ncdPri.EntityData.Children = types.NewOrderedMap()
    ncdPri.EntityData.Children.Append("num-sent", types.YChild{"NumSent", nil})
    for i := range ncdPri.NumSent {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumSent[i]), types.YChild{"NumSent", ncdPri.NumSent[i]})
    }
    ncdPri.EntityData.Children.Append("num-recv", types.YChild{"NumRecv", nil})
    for i := range ncdPri.NumRecv {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumRecv[i]), types.YChild{"NumRecv", ncdPri.NumRecv[i]})
    }
    ncdPri.EntityData.Children.Append("num-sent-drop", types.YChild{"NumSentDrop", nil})
    for i := range ncdPri.NumSentDrop {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumSentDrop[i]), types.YChild{"NumSentDrop", ncdPri.NumSentDrop[i]})
    }
    ncdPri.EntityData.Children.Append("num-recv-drop", types.YChild{"NumRecvDrop", nil})
    for i := range ncdPri.NumRecvDrop {
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumRecvDrop[i]), types.YChild{"NumRecvDrop", ncdPri.NumRecvDrop[i]})
    }
    ncdPri.EntityData.Leafs = types.NewOrderedMap()

    ncdPri.EntityData.YListKeys = []string {}

    return &(ncdPri.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSent
// Total sent
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (numSent *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSent) GetEntityData() *types.CommonEntityData {
    numSent.EntityData.YFilter = numSent.YFilter
    numSent.EntityData.YangName = "num-sent"
    numSent.EntityData.BundleName = "cisco_ios_xr"
    numSent.EntityData.ParentYangName = "ncd-pri"
    numSent.EntityData.SegmentPath = "num-sent"
    numSent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numSent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numSent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numSent.EntityData.Children = types.NewOrderedMap()
    numSent.EntityData.Leafs = types.NewOrderedMap()
    numSent.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", numSent.Entry})

    numSent.EntityData.YListKeys = []string {}

    return &(numSent.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecv
// Total recvd
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (numRecv *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecv) GetEntityData() *types.CommonEntityData {
    numRecv.EntityData.YFilter = numRecv.YFilter
    numRecv.EntityData.YangName = "num-recv"
    numRecv.EntityData.BundleName = "cisco_ios_xr"
    numRecv.EntityData.ParentYangName = "ncd-pri"
    numRecv.EntityData.SegmentPath = "num-recv"
    numRecv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numRecv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numRecv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numRecv.EntityData.Children = types.NewOrderedMap()
    numRecv.EntityData.Leafs = types.NewOrderedMap()
    numRecv.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", numRecv.Entry})

    numRecv.EntityData.YListKeys = []string {}

    return &(numRecv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop
// Sent Error/drops
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pl send drop array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray.
    NsrPlSendDropArray []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray
}

func (numSentDrop *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetEntityData() *types.CommonEntityData {
    numSentDrop.EntityData.YFilter = numSentDrop.YFilter
    numSentDrop.EntityData.YangName = "num-sent-drop"
    numSentDrop.EntityData.BundleName = "cisco_ios_xr"
    numSentDrop.EntityData.ParentYangName = "ncd-pri"
    numSentDrop.EntityData.SegmentPath = "num-sent-drop"
    numSentDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numSentDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numSentDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numSentDrop.EntityData.Children = types.NewOrderedMap()
    numSentDrop.EntityData.Children.Append("nsr-pl-send-drop-array", types.YChild{"NsrPlSendDropArray", nil})
    for i := range numSentDrop.NsrPlSendDropArray {
        numSentDrop.EntityData.Children.Append(types.GetSegmentPath(numSentDrop.NsrPlSendDropArray[i]), types.YChild{"NsrPlSendDropArray", numSentDrop.NsrPlSendDropArray[i]})
    }
    numSentDrop.EntityData.Leafs = types.NewOrderedMap()

    numSentDrop.EntityData.YListKeys = []string {}

    return &(numSentDrop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray
// nsr pl send drop array
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrPlSendDropArray *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumSentDrop_NsrPlSendDropArray) GetEntityData() *types.CommonEntityData {
    nsrPlSendDropArray.EntityData.YFilter = nsrPlSendDropArray.YFilter
    nsrPlSendDropArray.EntityData.YangName = "nsr-pl-send-drop-array"
    nsrPlSendDropArray.EntityData.BundleName = "cisco_ios_xr"
    nsrPlSendDropArray.EntityData.ParentYangName = "num-sent-drop"
    nsrPlSendDropArray.EntityData.SegmentPath = "nsr-pl-send-drop-array"
    nsrPlSendDropArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlSendDropArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlSendDropArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlSendDropArray.EntityData.Children = types.NewOrderedMap()
    nsrPlSendDropArray.EntityData.Leafs = types.NewOrderedMap()
    nsrPlSendDropArray.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrPlSendDropArray.Entry})

    nsrPlSendDropArray.EntityData.YListKeys = []string {}

    return &(nsrPlSendDropArray.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop
// Recv Errors/drops
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pl recv drop array. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray.
    NsrPlRecvDropArray []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray
}

func (numRecvDrop *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetEntityData() *types.CommonEntityData {
    numRecvDrop.EntityData.YFilter = numRecvDrop.YFilter
    numRecvDrop.EntityData.YangName = "num-recv-drop"
    numRecvDrop.EntityData.BundleName = "cisco_ios_xr"
    numRecvDrop.EntityData.ParentYangName = "ncd-pri"
    numRecvDrop.EntityData.SegmentPath = "num-recv-drop"
    numRecvDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numRecvDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numRecvDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numRecvDrop.EntityData.Children = types.NewOrderedMap()
    numRecvDrop.EntityData.Children.Append("nsr-pl-recv-drop-array", types.YChild{"NsrPlRecvDropArray", nil})
    for i := range numRecvDrop.NsrPlRecvDropArray {
        numRecvDrop.EntityData.Children.Append(types.GetSegmentPath(numRecvDrop.NsrPlRecvDropArray[i]), types.YChild{"NsrPlRecvDropArray", numRecvDrop.NsrPlRecvDropArray[i]})
    }
    numRecvDrop.EntityData.Leafs = types.NewOrderedMap()

    numRecvDrop.EntityData.YListKeys = []string {}

    return &(numRecvDrop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray
// nsr pl recv drop array
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrPlRecvDropArray *Ospf_Processes_Process_DefaultVrf_Statistics_NsrPlStats_NcdPri_NumRecvDrop_NsrPlRecvDropArray) GetEntityData() *types.CommonEntityData {
    nsrPlRecvDropArray.EntityData.YFilter = nsrPlRecvDropArray.YFilter
    nsrPlRecvDropArray.EntityData.YangName = "nsr-pl-recv-drop-array"
    nsrPlRecvDropArray.EntityData.BundleName = "cisco_ios_xr"
    nsrPlRecvDropArray.EntityData.ParentYangName = "num-recv-drop"
    nsrPlRecvDropArray.EntityData.SegmentPath = "nsr-pl-recv-drop-array"
    nsrPlRecvDropArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlRecvDropArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlRecvDropArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlRecvDropArray.EntityData.Children = types.NewOrderedMap()
    nsrPlRecvDropArray.EntityData.Leafs = types.NewOrderedMap()
    nsrPlRecvDropArray.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrPlRecvDropArray.Entry})

    nsrPlRecvDropArray.EntityData.YListKeys = []string {}

    return &(nsrPlRecvDropArray.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats
// OSPF NSR thread statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr rev. The type is interface{} with range: -2147483648..2147483647.
    NsrRev interface{}

    // nsr fsm state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // nsr version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // nsr nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeid interface{}

    // nsr peer version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // nsr peer nodeid. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeid interface{}

    // nsr fabric mtu. The type is interface{} with range: 0..4294967295.
    NsrFabricMtu interface{}

    // nsr nbr qad qid. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // nsr lsa qad qid. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // nsr nbr qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // nsr lsa qad mdata count. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // nsr nbr init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // nsr lsa init sync pend count. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // nsr nbr seq no. The type is interface{} with range: 0..4294967295.
    NsrNbrSeqNo interface{}

    // nsr intf seq no. The type is interface{} with range: 0..4294967295.
    NsrIntfSeqNo interface{}

    // nsr tmr quant. The type is interface{} with range: -2147483648..2147483647.
    NsrTmrQuant interface{}

    // nsr conn to active attempts. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // nsr conn to active fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // nsr conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // nsr conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // nsr conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // nsr thd sched.
    NsrThdSched Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched

    // nsr rtr thd sched.
    NsrRtrThdSched Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched

    // Nsr Fsm Flags information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmFlag.
    NsrFsmFlag []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmFlag

    // Nsr Fsm Running Timers. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmRunningTimer.
    NsrFsmRunningTimer []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmRunningTimer

    // Nsr Issu Milestones. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrIssuMilestone.
    NsrIssuMilestone []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrIssuMilestone

    // Nsr Error History List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory.
    NsrErrHistory []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory
}

func (nsrStats *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats) GetEntityData() *types.CommonEntityData {
    nsrStats.EntityData.YFilter = nsrStats.YFilter
    nsrStats.EntityData.YangName = "nsr-stats"
    nsrStats.EntityData.BundleName = "cisco_ios_xr"
    nsrStats.EntityData.ParentYangName = "statistics"
    nsrStats.EntityData.SegmentPath = "nsr-stats"
    nsrStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStats.EntityData.Children = types.NewOrderedMap()
    nsrStats.EntityData.Children.Append("nsr-thd-sched", types.YChild{"NsrThdSched", &nsrStats.NsrThdSched})
    nsrStats.EntityData.Children.Append("nsr-rtr-thd-sched", types.YChild{"NsrRtrThdSched", &nsrStats.NsrRtrThdSched})
    nsrStats.EntityData.Children.Append("nsr-fsm-flag", types.YChild{"NsrFsmFlag", nil})
    for i := range nsrStats.NsrFsmFlag {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrFsmFlag[i]), types.YChild{"NsrFsmFlag", nsrStats.NsrFsmFlag[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-fsm-running-timer", types.YChild{"NsrFsmRunningTimer", nil})
    for i := range nsrStats.NsrFsmRunningTimer {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrFsmRunningTimer[i]), types.YChild{"NsrFsmRunningTimer", nsrStats.NsrFsmRunningTimer[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-issu-milestone", types.YChild{"NsrIssuMilestone", nil})
    for i := range nsrStats.NsrIssuMilestone {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrIssuMilestone[i]), types.YChild{"NsrIssuMilestone", nsrStats.NsrIssuMilestone[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-err-history", types.YChild{"NsrErrHistory", nil})
    for i := range nsrStats.NsrErrHistory {
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrErrHistory[i]), types.YChild{"NsrErrHistory", nsrStats.NsrErrHistory[i]})
    }
    nsrStats.EntityData.Leafs = types.NewOrderedMap()
    nsrStats.EntityData.Leafs.Append("nsr-rev", types.YLeaf{"NsrRev", nsrStats.NsrRev})
    nsrStats.EntityData.Leafs.Append("nsr-fsm-state", types.YLeaf{"NsrFsmState", nsrStats.NsrFsmState})
    nsrStats.EntityData.Leafs.Append("nsr-version", types.YLeaf{"NsrVersion", nsrStats.NsrVersion})
    nsrStats.EntityData.Leafs.Append("nsr-nodeid", types.YLeaf{"NsrNodeid", nsrStats.NsrNodeid})
    nsrStats.EntityData.Leafs.Append("nsr-peer-version", types.YLeaf{"NsrPeerVersion", nsrStats.NsrPeerVersion})
    nsrStats.EntityData.Leafs.Append("nsr-peer-nodeid", types.YLeaf{"NsrPeerNodeid", nsrStats.NsrPeerNodeid})
    nsrStats.EntityData.Leafs.Append("nsr-fabric-mtu", types.YLeaf{"NsrFabricMtu", nsrStats.NsrFabricMtu})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-qad-qid", types.YLeaf{"NsrNbrQadQid", nsrStats.NsrNbrQadQid})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-qad-qid", types.YLeaf{"NsrLsaQadQid", nsrStats.NsrLsaQadQid})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-qad-mdata-count", types.YLeaf{"NsrNbrQadMdataCount", nsrStats.NsrNbrQadMdataCount})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-qad-mdata-count", types.YLeaf{"NsrLsaQadMdataCount", nsrStats.NsrLsaQadMdataCount})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-init-sync-pend-count", types.YLeaf{"NsrNbrInitSyncPendCount", nsrStats.NsrNbrInitSyncPendCount})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-init-sync-pend-count", types.YLeaf{"NsrLsaInitSyncPendCount", nsrStats.NsrLsaInitSyncPendCount})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-seq-no", types.YLeaf{"NsrNbrSeqNo", nsrStats.NsrNbrSeqNo})
    nsrStats.EntityData.Leafs.Append("nsr-intf-seq-no", types.YLeaf{"NsrIntfSeqNo", nsrStats.NsrIntfSeqNo})
    nsrStats.EntityData.Leafs.Append("nsr-tmr-quant", types.YLeaf{"NsrTmrQuant", nsrStats.NsrTmrQuant})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-attempts", types.YLeaf{"NsrConnToActiveAttempts", nsrStats.NsrConnToActiveAttempts})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-fails", types.YLeaf{"NsrConnToActiveFails", nsrStats.NsrConnToActiveFails})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-opens", types.YLeaf{"NsrConnToActiveOpens", nsrStats.NsrConnToActiveOpens})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-closes", types.YLeaf{"NsrConnToActiveCloses", nsrStats.NsrConnToActiveCloses})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-errors", types.YLeaf{"NsrConnToActiveErrors", nsrStats.NsrConnToActiveErrors})

    nsrStats.EntityData.YListKeys = []string {}

    return &(nsrStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched
// nsr thd sched
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched_NsrPri
}

func (nsrThdSched *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched) GetEntityData() *types.CommonEntityData {
    nsrThdSched.EntityData.YFilter = nsrThdSched.YFilter
    nsrThdSched.EntityData.YangName = "nsr-thd-sched"
    nsrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrThdSched.EntityData.ParentYangName = "nsr-stats"
    nsrThdSched.EntityData.SegmentPath = "nsr-thd-sched"
    nsrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrThdSched.NsrPri {
        nsrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrThdSched.NsrPri[i]})
    }
    nsrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrThdSched.NsrPulseQuant})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrThdSched.NsrEventsInQ})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrThdSched.NsrEventsTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrThdSched.NsrEventsRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrThdSched.NsrBadPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrThdSched.NsrGoodPulsesRx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrThdSched.NsrPulsesTx})
    nsrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrThdSched.NsrPulseTxFails})

    nsrThdSched.EntityData.YListKeys = []string {}

    return &(nsrThdSched.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched
// nsr rtr thd sched
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr pulse quant. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // nsr events in q. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // nsr events tx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsTx interface{}

    // nsr events rx. The type is interface{} with range: 0..18446744073709551615.
    NsrEventsRx interface{}

    // nsr bad pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // nsr good pulses rx. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // nsr pulses tx. The type is interface{} with range: 0..18446744073709551615.
    NsrPulsesTx interface{}

    // nsr pulse tx fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri.
    NsrPri []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched) GetEntityData() *types.CommonEntityData {
    nsrRtrThdSched.EntityData.YFilter = nsrRtrThdSched.YFilter
    nsrRtrThdSched.EntityData.YangName = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrRtrThdSched.EntityData.ParentYangName = "nsr-stats"
    nsrRtrThdSched.EntityData.SegmentPath = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrRtrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrRtrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrRtrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrRtrThdSched.NsrPri {
        nsrRtrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrRtrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrRtrThdSched.NsrPri[i]})
    }
    nsrRtrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrRtrThdSched.NsrPulseQuant})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrRtrThdSched.NsrEventsInQ})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrRtrThdSched.NsrEventsTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrRtrThdSched.NsrEventsRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrRtrThdSched.NsrBadPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrRtrThdSched.NsrGoodPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrRtrThdSched.NsrPulsesTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrRtrThdSched.NsrPulseTxFails})

    nsrRtrThdSched.EntityData.YListKeys = []string {}

    return &(nsrRtrThdSched.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nsr sched pri. The type is interface{} with range: 0..4294967295.
    NsrSchedPri interface{}

    // nsr sched quant. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // nsr sched remain quant. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // nsr sched evs in q. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // nsr sched max evs. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // nsr sched peak q len. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // nsr sched evs qd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // nsr sched enq fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // nsr sched evs deqd. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-rtr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri"
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmFlag
// Nsr Fsm Flags information
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmFlag *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmFlag) GetEntityData() *types.CommonEntityData {
    nsrFsmFlag.EntityData.YFilter = nsrFsmFlag.YFilter
    nsrFsmFlag.EntityData.YangName = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmFlag.EntityData.ParentYangName = "nsr-stats"
    nsrFsmFlag.EntityData.SegmentPath = "nsr-fsm-flag"
    nsrFsmFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmFlag.EntityData.Children = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmFlag.Entry})

    nsrFsmFlag.EntityData.YListKeys = []string {}

    return &(nsrFsmFlag.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmRunningTimer
// Nsr Fsm Running Timers
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmRunningTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (nsrFsmRunningTimer *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrFsmRunningTimer) GetEntityData() *types.CommonEntityData {
    nsrFsmRunningTimer.EntityData.YFilter = nsrFsmRunningTimer.YFilter
    nsrFsmRunningTimer.EntityData.YangName = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.BundleName = "cisco_ios_xr"
    nsrFsmRunningTimer.EntityData.ParentYangName = "nsr-stats"
    nsrFsmRunningTimer.EntityData.SegmentPath = "nsr-fsm-running-timer"
    nsrFsmRunningTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrFsmRunningTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrFsmRunningTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrFsmRunningTimer.EntityData.Children = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs = types.NewOrderedMap()
    nsrFsmRunningTimer.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrFsmRunningTimer.Entry})

    nsrFsmRunningTimer.EntityData.YListKeys = []string {}

    return &(nsrFsmRunningTimer.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrIssuMilestone
// Nsr Issu Milestones
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrIssuMilestone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Milestone Name. The type is string.
    MilestoneName interface{}

    // Milestone Status. The type is string.
    MilestoneStatus interface{}
}

func (nsrIssuMilestone *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrIssuMilestone) GetEntityData() *types.CommonEntityData {
    nsrIssuMilestone.EntityData.YFilter = nsrIssuMilestone.YFilter
    nsrIssuMilestone.EntityData.YangName = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.BundleName = "cisco_ios_xr"
    nsrIssuMilestone.EntityData.ParentYangName = "nsr-stats"
    nsrIssuMilestone.EntityData.SegmentPath = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrIssuMilestone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrIssuMilestone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrIssuMilestone.EntityData.Children = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-name", types.YLeaf{"MilestoneName", nsrIssuMilestone.MilestoneName})
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-status", types.YLeaf{"MilestoneStatus", nsrIssuMilestone.MilestoneStatus})

    nsrIssuMilestone.EntityData.YListKeys = []string {}

    return &(nsrIssuMilestone.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory
// Nsr Error History List
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nsr Revision version. The type is interface{} with range: 0..4294967295.
    NsrRevisionversion interface{}

    // Total errors for this nsr revision version. The type is interface{} with
    // range: -2147483648..2147483647.
    TotalErrors interface{}

    // List of erros. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo.
    NsrErrorInfo []*Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo
}

func (nsrErrHistory *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory) GetEntityData() *types.CommonEntityData {
    nsrErrHistory.EntityData.YFilter = nsrErrHistory.YFilter
    nsrErrHistory.EntityData.YangName = "nsr-err-history"
    nsrErrHistory.EntityData.BundleName = "cisco_ios_xr"
    nsrErrHistory.EntityData.ParentYangName = "nsr-stats"
    nsrErrHistory.EntityData.SegmentPath = "nsr-err-history"
    nsrErrHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrHistory.EntityData.Children = types.NewOrderedMap()
    nsrErrHistory.EntityData.Children.Append("nsr-error-info", types.YChild{"NsrErrorInfo", nil})
    for i := range nsrErrHistory.NsrErrorInfo {
        nsrErrHistory.EntityData.Children.Append(types.GetSegmentPath(nsrErrHistory.NsrErrorInfo[i]), types.YChild{"NsrErrorInfo", nsrErrHistory.NsrErrorInfo[i]})
    }
    nsrErrHistory.EntityData.Leafs = types.NewOrderedMap()
    nsrErrHistory.EntityData.Leafs.Append("nsr-revisionversion", types.YLeaf{"NsrRevisionversion", nsrErrHistory.NsrRevisionversion})
    nsrErrHistory.EntityData.Leafs.Append("total-errors", types.YLeaf{"TotalErrors", nsrErrHistory.TotalErrors})

    nsrErrHistory.EntityData.YListKeys = []string {}

    return &(nsrErrHistory.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo
// List of erros
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count this error hit during the Nsr Revision. The type is interface{} with
    // range: -2147483648..2147483647.
    ErrCount interface{}

    // Error Information. The type is string.
    ErrInfoString interface{}

    // Time this error was last hit.
    LastErrTime Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime
}

func (nsrErrorInfo *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo) GetEntityData() *types.CommonEntityData {
    nsrErrorInfo.EntityData.YFilter = nsrErrorInfo.YFilter
    nsrErrorInfo.EntityData.YangName = "nsr-error-info"
    nsrErrorInfo.EntityData.BundleName = "cisco_ios_xr"
    nsrErrorInfo.EntityData.ParentYangName = "nsr-err-history"
    nsrErrorInfo.EntityData.SegmentPath = "nsr-error-info"
    nsrErrorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrorInfo.EntityData.Children = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Children.Append("last-err-time", types.YChild{"LastErrTime", &nsrErrorInfo.LastErrTime})
    nsrErrorInfo.EntityData.Leafs = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Leafs.Append("err-count", types.YLeaf{"ErrCount", nsrErrorInfo.ErrCount})
    nsrErrorInfo.EntityData.Leafs.Append("err-info-string", types.YLeaf{"ErrInfoString", nsrErrorInfo.ErrInfoString})

    nsrErrorInfo.EntityData.YListKeys = []string {}

    return &(nsrErrorInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime
// Time this error was last hit
type Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lastErrTime *Ospf_Processes_Process_DefaultVrf_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime) GetEntityData() *types.CommonEntityData {
    lastErrTime.EntityData.YFilter = lastErrTime.YFilter
    lastErrTime.EntityData.YangName = "last-err-time"
    lastErrTime.EntityData.BundleName = "cisco_ios_xr"
    lastErrTime.EntityData.ParentYangName = "nsr-error-info"
    lastErrTime.EntityData.SegmentPath = "last-err-time"
    lastErrTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastErrTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastErrTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastErrTime.EntityData.Children = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lastErrTime.Second})
    lastErrTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lastErrTime.Nanosecond})

    lastErrTime.EntityData.YListKeys = []string {}

    return &(lastErrTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_FrrStats
// OSPF fast-reroute statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_FrrStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of IPFRR paths. The type is interface{} with range: 0..4294967295.
    FsPaths interface{}

    // Number of paths enabled for protection. The type is interface{} with range:
    // 0..4294967295.
    FsPathsEligible interface{}

    // Number of paths protected. The type is interface{} with range:
    // 0..4294967295.
    FsPathsProtected interface{}
}

func (frrStats *Ospf_Processes_Process_DefaultVrf_Statistics_FrrStats) GetEntityData() *types.CommonEntityData {
    frrStats.EntityData.YFilter = frrStats.YFilter
    frrStats.EntityData.YangName = "frr-stats"
    frrStats.EntityData.BundleName = "cisco_ios_xr"
    frrStats.EntityData.ParentYangName = "statistics"
    frrStats.EntityData.SegmentPath = "frr-stats"
    frrStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrStats.EntityData.Children = types.NewOrderedMap()
    frrStats.EntityData.Leafs = types.NewOrderedMap()
    frrStats.EntityData.Leafs.Append("fs-paths", types.YLeaf{"FsPaths", frrStats.FsPaths})
    frrStats.EntityData.Leafs.Append("fs-paths-eligible", types.YLeaf{"FsPathsEligible", frrStats.FsPathsEligible})
    frrStats.EntityData.Leafs.Append("fs-paths-protected", types.YLeaf{"FsPathsProtected", frrStats.FsPathsProtected})

    frrStats.EntityData.YListKeys = []string {}

    return &(frrStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_TeStats
// OSPF TE IO statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_TeStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // te connected. The type is bool.
    TeConnected interface{}

    // control disconnects. The type is interface{} with range: 0..4294967295.
    ControlDisconnects interface{}

    // te disconnects. The type is interface{} with range: 0..4294967295.
    TeDisconnects interface{}

    // adj gets. The type is interface{} with range: 0..4294967295.
    AdjGets interface{}

    // link floods. The type is interface{} with range: 0..4294967295.
    LinkFloods interface{}

    // link fragment floods. The type is interface{} with range: 0..4294967295.
    LinkFragmentFloods interface{}

    // lsp gets. The type is interface{} with range: 0..4294967295.
    LspGets interface{}

    // tunnel announces. The type is interface{} with range: 0..4294967295.
    TunnelAnnounces interface{}

    // total tunnels. The type is interface{} with range: 0..4294967295.
    TotalTunnels interface{}

    // control batch reads. The type is interface{} with range: 0..4294967295.
    ControlBatchReads interface{}

    // control batch writes. The type is interface{} with range: 0..4294967295.
    ControlBatchWrites interface{}

    // link batch reads. The type is interface{} with range: 0..4294967295.
    LinkBatchReads interface{}

    // link batch writes. The type is interface{} with range: 0..4294967295.
    LinkBatchWrites interface{}

    // adj changes. The type is interface{} with range: 0..4294967295.
    AdjChanges interface{}

    // fragment deletes. The type is interface{} with range: 0..4294967295.
    FragmentDeletes interface{}

    // fragment announces. The type is interface{} with range: 0..4294967295.
    FragmentAnnounces interface{}

    // data trans completes. The type is interface{} with range: 0..4294967295.
    DataTransCompletes interface{}

    // pce listen. The type is interface{} with range: 0..4294967295.
    PceListen interface{}

    // pce stoplisten. The type is interface{} with range: 0..4294967295.
    PceStoplisten interface{}

    // pce flood. The type is interface{} with range: 0..4294967295.
    PceFlood interface{}

    // pce get. The type is interface{} with range: 0..4294967295.
    PceGet interface{}

    // pce br lookup. The type is interface{} with range: 0..4294967295.
    PceBrLookup interface{}

    // pce br lkup num dests. The type is interface{} with range: 0..4294967295.
    PceBrLkupNumDests interface{}

    // pce br resp fails. The type is interface{} with range: 0..4294967295.
    PceBrRespFails interface{}

    // pce node announce batches. The type is interface{} with range:
    // 0..4294967295.
    PceNodeAnnounceBatches interface{}

    // pce node delete batches. The type is interface{} with range: 0..4294967295.
    PceNodeDeleteBatches interface{}

    // pce num node announce. The type is interface{} with range: 0..4294967295.
    PceNumNodeAnnounce interface{}

    // pce num node delete. The type is interface{} with range: 0..4294967295.
    PceNumNodeDelete interface{}

    // pce node send fails. The type is interface{} with range: 0..4294967295.
    PceNodeSendFails interface{}

    // te sr path reg idt recvd. The type is bool.
    TeSrPathRegIdtRecvd interface{}

    // te sr idt sent. The type is bool.
    TeSrIdtSent interface{}

    // sr num area enabled. The type is interface{} with range: 0..4294967295.
    SrNumAreaEnabled interface{}
}

func (teStats *Ospf_Processes_Process_DefaultVrf_Statistics_TeStats) GetEntityData() *types.CommonEntityData {
    teStats.EntityData.YFilter = teStats.YFilter
    teStats.EntityData.YangName = "te-stats"
    teStats.EntityData.BundleName = "cisco_ios_xr"
    teStats.EntityData.ParentYangName = "statistics"
    teStats.EntityData.SegmentPath = "te-stats"
    teStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teStats.EntityData.Children = types.NewOrderedMap()
    teStats.EntityData.Leafs = types.NewOrderedMap()
    teStats.EntityData.Leafs.Append("te-connected", types.YLeaf{"TeConnected", teStats.TeConnected})
    teStats.EntityData.Leafs.Append("control-disconnects", types.YLeaf{"ControlDisconnects", teStats.ControlDisconnects})
    teStats.EntityData.Leafs.Append("te-disconnects", types.YLeaf{"TeDisconnects", teStats.TeDisconnects})
    teStats.EntityData.Leafs.Append("adj-gets", types.YLeaf{"AdjGets", teStats.AdjGets})
    teStats.EntityData.Leafs.Append("link-floods", types.YLeaf{"LinkFloods", teStats.LinkFloods})
    teStats.EntityData.Leafs.Append("link-fragment-floods", types.YLeaf{"LinkFragmentFloods", teStats.LinkFragmentFloods})
    teStats.EntityData.Leafs.Append("lsp-gets", types.YLeaf{"LspGets", teStats.LspGets})
    teStats.EntityData.Leafs.Append("tunnel-announces", types.YLeaf{"TunnelAnnounces", teStats.TunnelAnnounces})
    teStats.EntityData.Leafs.Append("total-tunnels", types.YLeaf{"TotalTunnels", teStats.TotalTunnels})
    teStats.EntityData.Leafs.Append("control-batch-reads", types.YLeaf{"ControlBatchReads", teStats.ControlBatchReads})
    teStats.EntityData.Leafs.Append("control-batch-writes", types.YLeaf{"ControlBatchWrites", teStats.ControlBatchWrites})
    teStats.EntityData.Leafs.Append("link-batch-reads", types.YLeaf{"LinkBatchReads", teStats.LinkBatchReads})
    teStats.EntityData.Leafs.Append("link-batch-writes", types.YLeaf{"LinkBatchWrites", teStats.LinkBatchWrites})
    teStats.EntityData.Leafs.Append("adj-changes", types.YLeaf{"AdjChanges", teStats.AdjChanges})
    teStats.EntityData.Leafs.Append("fragment-deletes", types.YLeaf{"FragmentDeletes", teStats.FragmentDeletes})
    teStats.EntityData.Leafs.Append("fragment-announces", types.YLeaf{"FragmentAnnounces", teStats.FragmentAnnounces})
    teStats.EntityData.Leafs.Append("data-trans-completes", types.YLeaf{"DataTransCompletes", teStats.DataTransCompletes})
    teStats.EntityData.Leafs.Append("pce-listen", types.YLeaf{"PceListen", teStats.PceListen})
    teStats.EntityData.Leafs.Append("pce-stoplisten", types.YLeaf{"PceStoplisten", teStats.PceStoplisten})
    teStats.EntityData.Leafs.Append("pce-flood", types.YLeaf{"PceFlood", teStats.PceFlood})
    teStats.EntityData.Leafs.Append("pce-get", types.YLeaf{"PceGet", teStats.PceGet})
    teStats.EntityData.Leafs.Append("pce-br-lookup", types.YLeaf{"PceBrLookup", teStats.PceBrLookup})
    teStats.EntityData.Leafs.Append("pce-br-lkup-num-dests", types.YLeaf{"PceBrLkupNumDests", teStats.PceBrLkupNumDests})
    teStats.EntityData.Leafs.Append("pce-br-resp-fails", types.YLeaf{"PceBrRespFails", teStats.PceBrRespFails})
    teStats.EntityData.Leafs.Append("pce-node-announce-batches", types.YLeaf{"PceNodeAnnounceBatches", teStats.PceNodeAnnounceBatches})
    teStats.EntityData.Leafs.Append("pce-node-delete-batches", types.YLeaf{"PceNodeDeleteBatches", teStats.PceNodeDeleteBatches})
    teStats.EntityData.Leafs.Append("pce-num-node-announce", types.YLeaf{"PceNumNodeAnnounce", teStats.PceNumNodeAnnounce})
    teStats.EntityData.Leafs.Append("pce-num-node-delete", types.YLeaf{"PceNumNodeDelete", teStats.PceNumNodeDelete})
    teStats.EntityData.Leafs.Append("pce-node-send-fails", types.YLeaf{"PceNodeSendFails", teStats.PceNodeSendFails})
    teStats.EntityData.Leafs.Append("te-sr-path-reg-idt-recvd", types.YLeaf{"TeSrPathRegIdtRecvd", teStats.TeSrPathRegIdtRecvd})
    teStats.EntityData.Leafs.Append("te-sr-idt-sent", types.YLeaf{"TeSrIdtSent", teStats.TeSrIdtSent})
    teStats.EntityData.Leafs.Append("sr-num-area-enabled", types.YLeaf{"SrNumAreaEnabled", teStats.SrNumAreaEnabled})

    teStats.EntityData.YListKeys = []string {}

    return &(teStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_ProtocolStats
// OSPF Protocol statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_ProtocolStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // inputs. The type is interface{} with range: 0..4294967295.
    Inputs interface{}

    // input hello. The type is interface{} with range: 0..4294967295.
    InputHello interface{}

    // input dbdes. The type is interface{} with range: 0..4294967295.
    InputDbdes interface{}

    // input dbdes lsa. The type is interface{} with range: 0..4294967295.
    InputDbdesLsa interface{}

    // input req. The type is interface{} with range: 0..4294967295.
    InputReq interface{}

    // input req lsa. The type is interface{} with range: 0..4294967295.
    InputReqLsa interface{}

    // input lsupd. The type is interface{} with range: 0..4294967295.
    InputLsupd interface{}

    // input lsupd lsa. The type is interface{} with range: 0..4294967295.
    InputLsupdLsa interface{}

    // input ack. The type is interface{} with range: 0..4294967295.
    InputAck interface{}

    // input ack lsa. The type is interface{} with range: 0..4294967295.
    InputAckLsa interface{}

    // checksumerr. The type is interface{} with range: 0..4294967295.
    Checksumerr interface{}

    // input autherr. The type is interface{} with range: 0..4294967295.
    InputAutherr interface{}

    // outputs. The type is interface{} with range: 0..4294967295.
    Outputs interface{}

    // output hello. The type is interface{} with range: 0..4294967295.
    OutputHello interface{}

    // output dbdes. The type is interface{} with range: 0..4294967295.
    OutputDbdes interface{}

    // output dbdes lsa. The type is interface{} with range: 0..4294967295.
    OutputDbdesLsa interface{}

    // output req. The type is interface{} with range: 0..4294967295.
    OutputReq interface{}

    // output req lsa. The type is interface{} with range: 0..4294967295.
    OutputReqLsa interface{}

    // output lsupd. The type is interface{} with range: 0..4294967295.
    OutputLsupd interface{}

    // output lsupd lsa. The type is interface{} with range: 0..4294967295.
    OutputLsupdLsa interface{}

    // output ack. The type is interface{} with range: 0..4294967295.
    OutputAck interface{}

    // output ack lsa. The type is interface{} with range: 0..4294967295.
    OutputAckLsa interface{}

    // output autherr. The type is interface{} with range: 0..4294967295.
    OutputAutherr interface{}

    // h input dbdes. The type is interface{} with range: 0..4294967295.
    HInputDbdes interface{}

    // h input req. The type is interface{} with range: 0..4294967295.
    HInputReq interface{}

    // h input lsupd. The type is interface{} with range: 0..4294967295.
    HInputLsupd interface{}

    // h input ack. The type is interface{} with range: 0..4294967295.
    HInputAck interface{}
}

func (protocolStats *Ospf_Processes_Process_DefaultVrf_Statistics_ProtocolStats) GetEntityData() *types.CommonEntityData {
    protocolStats.EntityData.YFilter = protocolStats.YFilter
    protocolStats.EntityData.YangName = "protocol-stats"
    protocolStats.EntityData.BundleName = "cisco_ios_xr"
    protocolStats.EntityData.ParentYangName = "statistics"
    protocolStats.EntityData.SegmentPath = "protocol-stats"
    protocolStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStats.EntityData.Children = types.NewOrderedMap()
    protocolStats.EntityData.Leafs = types.NewOrderedMap()
    protocolStats.EntityData.Leafs.Append("inputs", types.YLeaf{"Inputs", protocolStats.Inputs})
    protocolStats.EntityData.Leafs.Append("input-hello", types.YLeaf{"InputHello", protocolStats.InputHello})
    protocolStats.EntityData.Leafs.Append("input-dbdes", types.YLeaf{"InputDbdes", protocolStats.InputDbdes})
    protocolStats.EntityData.Leafs.Append("input-dbdes-lsa", types.YLeaf{"InputDbdesLsa", protocolStats.InputDbdesLsa})
    protocolStats.EntityData.Leafs.Append("input-req", types.YLeaf{"InputReq", protocolStats.InputReq})
    protocolStats.EntityData.Leafs.Append("input-req-lsa", types.YLeaf{"InputReqLsa", protocolStats.InputReqLsa})
    protocolStats.EntityData.Leafs.Append("input-lsupd", types.YLeaf{"InputLsupd", protocolStats.InputLsupd})
    protocolStats.EntityData.Leafs.Append("input-lsupd-lsa", types.YLeaf{"InputLsupdLsa", protocolStats.InputLsupdLsa})
    protocolStats.EntityData.Leafs.Append("input-ack", types.YLeaf{"InputAck", protocolStats.InputAck})
    protocolStats.EntityData.Leafs.Append("input-ack-lsa", types.YLeaf{"InputAckLsa", protocolStats.InputAckLsa})
    protocolStats.EntityData.Leafs.Append("checksumerr", types.YLeaf{"Checksumerr", protocolStats.Checksumerr})
    protocolStats.EntityData.Leafs.Append("input-autherr", types.YLeaf{"InputAutherr", protocolStats.InputAutherr})
    protocolStats.EntityData.Leafs.Append("outputs", types.YLeaf{"Outputs", protocolStats.Outputs})
    protocolStats.EntityData.Leafs.Append("output-hello", types.YLeaf{"OutputHello", protocolStats.OutputHello})
    protocolStats.EntityData.Leafs.Append("output-dbdes", types.YLeaf{"OutputDbdes", protocolStats.OutputDbdes})
    protocolStats.EntityData.Leafs.Append("output-dbdes-lsa", types.YLeaf{"OutputDbdesLsa", protocolStats.OutputDbdesLsa})
    protocolStats.EntityData.Leafs.Append("output-req", types.YLeaf{"OutputReq", protocolStats.OutputReq})
    protocolStats.EntityData.Leafs.Append("output-req-lsa", types.YLeaf{"OutputReqLsa", protocolStats.OutputReqLsa})
    protocolStats.EntityData.Leafs.Append("output-lsupd", types.YLeaf{"OutputLsupd", protocolStats.OutputLsupd})
    protocolStats.EntityData.Leafs.Append("output-lsupd-lsa", types.YLeaf{"OutputLsupdLsa", protocolStats.OutputLsupdLsa})
    protocolStats.EntityData.Leafs.Append("output-ack", types.YLeaf{"OutputAck", protocolStats.OutputAck})
    protocolStats.EntityData.Leafs.Append("output-ack-lsa", types.YLeaf{"OutputAckLsa", protocolStats.OutputAckLsa})
    protocolStats.EntityData.Leafs.Append("output-autherr", types.YLeaf{"OutputAutherr", protocolStats.OutputAutherr})
    protocolStats.EntityData.Leafs.Append("h-input-dbdes", types.YLeaf{"HInputDbdes", protocolStats.HInputDbdes})
    protocolStats.EntityData.Leafs.Append("h-input-req", types.YLeaf{"HInputReq", protocolStats.HInputReq})
    protocolStats.EntityData.Leafs.Append("h-input-lsupd", types.YLeaf{"HInputLsupd", protocolStats.HInputLsupd})
    protocolStats.EntityData.Leafs.Append("h-input-ack", types.YLeaf{"HInputAck", protocolStats.HInputAck})

    protocolStats.EntityData.YListKeys = []string {}

    return &(protocolStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_RawIoStats
// OSPF RAW IO statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_RawIoStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // out sent. The type is interface{} with range: 0..4294967295.
    OutSent interface{}

    // out bytes sent. The type is interface{} with range: 0..4294967295.
    OutBytesSent interface{}

    // out no conn discarded. The type is interface{} with range: 0..4294967295.
    OutNoConnDiscarded interface{}

    // out null src discarded. The type is interface{} with range: 0..4294967295.
    OutNullSrcDiscarded interface{}

    // out no pak discarded. The type is interface{} with range: 0..4294967295.
    OutNoPakDiscarded interface{}

    // out ipv4 hdr err discarded. The type is interface{} with range:
    // 0..4294967295.
    OutIpv4HdrErrDiscarded interface{}

    // out send pak err discarded. The type is interface{} with range:
    // 0..4294967295.
    OutSendPakErrDiscarded interface{}

    // in rcv. The type is interface{} with range: 0..4294967295.
    InRcv interface{}

    // in bytes rcv. The type is interface{} with range: 0..4294967295.
    InBytesRcv interface{}

    // in short msg discarded. The type is interface{} with range: 0..4294967295.
    InShortMsgDiscarded interface{}

    // in no mem discarded. The type is interface{} with range: 0..4294967295.
    InNoMemDiscarded interface{}

    // in raw event. The type is interface{} with range: 0..4294967295.
    InRawEvent interface{}

    // disconnects. The type is interface{} with range: 0..4294967295.
    Disconnects interface{}

    // in standby discarded. The type is interface{} with range: 0..4294967295.
    InStandbyDiscarded interface{}

    // nsr not ready discarded. The type is interface{} with range: 0..4294967295.
    NsrNotReadyDiscarded interface{}

    // raw connected. The type is bool.
    RawConnected interface{}

    // sl raw connected. The type is bool.
    SlRawConnected interface{}
}

func (rawIoStats *Ospf_Processes_Process_DefaultVrf_Statistics_RawIoStats) GetEntityData() *types.CommonEntityData {
    rawIoStats.EntityData.YFilter = rawIoStats.YFilter
    rawIoStats.EntityData.YangName = "raw-io-stats"
    rawIoStats.EntityData.BundleName = "cisco_ios_xr"
    rawIoStats.EntityData.ParentYangName = "statistics"
    rawIoStats.EntityData.SegmentPath = "raw-io-stats"
    rawIoStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rawIoStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rawIoStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rawIoStats.EntityData.Children = types.NewOrderedMap()
    rawIoStats.EntityData.Leafs = types.NewOrderedMap()
    rawIoStats.EntityData.Leafs.Append("out-sent", types.YLeaf{"OutSent", rawIoStats.OutSent})
    rawIoStats.EntityData.Leafs.Append("out-bytes-sent", types.YLeaf{"OutBytesSent", rawIoStats.OutBytesSent})
    rawIoStats.EntityData.Leafs.Append("out-no-conn-discarded", types.YLeaf{"OutNoConnDiscarded", rawIoStats.OutNoConnDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-null-src-discarded", types.YLeaf{"OutNullSrcDiscarded", rawIoStats.OutNullSrcDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-no-pak-discarded", types.YLeaf{"OutNoPakDiscarded", rawIoStats.OutNoPakDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-ipv4-hdr-err-discarded", types.YLeaf{"OutIpv4HdrErrDiscarded", rawIoStats.OutIpv4HdrErrDiscarded})
    rawIoStats.EntityData.Leafs.Append("out-send-pak-err-discarded", types.YLeaf{"OutSendPakErrDiscarded", rawIoStats.OutSendPakErrDiscarded})
    rawIoStats.EntityData.Leafs.Append("in-rcv", types.YLeaf{"InRcv", rawIoStats.InRcv})
    rawIoStats.EntityData.Leafs.Append("in-bytes-rcv", types.YLeaf{"InBytesRcv", rawIoStats.InBytesRcv})
    rawIoStats.EntityData.Leafs.Append("in-short-msg-discarded", types.YLeaf{"InShortMsgDiscarded", rawIoStats.InShortMsgDiscarded})
    rawIoStats.EntityData.Leafs.Append("in-no-mem-discarded", types.YLeaf{"InNoMemDiscarded", rawIoStats.InNoMemDiscarded})
    rawIoStats.EntityData.Leafs.Append("in-raw-event", types.YLeaf{"InRawEvent", rawIoStats.InRawEvent})
    rawIoStats.EntityData.Leafs.Append("disconnects", types.YLeaf{"Disconnects", rawIoStats.Disconnects})
    rawIoStats.EntityData.Leafs.Append("in-standby-discarded", types.YLeaf{"InStandbyDiscarded", rawIoStats.InStandbyDiscarded})
    rawIoStats.EntityData.Leafs.Append("nsr-not-ready-discarded", types.YLeaf{"NsrNotReadyDiscarded", rawIoStats.NsrNotReadyDiscarded})
    rawIoStats.EntityData.Leafs.Append("raw-connected", types.YLeaf{"RawConnected", rawIoStats.RawConnected})
    rawIoStats.EntityData.Leafs.Append("sl-raw-connected", types.YLeaf{"SlRawConnected", rawIoStats.SlRawConnected})

    rawIoStats.EntityData.YListKeys = []string {}

    return &(rawIoStats.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries
// Statistics innformation Interface table
type Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics information for a specific interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry.
    InterfaceStatsEntry []*Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry
}

func (interfaceStatsEntries *Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntries.EntityData.YFilter = interfaceStatsEntries.YFilter
    interfaceStatsEntries.EntityData.YangName = "interface-stats-entries"
    interfaceStatsEntries.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntries.EntityData.ParentYangName = "statistics"
    interfaceStatsEntries.EntityData.SegmentPath = "interface-stats-entries"
    interfaceStatsEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntries.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntries.EntityData.Children.Append("interface-stats-entry", types.YChild{"InterfaceStatsEntry", nil})
    for i := range interfaceStatsEntries.InterfaceStatsEntry {
        interfaceStatsEntries.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntries.InterfaceStatsEntry[i]), types.YChild{"InterfaceStatsEntry", interfaceStatsEntries.InterfaceStatsEntry[i]})
    }
    interfaceStatsEntries.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatsEntries.EntityData.YListKeys = []string {}

    return &(interfaceStatsEntries.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry
// Statistics information for a specific interface
type Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // interface handle type. The type is string with pattern: [a-zA-Z0-9./-]+.
    Handle interface{}

    // interface name. The type is string.
    IfNameStr interface{}

    // interface entry. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry.
    IfEntry []*Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
}

func (interfaceStatsEntry *Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntry.EntityData.YFilter = interfaceStatsEntry.YFilter
    interfaceStatsEntry.EntityData.YangName = "interface-stats-entry"
    interfaceStatsEntry.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntry.EntityData.ParentYangName = "interface-stats-entries"
    interfaceStatsEntry.EntityData.SegmentPath = "interface-stats-entry" + types.AddKeyToken(interfaceStatsEntry.InterfaceName, "interface-name")
    interfaceStatsEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntry.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Children.Append("if-entry", types.YChild{"IfEntry", nil})
    for i := range interfaceStatsEntry.IfEntry {
        interfaceStatsEntry.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntry.IfEntry[i]), types.YChild{"IfEntry", interfaceStatsEntry.IfEntry[i]})
    }
    interfaceStatsEntry.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatsEntry.InterfaceName})
    interfaceStatsEntry.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", interfaceStatsEntry.Handle})
    interfaceStatsEntry.EntityData.Leafs.Append("if-name-str", types.YLeaf{"IfNameStr", interfaceStatsEntry.IfNameStr})

    interfaceStatsEntry.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatsEntry.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
// interface entry
type Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF madj interface. The type is bool.
    MadjIntf interface{}

    // OSPF area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // OSPF aread id string. The type is string.
    AreaIdStr interface{}

    // OSPF interface statistics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat.
    IfStat []*Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
}

func (ifEntry *Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry) GetEntityData() *types.CommonEntityData {
    ifEntry.EntityData.YFilter = ifEntry.YFilter
    ifEntry.EntityData.YangName = "if-entry"
    ifEntry.EntityData.BundleName = "cisco_ios_xr"
    ifEntry.EntityData.ParentYangName = "interface-stats-entry"
    ifEntry.EntityData.SegmentPath = "if-entry"
    ifEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifEntry.EntityData.Children = types.NewOrderedMap()
    ifEntry.EntityData.Children.Append("if-stat", types.YChild{"IfStat", nil})
    for i := range ifEntry.IfStat {
        ifEntry.EntityData.Children.Append(types.GetSegmentPath(ifEntry.IfStat[i]), types.YChild{"IfStat", ifEntry.IfStat[i]})
    }
    ifEntry.EntityData.Leafs = types.NewOrderedMap()
    ifEntry.EntityData.Leafs.Append("madj-intf", types.YLeaf{"MadjIntf", ifEntry.MadjIntf})
    ifEntry.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", ifEntry.AreaId})
    ifEntry.EntityData.Leafs.Append("area-id-str", types.YLeaf{"AreaIdStr", ifEntry.AreaIdStr})

    ifEntry.EntityData.YListKeys = []string {}

    return &(ifEntry.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
// OSPF interface statistics
type Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (ifStat *Ospf_Processes_Process_DefaultVrf_Statistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat) GetEntityData() *types.CommonEntityData {
    ifStat.EntityData.YFilter = ifStat.YFilter
    ifStat.EntityData.YangName = "if-stat"
    ifStat.EntityData.BundleName = "cisco_ios_xr"
    ifStat.EntityData.ParentYangName = "if-entry"
    ifStat.EntityData.SegmentPath = "if-stat"
    ifStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifStat.EntityData.Children = types.NewOrderedMap()
    ifStat.EntityData.Leafs = types.NewOrderedMap()
    ifStat.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", ifStat.Entry})

    ifStat.EntityData.YListKeys = []string {}

    return &(ifStat.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation
// Container for OSPF Interfaces
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor table.
    Neighbors Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors

    // Request List table.
    Requests Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests

    // Retransmission list table.
    Retransmissions Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions

    // Neighbor detail table.
    NeighborDetails Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails
}

func (adjacencyInformation *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation) GetEntityData() *types.CommonEntityData {
    adjacencyInformation.EntityData.YFilter = adjacencyInformation.YFilter
    adjacencyInformation.EntityData.YangName = "adjacency-information"
    adjacencyInformation.EntityData.BundleName = "cisco_ios_xr"
    adjacencyInformation.EntityData.ParentYangName = "default-vrf"
    adjacencyInformation.EntityData.SegmentPath = "adjacency-information"
    adjacencyInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyInformation.EntityData.Children = types.NewOrderedMap()
    adjacencyInformation.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &adjacencyInformation.Neighbors})
    adjacencyInformation.EntityData.Children.Append("requests", types.YChild{"Requests", &adjacencyInformation.Requests})
    adjacencyInformation.EntityData.Children.Append("retransmissions", types.YChild{"Retransmissions", &adjacencyInformation.Retransmissions})
    adjacencyInformation.EntityData.Children.Append("neighbor-details", types.YChild{"NeighborDetails", &adjacencyInformation.NeighborDetails})
    adjacencyInformation.EntityData.Leafs = types.NewOrderedMap()

    adjacencyInformation.EntityData.YListKeys = []string {}

    return &(adjacencyInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors
// Neighbor table
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor.
    Neighbor []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "adjacency-information"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor
// Neighbor information
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighbor.NeighborBfdInformation})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighbor.NeighborId})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighbor.NeighborInterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighbor.DrBdrState})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighbor.NeighborMadjInterface})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Neighbors_Neighbor_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests
// Request List table
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Request list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request.
    Request []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request
}

func (requests *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests) GetEntityData() *types.CommonEntityData {
    requests.EntityData.YFilter = requests.YFilter
    requests.EntityData.YangName = "requests"
    requests.EntityData.BundleName = "cisco_ios_xr"
    requests.EntityData.ParentYangName = "adjacency-information"
    requests.EntityData.SegmentPath = "requests"
    requests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requests.EntityData.Children = types.NewOrderedMap()
    requests.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requests.Request {
        requests.EntityData.Children.Append(types.GetSegmentPath(requests.Request[i]), types.YChild{"Request", requests.Request[i]})
    }
    requests.EntityData.Leafs = types.NewOrderedMap()

    requests.EntityData.YListKeys = []string {}

    return &(requests.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request
// Request list for a particular adjacency
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborId interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // Request list interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RequestInterfaceName interface{}

    // List of request list entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request_Request.
    Request []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request_Request
}

func (request *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "requests"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-id", types.YLeaf{"RequestNeighborId", request.RequestNeighborId})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("request-interface-name", types.YLeaf{"RequestInterfaceName", request.RequestInterfaceName})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request_Request
// List of request list entries
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (request *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Requests_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", request.HeaderLsId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})
    request.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", request.HeaderLsaChecksum})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions
// Retransmission list table
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Retransmission list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission.
    Retransmission []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission
}

func (retransmissions *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions) GetEntityData() *types.CommonEntityData {
    retransmissions.EntityData.YFilter = retransmissions.YFilter
    retransmissions.EntityData.YangName = "retransmissions"
    retransmissions.EntityData.BundleName = "cisco_ios_xr"
    retransmissions.EntityData.ParentYangName = "adjacency-information"
    retransmissions.EntityData.SegmentPath = "retransmissions"
    retransmissions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissions.EntityData.Children = types.NewOrderedMap()
    retransmissions.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissions.Retransmission {
        retransmissions.EntityData.Children.Append(types.GetSegmentPath(retransmissions.Retransmission[i]), types.YChild{"Retransmission", retransmissions.Retransmission[i]})
    }
    retransmissions.EntityData.Leafs = types.NewOrderedMap()

    retransmissions.EntityData.YListKeys = []string {}

    return &(retransmissions.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission
// Retransmission list for a particular adjacency
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborIpAddress interface{}

    // Retransmission list interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    RetransmissionInterfaceName interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionCount interface{}

    // List of Area scope entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb

    // List of AS Scope entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmissions"
    retransmission.EntityData.SegmentPath = "retransmission"
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-id", types.YLeaf{"RetransmissionNeighborId", retransmission.RetransmissionNeighborId})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-ip-address", types.YLeaf{"RetransmissionNeighborIpAddress", retransmission.RetransmissionNeighborIpAddress})
    retransmission.EntityData.Leafs.Append("retransmission-interface-name", types.YLeaf{"RetransmissionInterfaceName", retransmission.RetransmissionInterfaceName})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-count", types.YLeaf{"RetransmissionCount", retransmission.RetransmissionCount})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb
// List of Area scope entries
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAreaDb *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db"
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAreaDb.HeaderLsId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAreaDb.HeaderLsaChecksum})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb
// List of AS Scope entries
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAsdb *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_Retransmissions_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb"
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAsdb.HeaderLsId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAsdb.HeaderLsaChecksum})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails
// Neighbor detail table
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single neighbor's detail information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail.
    NeighborDetail []*Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail
}

func (neighborDetails *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails) GetEntityData() *types.CommonEntityData {
    neighborDetails.EntityData.YFilter = neighborDetails.YFilter
    neighborDetails.EntityData.YangName = "neighbor-details"
    neighborDetails.EntityData.BundleName = "cisco_ios_xr"
    neighborDetails.EntityData.ParentYangName = "adjacency-information"
    neighborDetails.EntityData.SegmentPath = "neighbor-details"
    neighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetails.EntityData.Children = types.NewOrderedMap()
    neighborDetails.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetails.NeighborDetail {
        neighborDetails.EntityData.Children.Append(types.GetSegmentPath(neighborDetails.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetails.NeighborDetail[i]})
    }
    neighborDetails.EntityData.Leafs = types.NewOrderedMap()

    neighborDetails.EntityData.YListKeys = []string {}

    return &(neighborDetails.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail
// A single neighbor's detail information
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    NeighborAreaId interface{}

    // Number of state changes. The type is interface{} with range: 0..65535.
    StateChangeCount interface{}

    // Cost of path to this neighbor. The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs. The type is bool.
    NeighborFilter interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Interface_.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // This is bitmaks of neighbor's option field received. The type is
    // interface{} with range: 0..255.
    NeighborOption interface{}

    // Number of pending events. The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // This is a bitmask of Link Local signalling options received from the
    // neighbor. The type is interface{} with range: 0..4294967295.
    NeighborLlsOption interface{}

    // Out-Of-Bound resynchronization in progress. The type is bool.
    OobResynchronization interface{}

    // For cisco NSF, the router is either Requester or Receiver. The type is
    // NsfRtr.
    NsfRouterState interface{}

    // The amount of time in seconds since last time Out-Of-Band resynchronization
    // was done with this neighbor. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastOobTime interface{}

    // LFA Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    LfaInterface interface{}

    // LFA Next Hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNextHop interface{}

    // LFA Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNeighborId interface{}

    // LFA Neighbor Revision. The type is interface{} with range: 0..4294967295.
    LfaNeighborRevision interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    NeighborAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    NeighborAckListHighWatermark interface{}

    // SR Adjacency SID Label. The type is interface{} with range: 0..4294967295.
    AdjacencySidLabel interface{}

    // SR Adjacency SID Protected. The type is bool.
    AdjacencySidProtected interface{}

    // SR Adjacency SID Unprotected Label. The type is interface{} with range:
    // 0..4294967295.
    AdjacencySidUnprotectedLabel interface{}

    // Interface ID of neighbor recived via LLS. The type is interface{} with
    // range: 0..65535.
    NeighborInterfaceId interface{}

    // Neighbor summary information.
    NeighborSummary Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation

    // Retransmission information with this neighbor.
    NeighborRetransmissionInformation Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
}

func (neighborDetail *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-details"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-summary", types.YChild{"NeighborSummary", &neighborDetail.NeighborSummary})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborDetail.NeighborBfdInformation})
    neighborDetail.EntityData.Children.Append("neighbor-retransmission-information", types.YChild{"NeighborRetransmissionInformation", &neighborDetail.NeighborRetransmissionInformation})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-area-id", types.YLeaf{"NeighborAreaId", neighborDetail.NeighborAreaId})
    neighborDetail.EntityData.Leafs.Append("state-change-count", types.YLeaf{"StateChangeCount", neighborDetail.StateChangeCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("neighbor-filter", types.YLeaf{"NeighborFilter", neighborDetail.NeighborFilter})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})
    neighborDetail.EntityData.Leafs.Append("neighbor-lls-option", types.YLeaf{"NeighborLlsOption", neighborDetail.NeighborLlsOption})
    neighborDetail.EntityData.Leafs.Append("oob-resynchronization", types.YLeaf{"OobResynchronization", neighborDetail.OobResynchronization})
    neighborDetail.EntityData.Leafs.Append("nsf-router-state", types.YLeaf{"NsfRouterState", neighborDetail.NsfRouterState})
    neighborDetail.EntityData.Leafs.Append("last-oob-time", types.YLeaf{"LastOobTime", neighborDetail.LastOobTime})
    neighborDetail.EntityData.Leafs.Append("lfa-interface", types.YLeaf{"LfaInterface", neighborDetail.LfaInterface})
    neighborDetail.EntityData.Leafs.Append("lfa-next-hop", types.YLeaf{"LfaNextHop", neighborDetail.LfaNextHop})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-id", types.YLeaf{"LfaNeighborId", neighborDetail.LfaNeighborId})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-revision", types.YLeaf{"LfaNeighborRevision", neighborDetail.LfaNeighborRevision})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-count", types.YLeaf{"NeighborAckListCount", neighborDetail.NeighborAckListCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-high-watermark", types.YLeaf{"NeighborAckListHighWatermark", neighborDetail.NeighborAckListHighWatermark})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-label", types.YLeaf{"AdjacencySidLabel", neighborDetail.AdjacencySidLabel})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-protected", types.YLeaf{"AdjacencySidProtected", neighborDetail.AdjacencySidProtected})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-unprotected-label", types.YLeaf{"AdjacencySidUnprotectedLabel", neighborDetail.AdjacencySidUnprotectedLabel})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary
// Neighbor summary information
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
}

func (neighborSummary *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary) GetEntityData() *types.CommonEntityData {
    neighborSummary.EntityData.YFilter = neighborSummary.YFilter
    neighborSummary.EntityData.YangName = "neighbor-summary"
    neighborSummary.EntityData.BundleName = "cisco_ios_xr"
    neighborSummary.EntityData.ParentYangName = "neighbor-detail"
    neighborSummary.EntityData.SegmentPath = "neighbor-summary"
    neighborSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummary.EntityData.Children = types.NewOrderedMap()
    neighborSummary.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborSummary.NeighborBfdInformation})
    neighborSummary.EntityData.Leafs = types.NewOrderedMap()
    neighborSummary.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighborSummary.NeighborId})
    neighborSummary.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborSummary.NeighborAddressXr})
    neighborSummary.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighborSummary.NeighborInterfaceName})
    neighborSummary.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborSummary.NeighborDrPriority})
    neighborSummary.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborSummary.NeighborState})
    neighborSummary.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighborSummary.DrBdrState})
    neighborSummary.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborSummary.NeighborDeadTimer})
    neighborSummary.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborSummary.NeighborUpTime})
    neighborSummary.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighborSummary.NeighborMadjInterface})

    neighborSummary.EntityData.YListKeys = []string {}

    return &(neighborSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-summary"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
// Retransmission information with this neighbor
type Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmissionInformation *Ospf_Processes_Process_DefaultVrf_AdjacencyInformation_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation) GetEntityData() *types.CommonEntityData {
    neighborRetransmissionInformation.EntityData.YFilter = neighborRetransmissionInformation.YFilter
    neighborRetransmissionInformation.EntityData.YangName = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmissionInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmissionInformation.EntityData.SegmentPath = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmissionInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmissionInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmissionInformation.EntityData.Children = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", neighborRetransmissionInformation.DbdRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", neighborRetransmissionInformation.DbdRetransmissionTotalCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", neighborRetransmissionInformation.AreaFloodingIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmissionInformation.AsFloodIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", neighborRetransmissionInformation.NeighborRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", neighborRetransmissionInformation.NumberOfRetransmissions})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", neighborRetransmissionInformation.AreaFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", neighborRetransmissionInformation.AreaFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", neighborRetransmissionInformation.AsFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", neighborRetransmissionInformation.AsFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", neighborRetransmissionInformation.AreaNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", neighborRetransmissionInformation.AreaNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", neighborRetransmissionInformation.AsNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", neighborRetransmissionInformation.AsNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmissionInformation.LastRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmissionInformation.MaximumRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmissionInformation.LastRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmissionInformation.MaximumRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmissionInformation.LsaRetransmissionTimer})

    neighborRetransmissionInformation.EntityData.YListKeys = []string {}

    return &(neighborRetransmissionInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation
// Container for OSPF routing tables
type Ospf_Processes_Process_DefaultVrf_RouteInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF Route Table Including Backup Paths.
    BackupRoutes Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes

    // OSPF Route Table including multicast-intact routes.
    MulticastIntactRouteTable Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable

    // OSPF Route Table Including Multicast intact Backup Paths.
    MulticastIntactBackupRoutes Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes

    // OSPF route summary statistics.
    SummaryInformation Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation

    // OSPF Connected Route Table.
    ConnectedRoutes Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes

    // OSPF Local Route Table.
    LocalRoutes Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes

    // OSPF Area Route Table.
    RouteAreas Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas

    // OSPF Route Table.
    RouteTable Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable

    // OSPF External Route Table.
    ExternalRoutes Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes
}

func (routeInformation *Ospf_Processes_Process_DefaultVrf_RouteInformation) GetEntityData() *types.CommonEntityData {
    routeInformation.EntityData.YFilter = routeInformation.YFilter
    routeInformation.EntityData.YangName = "route-information"
    routeInformation.EntityData.BundleName = "cisco_ios_xr"
    routeInformation.EntityData.ParentYangName = "default-vrf"
    routeInformation.EntityData.SegmentPath = "route-information"
    routeInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInformation.EntityData.Children = types.NewOrderedMap()
    routeInformation.EntityData.Children.Append("backup-routes", types.YChild{"BackupRoutes", &routeInformation.BackupRoutes})
    routeInformation.EntityData.Children.Append("multicast-intact-route-table", types.YChild{"MulticastIntactRouteTable", &routeInformation.MulticastIntactRouteTable})
    routeInformation.EntityData.Children.Append("multicast-intact-backup-routes", types.YChild{"MulticastIntactBackupRoutes", &routeInformation.MulticastIntactBackupRoutes})
    routeInformation.EntityData.Children.Append("summary-information", types.YChild{"SummaryInformation", &routeInformation.SummaryInformation})
    routeInformation.EntityData.Children.Append("connected-routes", types.YChild{"ConnectedRoutes", &routeInformation.ConnectedRoutes})
    routeInformation.EntityData.Children.Append("local-routes", types.YChild{"LocalRoutes", &routeInformation.LocalRoutes})
    routeInformation.EntityData.Children.Append("route-areas", types.YChild{"RouteAreas", &routeInformation.RouteAreas})
    routeInformation.EntityData.Children.Append("route-table", types.YChild{"RouteTable", &routeInformation.RouteTable})
    routeInformation.EntityData.Children.Append("external-routes", types.YChild{"ExternalRoutes", &routeInformation.ExternalRoutes})
    routeInformation.EntityData.Leafs = types.NewOrderedMap()

    routeInformation.EntityData.YListKeys = []string {}

    return &(routeInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes
// OSPF Route Table Including Backup Paths
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including backup paths. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute.
    BackupRoute []*Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute
}

func (backupRoutes *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes) GetEntityData() *types.CommonEntityData {
    backupRoutes.EntityData.YFilter = backupRoutes.YFilter
    backupRoutes.EntityData.YangName = "backup-routes"
    backupRoutes.EntityData.BundleName = "cisco_ios_xr"
    backupRoutes.EntityData.ParentYangName = "route-information"
    backupRoutes.EntityData.SegmentPath = "backup-routes"
    backupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoutes.EntityData.Children = types.NewOrderedMap()
    backupRoutes.EntityData.Children.Append("backup-route", types.YChild{"BackupRoute", nil})
    for i := range backupRoutes.BackupRoute {
        backupRoutes.EntityData.Children.Append(types.GetSegmentPath(backupRoutes.BackupRoute[i]), types.YChild{"BackupRoute", backupRoutes.BackupRoute[i]})
    }
    backupRoutes.EntityData.Leafs = types.NewOrderedMap()

    backupRoutes.EntityData.YListKeys = []string {}

    return &(backupRoutes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute
// OSPF route including backup paths
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath
}

func (backupRoute *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute) GetEntityData() *types.CommonEntityData {
    backupRoute.EntityData.YFilter = backupRoute.YFilter
    backupRoute.EntityData.YangName = "backup-route"
    backupRoute.EntityData.BundleName = "cisco_ios_xr"
    backupRoute.EntityData.ParentYangName = "backup-routes"
    backupRoute.EntityData.SegmentPath = "backup-route"
    backupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoute.EntityData.Children = types.NewOrderedMap()
    backupRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &backupRoute.RouteInfo})
    backupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range backupRoute.RoutePath {
        backupRoute.EntityData.Children.Append(types.GetSegmentPath(backupRoute.RoutePath[i]), types.YChild{"RoutePath", backupRoute.RoutePath[i]})
    }
    backupRoute.EntityData.Leafs = types.NewOrderedMap()
    backupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupRoute.Prefix})
    backupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupRoute.PrefixLength})
    backupRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", backupRoute.RoutePrefix})
    backupRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", backupRoute.RoutePrefixLength})
    backupRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", backupRoute.RouteMetric})
    backupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", backupRoute.RouteType})
    backupRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", backupRoute.RouteConnected})

    backupRoute.EntityData.YListKeys = []string {}

    return &(backupRoute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "backup-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_BackupRoutes_BackupRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable
// OSPF Route Table including multicast-intact
// routes
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An OSPF route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route.
    Route []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route
}

func (multicastIntactRouteTable *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable) GetEntityData() *types.CommonEntityData {
    multicastIntactRouteTable.EntityData.YFilter = multicastIntactRouteTable.YFilter
    multicastIntactRouteTable.EntityData.YangName = "multicast-intact-route-table"
    multicastIntactRouteTable.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactRouteTable.EntityData.ParentYangName = "route-information"
    multicastIntactRouteTable.EntityData.SegmentPath = "multicast-intact-route-table"
    multicastIntactRouteTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactRouteTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactRouteTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactRouteTable.EntityData.Children = types.NewOrderedMap()
    multicastIntactRouteTable.EntityData.Children.Append("route", types.YChild{"Route", nil})
    for i := range multicastIntactRouteTable.Route {
        multicastIntactRouteTable.EntityData.Children.Append(types.GetSegmentPath(multicastIntactRouteTable.Route[i]), types.YChild{"Route", multicastIntactRouteTable.Route[i]})
    }
    multicastIntactRouteTable.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactRouteTable.EntityData.YListKeys = []string {}

    return &(multicastIntactRouteTable.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route
// An OSPF route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath
}

func (route *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "multicast-intact-route-table"
    route.EntityData.SegmentPath = "route"
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &route.RouteInfo})
    route.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range route.RoutePath {
        route.EntityData.Children.Append(types.GetSegmentPath(route.RoutePath[i]), types.YChild{"RoutePath", route.RoutePath[i]})
    }
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", route.Prefix})
    route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", route.PrefixLength})
    route.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", route.RoutePrefix})
    route.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", route.RoutePrefixLength})
    route.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", route.RouteMetric})
    route.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", route.RouteType})
    route.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", route.RouteConnected})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactRouteTable_Route_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes
// OSPF Route Table Including Multicast intact
// Backup Paths
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including multicast backup paths. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute.
    MulticastIntactBackupRoute []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute
}

func (multicastIntactBackupRoutes *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRoutes.EntityData.YFilter = multicastIntactBackupRoutes.YFilter
    multicastIntactBackupRoutes.EntityData.YangName = "multicast-intact-backup-routes"
    multicastIntactBackupRoutes.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRoutes.EntityData.ParentYangName = "route-information"
    multicastIntactBackupRoutes.EntityData.SegmentPath = "multicast-intact-backup-routes"
    multicastIntactBackupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRoutes.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRoutes.EntityData.Children.Append("multicast-intact-backup-route", types.YChild{"MulticastIntactBackupRoute", nil})
    for i := range multicastIntactBackupRoutes.MulticastIntactBackupRoute {
        multicastIntactBackupRoutes.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRoutes.MulticastIntactBackupRoute[i]), types.YChild{"MulticastIntactBackupRoute", multicastIntactBackupRoutes.MulticastIntactBackupRoute[i]})
    }
    multicastIntactBackupRoutes.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactBackupRoutes.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRoutes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute
// OSPF route including multicast backup paths
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath
}

func (multicastIntactBackupRoute *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRoute.EntityData.YFilter = multicastIntactBackupRoute.YFilter
    multicastIntactBackupRoute.EntityData.YangName = "multicast-intact-backup-route"
    multicastIntactBackupRoute.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRoute.EntityData.ParentYangName = "multicast-intact-backup-routes"
    multicastIntactBackupRoute.EntityData.SegmentPath = "multicast-intact-backup-route"
    multicastIntactBackupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRoute.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &multicastIntactBackupRoute.RouteInfo})
    multicastIntactBackupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range multicastIntactBackupRoute.RoutePath {
        multicastIntactBackupRoute.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRoute.RoutePath[i]), types.YChild{"RoutePath", multicastIntactBackupRoute.RoutePath[i]})
    }
    multicastIntactBackupRoute.EntityData.Leafs = types.NewOrderedMap()
    multicastIntactBackupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", multicastIntactBackupRoute.Prefix})
    multicastIntactBackupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", multicastIntactBackupRoute.PrefixLength})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", multicastIntactBackupRoute.RoutePrefix})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", multicastIntactBackupRoute.RoutePrefixLength})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", multicastIntactBackupRoute.RouteMetric})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", multicastIntactBackupRoute.RouteType})
    multicastIntactBackupRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", multicastIntactBackupRoute.RouteConnected})

    multicastIntactBackupRoute.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRoute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "multicast-intact-backup-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "multicast-intact-backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_MulticastIntactBackupRoutes_MulticastIntactBackupRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation
// OSPF route summary statistics
type Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB failure count. The type is interface{} with range: 0..4294967295.
    Failures interface{}

    // Last failed address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FailureAddress interface{}

    // Last time failed.
    FailureTime Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_FailureTime

    // OSPF route summary Information.
    Common Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_Common
}

func (summaryInformation *Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation) GetEntityData() *types.CommonEntityData {
    summaryInformation.EntityData.YFilter = summaryInformation.YFilter
    summaryInformation.EntityData.YangName = "summary-information"
    summaryInformation.EntityData.BundleName = "cisco_ios_xr"
    summaryInformation.EntityData.ParentYangName = "route-information"
    summaryInformation.EntityData.SegmentPath = "summary-information"
    summaryInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryInformation.EntityData.Children = types.NewOrderedMap()
    summaryInformation.EntityData.Children.Append("failure-time", types.YChild{"FailureTime", &summaryInformation.FailureTime})
    summaryInformation.EntityData.Children.Append("common", types.YChild{"Common", &summaryInformation.Common})
    summaryInformation.EntityData.Leafs = types.NewOrderedMap()
    summaryInformation.EntityData.Leafs.Append("failures", types.YLeaf{"Failures", summaryInformation.Failures})
    summaryInformation.EntityData.Leafs.Append("failure-address", types.YLeaf{"FailureAddress", summaryInformation.FailureAddress})

    summaryInformation.EntityData.YListKeys = []string {}

    return &(summaryInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_FailureTime
// Last time failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_FailureTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (failureTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_FailureTime) GetEntityData() *types.CommonEntityData {
    failureTime.EntityData.YFilter = failureTime.YFilter
    failureTime.EntityData.YangName = "failure-time"
    failureTime.EntityData.BundleName = "cisco_ios_xr"
    failureTime.EntityData.ParentYangName = "summary-information"
    failureTime.EntityData.SegmentPath = "failure-time"
    failureTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    failureTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    failureTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    failureTime.EntityData.Children = types.NewOrderedMap()
    failureTime.EntityData.Leafs = types.NewOrderedMap()
    failureTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", failureTime.Second})
    failureTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", failureTime.Nanosecond})

    failureTime.EntityData.YListKeys = []string {}

    return &(failureTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_Common
// OSPF route summary Information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // External type 1 count. The type is interface{} with range: 0..4294967295.
    ExternalType1s interface{}

    // External type 2 count. The type is interface{} with range: 0..4294967295.
    ExternalType2s interface{}

    // External NSSA type 1 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType1s interface{}

    // External NSSA type 2 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType2s interface{}

    // Inter-area count. The type is interface{} with range: 0..4294967295.
    InterAreas interface{}

    // Intra-area count. The type is interface{} with range: 0..4294967295.
    IntraAreas interface{}

    // Total count. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (common *Ospf_Processes_Process_DefaultVrf_RouteInformation_SummaryInformation_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary-information"
    common.EntityData.SegmentPath = "common"
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("external-type1s", types.YLeaf{"ExternalType1s", common.ExternalType1s})
    common.EntityData.Leafs.Append("external-type2s", types.YLeaf{"ExternalType2s", common.ExternalType2s})
    common.EntityData.Leafs.Append("external-nssa-type1s", types.YLeaf{"ExternalNssaType1s", common.ExternalNssaType1s})
    common.EntityData.Leafs.Append("external-nssa-type2s", types.YLeaf{"ExternalNssaType2s", common.ExternalNssaType2s})
    common.EntityData.Leafs.Append("inter-areas", types.YLeaf{"InterAreas", common.InterAreas})
    common.EntityData.Leafs.Append("intra-areas", types.YLeaf{"IntraAreas", common.IntraAreas})
    common.EntityData.Leafs.Append("total", types.YLeaf{"Total", common.Total})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes
// OSPF Connected Route Table
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connected route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute.
    ConnectedRoute []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute
}

func (connectedRoutes *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes) GetEntityData() *types.CommonEntityData {
    connectedRoutes.EntityData.YFilter = connectedRoutes.YFilter
    connectedRoutes.EntityData.YangName = "connected-routes"
    connectedRoutes.EntityData.BundleName = "cisco_ios_xr"
    connectedRoutes.EntityData.ParentYangName = "route-information"
    connectedRoutes.EntityData.SegmentPath = "connected-routes"
    connectedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoutes.EntityData.Children = types.NewOrderedMap()
    connectedRoutes.EntityData.Children.Append("connected-route", types.YChild{"ConnectedRoute", nil})
    for i := range connectedRoutes.ConnectedRoute {
        connectedRoutes.EntityData.Children.Append(types.GetSegmentPath(connectedRoutes.ConnectedRoute[i]), types.YChild{"ConnectedRoute", connectedRoutes.ConnectedRoute[i]})
    }
    connectedRoutes.EntityData.Leafs = types.NewOrderedMap()

    connectedRoutes.EntityData.YListKeys = []string {}

    return &(connectedRoutes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute
// Connected route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath
}

func (connectedRoute *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute) GetEntityData() *types.CommonEntityData {
    connectedRoute.EntityData.YFilter = connectedRoute.YFilter
    connectedRoute.EntityData.YangName = "connected-route"
    connectedRoute.EntityData.BundleName = "cisco_ios_xr"
    connectedRoute.EntityData.ParentYangName = "connected-routes"
    connectedRoute.EntityData.SegmentPath = "connected-route"
    connectedRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoute.EntityData.Children = types.NewOrderedMap()
    connectedRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &connectedRoute.RouteInfo})
    connectedRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range connectedRoute.RoutePath {
        connectedRoute.EntityData.Children.Append(types.GetSegmentPath(connectedRoute.RoutePath[i]), types.YChild{"RoutePath", connectedRoute.RoutePath[i]})
    }
    connectedRoute.EntityData.Leafs = types.NewOrderedMap()
    connectedRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", connectedRoute.Prefix})
    connectedRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", connectedRoute.PrefixLength})
    connectedRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", connectedRoute.RoutePrefix})
    connectedRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", connectedRoute.RoutePrefixLength})
    connectedRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", connectedRoute.RouteMetric})
    connectedRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", connectedRoute.RouteType})
    connectedRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", connectedRoute.RouteConnected})

    connectedRoute.EntityData.YListKeys = []string {}

    return &(connectedRoute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "connected-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "connected-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes
// OSPF Local Route Table
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute.
    LocalRoute []*Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute
}

func (localRoutes *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes) GetEntityData() *types.CommonEntityData {
    localRoutes.EntityData.YFilter = localRoutes.YFilter
    localRoutes.EntityData.YangName = "local-routes"
    localRoutes.EntityData.BundleName = "cisco_ios_xr"
    localRoutes.EntityData.ParentYangName = "route-information"
    localRoutes.EntityData.SegmentPath = "local-routes"
    localRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRoutes.EntityData.Children = types.NewOrderedMap()
    localRoutes.EntityData.Children.Append("local-route", types.YChild{"LocalRoute", nil})
    for i := range localRoutes.LocalRoute {
        localRoutes.EntityData.Children.Append(types.GetSegmentPath(localRoutes.LocalRoute[i]), types.YChild{"LocalRoute", localRoutes.LocalRoute[i]})
    }
    localRoutes.EntityData.Leafs = types.NewOrderedMap()

    localRoutes.EntityData.YListKeys = []string {}

    return &(localRoutes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute
// Local route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath
}

func (localRoute *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute) GetEntityData() *types.CommonEntityData {
    localRoute.EntityData.YFilter = localRoute.YFilter
    localRoute.EntityData.YangName = "local-route"
    localRoute.EntityData.BundleName = "cisco_ios_xr"
    localRoute.EntityData.ParentYangName = "local-routes"
    localRoute.EntityData.SegmentPath = "local-route"
    localRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRoute.EntityData.Children = types.NewOrderedMap()
    localRoute.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &localRoute.RouteInfo})
    localRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range localRoute.RoutePath {
        localRoute.EntityData.Children.Append(types.GetSegmentPath(localRoute.RoutePath[i]), types.YChild{"RoutePath", localRoute.RoutePath[i]})
    }
    localRoute.EntityData.Leafs = types.NewOrderedMap()
    localRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", localRoute.Prefix})
    localRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", localRoute.PrefixLength})
    localRoute.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", localRoute.RoutePrefix})
    localRoute.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", localRoute.RoutePrefixLength})
    localRoute.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", localRoute.RouteMetric})
    localRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", localRoute.RouteType})
    localRoute.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", localRoute.RouteConnected})

    localRoute.EntityData.YListKeys = []string {}

    return &(localRoute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "local-route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "local-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_LocalRoutes_LocalRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas
// OSPF Area Route Table
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF Area Route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea.
    RouteArea []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea
}

func (routeAreas *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas) GetEntityData() *types.CommonEntityData {
    routeAreas.EntityData.YFilter = routeAreas.YFilter
    routeAreas.EntityData.YangName = "route-areas"
    routeAreas.EntityData.BundleName = "cisco_ios_xr"
    routeAreas.EntityData.ParentYangName = "route-information"
    routeAreas.EntityData.SegmentPath = "route-areas"
    routeAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeAreas.EntityData.Children = types.NewOrderedMap()
    routeAreas.EntityData.Children.Append("route-area", types.YChild{"RouteArea", nil})
    for i := range routeAreas.RouteArea {
        routeAreas.EntityData.Children.Append(types.GetSegmentPath(routeAreas.RouteArea[i]), types.YChild{"RouteArea", routeAreas.RouteArea[i]})
    }
    routeAreas.EntityData.Leafs = types.NewOrderedMap()

    routeAreas.EntityData.YListKeys = []string {}

    return &(routeAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea
// OSPF Area Route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPF Route Table Including Multicast Intace Backup Paths in an area.
    MulticastIntactBackupRouteAreas Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas

    // OSPF Connected Route Table in an area.
    ConnectedRouteAreas Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas

    // OSPF Route Table Including Backup Paths in an area.
    BackupRouteAreas Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas

    // OSPF Area Route Entry.
    RouteAreaInformations Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations

    // OSPF Area multicast-intact included route entry.
    MulticastIntactRouteAreas Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas

    // OSPF route summary statistics.
    SummaryAreaInformation Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation

    // OSPF Local Route Table.
    LocalRouteAreas Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas
}

func (routeArea *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea) GetEntityData() *types.CommonEntityData {
    routeArea.EntityData.YFilter = routeArea.YFilter
    routeArea.EntityData.YangName = "route-area"
    routeArea.EntityData.BundleName = "cisco_ios_xr"
    routeArea.EntityData.ParentYangName = "route-areas"
    routeArea.EntityData.SegmentPath = "route-area" + types.AddKeyToken(routeArea.AreaId, "area-id")
    routeArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeArea.EntityData.Children = types.NewOrderedMap()
    routeArea.EntityData.Children.Append("multicast-intact-backup-route-areas", types.YChild{"MulticastIntactBackupRouteAreas", &routeArea.MulticastIntactBackupRouteAreas})
    routeArea.EntityData.Children.Append("connected-route-areas", types.YChild{"ConnectedRouteAreas", &routeArea.ConnectedRouteAreas})
    routeArea.EntityData.Children.Append("backup-route-areas", types.YChild{"BackupRouteAreas", &routeArea.BackupRouteAreas})
    routeArea.EntityData.Children.Append("route-area-informations", types.YChild{"RouteAreaInformations", &routeArea.RouteAreaInformations})
    routeArea.EntityData.Children.Append("multicast-intact-route-areas", types.YChild{"MulticastIntactRouteAreas", &routeArea.MulticastIntactRouteAreas})
    routeArea.EntityData.Children.Append("summary-area-information", types.YChild{"SummaryAreaInformation", &routeArea.SummaryAreaInformation})
    routeArea.EntityData.Children.Append("local-route-areas", types.YChild{"LocalRouteAreas", &routeArea.LocalRouteAreas})
    routeArea.EntityData.Leafs = types.NewOrderedMap()
    routeArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routeArea.AreaId})

    routeArea.EntityData.YListKeys = []string {"AreaId"}

    return &(routeArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas
// OSPF Route Table Including Multicast Intace
// Backup Paths in an area
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including Multicast intact backup paths. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea.
    MulticastIntactBackupRouteArea []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea
}

func (multicastIntactBackupRouteAreas *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRouteAreas.EntityData.YFilter = multicastIntactBackupRouteAreas.YFilter
    multicastIntactBackupRouteAreas.EntityData.YangName = "multicast-intact-backup-route-areas"
    multicastIntactBackupRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRouteAreas.EntityData.ParentYangName = "route-area"
    multicastIntactBackupRouteAreas.EntityData.SegmentPath = "multicast-intact-backup-route-areas"
    multicastIntactBackupRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRouteAreas.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRouteAreas.EntityData.Children.Append("multicast-intact-backup-route-area", types.YChild{"MulticastIntactBackupRouteArea", nil})
    for i := range multicastIntactBackupRouteAreas.MulticastIntactBackupRouteArea {
        multicastIntactBackupRouteAreas.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRouteAreas.MulticastIntactBackupRouteArea[i]), types.YChild{"MulticastIntactBackupRouteArea", multicastIntactBackupRouteAreas.MulticastIntactBackupRouteArea[i]})
    }
    multicastIntactBackupRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactBackupRouteAreas.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRouteAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea
// OSPF route including Multicast intact backup
// paths
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath
}

func (multicastIntactBackupRouteArea *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea) GetEntityData() *types.CommonEntityData {
    multicastIntactBackupRouteArea.EntityData.YFilter = multicastIntactBackupRouteArea.YFilter
    multicastIntactBackupRouteArea.EntityData.YangName = "multicast-intact-backup-route-area"
    multicastIntactBackupRouteArea.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactBackupRouteArea.EntityData.ParentYangName = "multicast-intact-backup-route-areas"
    multicastIntactBackupRouteArea.EntityData.SegmentPath = "multicast-intact-backup-route-area"
    multicastIntactBackupRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactBackupRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactBackupRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactBackupRouteArea.EntityData.Children = types.NewOrderedMap()
    multicastIntactBackupRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &multicastIntactBackupRouteArea.RouteInfo})
    multicastIntactBackupRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range multicastIntactBackupRouteArea.RoutePath {
        multicastIntactBackupRouteArea.EntityData.Children.Append(types.GetSegmentPath(multicastIntactBackupRouteArea.RoutePath[i]), types.YChild{"RoutePath", multicastIntactBackupRouteArea.RoutePath[i]})
    }
    multicastIntactBackupRouteArea.EntityData.Leafs = types.NewOrderedMap()
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", multicastIntactBackupRouteArea.Prefix})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", multicastIntactBackupRouteArea.PrefixLength})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", multicastIntactBackupRouteArea.RoutePrefix})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", multicastIntactBackupRouteArea.RoutePrefixLength})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", multicastIntactBackupRouteArea.RouteMetric})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", multicastIntactBackupRouteArea.RouteType})
    multicastIntactBackupRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", multicastIntactBackupRouteArea.RouteConnected})

    multicastIntactBackupRouteArea.EntityData.YListKeys = []string {}

    return &(multicastIntactBackupRouteArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "multicast-intact-backup-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "multicast-intact-backup-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactBackupRouteAreas_MulticastIntactBackupRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas
// OSPF Connected Route Table in an area
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connected route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea.
    ConnectedRouteArea []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea
}

func (connectedRouteAreas *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas) GetEntityData() *types.CommonEntityData {
    connectedRouteAreas.EntityData.YFilter = connectedRouteAreas.YFilter
    connectedRouteAreas.EntityData.YangName = "connected-route-areas"
    connectedRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    connectedRouteAreas.EntityData.ParentYangName = "route-area"
    connectedRouteAreas.EntityData.SegmentPath = "connected-route-areas"
    connectedRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRouteAreas.EntityData.Children = types.NewOrderedMap()
    connectedRouteAreas.EntityData.Children.Append("connected-route-area", types.YChild{"ConnectedRouteArea", nil})
    for i := range connectedRouteAreas.ConnectedRouteArea {
        connectedRouteAreas.EntityData.Children.Append(types.GetSegmentPath(connectedRouteAreas.ConnectedRouteArea[i]), types.YChild{"ConnectedRouteArea", connectedRouteAreas.ConnectedRouteArea[i]})
    }
    connectedRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    connectedRouteAreas.EntityData.YListKeys = []string {}

    return &(connectedRouteAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea
// Connected route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath
}

func (connectedRouteArea *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea) GetEntityData() *types.CommonEntityData {
    connectedRouteArea.EntityData.YFilter = connectedRouteArea.YFilter
    connectedRouteArea.EntityData.YangName = "connected-route-area"
    connectedRouteArea.EntityData.BundleName = "cisco_ios_xr"
    connectedRouteArea.EntityData.ParentYangName = "connected-route-areas"
    connectedRouteArea.EntityData.SegmentPath = "connected-route-area"
    connectedRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRouteArea.EntityData.Children = types.NewOrderedMap()
    connectedRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &connectedRouteArea.RouteInfo})
    connectedRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range connectedRouteArea.RoutePath {
        connectedRouteArea.EntityData.Children.Append(types.GetSegmentPath(connectedRouteArea.RoutePath[i]), types.YChild{"RoutePath", connectedRouteArea.RoutePath[i]})
    }
    connectedRouteArea.EntityData.Leafs = types.NewOrderedMap()
    connectedRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", connectedRouteArea.Prefix})
    connectedRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", connectedRouteArea.PrefixLength})
    connectedRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", connectedRouteArea.RoutePrefix})
    connectedRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", connectedRouteArea.RoutePrefixLength})
    connectedRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", connectedRouteArea.RouteMetric})
    connectedRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", connectedRouteArea.RouteType})
    connectedRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", connectedRouteArea.RouteConnected})

    connectedRouteArea.EntityData.YListKeys = []string {}

    return &(connectedRouteArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "connected-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "connected-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_ConnectedRouteAreas_ConnectedRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas
// OSPF Route Table Including Backup Paths in an
// area
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF route including backup paths. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea.
    BackupRouteArea []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea
}

func (backupRouteAreas *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas) GetEntityData() *types.CommonEntityData {
    backupRouteAreas.EntityData.YFilter = backupRouteAreas.YFilter
    backupRouteAreas.EntityData.YangName = "backup-route-areas"
    backupRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    backupRouteAreas.EntityData.ParentYangName = "route-area"
    backupRouteAreas.EntityData.SegmentPath = "backup-route-areas"
    backupRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRouteAreas.EntityData.Children = types.NewOrderedMap()
    backupRouteAreas.EntityData.Children.Append("backup-route-area", types.YChild{"BackupRouteArea", nil})
    for i := range backupRouteAreas.BackupRouteArea {
        backupRouteAreas.EntityData.Children.Append(types.GetSegmentPath(backupRouteAreas.BackupRouteArea[i]), types.YChild{"BackupRouteArea", backupRouteAreas.BackupRouteArea[i]})
    }
    backupRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    backupRouteAreas.EntityData.YListKeys = []string {}

    return &(backupRouteAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea
// OSPF route including backup paths
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath
}

func (backupRouteArea *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea) GetEntityData() *types.CommonEntityData {
    backupRouteArea.EntityData.YFilter = backupRouteArea.YFilter
    backupRouteArea.EntityData.YangName = "backup-route-area"
    backupRouteArea.EntityData.BundleName = "cisco_ios_xr"
    backupRouteArea.EntityData.ParentYangName = "backup-route-areas"
    backupRouteArea.EntityData.SegmentPath = "backup-route-area"
    backupRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRouteArea.EntityData.Children = types.NewOrderedMap()
    backupRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &backupRouteArea.RouteInfo})
    backupRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range backupRouteArea.RoutePath {
        backupRouteArea.EntityData.Children.Append(types.GetSegmentPath(backupRouteArea.RoutePath[i]), types.YChild{"RoutePath", backupRouteArea.RoutePath[i]})
    }
    backupRouteArea.EntityData.Leafs = types.NewOrderedMap()
    backupRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupRouteArea.Prefix})
    backupRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupRouteArea.PrefixLength})
    backupRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", backupRouteArea.RoutePrefix})
    backupRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", backupRouteArea.RoutePrefixLength})
    backupRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", backupRouteArea.RouteMetric})
    backupRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", backupRouteArea.RouteType})
    backupRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", backupRouteArea.RouteConnected})

    backupRouteArea.EntityData.YListKeys = []string {}

    return &(backupRouteArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "backup-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // Backup Path Info.
    RouteBackupPath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "backup-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath
// Backup Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}

    // LFA type. The type is Lfa.
    LfaType interface{}

    // IP address of remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRemoteLfa interface{}

    // Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Backup Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupTunnelInterfaceName interface{}

    // Interface Disjoint. The type is bool.
    InterfaceDisjoint interface{}

    // Backup Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair.
    BackupRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
}

func (routeBackupPath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range routeBackupPath.BackupRepair {
        routeBackupPath.EntityData.Children.Append(types.GetSegmentPath(routeBackupPath.BackupRepair[i]), types.YChild{"BackupRepair", routeBackupPath.BackupRepair[i]})
    }
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})
    routeBackupPath.EntityData.Leafs.Append("lfa-type", types.YLeaf{"LfaType", routeBackupPath.LfaType})
    routeBackupPath.EntityData.Leafs.Append("backup-remote-lfa", types.YLeaf{"BackupRemoteLfa", routeBackupPath.BackupRemoteLfa})
    routeBackupPath.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", routeBackupPath.BackupRepairListSize})
    routeBackupPath.EntityData.Leafs.Append("backup-tunnel-interface-name", types.YLeaf{"BackupTunnelInterfaceName", routeBackupPath.BackupTunnelInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("interface-disjoint", types.YLeaf{"InterfaceDisjoint", routeBackupPath.InterfaceDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair
// Backup Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (backupRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_RouteBackupPath_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "route-backup-path"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", backupRepair.RepairElementId})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_BackupRouteAreas_BackupRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations
// OSPF Area Route Entry
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An OSPF route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation.
    RouteAreaInformation []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation
}

func (routeAreaInformations *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations) GetEntityData() *types.CommonEntityData {
    routeAreaInformations.EntityData.YFilter = routeAreaInformations.YFilter
    routeAreaInformations.EntityData.YangName = "route-area-informations"
    routeAreaInformations.EntityData.BundleName = "cisco_ios_xr"
    routeAreaInformations.EntityData.ParentYangName = "route-area"
    routeAreaInformations.EntityData.SegmentPath = "route-area-informations"
    routeAreaInformations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeAreaInformations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeAreaInformations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeAreaInformations.EntityData.Children = types.NewOrderedMap()
    routeAreaInformations.EntityData.Children.Append("route-area-information", types.YChild{"RouteAreaInformation", nil})
    for i := range routeAreaInformations.RouteAreaInformation {
        routeAreaInformations.EntityData.Children.Append(types.GetSegmentPath(routeAreaInformations.RouteAreaInformation[i]), types.YChild{"RouteAreaInformation", routeAreaInformations.RouteAreaInformation[i]})
    }
    routeAreaInformations.EntityData.Leafs = types.NewOrderedMap()

    routeAreaInformations.EntityData.YListKeys = []string {}

    return &(routeAreaInformations.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation
// An OSPF route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath
}

func (routeAreaInformation *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation) GetEntityData() *types.CommonEntityData {
    routeAreaInformation.EntityData.YFilter = routeAreaInformation.YFilter
    routeAreaInformation.EntityData.YangName = "route-area-information"
    routeAreaInformation.EntityData.BundleName = "cisco_ios_xr"
    routeAreaInformation.EntityData.ParentYangName = "route-area-informations"
    routeAreaInformation.EntityData.SegmentPath = "route-area-information"
    routeAreaInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeAreaInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeAreaInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeAreaInformation.EntityData.Children = types.NewOrderedMap()
    routeAreaInformation.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &routeAreaInformation.RouteInfo})
    routeAreaInformation.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range routeAreaInformation.RoutePath {
        routeAreaInformation.EntityData.Children.Append(types.GetSegmentPath(routeAreaInformation.RoutePath[i]), types.YChild{"RoutePath", routeAreaInformation.RoutePath[i]})
    }
    routeAreaInformation.EntityData.Leafs = types.NewOrderedMap()
    routeAreaInformation.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", routeAreaInformation.Prefix})
    routeAreaInformation.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", routeAreaInformation.PrefixLength})
    routeAreaInformation.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", routeAreaInformation.RoutePrefix})
    routeAreaInformation.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", routeAreaInformation.RoutePrefixLength})
    routeAreaInformation.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routeAreaInformation.RouteMetric})
    routeAreaInformation.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeAreaInformation.RouteType})
    routeAreaInformation.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", routeAreaInformation.RouteConnected})

    routeAreaInformation.EntityData.YListKeys = []string {}

    return &(routeAreaInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route-area-information"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route-area-information"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_RouteAreaInformations_RouteAreaInformation_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas
// OSPF Area multicast-intact included route
// entry
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A Muliticast OSPF route in an area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea.
    MulticastIntactRouteArea []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea
}

func (multicastIntactRouteAreas *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas) GetEntityData() *types.CommonEntityData {
    multicastIntactRouteAreas.EntityData.YFilter = multicastIntactRouteAreas.YFilter
    multicastIntactRouteAreas.EntityData.YangName = "multicast-intact-route-areas"
    multicastIntactRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactRouteAreas.EntityData.ParentYangName = "route-area"
    multicastIntactRouteAreas.EntityData.SegmentPath = "multicast-intact-route-areas"
    multicastIntactRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactRouteAreas.EntityData.Children = types.NewOrderedMap()
    multicastIntactRouteAreas.EntityData.Children.Append("multicast-intact-route-area", types.YChild{"MulticastIntactRouteArea", nil})
    for i := range multicastIntactRouteAreas.MulticastIntactRouteArea {
        multicastIntactRouteAreas.EntityData.Children.Append(types.GetSegmentPath(multicastIntactRouteAreas.MulticastIntactRouteArea[i]), types.YChild{"MulticastIntactRouteArea", multicastIntactRouteAreas.MulticastIntactRouteArea[i]})
    }
    multicastIntactRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    multicastIntactRouteAreas.EntityData.YListKeys = []string {}

    return &(multicastIntactRouteAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea
// A Muliticast OSPF route in an area
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath
}

func (multicastIntactRouteArea *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea) GetEntityData() *types.CommonEntityData {
    multicastIntactRouteArea.EntityData.YFilter = multicastIntactRouteArea.YFilter
    multicastIntactRouteArea.EntityData.YangName = "multicast-intact-route-area"
    multicastIntactRouteArea.EntityData.BundleName = "cisco_ios_xr"
    multicastIntactRouteArea.EntityData.ParentYangName = "multicast-intact-route-areas"
    multicastIntactRouteArea.EntityData.SegmentPath = "multicast-intact-route-area"
    multicastIntactRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastIntactRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastIntactRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastIntactRouteArea.EntityData.Children = types.NewOrderedMap()
    multicastIntactRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &multicastIntactRouteArea.RouteInfo})
    multicastIntactRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range multicastIntactRouteArea.RoutePath {
        multicastIntactRouteArea.EntityData.Children.Append(types.GetSegmentPath(multicastIntactRouteArea.RoutePath[i]), types.YChild{"RoutePath", multicastIntactRouteArea.RoutePath[i]})
    }
    multicastIntactRouteArea.EntityData.Leafs = types.NewOrderedMap()
    multicastIntactRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", multicastIntactRouteArea.Prefix})
    multicastIntactRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", multicastIntactRouteArea.PrefixLength})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", multicastIntactRouteArea.RoutePrefix})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", multicastIntactRouteArea.RoutePrefixLength})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", multicastIntactRouteArea.RouteMetric})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", multicastIntactRouteArea.RouteType})
    multicastIntactRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", multicastIntactRouteArea.RouteConnected})

    multicastIntactRouteArea.EntityData.YListKeys = []string {}

    return &(multicastIntactRouteArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "multicast-intact-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "multicast-intact-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_MulticastIntactRouteAreas_MulticastIntactRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation
// OSPF route summary statistics
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB failure count. The type is interface{} with range: 0..4294967295.
    Failures interface{}

    // Last failed address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FailureAddress interface{}

    // Last time failed.
    FailureTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime

    // OSPF route summary Information.
    Common Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common
}

func (summaryAreaInformation *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation) GetEntityData() *types.CommonEntityData {
    summaryAreaInformation.EntityData.YFilter = summaryAreaInformation.YFilter
    summaryAreaInformation.EntityData.YangName = "summary-area-information"
    summaryAreaInformation.EntityData.BundleName = "cisco_ios_xr"
    summaryAreaInformation.EntityData.ParentYangName = "route-area"
    summaryAreaInformation.EntityData.SegmentPath = "summary-area-information"
    summaryAreaInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryAreaInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryAreaInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryAreaInformation.EntityData.Children = types.NewOrderedMap()
    summaryAreaInformation.EntityData.Children.Append("failure-time", types.YChild{"FailureTime", &summaryAreaInformation.FailureTime})
    summaryAreaInformation.EntityData.Children.Append("common", types.YChild{"Common", &summaryAreaInformation.Common})
    summaryAreaInformation.EntityData.Leafs = types.NewOrderedMap()
    summaryAreaInformation.EntityData.Leafs.Append("failures", types.YLeaf{"Failures", summaryAreaInformation.Failures})
    summaryAreaInformation.EntityData.Leafs.Append("failure-address", types.YLeaf{"FailureAddress", summaryAreaInformation.FailureAddress})

    summaryAreaInformation.EntityData.YListKeys = []string {}

    return &(summaryAreaInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime
// Last time failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (failureTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_FailureTime) GetEntityData() *types.CommonEntityData {
    failureTime.EntityData.YFilter = failureTime.YFilter
    failureTime.EntityData.YangName = "failure-time"
    failureTime.EntityData.BundleName = "cisco_ios_xr"
    failureTime.EntityData.ParentYangName = "summary-area-information"
    failureTime.EntityData.SegmentPath = "failure-time"
    failureTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    failureTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    failureTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    failureTime.EntityData.Children = types.NewOrderedMap()
    failureTime.EntityData.Leafs = types.NewOrderedMap()
    failureTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", failureTime.Second})
    failureTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", failureTime.Nanosecond})

    failureTime.EntityData.YListKeys = []string {}

    return &(failureTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common
// OSPF route summary Information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // External type 1 count. The type is interface{} with range: 0..4294967295.
    ExternalType1s interface{}

    // External type 2 count. The type is interface{} with range: 0..4294967295.
    ExternalType2s interface{}

    // External NSSA type 1 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType1s interface{}

    // External NSSA type 2 count. The type is interface{} with range:
    // 0..4294967295.
    ExternalNssaType2s interface{}

    // Inter-area count. The type is interface{} with range: 0..4294967295.
    InterAreas interface{}

    // Intra-area count. The type is interface{} with range: 0..4294967295.
    IntraAreas interface{}

    // Total count. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (common *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_SummaryAreaInformation_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary-area-information"
    common.EntityData.SegmentPath = "common"
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("external-type1s", types.YLeaf{"ExternalType1s", common.ExternalType1s})
    common.EntityData.Leafs.Append("external-type2s", types.YLeaf{"ExternalType2s", common.ExternalType2s})
    common.EntityData.Leafs.Append("external-nssa-type1s", types.YLeaf{"ExternalNssaType1s", common.ExternalNssaType1s})
    common.EntityData.Leafs.Append("external-nssa-type2s", types.YLeaf{"ExternalNssaType2s", common.ExternalNssaType2s})
    common.EntityData.Leafs.Append("inter-areas", types.YLeaf{"InterAreas", common.InterAreas})
    common.EntityData.Leafs.Append("intra-areas", types.YLeaf{"IntraAreas", common.IntraAreas})
    common.EntityData.Leafs.Append("total", types.YLeaf{"Total", common.Total})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas
// OSPF Local Route Table
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea.
    LocalRouteArea []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea
}

func (localRouteAreas *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas) GetEntityData() *types.CommonEntityData {
    localRouteAreas.EntityData.YFilter = localRouteAreas.YFilter
    localRouteAreas.EntityData.YangName = "local-route-areas"
    localRouteAreas.EntityData.BundleName = "cisco_ios_xr"
    localRouteAreas.EntityData.ParentYangName = "route-area"
    localRouteAreas.EntityData.SegmentPath = "local-route-areas"
    localRouteAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRouteAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRouteAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRouteAreas.EntityData.Children = types.NewOrderedMap()
    localRouteAreas.EntityData.Children.Append("local-route-area", types.YChild{"LocalRouteArea", nil})
    for i := range localRouteAreas.LocalRouteArea {
        localRouteAreas.EntityData.Children.Append(types.GetSegmentPath(localRouteAreas.LocalRouteArea[i]), types.YChild{"LocalRouteArea", localRouteAreas.LocalRouteArea[i]})
    }
    localRouteAreas.EntityData.Leafs = types.NewOrderedMap()

    localRouteAreas.EntityData.YListKeys = []string {}

    return &(localRouteAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea
// Local route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath
}

func (localRouteArea *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea) GetEntityData() *types.CommonEntityData {
    localRouteArea.EntityData.YFilter = localRouteArea.YFilter
    localRouteArea.EntityData.YangName = "local-route-area"
    localRouteArea.EntityData.BundleName = "cisco_ios_xr"
    localRouteArea.EntityData.ParentYangName = "local-route-areas"
    localRouteArea.EntityData.SegmentPath = "local-route-area"
    localRouteArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRouteArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRouteArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRouteArea.EntityData.Children = types.NewOrderedMap()
    localRouteArea.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &localRouteArea.RouteInfo})
    localRouteArea.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range localRouteArea.RoutePath {
        localRouteArea.EntityData.Children.Append(types.GetSegmentPath(localRouteArea.RoutePath[i]), types.YChild{"RoutePath", localRouteArea.RoutePath[i]})
    }
    localRouteArea.EntityData.Leafs = types.NewOrderedMap()
    localRouteArea.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", localRouteArea.Prefix})
    localRouteArea.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", localRouteArea.PrefixLength})
    localRouteArea.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", localRouteArea.RoutePrefix})
    localRouteArea.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", localRouteArea.RoutePrefixLength})
    localRouteArea.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", localRouteArea.RouteMetric})
    localRouteArea.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", localRouteArea.RouteType})
    localRouteArea.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", localRouteArea.RouteConnected})

    localRouteArea.EntityData.YListKeys = []string {}

    return &(localRouteArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "local-route-area"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "local-route-area"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteAreas_RouteArea_LocalRouteAreas_LocalRouteArea_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable
// OSPF Route Table
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An OSPF route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route.
    Route []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route
}

func (routeTable *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable) GetEntityData() *types.CommonEntityData {
    routeTable.EntityData.YFilter = routeTable.YFilter
    routeTable.EntityData.YangName = "route-table"
    routeTable.EntityData.BundleName = "cisco_ios_xr"
    routeTable.EntityData.ParentYangName = "route-information"
    routeTable.EntityData.SegmentPath = "route-table"
    routeTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTable.EntityData.Children = types.NewOrderedMap()
    routeTable.EntityData.Children.Append("route", types.YChild{"Route", nil})
    for i := range routeTable.Route {
        routeTable.EntityData.Children.Append(types.GetSegmentPath(routeTable.Route[i]), types.YChild{"Route", routeTable.Route[i]})
    }
    routeTable.EntityData.Leafs = types.NewOrderedMap()

    routeTable.EntityData.YListKeys = []string {}

    return &(routeTable.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route
// An OSPF route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath
}

func (route *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "route-table"
    route.EntityData.SegmentPath = "route"
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &route.RouteInfo})
    route.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range route.RoutePath {
        route.EntityData.Children.Append(types.GetSegmentPath(route.RoutePath[i]), types.YChild{"RoutePath", route.RoutePath[i]})
    }
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", route.Prefix})
    route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", route.PrefixLength})
    route.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", route.RoutePrefix})
    route.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", route.RoutePrefixLength})
    route.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", route.RouteMetric})
    route.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", route.RouteType})
    route.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", route.RouteConnected})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_RouteTable_Route_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes
// OSPF External Route Table
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF external route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute.
    ExternalRoute []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute
}

func (externalRoutes *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes) GetEntityData() *types.CommonEntityData {
    externalRoutes.EntityData.YFilter = externalRoutes.YFilter
    externalRoutes.EntityData.YangName = "external-routes"
    externalRoutes.EntityData.BundleName = "cisco_ios_xr"
    externalRoutes.EntityData.ParentYangName = "route-information"
    externalRoutes.EntityData.SegmentPath = "external-routes"
    externalRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoutes.EntityData.Children = types.NewOrderedMap()
    externalRoutes.EntityData.Children.Append("external-route", types.YChild{"ExternalRoute", nil})
    for i := range externalRoutes.ExternalRoute {
        externalRoutes.EntityData.Children.Append(types.GetSegmentPath(externalRoutes.ExternalRoute[i]), types.YChild{"ExternalRoute", externalRoutes.ExternalRoute[i]})
    }
    externalRoutes.EntityData.Leafs = types.NewOrderedMap()

    externalRoutes.EntityData.YListKeys = []string {}

    return &(externalRoutes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute
// OSPF external route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route information.
    RouteInformation Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation

    // Name of protocol from which the external route was redistributed.
    ProtocolName Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName

    // Extended communities in the route.
    RouteExtendedCommunity Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
}

func (externalRoute *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute) GetEntityData() *types.CommonEntityData {
    externalRoute.EntityData.YFilter = externalRoute.YFilter
    externalRoute.EntityData.YangName = "external-route"
    externalRoute.EntityData.BundleName = "cisco_ios_xr"
    externalRoute.EntityData.ParentYangName = "external-routes"
    externalRoute.EntityData.SegmentPath = "external-route"
    externalRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoute.EntityData.Children = types.NewOrderedMap()
    externalRoute.EntityData.Children.Append("route-information", types.YChild{"RouteInformation", &externalRoute.RouteInformation})
    externalRoute.EntityData.Children.Append("protocol-name", types.YChild{"ProtocolName", &externalRoute.ProtocolName})
    externalRoute.EntityData.Children.Append("route-extended-community", types.YChild{"RouteExtendedCommunity", &externalRoute.RouteExtendedCommunity})
    externalRoute.EntityData.Leafs = types.NewOrderedMap()
    externalRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalRoute.Prefix})
    externalRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalRoute.PrefixLength})

    externalRoute.EntityData.YListKeys = []string {}

    return &(externalRoute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RoutePrefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    RoutePrefixLength interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // Route type. The type is OspfRoute.
    RouteType interface{}

    // If true, connected route. The type is bool.
    RouteConnected interface{}

    // Route information.
    RouteInfo Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo

    // List of paths to this route. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath.
    RoutePath []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath
}

func (routeInformation *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation) GetEntityData() *types.CommonEntityData {
    routeInformation.EntityData.YFilter = routeInformation.YFilter
    routeInformation.EntityData.YangName = "route-information"
    routeInformation.EntityData.BundleName = "cisco_ios_xr"
    routeInformation.EntityData.ParentYangName = "external-route"
    routeInformation.EntityData.SegmentPath = "route-information"
    routeInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInformation.EntityData.Children = types.NewOrderedMap()
    routeInformation.EntityData.Children.Append("route-info", types.YChild{"RouteInfo", &routeInformation.RouteInfo})
    routeInformation.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range routeInformation.RoutePath {
        routeInformation.EntityData.Children.Append(types.GetSegmentPath(routeInformation.RoutePath[i]), types.YChild{"RoutePath", routeInformation.RoutePath[i]})
    }
    routeInformation.EntityData.Leafs = types.NewOrderedMap()
    routeInformation.EntityData.Leafs.Append("route-prefix", types.YLeaf{"RoutePrefix", routeInformation.RoutePrefix})
    routeInformation.EntityData.Leafs.Append("route-prefix-length", types.YLeaf{"RoutePrefixLength", routeInformation.RoutePrefixLength})
    routeInformation.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routeInformation.RouteMetric})
    routeInformation.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeInformation.RouteType})
    routeInformation.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", routeInformation.RouteConnected})

    routeInformation.EntityData.YListKeys = []string {}

    return &(routeInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo
// Route information
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    RouteTeMetric interface{}

    // RIB version. The type is interface{} with range: 0..4294967295.
    RouteRibVersion interface{}

    // SPF version. The type is interface{} with range: 0..18446744073709551615.
    RouteSpfVersion interface{}

    // Forward distance. The type is interface{} with range: 0..4294967295.
    RouteForwardDistance interface{}

    // Protocol source. The type is interface{} with range: 0..65535.
    RouteSource interface{}

    // SPF priority. The type is interface{} with range: 0..255.
    RouteSpfPriority interface{}

    // If true, exclude from TE paths. The type is bool.
    RouteAutoExcluded interface{}

    // If true, SRTE registered prefix route. The type is bool.
    RouteSrtePrefixRegistered interface{}

    // SRTE registered neigbhor count on route. The type is interface{} with
    // range: 0..65535.
    RouteSrteNbrRegistered interface{}

    // Type of route label. The type is interface{} with range: 0..255.
    RouteLabelType interface{}

    // The route label. The type is interface{} with range: 0..4294967295.
    RouteLabel interface{}

    // The route SSPF label. The type is interface{} with range: 0..4294967295.
    RouteSspfLabel interface{}

    // Last time updated.
    RouteUpdateTime Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime

    // Last time update failed.
    RouteFailTime Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime
}

func (routeInfo *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo) GetEntityData() *types.CommonEntityData {
    routeInfo.EntityData.YFilter = routeInfo.YFilter
    routeInfo.EntityData.YangName = "route-info"
    routeInfo.EntityData.BundleName = "cisco_ios_xr"
    routeInfo.EntityData.ParentYangName = "route-information"
    routeInfo.EntityData.SegmentPath = "route-info"
    routeInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeInfo.EntityData.Children = types.NewOrderedMap()
    routeInfo.EntityData.Children.Append("route-update-time", types.YChild{"RouteUpdateTime", &routeInfo.RouteUpdateTime})
    routeInfo.EntityData.Children.Append("route-fail-time", types.YChild{"RouteFailTime", &routeInfo.RouteFailTime})
    routeInfo.EntityData.Leafs = types.NewOrderedMap()
    routeInfo.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", routeInfo.RouteAreaId})
    routeInfo.EntityData.Leafs.Append("route-te-metric", types.YLeaf{"RouteTeMetric", routeInfo.RouteTeMetric})
    routeInfo.EntityData.Leafs.Append("route-rib-version", types.YLeaf{"RouteRibVersion", routeInfo.RouteRibVersion})
    routeInfo.EntityData.Leafs.Append("route-spf-version", types.YLeaf{"RouteSpfVersion", routeInfo.RouteSpfVersion})
    routeInfo.EntityData.Leafs.Append("route-forward-distance", types.YLeaf{"RouteForwardDistance", routeInfo.RouteForwardDistance})
    routeInfo.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routeInfo.RouteSource})
    routeInfo.EntityData.Leafs.Append("route-spf-priority", types.YLeaf{"RouteSpfPriority", routeInfo.RouteSpfPriority})
    routeInfo.EntityData.Leafs.Append("route-auto-excluded", types.YLeaf{"RouteAutoExcluded", routeInfo.RouteAutoExcluded})
    routeInfo.EntityData.Leafs.Append("route-srte-prefix-registered", types.YLeaf{"RouteSrtePrefixRegistered", routeInfo.RouteSrtePrefixRegistered})
    routeInfo.EntityData.Leafs.Append("route-srte-nbr-registered", types.YLeaf{"RouteSrteNbrRegistered", routeInfo.RouteSrteNbrRegistered})
    routeInfo.EntityData.Leafs.Append("route-label-type", types.YLeaf{"RouteLabelType", routeInfo.RouteLabelType})
    routeInfo.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", routeInfo.RouteLabel})
    routeInfo.EntityData.Leafs.Append("route-sspf-label", types.YLeaf{"RouteSspfLabel", routeInfo.RouteSspfLabel})

    routeInfo.EntityData.YListKeys = []string {}

    return &(routeInfo.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime
// Last time updated
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeUpdateTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteUpdateTime) GetEntityData() *types.CommonEntityData {
    routeUpdateTime.EntityData.YFilter = routeUpdateTime.YFilter
    routeUpdateTime.EntityData.YangName = "route-update-time"
    routeUpdateTime.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateTime.EntityData.ParentYangName = "route-info"
    routeUpdateTime.EntityData.SegmentPath = "route-update-time"
    routeUpdateTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateTime.EntityData.Children = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs = types.NewOrderedMap()
    routeUpdateTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeUpdateTime.Second})
    routeUpdateTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeUpdateTime.Nanosecond})

    routeUpdateTime.EntityData.YListKeys = []string {}

    return &(routeUpdateTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime
// Last time update failed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (routeFailTime *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RouteInfo_RouteFailTime) GetEntityData() *types.CommonEntityData {
    routeFailTime.EntityData.YFilter = routeFailTime.YFilter
    routeFailTime.EntityData.YangName = "route-fail-time"
    routeFailTime.EntityData.BundleName = "cisco_ios_xr"
    routeFailTime.EntityData.ParentYangName = "route-info"
    routeFailTime.EntityData.SegmentPath = "route-fail-time"
    routeFailTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeFailTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeFailTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeFailTime.EntityData.Children = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs = types.NewOrderedMap()
    routeFailTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", routeFailTime.Second})
    routeFailTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", routeFailTime.Nanosecond})

    routeFailTime.EntityData.YListKeys = []string {}

    return &(routeFailTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath
// List of paths to this route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSource interface{}

    // LSA ID, see RFC2328. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteLsaid interface{}

    // Multicast-intact path. The type is bool.
    RoutePathIsMcastIntact interface{}

    // UCMP path. The type is bool.
    RoutePathIsUcmpPath interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    RouteMetric interface{}

    // LSA type, see RFC2328 etc. The type is interface{} with range: 0..255.
    LsaType interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area format IP or uint32. The type is bool.
    AreaFormat interface{}

    // Path ID of path. The type is interface{} with range: 0..4294967295.
    RoutePathId interface{}

    // RSVP-TE path. The type is bool.
    RoutePathIsRsvpTePath interface{}

    // SR-TE path. The type is bool.
    RoutePathIsSrTePath interface{}

    // SR Excl TE path. The type is bool.
    RoutePathIsSrExclPath interface{}

    // SR-TE SSPF path. The type is bool.
    RoutePathIsSrTeSspfPath interface{}

    // SR Microloop avoidance Path Info.
    SrMicroloopAvoidancePath Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath

    // NeighborNextHop. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop
}

func (routePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route-information"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("sr-microloop-avoidance-path", types.YChild{"SrMicroloopAvoidancePath", &routePath.SrMicroloopAvoidancePath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("route-interface-name", types.YLeaf{"RouteInterfaceName", routePath.RouteInterfaceName})
    routePath.EntityData.Leafs.Append("route-next-hop-address", types.YLeaf{"RouteNextHopAddress", routePath.RouteNextHopAddress})
    routePath.EntityData.Leafs.Append("route-source", types.YLeaf{"RouteSource", routePath.RouteSource})
    routePath.EntityData.Leafs.Append("route-lsaid", types.YLeaf{"RouteLsaid", routePath.RouteLsaid})
    routePath.EntityData.Leafs.Append("route-path-is-mcast-intact", types.YLeaf{"RoutePathIsMcastIntact", routePath.RoutePathIsMcastIntact})
    routePath.EntityData.Leafs.Append("route-path-is-ucmp-path", types.YLeaf{"RoutePathIsUcmpPath", routePath.RoutePathIsUcmpPath})
    routePath.EntityData.Leafs.Append("route-metric", types.YLeaf{"RouteMetric", routePath.RouteMetric})
    routePath.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", routePath.LsaType})
    routePath.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", routePath.AreaId})
    routePath.EntityData.Leafs.Append("area-format", types.YLeaf{"AreaFormat", routePath.AreaFormat})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})
    routePath.EntityData.Leafs.Append("route-path-is-rsvp-te-path", types.YLeaf{"RoutePathIsRsvpTePath", routePath.RoutePathIsRsvpTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-path", types.YLeaf{"RoutePathIsSrTePath", routePath.RoutePathIsSrTePath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-excl-path", types.YLeaf{"RoutePathIsSrExclPath", routePath.RoutePathIsSrExclPath})
    routePath.EntityData.Leafs.Append("route-path-is-sr-te-sspf-path", types.YLeaf{"RoutePathIsSrTeSspfPath", routePath.RoutePathIsSrTeSspfPath})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath
// SR Microloop avoidance Path Info
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop Repair List Size. The type is interface{} with range:
    // 0..4294967295.
    MicroloopRepairListSize interface{}

    // Microloop Tunnel Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MicroloopTunnelInterfaceName interface{}

    // Strict SPF SID. The type is bool.
    MicroloopStrictSpf interface{}

    // Microloop Repair List. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair.
    MicroloopRepair []*Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
}

func (srMicroloopAvoidancePath *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath) GetEntityData() *types.CommonEntityData {
    srMicroloopAvoidancePath.EntityData.YFilter = srMicroloopAvoidancePath.YFilter
    srMicroloopAvoidancePath.EntityData.YangName = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.BundleName = "cisco_ios_xr"
    srMicroloopAvoidancePath.EntityData.ParentYangName = "route-path"
    srMicroloopAvoidancePath.EntityData.SegmentPath = "sr-microloop-avoidance-path"
    srMicroloopAvoidancePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srMicroloopAvoidancePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srMicroloopAvoidancePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srMicroloopAvoidancePath.EntityData.Children = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Children.Append("microloop-repair", types.YChild{"MicroloopRepair", nil})
    for i := range srMicroloopAvoidancePath.MicroloopRepair {
        srMicroloopAvoidancePath.EntityData.Children.Append(types.GetSegmentPath(srMicroloopAvoidancePath.MicroloopRepair[i]), types.YChild{"MicroloopRepair", srMicroloopAvoidancePath.MicroloopRepair[i]})
    }
    srMicroloopAvoidancePath.EntityData.Leafs = types.NewOrderedMap()
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-repair-list-size", types.YLeaf{"MicroloopRepairListSize", srMicroloopAvoidancePath.MicroloopRepairListSize})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-tunnel-interface-name", types.YLeaf{"MicroloopTunnelInterfaceName", srMicroloopAvoidancePath.MicroloopTunnelInterfaceName})
    srMicroloopAvoidancePath.EntityData.Leafs.Append("microloop-strict-spf", types.YLeaf{"MicroloopStrictSpf", srMicroloopAvoidancePath.MicroloopStrictSpf})

    srMicroloopAvoidancePath.EntityData.YListKeys = []string {}

    return &(srMicroloopAvoidancePath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair
// Microloop Repair List
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Repair Element ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairElementId interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}
}

func (microloopRepair *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_SrMicroloopAvoidancePath_MicroloopRepair) GetEntityData() *types.CommonEntityData {
    microloopRepair.EntityData.YFilter = microloopRepair.YFilter
    microloopRepair.EntityData.YangName = "microloop-repair"
    microloopRepair.EntityData.BundleName = "cisco_ios_xr"
    microloopRepair.EntityData.ParentYangName = "sr-microloop-avoidance-path"
    microloopRepair.EntityData.SegmentPath = "microloop-repair"
    microloopRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloopRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloopRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloopRepair.EntityData.Children = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs = types.NewOrderedMap()
    microloopRepair.EntityData.Leafs.Append("repair-element-id", types.YLeaf{"RepairElementId", microloopRepair.RepairElementId})
    microloopRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", microloopRepair.RepairLabel})
    microloopRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", microloopRepair.RepairElementType})

    microloopRepair.EntityData.YListKeys = []string {}

    return &(microloopRepair.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NeighborNextHopValueType. The type is OspfShNnhValTypes.
    NeighborNextHopValueType interface{}

    // Neighbor NextHop IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborNextHopIpAddr interface{}

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteInformation_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop"
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-value-type", types.YLeaf{"NeighborNextHopValueType", neighborNextHop.NeighborNextHopValueType})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-ip-addr", types.YLeaf{"NeighborNextHopIpAddr", neighborNextHop.NeighborNextHopIpAddr})
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName
// Name of protocol from which the external route
// was redistributed
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ProtocolType. The type is RedistProtocol.
    ProtocolType interface{}

    // ISIS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // BGP Autonomous System Number. The type is string.
    BgpAsNumber interface{}

    // Autonomous System Number. The type is string.
    EigrpAsNumber interface{}

    // Connected instance name. The type is string.
    ConnectedInstance interface{}
}

func (protocolName *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_ProtocolName) GetEntityData() *types.CommonEntityData {
    protocolName.EntityData.YFilter = protocolName.YFilter
    protocolName.EntityData.YangName = "protocol-name"
    protocolName.EntityData.BundleName = "cisco_ios_xr"
    protocolName.EntityData.ParentYangName = "external-route"
    protocolName.EntityData.SegmentPath = "protocol-name"
    protocolName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolName.EntityData.Children = types.NewOrderedMap()
    protocolName.EntityData.Leafs = types.NewOrderedMap()
    protocolName.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", protocolName.ProtocolType})
    protocolName.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", protocolName.IsisInstanceId})
    protocolName.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", protocolName.OspfProcessId})
    protocolName.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", protocolName.BgpAsNumber})
    protocolName.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", protocolName.EigrpAsNumber})
    protocolName.EntityData.Leafs.Append("connected-instance", types.YLeaf{"ConnectedInstance", protocolName.ConnectedInstance})

    protocolName.EntityData.YListKeys = []string {}

    return &(protocolName.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
// Extended communities in the route
type Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunityDomainIdValue interface{}

    // Domain ID type. The type is interface{} with range: 0..65535.
    ExtendedCommunitylDomainIdType interface{}

    // Area id. The type is interface{} with range: 0..4294967295.
    ExtendedCommunityAreaId interface{}

    // Router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedCommunityRouterId interface{}

    // Route type. The type is interface{} with range: 0..255.
    ExtendedCommunityRouteType interface{}

    // Route Options. The type is interface{} with range: 0..255.
    ExtendedCommunityOptions interface{}
}

func (routeExtendedCommunity *Ospf_Processes_Process_DefaultVrf_RouteInformation_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetEntityData() *types.CommonEntityData {
    routeExtendedCommunity.EntityData.YFilter = routeExtendedCommunity.YFilter
    routeExtendedCommunity.EntityData.YangName = "route-extended-community"
    routeExtendedCommunity.EntityData.BundleName = "cisco_ios_xr"
    routeExtendedCommunity.EntityData.ParentYangName = "external-route"
    routeExtendedCommunity.EntityData.SegmentPath = "route-extended-community"
    routeExtendedCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeExtendedCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeExtendedCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeExtendedCommunity.EntityData.Children = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-domain-id-value", types.YLeaf{"ExtendedCommunityDomainIdValue", routeExtendedCommunity.ExtendedCommunityDomainIdValue})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-communityl-domain-id-type", types.YLeaf{"ExtendedCommunitylDomainIdType", routeExtendedCommunity.ExtendedCommunitylDomainIdType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-area-id", types.YLeaf{"ExtendedCommunityAreaId", routeExtendedCommunity.ExtendedCommunityAreaId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-router-id", types.YLeaf{"ExtendedCommunityRouterId", routeExtendedCommunity.ExtendedCommunityRouterId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-route-type", types.YLeaf{"ExtendedCommunityRouteType", routeExtendedCommunity.ExtendedCommunityRouteType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-options", types.YLeaf{"ExtendedCommunityOptions", routeExtendedCommunity.ExtendedCommunityOptions})

    routeExtendedCommunity.EntityData.YListKeys = []string {}

    return &(routeExtendedCommunity.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation
// Container for OSPF Interfaces/links
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Virtual Link table.
    VirtualLinks Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks

    // OSPF Interface Brief Table.
    InterfaceBriefs Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs

    // OSPF Interface Table.
    Interfaces Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces
}

func (interfaceInformation *Ospf_Processes_Process_DefaultVrf_InterfaceInformation) GetEntityData() *types.CommonEntityData {
    interfaceInformation.EntityData.YFilter = interfaceInformation.YFilter
    interfaceInformation.EntityData.YangName = "interface-information"
    interfaceInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceInformation.EntityData.ParentYangName = "default-vrf"
    interfaceInformation.EntityData.SegmentPath = "interface-information"
    interfaceInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceInformation.EntityData.Children = types.NewOrderedMap()
    interfaceInformation.EntityData.Children.Append("virtual-links", types.YChild{"VirtualLinks", &interfaceInformation.VirtualLinks})
    interfaceInformation.EntityData.Children.Append("interface-briefs", types.YChild{"InterfaceBriefs", &interfaceInformation.InterfaceBriefs})
    interfaceInformation.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaceInformation.Interfaces})
    interfaceInformation.EntityData.Leafs = types.NewOrderedMap()

    interfaceInformation.EntityData.YListKeys = []string {}

    return &(interfaceInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks
// Virtual Link table
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information for one Virtual link. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink.
    VirtualLink []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink
}

func (virtualLinks *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks) GetEntityData() *types.CommonEntityData {
    virtualLinks.EntityData.YFilter = virtualLinks.YFilter
    virtualLinks.EntityData.YangName = "virtual-links"
    virtualLinks.EntityData.BundleName = "cisco_ios_xr"
    virtualLinks.EntityData.ParentYangName = "interface-information"
    virtualLinks.EntityData.SegmentPath = "virtual-links"
    virtualLinks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinks.EntityData.Children = types.NewOrderedMap()
    virtualLinks.EntityData.Children.Append("virtual-link", types.YChild{"VirtualLink", nil})
    for i := range virtualLinks.VirtualLink {
        virtualLinks.EntityData.Children.Append(types.GetSegmentPath(virtualLinks.VirtualLink[i]), types.YChild{"VirtualLink", virtualLinks.VirtualLink[i]})
    }
    virtualLinks.EntityData.Leafs = types.NewOrderedMap()

    virtualLinks.EntityData.YListKeys = []string {}

    return &(virtualLinks.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink
// Information for one Virtual link
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Virtual link. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VirtualLinkName interface{}

    // Virtual link name. The type is string.
    VirtualLinkNameXr interface{}

    // Neighbor on other end of this virtual link. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborId interface{}

    // OSPF interface state for the virtual link. The type is OspfInterfaceState.
    VirtualLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    VirtualLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkDcBitlessLsa interface{}

    // Transit area id. The type is string.
    TransitArea interface{}

    // Interface on which this virtual link is formed. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    VirtualLinkInterfaceName interface{}

    // Cost of the virtual link. The type is interface{} with range: 0..65535.
    VirtualLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    VirualLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloInterval interface{}

    // Hello interval (ms). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloIntervalMs interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    VirtaulLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHello interface{}

    // Time until next hello (ms). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHelloMs interface{}

    // If true, interface is passive. The type is bool.
    VirtualLinkPassive interface{}

    // Authentication type. The type is Authentication.
    VirtualLinkAuthenticationType interface{}

    // If true, MD key configured. The type is bool.
    VirtualLinkYoungestMdKey interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    VirtualLinkYoungestMdKeyId interface{}

    // Number of neighbors still using the old key (rollover in progress). The
    // type is interface{} with range: 0..4294967295.
    VirtualLinkOldMdKeyCount interface{}

    // Virtual Link Keychain ID. The type is interface{} with range:
    // 0..18446744073709551615.
    VirtualLinkKeychainId interface{}

    // If true, NSF enabled. The type is bool.
    VirtualLinkNsfEnabled interface{}

    // If true, NSF restart in progress on the virtual link. The type is bool.
    VirtualLinkNsf interface{}

    // Time in seconds since last NSF. The type is interface{} with range:
    // 0..4294967295. Units are second.
    VirtualLinkLastNsf interface{}

    // Neighbor information.
    VirtualLinkNeighbor Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor

    // List of old MD keys (if any). The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey.
    VirtualLinkMdKey []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey
}

func (virtualLink *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink) GetEntityData() *types.CommonEntityData {
    virtualLink.EntityData.YFilter = virtualLink.YFilter
    virtualLink.EntityData.YangName = "virtual-link"
    virtualLink.EntityData.BundleName = "cisco_ios_xr"
    virtualLink.EntityData.ParentYangName = "virtual-links"
    virtualLink.EntityData.SegmentPath = "virtual-link" + types.AddKeyToken(virtualLink.VirtualLinkName, "virtual-link-name")
    virtualLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLink.EntityData.Children = types.NewOrderedMap()
    virtualLink.EntityData.Children.Append("virtual-link-neighbor", types.YChild{"VirtualLinkNeighbor", &virtualLink.VirtualLinkNeighbor})
    virtualLink.EntityData.Children.Append("virtual-link-md-key", types.YChild{"VirtualLinkMdKey", nil})
    for i := range virtualLink.VirtualLinkMdKey {
        virtualLink.EntityData.Children.Append(types.GetSegmentPath(virtualLink.VirtualLinkMdKey[i]), types.YChild{"VirtualLinkMdKey", virtualLink.VirtualLinkMdKey[i]})
    }
    virtualLink.EntityData.Leafs = types.NewOrderedMap()
    virtualLink.EntityData.Leafs.Append("virtual-link-name", types.YLeaf{"VirtualLinkName", virtualLink.VirtualLinkName})
    virtualLink.EntityData.Leafs.Append("virtual-link-name-xr", types.YLeaf{"VirtualLinkNameXr", virtualLink.VirtualLinkNameXr})
    virtualLink.EntityData.Leafs.Append("virtual-link-neighbor-id", types.YLeaf{"VirtualLinkNeighborId", virtualLink.VirtualLinkNeighborId})
    virtualLink.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLink.VirtualLinkState})
    virtualLink.EntityData.Leafs.Append("virtual-link-demand-circuit", types.YLeaf{"VirtualLinkDemandCircuit", virtualLink.VirtualLinkDemandCircuit})
    virtualLink.EntityData.Leafs.Append("virtual-link-dc-bitless-lsa", types.YLeaf{"VirtualLinkDcBitlessLsa", virtualLink.VirtualLinkDcBitlessLsa})
    virtualLink.EntityData.Leafs.Append("transit-area", types.YLeaf{"TransitArea", virtualLink.TransitArea})
    virtualLink.EntityData.Leafs.Append("virtual-link-interface-name", types.YLeaf{"VirtualLinkInterfaceName", virtualLink.VirtualLinkInterfaceName})
    virtualLink.EntityData.Leafs.Append("virtual-link-cost", types.YLeaf{"VirtualLinkCost", virtualLink.VirtualLinkCost})
    virtualLink.EntityData.Leafs.Append("virual-link-transmission-delay", types.YLeaf{"VirualLinkTransmissionDelay", virtualLink.VirualLinkTransmissionDelay})
    virtualLink.EntityData.Leafs.Append("virtual-link-hello-interval", types.YLeaf{"VirtualLinkHelloInterval", virtualLink.VirtualLinkHelloInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-hello-interval-ms", types.YLeaf{"VirtualLinkHelloIntervalMs", virtualLink.VirtualLinkHelloIntervalMs})
    virtualLink.EntityData.Leafs.Append("virtual-link-dead-interval", types.YLeaf{"VirtualLinkDeadInterval", virtualLink.VirtualLinkDeadInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-wait-interval", types.YLeaf{"VirtualLinkWaitInterval", virtualLink.VirtualLinkWaitInterval})
    virtualLink.EntityData.Leafs.Append("virtaul-link-retransmission-interval", types.YLeaf{"VirtaulLinkRetransmissionInterval", virtualLink.VirtaulLinkRetransmissionInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-next-hello", types.YLeaf{"VirtualLinkNextHello", virtualLink.VirtualLinkNextHello})
    virtualLink.EntityData.Leafs.Append("virtual-link-next-hello-ms", types.YLeaf{"VirtualLinkNextHelloMs", virtualLink.VirtualLinkNextHelloMs})
    virtualLink.EntityData.Leafs.Append("virtual-link-passive", types.YLeaf{"VirtualLinkPassive", virtualLink.VirtualLinkPassive})
    virtualLink.EntityData.Leafs.Append("virtual-link-authentication-type", types.YLeaf{"VirtualLinkAuthenticationType", virtualLink.VirtualLinkAuthenticationType})
    virtualLink.EntityData.Leafs.Append("virtual-link-youngest-md-key", types.YLeaf{"VirtualLinkYoungestMdKey", virtualLink.VirtualLinkYoungestMdKey})
    virtualLink.EntityData.Leafs.Append("virtual-link-youngest-md-key-id", types.YLeaf{"VirtualLinkYoungestMdKeyId", virtualLink.VirtualLinkYoungestMdKeyId})
    virtualLink.EntityData.Leafs.Append("virtual-link-old-md-key-count", types.YLeaf{"VirtualLinkOldMdKeyCount", virtualLink.VirtualLinkOldMdKeyCount})
    virtualLink.EntityData.Leafs.Append("virtual-link-keychain-id", types.YLeaf{"VirtualLinkKeychainId", virtualLink.VirtualLinkKeychainId})
    virtualLink.EntityData.Leafs.Append("virtual-link-nsf-enabled", types.YLeaf{"VirtualLinkNsfEnabled", virtualLink.VirtualLinkNsfEnabled})
    virtualLink.EntityData.Leafs.Append("virtual-link-nsf", types.YLeaf{"VirtualLinkNsf", virtualLink.VirtualLinkNsf})
    virtualLink.EntityData.Leafs.Append("virtual-link-last-nsf", types.YLeaf{"VirtualLinkLastNsf", virtualLink.VirtualLinkLastNsf})

    virtualLink.EntityData.YListKeys = []string {"VirtualLinkName"}

    return &(virtualLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor
// Neighbor information
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    VirtualLinkSuppressHello interface{}

    // Adjacency state. The type is NeighborState.
    VirtualLinkState interface{}

    // Neighbor retransmission info.
    VirtualLinkRetransmissoin Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin
}

func (virtualLinkNeighbor *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor) GetEntityData() *types.CommonEntityData {
    virtualLinkNeighbor.EntityData.YFilter = virtualLinkNeighbor.YFilter
    virtualLinkNeighbor.EntityData.YangName = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkNeighbor.EntityData.ParentYangName = "virtual-link"
    virtualLinkNeighbor.EntityData.SegmentPath = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Children.Append("virtual-link-retransmissoin", types.YChild{"VirtualLinkRetransmissoin", &virtualLinkNeighbor.VirtualLinkRetransmissoin})
    virtualLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Leafs.Append("virtual-link-suppress-hello", types.YLeaf{"VirtualLinkSuppressHello", virtualLinkNeighbor.VirtualLinkSuppressHello})
    virtualLinkNeighbor.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLinkNeighbor.VirtualLinkState})

    virtualLinkNeighbor.EntityData.YListKeys = []string {}

    return &(virtualLinkNeighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin
// Neighbor retransmission info
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (virtualLinkRetransmissoin *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmissoin) GetEntityData() *types.CommonEntityData {
    virtualLinkRetransmissoin.EntityData.YFilter = virtualLinkRetransmissoin.YFilter
    virtualLinkRetransmissoin.EntityData.YangName = "virtual-link-retransmissoin"
    virtualLinkRetransmissoin.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkRetransmissoin.EntityData.ParentYangName = "virtual-link-neighbor"
    virtualLinkRetransmissoin.EntityData.SegmentPath = "virtual-link-retransmissoin"
    virtualLinkRetransmissoin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkRetransmissoin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkRetransmissoin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkRetransmissoin.EntityData.Children = types.NewOrderedMap()
    virtualLinkRetransmissoin.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkRetransmissoin.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", virtualLinkRetransmissoin.DbdRetransmissionCount})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", virtualLinkRetransmissoin.DbdRetransmissionTotalCount})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", virtualLinkRetransmissoin.AreaFloodingIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", virtualLinkRetransmissoin.AsFloodIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", virtualLinkRetransmissoin.NeighborRetransmissionCount})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", virtualLinkRetransmissoin.NumberOfRetransmissions})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", virtualLinkRetransmissoin.AreaFirstFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", virtualLinkRetransmissoin.AreaFirstFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", virtualLinkRetransmissoin.AsFirstFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", virtualLinkRetransmissoin.AsFirstFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", virtualLinkRetransmissoin.AreaNextFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", virtualLinkRetransmissoin.AreaNextFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", virtualLinkRetransmissoin.AsNextFloodInformation})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", virtualLinkRetransmissoin.AsNextFloodInformationIndex})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", virtualLinkRetransmissoin.LastRetransmissionLength})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", virtualLinkRetransmissoin.MaximumRetransmissionLength})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", virtualLinkRetransmissoin.LastRetransmissionTime})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", virtualLinkRetransmissoin.MaximumRetransmissionTime})
    virtualLinkRetransmissoin.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", virtualLinkRetransmissoin.LsaRetransmissionTimer})

    virtualLinkRetransmissoin.EntityData.YListKeys = []string {}

    return &(virtualLinkRetransmissoin.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey
// List of old MD keys (if any)
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (virtualLinkMdKey *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_VirtualLinks_VirtualLink_VirtualLinkMdKey) GetEntityData() *types.CommonEntityData {
    virtualLinkMdKey.EntityData.YFilter = virtualLinkMdKey.YFilter
    virtualLinkMdKey.EntityData.YangName = "virtual-link-md-key"
    virtualLinkMdKey.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkMdKey.EntityData.ParentYangName = "virtual-link"
    virtualLinkMdKey.EntityData.SegmentPath = "virtual-link-md-key"
    virtualLinkMdKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkMdKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkMdKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkMdKey.EntityData.Children = types.NewOrderedMap()
    virtualLinkMdKey.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkMdKey.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", virtualLinkMdKey.Entry})

    virtualLinkMdKey.EntityData.YListKeys = []string {}

    return &(virtualLinkMdKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs
// OSPF Interface Brief Table
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface brief information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs) GetEntityData() *types.CommonEntityData {
    interfaceBriefs.EntityData.YFilter = interfaceBriefs.YFilter
    interfaceBriefs.EntityData.YangName = "interface-briefs"
    interfaceBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefs.EntityData.ParentYangName = "interface-information"
    interfaceBriefs.EntityData.SegmentPath = "interface-briefs"
    interfaceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceBriefs.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefs.InterfaceBrief {
        interfaceBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefs.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefs.InterfaceBrief[i]})
    }
    interfaceBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefs.EntityData.YListKeys = []string {}

    return &(interfaceBriefs.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief
// OSPF interface brief information
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface in fast detect hold down state. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj
}

func (interfaceBrief *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-briefs"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range interfaceBrief.InterfaceMadj {
        interfaceBrief.EntityData.Children.Append(types.GetSegmentPath(interfaceBrief.InterfaceMadj[i]), types.YChild{"InterfaceMadj", interfaceBrief.InterfaceMadj[i]})
    }
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceBrief.InterfaceNameXr})
    interfaceBrief.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceBrief.InterfaceArea})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", interfaceBrief.InterfaceMask})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", interfaceBrief.InterfaceFastDetectHoldDown})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceBrief.InterfaceNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceBrief.InterfaceAdjNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", interfaceBrief.InterfaceisMadj})
    interfaceBrief.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", interfaceBrief.InterfaceMadjCount})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_InterfaceBriefs_InterfaceBrief_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface-brief"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces
// OSPF Interface Table
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface.
    Interface []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface
}

func (interfaces *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interface-information"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface
// OSPF interface information
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is InterfaceState.
    InterfaceState interface{}

    // If true, line protocol is up. The type is bool.
    InterfaceLineState interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface SID. The type is interface{} with range: 0..4294967295.
    InterfaceSid interface{}

    // SID PHP Off. The type is bool.
    InterfaceSidPhpOff interface{}

    // SID N-Flag Clear. The type is bool.
    InterfaceSidNFlagClear interface{}

    // Interface Strict-SPF SID. The type is interface{} with range:
    // 0..4294967295.
    InterfaceStrictSpfSid interface{}

    // Strict-SPF SID PHP Off. The type is bool.
    InterfaceStrictSpfSidPhpOff interface{}

    // Strict-SPF SID N-Flag Clear. The type is bool.
    InterfaceStrictSpfSidNFlagClear interface{}

    // Interface Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Interface_.
    NetworkType interface{}

    // IP MTU. The type is interface{} with range: 0..65535.
    IpMtu interface{}

    // Maximum Packet Size. The type is interface{} with range: 0..65535.
    MaximumPacketSize interface{}

    // Interface tunnel flags. The type is interface{} with range: 0..4294967295.
    InterfaceTunnelFlags interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface bandwidth. The type is interface{} with range: 0..4294967295.
    InterfaceBandwidth interface{}

    // If true, cost fallback is configured. The type is bool.
    CfgCostFallback interface{}

    // Interface fallback cost. The type is interface{} with range: 0..65535.
    InterfaceCostFallback interface{}

    // If true, cost fallback is active. The type is bool.
    CostFallbackActive interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, sync igp shortcuts. The type is bool.
    ConfiguredLdpSyncIgpShortcuts interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // If true, configured as demand circuit. The type is bool.
    ConfiguredDemandCircuit interface{}

    // If true, interface running as demand circuit. The type is bool.
    InterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsaCount interface{}

    // Interface Transmission delay. The type is interface{} with range: 0..65535.
    TransmissionDelay interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    DesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // If true, backup designated router. The type is bool.
    BackupDesignatedRouter interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires. The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs. The type is bool.
    InterfaceLsaFilter interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured hello interval (ms). The type is interface{} with range:
    // 0..4294967295.
    HelloIntervalMs interface{}

    // Configured dead interval (s). The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s). The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterrval interface{}

    // If true, NSF is enabled. The type is bool.
    InterfaceNsfEnabled interface{}

    // If true, NSF restart in progress on this interface. The type is bool.
    InterfaceNsf interface{}

    // Time since last NSF restart (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceLastNsf interface{}

    // If true, passive interface. The type is bool.
    PassiveInterface interface{}

    // Time until next Hello (s). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Time until next Hello (ms). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTimeMs interface{}

    // TTL security enabled on the interface. The type is bool.
    TtlSecurityEnabled interface{}

    // TTL security hop counts. The type is interface{} with range: 0..4294967295.
    TtlSecurityHopCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Prefix Suppression for primary addresses. The type is bool.
    PrefixSuppressPrimaryAddresses interface{}

    // Prefix Suppression for secondary addresses. The type is bool.
    PrefixSuppressSecondaryAddresses interface{}

    // If true, loopback interface is advertised as a stub network. The type is
    // bool.
    IsLoopbackStubNetwork interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    InterfaceAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    InterfaceAckListHighWatermark interface{}

    // Registered for Link Down Fast Detection. The type is bool.
    RegisteredForLinkDownFastDetection interface{}

    // Hold-down time in ms for fast-detect event. The type is interface{} with
    // range: 0..4294967295.
    FastDetectHoldDownTime interface{}

    // Link in hold-down state due to fast detect event. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Remaining hold down time in ms. The type is interface{} with range:
    // 0..4294967295.
    FastDetectHoldDownTimeRemaining interface{}

    // IP Fast Reroute Type. The type is Ipfrr.
    FastRerouteType interface{}

    // Topology Independent LFA. The type is bool.
    FastRerouteTopologyIndependentLfa interface{}

    // Unnumbered interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceUnnum interface{}

    // Forward reference interface. The type is bool.
    InterfaceForw interface{}

    // Max number of primary labels. The type is interface{} with range: 0..255.
    InterfacePriLabels interface{}

    // Max number of backup labels. The type is interface{} with range: 0..255.
    InterfaceBkpLabels interface{}

    // Max number of SRTE labels. The type is interface{} with range: 0..255.
    InterfaceSrteLabels interface{}

    // PerfMeas Delay values available. The type is bool.
    PmDelaySet interface{}

    // PerfMeas Average Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayAvg interface{}

    // PerfMeas Minimum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMin interface{}

    // PerfMeas Maximum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMax interface{}

    // PerfMeas Link Delay Variance. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayVar interface{}

    // PerfMeas Link Loss values available. The type is bool.
    PmLossSet interface{}

    // PerfMeas Link Loss. The type is interface{} with range: 0..4294967295.
    LinkLoss interface{}

    // PerfMeas BW Util values available. The type is bool.
    PmbwUtilSet interface{}

    // PerfMeas Total Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    TotalBandwidth interface{}

    // PerfMeas RSVP-TE Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    RsvpteBandwidth interface{}

    // Remote LFA. The type is interface{} with range: 0..255.
    RemoteLfa interface{}

    // SRTE Metric available. The type is bool.
    SrteMetricSet interface{}

    // SRTE Metric. The type is interface{} with range: 0..4294967295.
    SrteMetric interface{}

    // SRTE App Weight. The type is interface{} with range: 0..4294967295.
    SrteAppWeight interface{}

    // SRTE Ext. Admin Group available. The type is bool.
    SrteExtAdminGroupSet interface{}

    // BFD information.
    InterfaceBfdInformation Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation

    // Active interface details.
    ActiveInterface Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface

    // SRLG Values. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_Srlg.
    Srlg []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_Srlg

    // SRTE Ext. Admin Group. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup.
    SrteteExtAdminGroup []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup

    // Information for neighbors on the interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers.
    IpfrrTiebreakers []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers

    // Secondary IP address list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpSecAddr.
    IpSecAddr []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpSecAddr
}

func (self *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("interface-bfd-information", types.YChild{"InterfaceBfdInformation", &self.InterfaceBfdInformation})
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("srlg", types.YChild{"Srlg", nil})
    for i := range self.Srlg {
        self.EntityData.Children.Append(types.GetSegmentPath(self.Srlg[i]), types.YChild{"Srlg", self.Srlg[i]})
    }
    self.EntityData.Children.Append("srtete-ext-admin-group", types.YChild{"SrteteExtAdminGroup", nil})
    for i := range self.SrteteExtAdminGroup {
        self.EntityData.Children.Append(types.GetSegmentPath(self.SrteteExtAdminGroup[i]), types.YChild{"SrteteExtAdminGroup", self.SrteteExtAdminGroup[i]})
    }
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range self.InterfaceMadj {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceMadj[i]), types.YChild{"InterfaceMadj", self.InterfaceMadj[i]})
    }
    self.EntityData.Children.Append("ipfrr-tiebreakers", types.YChild{"IpfrrTiebreakers", nil})
    for i := range self.IpfrrTiebreakers {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpfrrTiebreakers[i]), types.YChild{"IpfrrTiebreakers", self.IpfrrTiebreakers[i]})
    }
    self.EntityData.Children.Append("ip-sec-addr", types.YChild{"IpSecAddr", nil})
    for i := range self.IpSecAddr {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpSecAddr[i]), types.YChild{"IpSecAddr", self.IpSecAddr[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("interface-line-state", types.YLeaf{"InterfaceLineState", self.InterfaceLineState})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", self.InterfaceMask})
    self.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", self.InterfaceArea})
    self.EntityData.Leafs.Append("interface-sid", types.YLeaf{"InterfaceSid", self.InterfaceSid})
    self.EntityData.Leafs.Append("interface-sid-php-off", types.YLeaf{"InterfaceSidPhpOff", self.InterfaceSidPhpOff})
    self.EntityData.Leafs.Append("interface-sid-n-flag-clear", types.YLeaf{"InterfaceSidNFlagClear", self.InterfaceSidNFlagClear})
    self.EntityData.Leafs.Append("interface-strict-spf-sid", types.YLeaf{"InterfaceStrictSpfSid", self.InterfaceStrictSpfSid})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-php-off", types.YLeaf{"InterfaceStrictSpfSidPhpOff", self.InterfaceStrictSpfSidPhpOff})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-n-flag-clear", types.YLeaf{"InterfaceStrictSpfSidNFlagClear", self.InterfaceStrictSpfSidNFlagClear})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("ip-mtu", types.YLeaf{"IpMtu", self.IpMtu})
    self.EntityData.Leafs.Append("maximum-packet-size", types.YLeaf{"MaximumPacketSize", self.MaximumPacketSize})
    self.EntityData.Leafs.Append("interface-tunnel-flags", types.YLeaf{"InterfaceTunnelFlags", self.InterfaceTunnelFlags})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("interface-bandwidth", types.YLeaf{"InterfaceBandwidth", self.InterfaceBandwidth})
    self.EntityData.Leafs.Append("cfg-cost-fallback", types.YLeaf{"CfgCostFallback", self.CfgCostFallback})
    self.EntityData.Leafs.Append("interface-cost-fallback", types.YLeaf{"InterfaceCostFallback", self.InterfaceCostFallback})
    self.EntityData.Leafs.Append("cost-fallback-active", types.YLeaf{"CostFallbackActive", self.CostFallbackActive})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("configured-ldp-sync-igp-shortcuts", types.YLeaf{"ConfiguredLdpSyncIgpShortcuts", self.ConfiguredLdpSyncIgpShortcuts})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})
    self.EntityData.Leafs.Append("configured-demand-circuit", types.YLeaf{"ConfiguredDemandCircuit", self.ConfiguredDemandCircuit})
    self.EntityData.Leafs.Append("interface-demand-circuit", types.YLeaf{"InterfaceDemandCircuit", self.InterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-lsa-count", types.YLeaf{"InterfaceDcBitlessLsaCount", self.InterfaceDcBitlessLsaCount})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("designated-router", types.YLeaf{"DesignatedRouter", self.DesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router", types.YLeaf{"BackupDesignatedRouter", self.BackupDesignatedRouter})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("interface-lsa-filter", types.YLeaf{"InterfaceLsaFilter", self.InterfaceLsaFilter})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("hello-interval-ms", types.YLeaf{"HelloIntervalMs", self.HelloIntervalMs})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interrval", types.YLeaf{"InterfaceRetransmissionInterrval", self.InterfaceRetransmissionInterrval})
    self.EntityData.Leafs.Append("interface-nsf-enabled", types.YLeaf{"InterfaceNsfEnabled", self.InterfaceNsfEnabled})
    self.EntityData.Leafs.Append("interface-nsf", types.YLeaf{"InterfaceNsf", self.InterfaceNsf})
    self.EntityData.Leafs.Append("interface-last-nsf", types.YLeaf{"InterfaceLastNsf", self.InterfaceLastNsf})
    self.EntityData.Leafs.Append("passive-interface", types.YLeaf{"PassiveInterface", self.PassiveInterface})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("next-hello-time-ms", types.YLeaf{"NextHelloTimeMs", self.NextHelloTimeMs})
    self.EntityData.Leafs.Append("ttl-security-enabled", types.YLeaf{"TtlSecurityEnabled", self.TtlSecurityEnabled})
    self.EntityData.Leafs.Append("ttl-security-hop-count", types.YLeaf{"TtlSecurityHopCount", self.TtlSecurityHopCount})
    self.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", self.InterfaceisMadj})
    self.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", self.InterfaceMadjCount})
    self.EntityData.Leafs.Append("prefix-suppress-primary-addresses", types.YLeaf{"PrefixSuppressPrimaryAddresses", self.PrefixSuppressPrimaryAddresses})
    self.EntityData.Leafs.Append("prefix-suppress-secondary-addresses", types.YLeaf{"PrefixSuppressSecondaryAddresses", self.PrefixSuppressSecondaryAddresses})
    self.EntityData.Leafs.Append("is-loopback-stub-network", types.YLeaf{"IsLoopbackStubNetwork", self.IsLoopbackStubNetwork})
    self.EntityData.Leafs.Append("interface-ack-list-count", types.YLeaf{"InterfaceAckListCount", self.InterfaceAckListCount})
    self.EntityData.Leafs.Append("interface-ack-list-high-watermark", types.YLeaf{"InterfaceAckListHighWatermark", self.InterfaceAckListHighWatermark})
    self.EntityData.Leafs.Append("registered-for-link-down-fast-detection", types.YLeaf{"RegisteredForLinkDownFastDetection", self.RegisteredForLinkDownFastDetection})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time", types.YLeaf{"FastDetectHoldDownTime", self.FastDetectHoldDownTime})
    self.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", self.InterfaceFastDetectHoldDown})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time-remaining", types.YLeaf{"FastDetectHoldDownTimeRemaining", self.FastDetectHoldDownTimeRemaining})
    self.EntityData.Leafs.Append("fast-reroute-type", types.YLeaf{"FastRerouteType", self.FastRerouteType})
    self.EntityData.Leafs.Append("fast-reroute-topology-independent-lfa", types.YLeaf{"FastRerouteTopologyIndependentLfa", self.FastRerouteTopologyIndependentLfa})
    self.EntityData.Leafs.Append("interface-unnum", types.YLeaf{"InterfaceUnnum", self.InterfaceUnnum})
    self.EntityData.Leafs.Append("interface-forw", types.YLeaf{"InterfaceForw", self.InterfaceForw})
    self.EntityData.Leafs.Append("interface-pri-labels", types.YLeaf{"InterfacePriLabels", self.InterfacePriLabels})
    self.EntityData.Leafs.Append("interface-bkp-labels", types.YLeaf{"InterfaceBkpLabels", self.InterfaceBkpLabels})
    self.EntityData.Leafs.Append("interface-srte-labels", types.YLeaf{"InterfaceSrteLabels", self.InterfaceSrteLabels})
    self.EntityData.Leafs.Append("pm-delay-set", types.YLeaf{"PmDelaySet", self.PmDelaySet})
    self.EntityData.Leafs.Append("link-delay-avg", types.YLeaf{"LinkDelayAvg", self.LinkDelayAvg})
    self.EntityData.Leafs.Append("link-delay-min", types.YLeaf{"LinkDelayMin", self.LinkDelayMin})
    self.EntityData.Leafs.Append("link-delay-max", types.YLeaf{"LinkDelayMax", self.LinkDelayMax})
    self.EntityData.Leafs.Append("link-delay-var", types.YLeaf{"LinkDelayVar", self.LinkDelayVar})
    self.EntityData.Leafs.Append("pm-loss-set", types.YLeaf{"PmLossSet", self.PmLossSet})
    self.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", self.LinkLoss})
    self.EntityData.Leafs.Append("pmbw-util-set", types.YLeaf{"PmbwUtilSet", self.PmbwUtilSet})
    self.EntityData.Leafs.Append("total-bandwidth", types.YLeaf{"TotalBandwidth", self.TotalBandwidth})
    self.EntityData.Leafs.Append("rsvpte-bandwidth", types.YLeaf{"RsvpteBandwidth", self.RsvpteBandwidth})
    self.EntityData.Leafs.Append("remote-lfa", types.YLeaf{"RemoteLfa", self.RemoteLfa})
    self.EntityData.Leafs.Append("srte-metric-set", types.YLeaf{"SrteMetricSet", self.SrteMetricSet})
    self.EntityData.Leafs.Append("srte-metric", types.YLeaf{"SrteMetric", self.SrteMetric})
    self.EntityData.Leafs.Append("srte-app-weight", types.YLeaf{"SrteAppWeight", self.SrteAppWeight})
    self.EntityData.Leafs.Append("srte-ext-admin-group-set", types.YLeaf{"SrteExtAdminGroupSet", self.SrteExtAdminGroupSet})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation
// BFD information
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms). The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // BFD detection multiplier. The type is interface{} with range:
    // 0..4294967295.
    DetectionMultiplier interface{}
}

func (interfaceBfdInformation *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceBfdInformation) GetEntityData() *types.CommonEntityData {
    interfaceBfdInformation.EntityData.YFilter = interfaceBfdInformation.YFilter
    interfaceBfdInformation.EntityData.YangName = "interface-bfd-information"
    interfaceBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfdInformation.EntityData.ParentYangName = "interface"
    interfaceBfdInformation.EntityData.SegmentPath = "interface-bfd-information"
    interfaceBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfdInformation.EntityData.Children = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfdInformation.BfdIntfEnableMode})
    interfaceBfdInformation.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", interfaceBfdInformation.Interval})
    interfaceBfdInformation.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", interfaceBfdInformation.DetectionMultiplier})

    interfaceBfdInformation.EntityData.YListKeys = []string {}

    return &(interfaceBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface
// Active interface details
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    InterfaceFloodLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope). The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Last flood scan length. The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length. The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms). The type is interface{} with range: 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms). The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Number of neighbors for which hellos are suppressed. The type is
    // interface{} with range: 0..65535.
    SuppressHelloCount interface{}

    // Authentication type. The type is Authentication.
    InterfaceAuthenticationType interface{}

    // If true, MD key is configured. The type is bool.
    YoungestMdKey interface{}

    // Number of neighbors using the old key (if rollover in progress). The type
    // is interface{} with range: 0..4294967295.
    OldMd5KeyNeighborCount interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    YoungestMdKeyId interface{}

    // Keychain ID. The type is interface{} with range: 0..18446744073709551615.
    KeychainId interface{}

    // List of old MD keys. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys.
    MdKeys []*Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys
}

func (activeInterface *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Children.Append("md-keys", types.YChild{"MdKeys", nil})
    for i := range activeInterface.MdKeys {
        activeInterface.EntityData.Children.Append(types.GetSegmentPath(activeInterface.MdKeys[i]), types.YChild{"MdKeys", activeInterface.MdKeys[i]})
    }
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-flood-length", types.YLeaf{"InterfaceFloodLength", activeInterface.InterfaceFloodLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", activeInterface.InterfaceNeighborCount})
    activeInterface.EntityData.Leafs.Append("suppress-hello-count", types.YLeaf{"SuppressHelloCount", activeInterface.SuppressHelloCount})
    activeInterface.EntityData.Leafs.Append("interface-authentication-type", types.YLeaf{"InterfaceAuthenticationType", activeInterface.InterfaceAuthenticationType})
    activeInterface.EntityData.Leafs.Append("youngest-md-key", types.YLeaf{"YoungestMdKey", activeInterface.YoungestMdKey})
    activeInterface.EntityData.Leafs.Append("old-md5-key-neighbor-count", types.YLeaf{"OldMd5KeyNeighborCount", activeInterface.OldMd5KeyNeighborCount})
    activeInterface.EntityData.Leafs.Append("youngest-md-key-id", types.YLeaf{"YoungestMdKeyId", activeInterface.YoungestMdKeyId})
    activeInterface.EntityData.Leafs.Append("keychain-id", types.YLeaf{"KeychainId", activeInterface.KeychainId})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys
// List of old MD keys
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (mdKeys *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_ActiveInterface_MdKeys) GetEntityData() *types.CommonEntityData {
    mdKeys.EntityData.YFilter = mdKeys.YFilter
    mdKeys.EntityData.YangName = "md-keys"
    mdKeys.EntityData.BundleName = "cisco_ios_xr"
    mdKeys.EntityData.ParentYangName = "active-interface"
    mdKeys.EntityData.SegmentPath = "md-keys"
    mdKeys.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mdKeys.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mdKeys.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mdKeys.EntityData.Children = types.NewOrderedMap()
    mdKeys.EntityData.Leafs = types.NewOrderedMap()
    mdKeys.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mdKeys.Entry})

    mdKeys.EntityData.YListKeys = []string {}

    return &(mdKeys.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_Srlg
// SRLG Values
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlg *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_Srlg) GetEntityData() *types.CommonEntityData {
    srlg.EntityData.YFilter = srlg.YFilter
    srlg.EntityData.YangName = "srlg"
    srlg.EntityData.BundleName = "cisco_ios_xr"
    srlg.EntityData.ParentYangName = "interface"
    srlg.EntityData.SegmentPath = "srlg"
    srlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlg.EntityData.Children = types.NewOrderedMap()
    srlg.EntityData.Leafs = types.NewOrderedMap()
    srlg.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlg.Entry})

    srlg.EntityData.YListKeys = []string {}

    return &(srlg.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup
// SRTE Ext. Admin Group
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srteteExtAdminGroup *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_SrteteExtAdminGroup) GetEntityData() *types.CommonEntityData {
    srteteExtAdminGroup.EntityData.YFilter = srteteExtAdminGroup.YFilter
    srteteExtAdminGroup.EntityData.YangName = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    srteteExtAdminGroup.EntityData.ParentYangName = "interface"
    srteteExtAdminGroup.EntityData.SegmentPath = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srteteExtAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srteteExtAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srteteExtAdminGroup.EntityData.Children = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srteteExtAdminGroup.Entry})

    srteteExtAdminGroup.EntityData.YListKeys = []string {}

    return &(srteteExtAdminGroup.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, Designated router. The type is bool.
    NeighborDr interface{}

    // If true, Backup designated router. The type is bool.
    NeighborBdr interface{}

    // If true, hellos suppressed. The type is bool.
    SuppressHello interface{}
}

func (interfaceNeighbor *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor"
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-dr", types.YLeaf{"NeighborDr", interfaceNeighbor.NeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-bdr", types.YLeaf{"NeighborBdr", interfaceNeighbor.NeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("suppress-hello", types.YLeaf{"SuppressHello", interfaceNeighbor.SuppressHello})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpfrrTiebreakers) GetEntityData() *types.CommonEntityData {
    ipfrrTiebreakers.EntityData.YFilter = ipfrrTiebreakers.YFilter
    ipfrrTiebreakers.EntityData.YangName = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTiebreakers.EntityData.ParentYangName = "interface"
    ipfrrTiebreakers.EntityData.SegmentPath = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTiebreakers.EntityData.Children = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-type", types.YLeaf{"TiebreakerType", ipfrrTiebreakers.TiebreakerType})
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-index", types.YLeaf{"TiebreakerIndex", ipfrrTiebreakers.TiebreakerIndex})

    ipfrrTiebreakers.EntityData.YListKeys = []string {}

    return &(ipfrrTiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpSecAddr
// Secondary IP address list
type Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpSecAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Secondary Address Type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryAddr interface{}

    // Secondary Prefix Length. The type is interface{} with range: 0..4294967295.
    SecondaryPrefix interface{}
}

func (ipSecAddr *Ospf_Processes_Process_DefaultVrf_InterfaceInformation_Interfaces_Interface_IpSecAddr) GetEntityData() *types.CommonEntityData {
    ipSecAddr.EntityData.YFilter = ipSecAddr.YFilter
    ipSecAddr.EntityData.YangName = "ip-sec-addr"
    ipSecAddr.EntityData.BundleName = "cisco_ios_xr"
    ipSecAddr.EntityData.ParentYangName = "interface"
    ipSecAddr.EntityData.SegmentPath = "ip-sec-addr"
    ipSecAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSecAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSecAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSecAddr.EntityData.Children = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs.Append("secondary-addr", types.YLeaf{"SecondaryAddr", ipSecAddr.SecondaryAddr})
    ipSecAddr.EntityData.Leafs.Append("secondary-prefix", types.YLeaf{"SecondaryPrefix", ipSecAddr.SecondaryPrefix})

    ipSecAddr.EntityData.YListKeys = []string {}

    return &(ipSecAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_BorderRouters
// Border router table
type Ospf_Processes_Process_DefaultVrf_BorderRouters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information for a particular border router. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter.
    BorderRouter []*Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter
}

func (borderRouters *Ospf_Processes_Process_DefaultVrf_BorderRouters) GetEntityData() *types.CommonEntityData {
    borderRouters.EntityData.YFilter = borderRouters.YFilter
    borderRouters.EntityData.YangName = "border-routers"
    borderRouters.EntityData.BundleName = "cisco_ios_xr"
    borderRouters.EntityData.ParentYangName = "default-vrf"
    borderRouters.EntityData.SegmentPath = "border-routers"
    borderRouters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouters.EntityData.Children = types.NewOrderedMap()
    borderRouters.EntityData.Children.Append("border-router", types.YChild{"BorderRouter", nil})
    for i := range borderRouters.BorderRouter {
        borderRouters.EntityData.Children.Append(types.GetSegmentPath(borderRouters.BorderRouter[i]), types.YChild{"BorderRouter", borderRouters.BorderRouter[i]})
    }
    borderRouters.EntityData.Leafs = types.NewOrderedMap()

    borderRouters.EntityData.YListKeys = []string {}

    return &(borderRouters.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter
// Information for a particular border router
type Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterId interface{}

    // Router ID of Border Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterIdXr interface{}

    // List of Border Router paths. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath.
    BorderRouterPath []*Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath
}

func (borderRouter *Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetEntityData() *types.CommonEntityData {
    borderRouter.EntityData.YFilter = borderRouter.YFilter
    borderRouter.EntityData.YangName = "border-router"
    borderRouter.EntityData.BundleName = "cisco_ios_xr"
    borderRouter.EntityData.ParentYangName = "border-routers"
    borderRouter.EntityData.SegmentPath = "border-router" + types.AddKeyToken(borderRouter.BorderRouterId, "border-router-id")
    borderRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouter.EntityData.Children = types.NewOrderedMap()
    borderRouter.EntityData.Children.Append("border-router-path", types.YChild{"BorderRouterPath", nil})
    for i := range borderRouter.BorderRouterPath {
        borderRouter.EntityData.Children.Append(types.GetSegmentPath(borderRouter.BorderRouterPath[i]), types.YChild{"BorderRouterPath", borderRouter.BorderRouterPath[i]})
    }
    borderRouter.EntityData.Leafs = types.NewOrderedMap()
    borderRouter.EntityData.Leafs.Append("border-router-id", types.YLeaf{"BorderRouterId", borderRouter.BorderRouterId})
    borderRouter.EntityData.Leafs.Append("border-router-id-xr", types.YLeaf{"BorderRouterIdXr", borderRouter.BorderRouterIdXr})

    borderRouter.EntityData.YListKeys = []string {"BorderRouterId"}

    return &(borderRouter.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath
// List of Border Router paths
type Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route type. The type is OspfRoute.
    BorderRouterRouteType interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BorderRouterRouteMetric interface{}

    // Next hop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterNextHop interface{}

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BorderRouterNextHopInterfaceName interface{}

    // Border router type. The type is OspfBr.
    BorderRouterType interface{}

    // Area string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    BorderRouterAreaId interface{}

    // SPF run instance count. The type is interface{} with range:
    // 0..18446744073709551615.
    SpfVersion interface{}
}

func (borderRouterPath *Ospf_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetEntityData() *types.CommonEntityData {
    borderRouterPath.EntityData.YFilter = borderRouterPath.YFilter
    borderRouterPath.EntityData.YangName = "border-router-path"
    borderRouterPath.EntityData.BundleName = "cisco_ios_xr"
    borderRouterPath.EntityData.ParentYangName = "border-router"
    borderRouterPath.EntityData.SegmentPath = "border-router-path"
    borderRouterPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouterPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouterPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouterPath.EntityData.Children = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs.Append("border-router-route-type", types.YLeaf{"BorderRouterRouteType", borderRouterPath.BorderRouterRouteType})
    borderRouterPath.EntityData.Leafs.Append("border-router-route-metric", types.YLeaf{"BorderRouterRouteMetric", borderRouterPath.BorderRouterRouteMetric})
    borderRouterPath.EntityData.Leafs.Append("border-router-next-hop", types.YLeaf{"BorderRouterNextHop", borderRouterPath.BorderRouterNextHop})
    borderRouterPath.EntityData.Leafs.Append("border-router-next-hop-interface-name", types.YLeaf{"BorderRouterNextHopInterfaceName", borderRouterPath.BorderRouterNextHopInterfaceName})
    borderRouterPath.EntityData.Leafs.Append("border-router-type", types.YLeaf{"BorderRouterType", borderRouterPath.BorderRouterType})
    borderRouterPath.EntityData.Leafs.Append("border-router-area-id", types.YLeaf{"BorderRouterAreaId", borderRouterPath.BorderRouterAreaId})
    borderRouterPath.EntityData.Leafs.Append("spf-version", types.YLeaf{"SpfVersion", borderRouterPath.SpfVersion})

    borderRouterPath.EntityData.YListKeys = []string {}

    return &(borderRouterPath.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation
// Container for OSPF Process information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol Area table.
    ProtocolAreas Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas

    // Basic OSPF protocol information.
    ProtocolSummary Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolSummary

    // Redistribution information table.
    Redistributions Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions

    // Process Area table.
    ProcessAreas Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas

    // Basic OSPF summary information.
    ProcessSummary Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary
}

func (processInformation *Ospf_Processes_Process_DefaultVrf_ProcessInformation) GetEntityData() *types.CommonEntityData {
    processInformation.EntityData.YFilter = processInformation.YFilter
    processInformation.EntityData.YangName = "process-information"
    processInformation.EntityData.BundleName = "cisco_ios_xr"
    processInformation.EntityData.ParentYangName = "default-vrf"
    processInformation.EntityData.SegmentPath = "process-information"
    processInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processInformation.EntityData.Children = types.NewOrderedMap()
    processInformation.EntityData.Children.Append("protocol-areas", types.YChild{"ProtocolAreas", &processInformation.ProtocolAreas})
    processInformation.EntityData.Children.Append("protocol-summary", types.YChild{"ProtocolSummary", &processInformation.ProtocolSummary})
    processInformation.EntityData.Children.Append("redistributions", types.YChild{"Redistributions", &processInformation.Redistributions})
    processInformation.EntityData.Children.Append("process-areas", types.YChild{"ProcessAreas", &processInformation.ProcessAreas})
    processInformation.EntityData.Children.Append("process-summary", types.YChild{"ProcessSummary", &processInformation.ProcessSummary})
    processInformation.EntityData.Leafs = types.NewOrderedMap()

    processInformation.EntityData.YListKeys = []string {}

    return &(processInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas
// Protocol Area table
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea.
    ProtocolArea []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea
}

func (protocolAreas *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas) GetEntityData() *types.CommonEntityData {
    protocolAreas.EntityData.YFilter = protocolAreas.YFilter
    protocolAreas.EntityData.YangName = "protocol-areas"
    protocolAreas.EntityData.BundleName = "cisco_ios_xr"
    protocolAreas.EntityData.ParentYangName = "process-information"
    protocolAreas.EntityData.SegmentPath = "protocol-areas"
    protocolAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolAreas.EntityData.Children = types.NewOrderedMap()
    protocolAreas.EntityData.Children.Append("protocol-area", types.YChild{"ProtocolArea", nil})
    for i := range protocolAreas.ProtocolArea {
        protocolAreas.EntityData.Children.Append(types.GetSegmentPath(protocolAreas.ProtocolArea[i]), types.YChild{"ProtocolArea", protocolAreas.ProtocolArea[i]})
    }
    protocolAreas.EntityData.Leafs = types.NewOrderedMap()

    protocolAreas.EntityData.YListKeys = []string {}

    return &(protocolAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea
// Area information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID if in integer format. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area ID if in IP address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Area ID string in decimal and dotted-decimal format. The type is string
    // with length: 0..16.
    ProtcolArea interface{}

    // MPLS-TE enabled. The type is bool.
    ProtocolMpls interface{}

    // Distribute List In. The type is string.
    ProtocolAreaDistListIn interface{}

    // Interface list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface.
    ProtocolInterface []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface
}

func (protocolArea *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea) GetEntityData() *types.CommonEntityData {
    protocolArea.EntityData.YFilter = protocolArea.YFilter
    protocolArea.EntityData.YangName = "protocol-area"
    protocolArea.EntityData.BundleName = "cisco_ios_xr"
    protocolArea.EntityData.ParentYangName = "protocol-areas"
    protocolArea.EntityData.SegmentPath = "protocol-area"
    protocolArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolArea.EntityData.Children = types.NewOrderedMap()
    protocolArea.EntityData.Children.Append("protocol-interface", types.YChild{"ProtocolInterface", nil})
    for i := range protocolArea.ProtocolInterface {
        protocolArea.EntityData.Children.Append(types.GetSegmentPath(protocolArea.ProtocolInterface[i]), types.YChild{"ProtocolInterface", protocolArea.ProtocolInterface[i]})
    }
    protocolArea.EntityData.Leafs = types.NewOrderedMap()
    protocolArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", protocolArea.AreaId})
    protocolArea.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolArea.Address})
    protocolArea.EntityData.Leafs.Append("protcol-area", types.YLeaf{"ProtcolArea", protocolArea.ProtcolArea})
    protocolArea.EntityData.Leafs.Append("protocol-mpls", types.YLeaf{"ProtocolMpls", protocolArea.ProtocolMpls})
    protocolArea.EntityData.Leafs.Append("protocol-area-dist-list-in", types.YLeaf{"ProtocolAreaDistListIn", protocolArea.ProtocolAreaDistListIn})

    protocolArea.EntityData.YListKeys = []string {}

    return &(protocolArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface
// Interface list
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProtocolInterfaceName interface{}

    // Authentication type. The type is Authentication.
    ProtocolAuthenticationType interface{}

    // Distribute List In. The type is string.
    ProtocolInterfaceDistListIn interface{}
}

func (protocolInterface *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolAreas_ProtocolArea_ProtocolInterface) GetEntityData() *types.CommonEntityData {
    protocolInterface.EntityData.YFilter = protocolInterface.YFilter
    protocolInterface.EntityData.YangName = "protocol-interface"
    protocolInterface.EntityData.BundleName = "cisco_ios_xr"
    protocolInterface.EntityData.ParentYangName = "protocol-area"
    protocolInterface.EntityData.SegmentPath = "protocol-interface"
    protocolInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInterface.EntityData.Children = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs.Append("protocol-interface-name", types.YLeaf{"ProtocolInterfaceName", protocolInterface.ProtocolInterfaceName})
    protocolInterface.EntityData.Leafs.Append("protocol-authentication-type", types.YLeaf{"ProtocolAuthenticationType", protocolInterface.ProtocolAuthenticationType})
    protocolInterface.EntityData.Leafs.Append("protocol-interface-dist-list-in", types.YLeaf{"ProtocolInterfaceDistListIn", protocolInterface.ProtocolInterfaceDistListIn})

    protocolInterface.EntityData.YListKeys = []string {}

    return &(protocolInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolSummary
// Basic OSPF protocol information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProtocolRouterId interface{}

    // Administrative distance. The type is interface{} with range: 0..4294967295.
    ProtocolDistance interface{}

    // Administrative Distance for Inter Area routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceInterArea interface{}

    // Administrative Distance for External routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceExternal interface{}

    // True if NSF enabled. The type is bool.
    ProtocolNsf interface{}

    // Distribute List In. The type is string.
    DistListIn interface{}
}

func (protocolSummary *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProtocolSummary) GetEntityData() *types.CommonEntityData {
    protocolSummary.EntityData.YFilter = protocolSummary.YFilter
    protocolSummary.EntityData.YangName = "protocol-summary"
    protocolSummary.EntityData.BundleName = "cisco_ios_xr"
    protocolSummary.EntityData.ParentYangName = "process-information"
    protocolSummary.EntityData.SegmentPath = "protocol-summary"
    protocolSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolSummary.EntityData.Children = types.NewOrderedMap()
    protocolSummary.EntityData.Leafs = types.NewOrderedMap()
    protocolSummary.EntityData.Leafs.Append("protocol-router-id", types.YLeaf{"ProtocolRouterId", protocolSummary.ProtocolRouterId})
    protocolSummary.EntityData.Leafs.Append("protocol-distance", types.YLeaf{"ProtocolDistance", protocolSummary.ProtocolDistance})
    protocolSummary.EntityData.Leafs.Append("administrative-distance-inter-area", types.YLeaf{"AdministrativeDistanceInterArea", protocolSummary.AdministrativeDistanceInterArea})
    protocolSummary.EntityData.Leafs.Append("administrative-distance-external", types.YLeaf{"AdministrativeDistanceExternal", protocolSummary.AdministrativeDistanceExternal})
    protocolSummary.EntityData.Leafs.Append("protocol-nsf", types.YLeaf{"ProtocolNsf", protocolSummary.ProtocolNsf})
    protocolSummary.EntityData.Leafs.Append("dist-list-in", types.YLeaf{"DistListIn", protocolSummary.DistListIn})

    protocolSummary.EntityData.YListKeys = []string {}

    return &(protocolSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions
// Redistribution information table
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribution information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution.
    Redistribution []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution
}

func (redistributions *Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions) GetEntityData() *types.CommonEntityData {
    redistributions.EntityData.YFilter = redistributions.YFilter
    redistributions.EntityData.YangName = "redistributions"
    redistributions.EntityData.BundleName = "cisco_ios_xr"
    redistributions.EntityData.ParentYangName = "process-information"
    redistributions.EntityData.SegmentPath = "redistributions"
    redistributions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributions.EntityData.Children = types.NewOrderedMap()
    redistributions.EntityData.Children.Append("redistribution", types.YChild{"Redistribution", nil})
    for i := range redistributions.Redistribution {
        redistributions.EntityData.Children.Append(types.GetSegmentPath(redistributions.Redistribution[i]), types.YChild{"Redistribution", redistributions.Redistribution[i]})
    }
    redistributions.EntityData.Leafs = types.NewOrderedMap()

    redistributions.EntityData.YListKeys = []string {}

    return &(redistributions.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution
// Redistribution information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProtocolName interface{}

    // Process name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // If true, Metric configured. The type is bool.
    MetricFlag interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Whether to use CIDR. The type is bool.
    Classless interface{}

    // To NSSA areas only. The type is bool.
    NssaOnly interface{}

    // Protocol Information.
    RedistributionProtocol Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "redistributions"
    redistribution.EntityData.SegmentPath = "redistribution"
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = types.NewOrderedMap()
    redistribution.EntityData.Children.Append("redistribution-protocol", types.YChild{"RedistributionProtocol", &redistribution.RedistributionProtocol})
    redistribution.EntityData.Leafs = types.NewOrderedMap()
    redistribution.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", redistribution.ProtocolName})
    redistribution.EntityData.Leafs.Append("process-name", types.YLeaf{"ProcessName", redistribution.ProcessName})
    redistribution.EntityData.Leafs.Append("metric-flag", types.YLeaf{"MetricFlag", redistribution.MetricFlag})
    redistribution.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", redistribution.Metric})
    redistribution.EntityData.Leafs.Append("classless", types.YLeaf{"Classless", redistribution.Classless})
    redistribution.EntityData.Leafs.Append("nssa-only", types.YLeaf{"NssaOnly", redistribution.NssaOnly})

    redistribution.EntityData.YListKeys = []string {}

    return &(redistribution.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol
// Protocol Information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ProtocolType. The type is RedistProtocol.
    ProtocolType interface{}

    // ISIS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // BGP Autonomous System Number. The type is string.
    BgpAsNumber interface{}

    // Autonomous System Number. The type is string.
    EigrpAsNumber interface{}

    // Connected instance name. The type is string.
    ConnectedInstance interface{}
}

func (redistributionProtocol *Ospf_Processes_Process_DefaultVrf_ProcessInformation_Redistributions_Redistribution_RedistributionProtocol) GetEntityData() *types.CommonEntityData {
    redistributionProtocol.EntityData.YFilter = redistributionProtocol.YFilter
    redistributionProtocol.EntityData.YangName = "redistribution-protocol"
    redistributionProtocol.EntityData.BundleName = "cisco_ios_xr"
    redistributionProtocol.EntityData.ParentYangName = "redistribution"
    redistributionProtocol.EntityData.SegmentPath = "redistribution-protocol"
    redistributionProtocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionProtocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionProtocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionProtocol.EntityData.Children = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", redistributionProtocol.ProtocolType})
    redistributionProtocol.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", redistributionProtocol.IsisInstanceId})
    redistributionProtocol.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", redistributionProtocol.OspfProcessId})
    redistributionProtocol.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", redistributionProtocol.BgpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", redistributionProtocol.EigrpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("connected-instance", types.YLeaf{"ConnectedInstance", redistributionProtocol.ConnectedInstance})

    redistributionProtocol.EntityData.YListKeys = []string {}

    return &(redistributionProtocol.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas
// Process Area table
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed information for a particular area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea.
    ProcessArea []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea
}

func (processAreas *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas) GetEntityData() *types.CommonEntityData {
    processAreas.EntityData.YFilter = processAreas.YFilter
    processAreas.EntityData.YangName = "process-areas"
    processAreas.EntityData.BundleName = "cisco_ios_xr"
    processAreas.EntityData.ParentYangName = "process-information"
    processAreas.EntityData.SegmentPath = "process-areas"
    processAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processAreas.EntityData.Children = types.NewOrderedMap()
    processAreas.EntityData.Children.Append("process-area", types.YChild{"ProcessArea", nil})
    for i := range processAreas.ProcessArea {
        processAreas.EntityData.Children.Append(types.GetSegmentPath(processAreas.ProcessArea[i]), types.YChild{"ProcessArea", processAreas.ProcessArea[i]})
    }
    processAreas.EntityData.Leafs = types.NewOrderedMap()

    processAreas.EntityData.YListKeys = []string {}

    return &(processAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea
// Detailed information for a particular area
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID if in integer format. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area ID if in IP address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Area ID string. The type is string with length: 0..16.
    AreaIdString interface{}

    // If true, Backbone area is active. The type is bool.
    BackboneAreaActive interface{}

    // Number of interfaces in the area. The type is interface{} with range:
    // 0..65535.
    AreaInterfaceCount interface{}

    // If true, stub area. The type is bool.
    AreaStub interface{}

    // If true, totally stubby area. The type is bool.
    AreaTotalStub interface{}

    // Default cost for Stub or NSSA area. The type is interface{} with range:
    // 0..65535.
    StubDefaultCost interface{}

    // If true, area is a NSSA. The type is bool.
    AreaNssa interface{}

    // If true, No redistribution into this NSSA area. The type is bool.
    NssaNoRedistribution interface{}

    // If true, perform 7/5 translation. The type is bool.
    NssaTranslate interface{}

    // If true, perform 7/5 translation always. The type is bool.
    NssaTranslateAlways interface{}

    // If true, generate NSSA default route. The type is bool.
    NssaDefault interface{}

    // If true, MPLS-TE enabled. The type is bool.
    TeEnabled interface{}

    // TE area topology version number. The type is interface{} with range:
    // 0..4294967295.
    TeTopologyVersion interface{}

    // If true, advertise intra-area prefixes as external. The type is bool.
    ExternalOut interface{}

    // If true, advertise redistributedprefixes as summary. The type is bool.
    SummaryIn interface{}

    // If true, Segment Routing enabled. The type is SrDp.
    SegmentRouting interface{}

    // If true, All routers in Area are SR Strict-SPF Capable. The type is bool.
    SrStrictSpfCap interface{}

    // If true, All routers in Area have SR Strict-SPF SIDs. The type is bool.
    SrStrictSpfsidsAvailable interface{}

    // If true, Segment routing Uloop avoidance         is currently active in
    // this area. The type is bool.
    SrMicroloopAvoidanceActive interface{}

    // Event for which SR uloop is triggered            Link Up/Link Down. The
    // type is SrUloopEvent.
    SrMicroloopAvoidanceEventType interface{}

    // Link State ID of the near end                    of the topology change.
    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrMicroloopAvoidanceNearEndId interface{}

    // Link State ID of the far end                     of the topology change.
    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrMicroloopAvoidanceFarEndId interface{}

    // Link State ID of the pseudo node,                if the change is on a
    // broadcast link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SrMicroloopAvoidancePseudonodeId interface{}

    // Authentication type. The type is Authentication.
    AuthenticationType interface{}

    // Number of SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpfCount interface{}

    // If true, inbound policy is configured. The type is bool.
    AreaPolicyIn interface{}

    // Inbound summary lsa filtering policy. The type is string.
    AreaPolicyInName interface{}

    // If true, outbound policy is configured. The type is bool.
    AreaPolicyOut interface{}

    // Outbound summary lsa filtering policy. The type is string.
    AreaPolicyOutName interface{}

    // Number of LSAs in the Area. The type is interface{} with range:
    // 0..4294967295.
    AreaLsaCount interface{}

    // Sum of all area LSAs checksum. The type is interface{} with range:
    // 0..4294967295.
    AreaLsaChecksum interface{}

    // Number of Opaque LSAs in the Area. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaCount interface{}

    // Sum of opaque LSA checksums. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaChecksum interface{}

    // Number of LSA with demand circuit bit not set. The type is interface{} with
    // range: 0..4294967295.
    AreaDcBitlessLsaCount interface{}

    // Number of indication LSAs. The type is interface{} with range:
    // 0..4294967295.
    IndicationLsaCount interface{}

    // Number of DoNotAge LSAs. The type is interface{} with range: 0..4294967295.
    DnaLsaCount interface{}

    // Number of LSAs which need to be flooded. The type is interface{} with
    // range: 0..4294967295.
    FloodListLength interface{}

    // Number of LFA enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    AreaLfaInterfaceCount interface{}

    // Number of Per Prefix LFA enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    AreaPerPrefixLfaInterfaceCount interface{}

    // Area LFA revision. The type is interface{} with range: 0..4294967295.
    AreaLfaRevision interface{}

    // Num of nbrs currently forming. The type is interface{} with range:
    // 0..65535.
    AreaAdjStagNumNbrForming interface{}

    // Num of full nbrs in area. The type is interface{} with range: 0..65535.
    AreaNumNbrFull interface{}

    // List of ranges to summarize. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange.
    AreaRange []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange
}

func (processArea *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea) GetEntityData() *types.CommonEntityData {
    processArea.EntityData.YFilter = processArea.YFilter
    processArea.EntityData.YangName = "process-area"
    processArea.EntityData.BundleName = "cisco_ios_xr"
    processArea.EntityData.ParentYangName = "process-areas"
    processArea.EntityData.SegmentPath = "process-area"
    processArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processArea.EntityData.Children = types.NewOrderedMap()
    processArea.EntityData.Children.Append("area-range", types.YChild{"AreaRange", nil})
    for i := range processArea.AreaRange {
        processArea.EntityData.Children.Append(types.GetSegmentPath(processArea.AreaRange[i]), types.YChild{"AreaRange", processArea.AreaRange[i]})
    }
    processArea.EntityData.Leafs = types.NewOrderedMap()
    processArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", processArea.AreaId})
    processArea.EntityData.Leafs.Append("address", types.YLeaf{"Address", processArea.Address})
    processArea.EntityData.Leafs.Append("area-id-string", types.YLeaf{"AreaIdString", processArea.AreaIdString})
    processArea.EntityData.Leafs.Append("backbone-area-active", types.YLeaf{"BackboneAreaActive", processArea.BackboneAreaActive})
    processArea.EntityData.Leafs.Append("area-interface-count", types.YLeaf{"AreaInterfaceCount", processArea.AreaInterfaceCount})
    processArea.EntityData.Leafs.Append("area-stub", types.YLeaf{"AreaStub", processArea.AreaStub})
    processArea.EntityData.Leafs.Append("area-total-stub", types.YLeaf{"AreaTotalStub", processArea.AreaTotalStub})
    processArea.EntityData.Leafs.Append("stub-default-cost", types.YLeaf{"StubDefaultCost", processArea.StubDefaultCost})
    processArea.EntityData.Leafs.Append("area-nssa", types.YLeaf{"AreaNssa", processArea.AreaNssa})
    processArea.EntityData.Leafs.Append("nssa-no-redistribution", types.YLeaf{"NssaNoRedistribution", processArea.NssaNoRedistribution})
    processArea.EntityData.Leafs.Append("nssa-translate", types.YLeaf{"NssaTranslate", processArea.NssaTranslate})
    processArea.EntityData.Leafs.Append("nssa-translate-always", types.YLeaf{"NssaTranslateAlways", processArea.NssaTranslateAlways})
    processArea.EntityData.Leafs.Append("nssa-default", types.YLeaf{"NssaDefault", processArea.NssaDefault})
    processArea.EntityData.Leafs.Append("te-enabled", types.YLeaf{"TeEnabled", processArea.TeEnabled})
    processArea.EntityData.Leafs.Append("te-topology-version", types.YLeaf{"TeTopologyVersion", processArea.TeTopologyVersion})
    processArea.EntityData.Leafs.Append("external-out", types.YLeaf{"ExternalOut", processArea.ExternalOut})
    processArea.EntityData.Leafs.Append("summary-in", types.YLeaf{"SummaryIn", processArea.SummaryIn})
    processArea.EntityData.Leafs.Append("segment-routing", types.YLeaf{"SegmentRouting", processArea.SegmentRouting})
    processArea.EntityData.Leafs.Append("sr-strict-spf-cap", types.YLeaf{"SrStrictSpfCap", processArea.SrStrictSpfCap})
    processArea.EntityData.Leafs.Append("sr-strict-spfsids-available", types.YLeaf{"SrStrictSpfsidsAvailable", processArea.SrStrictSpfsidsAvailable})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-active", types.YLeaf{"SrMicroloopAvoidanceActive", processArea.SrMicroloopAvoidanceActive})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-event-type", types.YLeaf{"SrMicroloopAvoidanceEventType", processArea.SrMicroloopAvoidanceEventType})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-near-end-id", types.YLeaf{"SrMicroloopAvoidanceNearEndId", processArea.SrMicroloopAvoidanceNearEndId})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-far-end-id", types.YLeaf{"SrMicroloopAvoidanceFarEndId", processArea.SrMicroloopAvoidanceFarEndId})
    processArea.EntityData.Leafs.Append("sr-microloop-avoidance-pseudonode-id", types.YLeaf{"SrMicroloopAvoidancePseudonodeId", processArea.SrMicroloopAvoidancePseudonodeId})
    processArea.EntityData.Leafs.Append("authentication-type", types.YLeaf{"AuthenticationType", processArea.AuthenticationType})
    processArea.EntityData.Leafs.Append("spf-count", types.YLeaf{"SpfCount", processArea.SpfCount})
    processArea.EntityData.Leafs.Append("area-policy-in", types.YLeaf{"AreaPolicyIn", processArea.AreaPolicyIn})
    processArea.EntityData.Leafs.Append("area-policy-in-name", types.YLeaf{"AreaPolicyInName", processArea.AreaPolicyInName})
    processArea.EntityData.Leafs.Append("area-policy-out", types.YLeaf{"AreaPolicyOut", processArea.AreaPolicyOut})
    processArea.EntityData.Leafs.Append("area-policy-out-name", types.YLeaf{"AreaPolicyOutName", processArea.AreaPolicyOutName})
    processArea.EntityData.Leafs.Append("area-lsa-count", types.YLeaf{"AreaLsaCount", processArea.AreaLsaCount})
    processArea.EntityData.Leafs.Append("area-lsa-checksum", types.YLeaf{"AreaLsaChecksum", processArea.AreaLsaChecksum})
    processArea.EntityData.Leafs.Append("area-opaque-lsa-count", types.YLeaf{"AreaOpaqueLsaCount", processArea.AreaOpaqueLsaCount})
    processArea.EntityData.Leafs.Append("area-opaque-lsa-checksum", types.YLeaf{"AreaOpaqueLsaChecksum", processArea.AreaOpaqueLsaChecksum})
    processArea.EntityData.Leafs.Append("area-dc-bitless-lsa-count", types.YLeaf{"AreaDcBitlessLsaCount", processArea.AreaDcBitlessLsaCount})
    processArea.EntityData.Leafs.Append("indication-lsa-count", types.YLeaf{"IndicationLsaCount", processArea.IndicationLsaCount})
    processArea.EntityData.Leafs.Append("dna-lsa-count", types.YLeaf{"DnaLsaCount", processArea.DnaLsaCount})
    processArea.EntityData.Leafs.Append("flood-list-length", types.YLeaf{"FloodListLength", processArea.FloodListLength})
    processArea.EntityData.Leafs.Append("area-lfa-interface-count", types.YLeaf{"AreaLfaInterfaceCount", processArea.AreaLfaInterfaceCount})
    processArea.EntityData.Leafs.Append("area-per-prefix-lfa-interface-count", types.YLeaf{"AreaPerPrefixLfaInterfaceCount", processArea.AreaPerPrefixLfaInterfaceCount})
    processArea.EntityData.Leafs.Append("area-lfa-revision", types.YLeaf{"AreaLfaRevision", processArea.AreaLfaRevision})
    processArea.EntityData.Leafs.Append("area-adj-stag-num-nbr-forming", types.YLeaf{"AreaAdjStagNumNbrForming", processArea.AreaAdjStagNumNbrForming})
    processArea.EntityData.Leafs.Append("area-num-nbr-full", types.YLeaf{"AreaNumNbrFull", processArea.AreaNumNbrFull})

    processArea.EntityData.YListKeys = []string {}

    return &(processArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange
// List of ranges to summarize
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP prefix for summarization. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RangePrefix interface{}

    // Network mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RangeMask interface{}

    // Cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Whether to advertise Summary LSAs for this range. The type is bool.
    AdvertiseFlag interface{}
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessAreas_ProcessArea_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "process-area"
    areaRange.EntityData.SegmentPath = "area-range"
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = types.NewOrderedMap()
    areaRange.EntityData.Leafs = types.NewOrderedMap()
    areaRange.EntityData.Leafs.Append("range-prefix", types.YLeaf{"RangePrefix", areaRange.RangePrefix})
    areaRange.EntityData.Leafs.Append("range-mask", types.YLeaf{"RangeMask", areaRange.RangeMask})
    areaRange.EntityData.Leafs.Append("cost", types.YLeaf{"Cost", areaRange.Cost})
    areaRange.EntityData.Leafs.Append("advertise-flag", types.YLeaf{"AdvertiseFlag", areaRange.AdvertiseFlag})

    areaRange.EntityData.YListKeys = []string {}

    return &(areaRange.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary
// Basic OSPF summary information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Role is Standby, Active otherwise. The type is bool.
    RoleStandby interface{}

    // Role, V1/V2 Active/Standby. The type is interface{} with range:
    // 0..4294967295.
    Role interface{}

    // If true, NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // Trigger RP Switchover on detectable process restart. The type is bool.
    NsrSwitchoverOnRestart interface{}

    // If true, running in IGP-Intact mode. The type is bool.
    IgpIntactOn interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Type of Service supported. The type is interface{} with range: 0..255.
    TosOptions interface{}

    // Opaque LSA capable. The type is bool.
    OpaqueCapable interface{}

    // If true, is an Area Border Router. The type is bool.
    AreaBorderRouter interface{}

    // If true, is an AS Border Router. The type is bool.
    AsBorderRouter interface{}

    // If true, vrf lite is enabled. The type is bool.
    VrfLiteEnabled interface{}

    // If true, prefer type 7 LSAs over type 5. The type is bool.
    CapabilityPreferType7 interface{}

    // If true, originate Router LSA with maximum metric. The type is bool.
    MaximumMetricStart interface{}

    // Time remaining for hold down timer (s). The type is interface{} with range:
    // 0..4294967295.
    MaximumMetricStartTimer interface{}

    // Max-metric set reason. The type is MaxMetricSetReason.
    MaximumMetricSetReason interface{}

    // If true, ABR duties temporarily disabled. The type is bool.
    MaximumMetricAbrOffMode interface{}

    // Reasons for ABR duties being temporarily disabled. The type is
    // OspfMaxMetricAbrOffReasons.
    MaximumMetricAbrOffReasons interface{}

    // Buffer time in seconds since last neighbor activity, to remain in
    // max-metric ABR off state. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumMetricAbrOffBufferTime interface{}

    // Scheduling delay for SPF (ms). The type is interface{} with range:
    // 0..4294967295.
    SpfStartTime interface{}

    // Minimum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfHoldTime interface{}

    // Maximum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfMaximumTime interface{}

    // If true, prefix-priority policy is configured. The type is bool.
    SpfPrefixPriority interface{}

    // SPF Prefix-priority route policy. The type is string.
    SpfPrefixPriorityRoutePolicy interface{}

    // Inital LSA throttle delay (ms). The type is interface{} with range:
    // -2147483648..2147483647.
    LsaStartTime interface{}

    // Second delay before generating next LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaHoldTime interface{}

    // Maximum delay before generating an LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaMaximumTime interface{}

    // Minimum time between LSA regeneration (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaInterval interface{}

    // LSA refresh interval (sec). The type is interface{} with range:
    // 0..4294967295.
    LsaRefreshInterval interface{}

    // Minimum time between accepting LSAs (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaArrivalInterval interface{}

    // Flood pacing timer (ms). The type is interface{} with range: 0..65535.
    IfFloodPacingInterval interface{}

    // Retransmission pacing timer (ms). The type is interface{} with range:
    // 0..65535.
    IfRetransPacingInterval interface{}

    // Num of nbrs brought up initially per area. The type is interface{} with
    // range: 0..65535.
    AdjStagInitNumNbr interface{}

    // Max num of nbrs brought up simultaneously per OSPF instance. The type is
    // interface{} with range: 0..65535.
    AdjStagMaxNumNbr interface{}

    // If true, OSPF Adjacency Staggering is configured. The type is bool.
    AdjStaggerEnabled interface{}

    // Num of nbrs currently forming for OSPF instance. The type is interface{}
    // with range: 0..65535.
    AdjStagNumNbrForming interface{}

    // Num of full nbrs. The type is interface{} with range: 0..65535.
    NumberNbrsFull interface{}

    // Number of AS scope LSAs. The type is interface{} with range: 0..4294967295.
    AsLsaCount interface{}

    // Sum of AS scope LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    AsLsaChecksum interface{}

    // Number of Opaque LSAs. The type is interface{} with range: 0..4294967295.
    OpaqueLsaCount interface{}

    // Sum of opaque LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    OpaqueLsaChecksum interface{}

    // Number of External and AS Opaque LSAs with demand circut bit not set. The
    // type is interface{} with range: 0..4294967295.
    AsDcBitlessLsaCount interface{}

    // Number of External and AS Opaque LSAs with DoNotAge set . The type is
    // interface{} with range: 0..4294967295.
    AsDnaLsaCount interface{}

    // Number of areas. The type is interface{} with range: 0..65535.
    AreaCount interface{}

    // Number of normal Areas. The type is interface{} with range: 0..65535.
    NormalAreaCount interface{}

    // Number of Stub and Total Stub Areas. The type is interface{} with range:
    // 0..65535.
    StubAreaCount interface{}

    // Number of NSSA Areas. The type is interface{} with range: 0..65535.
    NssaAreaCount interface{}

    // Maximum number of interfaces. The type is interface{} with range:
    // 0..4294967295.
    MaximumInterfaces interface{}

    // Length of AS LSAs flood list. The type is interface{} with range:
    // 0..4294967295.
    AsLsaFloodListLength interface{}

    // If true, NSF enabled. The type is bool.
    NsfEnabled interface{}

    // Length of time since the last NSF (s). The type is interface{} with range:
    // 0..4294967295.
    LastNsfTime interface{}

    // Total time to complete NSF (s). The type is interface{} with range:
    // 0..4294967295.
    NsfTime interface{}

    // The number of redistributed prefixes allowed. The type is interface{} with
    // range: 0..4294967295.
    RedistributionLimit interface{}

    // When the number of redistributed prefixes reaches this threshold, a warning
    // message is issued. The type is interface{} with range: 0..4294967295.
    RedistributionThreshold interface{}

    // If true, only a syslog message is printed when redistribution prefix limit
    // is reached. The type is bool.
    RedistributionLimitWarn interface{}

    // Amount of time routes are retained after graceful shutdown (s). The type is
    // interface{} with range: 0..4294967295.
    GracefulShutdownRetentionTime interface{}

    // State of graceful shutdown. The type is GsState.
    GracefulShutdownState interface{}

    // If true, prefix limit for table has been  reached. The type is bool.
    TablePrefixLimitReached interface{}

    // Non self-generated LSA count. The type is interface{} with range:
    // 0..4294967295.
    NonSelfLsaCount interface{}

    // If true, max-lsa protection enabled. The type is bool.
    MaxLsaEnabled interface{}

    // Maximum allowed number of non self-generated LSAs. The type is interface{}
    // with range: 0..4294967295.
    MaxLsaLimit interface{}

    // max-lsa protection warning threshold. The type is interface{} with range:
    // 0..4294967295.
    MaxLsaTreshold interface{}

    // Warning only when max-lsa reached. The type is bool.
    MaxLsaWarningOnly interface{}

    // Time ignoring new LSAs after max-lsa reached. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreTime interface{}

    // Time after which LSA protection counter is reset. The type is interface{}
    // with range: 0..4294967295.
    MaxLsaResetTime interface{}

    // Max allowed number of entering ignore state. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreLimit interface{}

    // How many times ignore state has been entered. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreCount interface{}

    // Remaining time when ignore timer is running. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaIgnoreTimer interface{}

    // Remaining time when reset timer is running. The type is interface{} with
    // range: 0..4294967295.
    MaxLsaResetTimer interface{}

    // Context name. The type is string with length: 0..32.
    ContextName interface{}

    // If true, snmp trap is enabled. The type is bool.
    SnmpTrapEnabled interface{}

    // If true, UCMP is enabled. The type is bool.
    Ucmp interface{}

    // UCMP Prefix-list. The type is string.
    UcmpPrefixList interface{}

    // UCMP Variance. The type is interface{} with range: -2147483648..2147483647.
    UcmpVariance interface{}

    // Delay between end of SPF and start of UCMP calculation (ms). The type is
    // interface{} with range: 0..4294967295.
    UcmpDelay interface{}

    // Microloop avoidance type configured. The type is UloopAvoidance.
    MicroloopAvoidanceType interface{}

    // Microloop delay time after which actual          post convergence paths are
    // given to RIB (s). The type is interface{} with range: 0..4294967295.
    MicroloopAvoidanceDelay interface{}

    // If true, Uloop is active. The type is bool.
    MicroloopAvoidanceActive interface{}

    // Remaining time for uloop delay timer             to expire (s). The type is
    // interface{} with range: 0..4294967295.
    MicroloopAvoidanceDelayExpiry interface{}

    // True if connected to LSD. The type is bool.
    LsdConnected interface{}

    // True if registered with LSD. The type is bool.
    LsdRegistered interface{}

    // True if bound to LSD. The type is bool.
    LsdBound interface{}

    // LSD Connection Revision. The type is interface{} with range: 0..4294967295.
    LsdConnectionRevision interface{}

    // True if Segment Routing Global Block configured. The type is bool.
    SrgbConfigured interface{}

    // Segment Routing Global Block start label value. The type is interface{}
    // with range: 0..4294967295.
    SrgbStart interface{}

    // Segment Routing Global Block end label value. The type is interface{} with
    // range: 0..4294967295.
    SrgbEnd interface{}

    // Segment Routing Global Block allocation status. The type is OspfSrgbStatus.
    SrgbStatus interface{}

    // True if Segment Routing Strict-SPF capable. The type is bool.
    SrStrictSpfCap interface{}

    // Domain ID information.
    DomainId Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId

    // Max-metric list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric.
    MaximumMetric []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric

    // Redistribution list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution.
    Redistribution []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution
}

func (processSummary *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary) GetEntityData() *types.CommonEntityData {
    processSummary.EntityData.YFilter = processSummary.YFilter
    processSummary.EntityData.YangName = "process-summary"
    processSummary.EntityData.BundleName = "cisco_ios_xr"
    processSummary.EntityData.ParentYangName = "process-information"
    processSummary.EntityData.SegmentPath = "process-summary"
    processSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processSummary.EntityData.Children = types.NewOrderedMap()
    processSummary.EntityData.Children.Append("domain-id", types.YChild{"DomainId", &processSummary.DomainId})
    processSummary.EntityData.Children.Append("maximum-metric", types.YChild{"MaximumMetric", nil})
    for i := range processSummary.MaximumMetric {
        processSummary.EntityData.Children.Append(types.GetSegmentPath(processSummary.MaximumMetric[i]), types.YChild{"MaximumMetric", processSummary.MaximumMetric[i]})
    }
    processSummary.EntityData.Children.Append("redistribution", types.YChild{"Redistribution", nil})
    for i := range processSummary.Redistribution {
        processSummary.EntityData.Children.Append(types.GetSegmentPath(processSummary.Redistribution[i]), types.YChild{"Redistribution", processSummary.Redistribution[i]})
    }
    processSummary.EntityData.Leafs = types.NewOrderedMap()
    processSummary.EntityData.Leafs.Append("role-standby", types.YLeaf{"RoleStandby", processSummary.RoleStandby})
    processSummary.EntityData.Leafs.Append("role", types.YLeaf{"Role", processSummary.Role})
    processSummary.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", processSummary.NsrEnabled})
    processSummary.EntityData.Leafs.Append("nsr-switchover-on-restart", types.YLeaf{"NsrSwitchoverOnRestart", processSummary.NsrSwitchoverOnRestart})
    processSummary.EntityData.Leafs.Append("igp-intact-on", types.YLeaf{"IgpIntactOn", processSummary.IgpIntactOn})
    processSummary.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", processSummary.RouterId})
    processSummary.EntityData.Leafs.Append("tos-options", types.YLeaf{"TosOptions", processSummary.TosOptions})
    processSummary.EntityData.Leafs.Append("opaque-capable", types.YLeaf{"OpaqueCapable", processSummary.OpaqueCapable})
    processSummary.EntityData.Leafs.Append("area-border-router", types.YLeaf{"AreaBorderRouter", processSummary.AreaBorderRouter})
    processSummary.EntityData.Leafs.Append("as-border-router", types.YLeaf{"AsBorderRouter", processSummary.AsBorderRouter})
    processSummary.EntityData.Leafs.Append("vrf-lite-enabled", types.YLeaf{"VrfLiteEnabled", processSummary.VrfLiteEnabled})
    processSummary.EntityData.Leafs.Append("capability-prefer-type7", types.YLeaf{"CapabilityPreferType7", processSummary.CapabilityPreferType7})
    processSummary.EntityData.Leafs.Append("maximum-metric-start", types.YLeaf{"MaximumMetricStart", processSummary.MaximumMetricStart})
    processSummary.EntityData.Leafs.Append("maximum-metric-start-timer", types.YLeaf{"MaximumMetricStartTimer", processSummary.MaximumMetricStartTimer})
    processSummary.EntityData.Leafs.Append("maximum-metric-set-reason", types.YLeaf{"MaximumMetricSetReason", processSummary.MaximumMetricSetReason})
    processSummary.EntityData.Leafs.Append("maximum-metric-abr-off-mode", types.YLeaf{"MaximumMetricAbrOffMode", processSummary.MaximumMetricAbrOffMode})
    processSummary.EntityData.Leafs.Append("maximum-metric-abr-off-reasons", types.YLeaf{"MaximumMetricAbrOffReasons", processSummary.MaximumMetricAbrOffReasons})
    processSummary.EntityData.Leafs.Append("maximum-metric-abr-off-buffer-time", types.YLeaf{"MaximumMetricAbrOffBufferTime", processSummary.MaximumMetricAbrOffBufferTime})
    processSummary.EntityData.Leafs.Append("spf-start-time", types.YLeaf{"SpfStartTime", processSummary.SpfStartTime})
    processSummary.EntityData.Leafs.Append("spf-hold-time", types.YLeaf{"SpfHoldTime", processSummary.SpfHoldTime})
    processSummary.EntityData.Leafs.Append("spf-maximum-time", types.YLeaf{"SpfMaximumTime", processSummary.SpfMaximumTime})
    processSummary.EntityData.Leafs.Append("spf-prefix-priority", types.YLeaf{"SpfPrefixPriority", processSummary.SpfPrefixPriority})
    processSummary.EntityData.Leafs.Append("spf-prefix-priority-route-policy", types.YLeaf{"SpfPrefixPriorityRoutePolicy", processSummary.SpfPrefixPriorityRoutePolicy})
    processSummary.EntityData.Leafs.Append("lsa-start-time", types.YLeaf{"LsaStartTime", processSummary.LsaStartTime})
    processSummary.EntityData.Leafs.Append("lsa-hold-time", types.YLeaf{"LsaHoldTime", processSummary.LsaHoldTime})
    processSummary.EntityData.Leafs.Append("lsa-maximum-time", types.YLeaf{"LsaMaximumTime", processSummary.LsaMaximumTime})
    processSummary.EntityData.Leafs.Append("minimum-lsa-interval", types.YLeaf{"MinimumLsaInterval", processSummary.MinimumLsaInterval})
    processSummary.EntityData.Leafs.Append("lsa-refresh-interval", types.YLeaf{"LsaRefreshInterval", processSummary.LsaRefreshInterval})
    processSummary.EntityData.Leafs.Append("minimum-lsa-arrival-interval", types.YLeaf{"MinimumLsaArrivalInterval", processSummary.MinimumLsaArrivalInterval})
    processSummary.EntityData.Leafs.Append("if-flood-pacing-interval", types.YLeaf{"IfFloodPacingInterval", processSummary.IfFloodPacingInterval})
    processSummary.EntityData.Leafs.Append("if-retrans-pacing-interval", types.YLeaf{"IfRetransPacingInterval", processSummary.IfRetransPacingInterval})
    processSummary.EntityData.Leafs.Append("adj-stag-init-num-nbr", types.YLeaf{"AdjStagInitNumNbr", processSummary.AdjStagInitNumNbr})
    processSummary.EntityData.Leafs.Append("adj-stag-max-num-nbr", types.YLeaf{"AdjStagMaxNumNbr", processSummary.AdjStagMaxNumNbr})
    processSummary.EntityData.Leafs.Append("adj-stagger-enabled", types.YLeaf{"AdjStaggerEnabled", processSummary.AdjStaggerEnabled})
    processSummary.EntityData.Leafs.Append("adj-stag-num-nbr-forming", types.YLeaf{"AdjStagNumNbrForming", processSummary.AdjStagNumNbrForming})
    processSummary.EntityData.Leafs.Append("number-nbrs-full", types.YLeaf{"NumberNbrsFull", processSummary.NumberNbrsFull})
    processSummary.EntityData.Leafs.Append("as-lsa-count", types.YLeaf{"AsLsaCount", processSummary.AsLsaCount})
    processSummary.EntityData.Leafs.Append("as-lsa-checksum", types.YLeaf{"AsLsaChecksum", processSummary.AsLsaChecksum})
    processSummary.EntityData.Leafs.Append("opaque-lsa-count", types.YLeaf{"OpaqueLsaCount", processSummary.OpaqueLsaCount})
    processSummary.EntityData.Leafs.Append("opaque-lsa-checksum", types.YLeaf{"OpaqueLsaChecksum", processSummary.OpaqueLsaChecksum})
    processSummary.EntityData.Leafs.Append("as-dc-bitless-lsa-count", types.YLeaf{"AsDcBitlessLsaCount", processSummary.AsDcBitlessLsaCount})
    processSummary.EntityData.Leafs.Append("as-dna-lsa-count", types.YLeaf{"AsDnaLsaCount", processSummary.AsDnaLsaCount})
    processSummary.EntityData.Leafs.Append("area-count", types.YLeaf{"AreaCount", processSummary.AreaCount})
    processSummary.EntityData.Leafs.Append("normal-area-count", types.YLeaf{"NormalAreaCount", processSummary.NormalAreaCount})
    processSummary.EntityData.Leafs.Append("stub-area-count", types.YLeaf{"StubAreaCount", processSummary.StubAreaCount})
    processSummary.EntityData.Leafs.Append("nssa-area-count", types.YLeaf{"NssaAreaCount", processSummary.NssaAreaCount})
    processSummary.EntityData.Leafs.Append("maximum-interfaces", types.YLeaf{"MaximumInterfaces", processSummary.MaximumInterfaces})
    processSummary.EntityData.Leafs.Append("as-lsa-flood-list-length", types.YLeaf{"AsLsaFloodListLength", processSummary.AsLsaFloodListLength})
    processSummary.EntityData.Leafs.Append("nsf-enabled", types.YLeaf{"NsfEnabled", processSummary.NsfEnabled})
    processSummary.EntityData.Leafs.Append("last-nsf-time", types.YLeaf{"LastNsfTime", processSummary.LastNsfTime})
    processSummary.EntityData.Leafs.Append("nsf-time", types.YLeaf{"NsfTime", processSummary.NsfTime})
    processSummary.EntityData.Leafs.Append("redistribution-limit", types.YLeaf{"RedistributionLimit", processSummary.RedistributionLimit})
    processSummary.EntityData.Leafs.Append("redistribution-threshold", types.YLeaf{"RedistributionThreshold", processSummary.RedistributionThreshold})
    processSummary.EntityData.Leafs.Append("redistribution-limit-warn", types.YLeaf{"RedistributionLimitWarn", processSummary.RedistributionLimitWarn})
    processSummary.EntityData.Leafs.Append("graceful-shutdown-retention-time", types.YLeaf{"GracefulShutdownRetentionTime", processSummary.GracefulShutdownRetentionTime})
    processSummary.EntityData.Leafs.Append("graceful-shutdown-state", types.YLeaf{"GracefulShutdownState", processSummary.GracefulShutdownState})
    processSummary.EntityData.Leafs.Append("table-prefix-limit-reached", types.YLeaf{"TablePrefixLimitReached", processSummary.TablePrefixLimitReached})
    processSummary.EntityData.Leafs.Append("non-self-lsa-count", types.YLeaf{"NonSelfLsaCount", processSummary.NonSelfLsaCount})
    processSummary.EntityData.Leafs.Append("max-lsa-enabled", types.YLeaf{"MaxLsaEnabled", processSummary.MaxLsaEnabled})
    processSummary.EntityData.Leafs.Append("max-lsa-limit", types.YLeaf{"MaxLsaLimit", processSummary.MaxLsaLimit})
    processSummary.EntityData.Leafs.Append("max-lsa-treshold", types.YLeaf{"MaxLsaTreshold", processSummary.MaxLsaTreshold})
    processSummary.EntityData.Leafs.Append("max-lsa-warning-only", types.YLeaf{"MaxLsaWarningOnly", processSummary.MaxLsaWarningOnly})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-time", types.YLeaf{"MaxLsaIgnoreTime", processSummary.MaxLsaIgnoreTime})
    processSummary.EntityData.Leafs.Append("max-lsa-reset-time", types.YLeaf{"MaxLsaResetTime", processSummary.MaxLsaResetTime})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-limit", types.YLeaf{"MaxLsaIgnoreLimit", processSummary.MaxLsaIgnoreLimit})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-count", types.YLeaf{"MaxLsaIgnoreCount", processSummary.MaxLsaIgnoreCount})
    processSummary.EntityData.Leafs.Append("max-lsa-ignore-timer", types.YLeaf{"MaxLsaIgnoreTimer", processSummary.MaxLsaIgnoreTimer})
    processSummary.EntityData.Leafs.Append("max-lsa-reset-timer", types.YLeaf{"MaxLsaResetTimer", processSummary.MaxLsaResetTimer})
    processSummary.EntityData.Leafs.Append("context-name", types.YLeaf{"ContextName", processSummary.ContextName})
    processSummary.EntityData.Leafs.Append("snmp-trap-enabled", types.YLeaf{"SnmpTrapEnabled", processSummary.SnmpTrapEnabled})
    processSummary.EntityData.Leafs.Append("ucmp", types.YLeaf{"Ucmp", processSummary.Ucmp})
    processSummary.EntityData.Leafs.Append("ucmp-prefix-list", types.YLeaf{"UcmpPrefixList", processSummary.UcmpPrefixList})
    processSummary.EntityData.Leafs.Append("ucmp-variance", types.YLeaf{"UcmpVariance", processSummary.UcmpVariance})
    processSummary.EntityData.Leafs.Append("ucmp-delay", types.YLeaf{"UcmpDelay", processSummary.UcmpDelay})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-type", types.YLeaf{"MicroloopAvoidanceType", processSummary.MicroloopAvoidanceType})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-delay", types.YLeaf{"MicroloopAvoidanceDelay", processSummary.MicroloopAvoidanceDelay})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-active", types.YLeaf{"MicroloopAvoidanceActive", processSummary.MicroloopAvoidanceActive})
    processSummary.EntityData.Leafs.Append("microloop-avoidance-delay-expiry", types.YLeaf{"MicroloopAvoidanceDelayExpiry", processSummary.MicroloopAvoidanceDelayExpiry})
    processSummary.EntityData.Leafs.Append("lsd-connected", types.YLeaf{"LsdConnected", processSummary.LsdConnected})
    processSummary.EntityData.Leafs.Append("lsd-registered", types.YLeaf{"LsdRegistered", processSummary.LsdRegistered})
    processSummary.EntityData.Leafs.Append("lsd-bound", types.YLeaf{"LsdBound", processSummary.LsdBound})
    processSummary.EntityData.Leafs.Append("lsd-connection-revision", types.YLeaf{"LsdConnectionRevision", processSummary.LsdConnectionRevision})
    processSummary.EntityData.Leafs.Append("srgb-configured", types.YLeaf{"SrgbConfigured", processSummary.SrgbConfigured})
    processSummary.EntityData.Leafs.Append("srgb-start", types.YLeaf{"SrgbStart", processSummary.SrgbStart})
    processSummary.EntityData.Leafs.Append("srgb-end", types.YLeaf{"SrgbEnd", processSummary.SrgbEnd})
    processSummary.EntityData.Leafs.Append("srgb-status", types.YLeaf{"SrgbStatus", processSummary.SrgbStatus})
    processSummary.EntityData.Leafs.Append("sr-strict-spf-cap", types.YLeaf{"SrStrictSpfCap", processSummary.SrStrictSpfCap})

    processSummary.EntityData.YListKeys = []string {}

    return &(processSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId
// Domain ID information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary Domain ID.
    PrimaryDomainId Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId

    // List of secondary domain IDs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId.
    SecondaryDomainId []*Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId
}

func (domainId *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId) GetEntityData() *types.CommonEntityData {
    domainId.EntityData.YFilter = domainId.YFilter
    domainId.EntityData.YangName = "domain-id"
    domainId.EntityData.BundleName = "cisco_ios_xr"
    domainId.EntityData.ParentYangName = "process-summary"
    domainId.EntityData.SegmentPath = "domain-id"
    domainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domainId.EntityData.Children = types.NewOrderedMap()
    domainId.EntityData.Children.Append("primary-domain-id", types.YChild{"PrimaryDomainId", &domainId.PrimaryDomainId})
    domainId.EntityData.Children.Append("secondary-domain-id", types.YChild{"SecondaryDomainId", nil})
    for i := range domainId.SecondaryDomainId {
        domainId.EntityData.Children.Append(types.GetSegmentPath(domainId.SecondaryDomainId[i]), types.YChild{"SecondaryDomainId", domainId.SecondaryDomainId[i]})
    }
    domainId.EntityData.Leafs = types.NewOrderedMap()

    domainId.EntityData.YListKeys = []string {}

    return &(domainId.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId
// Primary Domain ID
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (primaryDomainId *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_PrimaryDomainId) GetEntityData() *types.CommonEntityData {
    primaryDomainId.EntityData.YFilter = primaryDomainId.YFilter
    primaryDomainId.EntityData.YangName = "primary-domain-id"
    primaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    primaryDomainId.EntityData.ParentYangName = "domain-id"
    primaryDomainId.EntityData.SegmentPath = "primary-domain-id"
    primaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primaryDomainId.EntityData.Children = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", primaryDomainId.DomainIdType})
    primaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", primaryDomainId.DomainIdValue})

    primaryDomainId.EntityData.YListKeys = []string {}

    return &(primaryDomainId.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId
// List of secondary domain IDs
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (secondaryDomainId *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_DomainId_SecondaryDomainId) GetEntityData() *types.CommonEntityData {
    secondaryDomainId.EntityData.YFilter = secondaryDomainId.YFilter
    secondaryDomainId.EntityData.YangName = "secondary-domain-id"
    secondaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    secondaryDomainId.EntityData.ParentYangName = "domain-id"
    secondaryDomainId.EntityData.SegmentPath = "secondary-domain-id"
    secondaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaryDomainId.EntityData.Children = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", secondaryDomainId.DomainIdType})
    secondaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", secondaryDomainId.DomainIdValue})

    secondaryDomainId.EntityData.YListKeys = []string {}

    return &(secondaryDomainId.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric
// Max-metric list
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max-metric reason. The type is interface{} with range: 0..255.
    MaxMetricReason interface{}

    // Max-metric enabled. The type is bool.
    MaxMetricEnabled interface{}

    // If true, BGP is up, no maximum metric Router LSA. The type is bool.
    UnsetMaximumMetric interface{}

    // Saved UnsetMaximumMetric. The type is bool.
    SavedUnsetMaximumMetric interface{}

    // Time remaining until we will start using normal metrics (s). The type is
    // interface{} with range: 0..4294967295.
    MaximumMetricStartTime interface{}

    // Hold time configured (s). The type is interface{} with range:
    // 0..4294967295.
    SavedStartupTime interface{}

    // If true, set max-metric in stub links. The type is bool.
    MaximumMetricIncludeStubs interface{}

    // If true, advertise max-metric in summary-LSAs. The type is bool.
    MaximumMetricSummaryLsa interface{}

    // Max-metric value to advertise in summary-LSAs. The type is interface{} with
    // range: 0..4294967295.
    MaximumMetricSummaryLsaMetric interface{}

    // If true, advertise max-metric in external-LSAs. The type is bool.
    MaximumMetricExternalLsa interface{}

    // Max-metric value to advertise in external-LSAs. The type is interface{}
    // with range: 0..4294967295.
    MaximumMetricExternalLsaMetric interface{}

    // Time max-metric was used for. The type is interface{} with range:
    // 0..4294967295.
    MaximumMetricOriginatedFor interface{}

    // Max-metric unset reason. The type is MaxMetricUnsetReason.
    MaximumMetricUnsetReason interface{}

    // Time max-metric condition was cleared.
    MaximumMetricTimeUnset Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset
}

func (maximumMetric *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric) GetEntityData() *types.CommonEntityData {
    maximumMetric.EntityData.YFilter = maximumMetric.YFilter
    maximumMetric.EntityData.YangName = "maximum-metric"
    maximumMetric.EntityData.BundleName = "cisco_ios_xr"
    maximumMetric.EntityData.ParentYangName = "process-summary"
    maximumMetric.EntityData.SegmentPath = "maximum-metric"
    maximumMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumMetric.EntityData.Children = types.NewOrderedMap()
    maximumMetric.EntityData.Children.Append("maximum-metric-time-unset", types.YChild{"MaximumMetricTimeUnset", &maximumMetric.MaximumMetricTimeUnset})
    maximumMetric.EntityData.Leafs = types.NewOrderedMap()
    maximumMetric.EntityData.Leafs.Append("max-metric-reason", types.YLeaf{"MaxMetricReason", maximumMetric.MaxMetricReason})
    maximumMetric.EntityData.Leafs.Append("max-metric-enabled", types.YLeaf{"MaxMetricEnabled", maximumMetric.MaxMetricEnabled})
    maximumMetric.EntityData.Leafs.Append("unset-maximum-metric", types.YLeaf{"UnsetMaximumMetric", maximumMetric.UnsetMaximumMetric})
    maximumMetric.EntityData.Leafs.Append("saved-unset-maximum-metric", types.YLeaf{"SavedUnsetMaximumMetric", maximumMetric.SavedUnsetMaximumMetric})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-start-time", types.YLeaf{"MaximumMetricStartTime", maximumMetric.MaximumMetricStartTime})
    maximumMetric.EntityData.Leafs.Append("saved-startup-time", types.YLeaf{"SavedStartupTime", maximumMetric.SavedStartupTime})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-include-stubs", types.YLeaf{"MaximumMetricIncludeStubs", maximumMetric.MaximumMetricIncludeStubs})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-summary-lsa", types.YLeaf{"MaximumMetricSummaryLsa", maximumMetric.MaximumMetricSummaryLsa})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-summary-lsa-metric", types.YLeaf{"MaximumMetricSummaryLsaMetric", maximumMetric.MaximumMetricSummaryLsaMetric})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-external-lsa", types.YLeaf{"MaximumMetricExternalLsa", maximumMetric.MaximumMetricExternalLsa})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-external-lsa-metric", types.YLeaf{"MaximumMetricExternalLsaMetric", maximumMetric.MaximumMetricExternalLsaMetric})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-originated-for", types.YLeaf{"MaximumMetricOriginatedFor", maximumMetric.MaximumMetricOriginatedFor})
    maximumMetric.EntityData.Leafs.Append("maximum-metric-unset-reason", types.YLeaf{"MaximumMetricUnsetReason", maximumMetric.MaximumMetricUnsetReason})

    maximumMetric.EntityData.YListKeys = []string {}

    return &(maximumMetric.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset
// Time max-metric condition was cleared
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (maximumMetricTimeUnset *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_MaximumMetric_MaximumMetricTimeUnset) GetEntityData() *types.CommonEntityData {
    maximumMetricTimeUnset.EntityData.YFilter = maximumMetricTimeUnset.YFilter
    maximumMetricTimeUnset.EntityData.YangName = "maximum-metric-time-unset"
    maximumMetricTimeUnset.EntityData.BundleName = "cisco_ios_xr"
    maximumMetricTimeUnset.EntityData.ParentYangName = "maximum-metric"
    maximumMetricTimeUnset.EntityData.SegmentPath = "maximum-metric-time-unset"
    maximumMetricTimeUnset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumMetricTimeUnset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumMetricTimeUnset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumMetricTimeUnset.EntityData.Children = types.NewOrderedMap()
    maximumMetricTimeUnset.EntityData.Leafs = types.NewOrderedMap()
    maximumMetricTimeUnset.EntityData.Leafs.Append("second", types.YLeaf{"Second", maximumMetricTimeUnset.Second})
    maximumMetricTimeUnset.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", maximumMetricTimeUnset.Nanosecond})

    maximumMetricTimeUnset.EntityData.YListKeys = []string {}

    return &(maximumMetricTimeUnset.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution
// Redistribution list
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, Metric configured. The type is bool.
    MetricFlag interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Whether to use CIDR. The type is bool.
    Classless interface{}

    // To NSSA areas only. The type is bool.
    NssaOnly interface{}

    // Protocol Information.
    RedistributionProtocol Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "process-summary"
    redistribution.EntityData.SegmentPath = "redistribution"
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = types.NewOrderedMap()
    redistribution.EntityData.Children.Append("redistribution-protocol", types.YChild{"RedistributionProtocol", &redistribution.RedistributionProtocol})
    redistribution.EntityData.Leafs = types.NewOrderedMap()
    redistribution.EntityData.Leafs.Append("metric-flag", types.YLeaf{"MetricFlag", redistribution.MetricFlag})
    redistribution.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", redistribution.Metric})
    redistribution.EntityData.Leafs.Append("classless", types.YLeaf{"Classless", redistribution.Classless})
    redistribution.EntityData.Leafs.Append("nssa-only", types.YLeaf{"NssaOnly", redistribution.NssaOnly})

    redistribution.EntityData.YListKeys = []string {}

    return &(redistribution.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol
// Protocol Information
type Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ProtocolType. The type is RedistProtocol.
    ProtocolType interface{}

    // ISIS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // BGP Autonomous System Number. The type is string.
    BgpAsNumber interface{}

    // Autonomous System Number. The type is string.
    EigrpAsNumber interface{}

    // Connected instance name. The type is string.
    ConnectedInstance interface{}
}

func (redistributionProtocol *Ospf_Processes_Process_DefaultVrf_ProcessInformation_ProcessSummary_Redistribution_RedistributionProtocol) GetEntityData() *types.CommonEntityData {
    redistributionProtocol.EntityData.YFilter = redistributionProtocol.YFilter
    redistributionProtocol.EntityData.YangName = "redistribution-protocol"
    redistributionProtocol.EntityData.BundleName = "cisco_ios_xr"
    redistributionProtocol.EntityData.ParentYangName = "redistribution"
    redistributionProtocol.EntityData.SegmentPath = "redistribution-protocol"
    redistributionProtocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionProtocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionProtocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionProtocol.EntityData.Children = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs = types.NewOrderedMap()
    redistributionProtocol.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", redistributionProtocol.ProtocolType})
    redistributionProtocol.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", redistributionProtocol.IsisInstanceId})
    redistributionProtocol.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", redistributionProtocol.OspfProcessId})
    redistributionProtocol.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", redistributionProtocol.BgpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", redistributionProtocol.EigrpAsNumber})
    redistributionProtocol.EntityData.Leafs.Append("connected-instance", types.YLeaf{"ConnectedInstance", redistributionProtocol.ConnectedInstance})

    redistributionProtocol.EntityData.YListKeys = []string {}

    return &(redistributionProtocol.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas
// Area table
type Ospf_Processes_Process_DefaultVrf_Areas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Container for per area data. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area.
    Area []*Ospf_Processes_Process_DefaultVrf_Areas_Area
}

func (areas *Ospf_Processes_Process_DefaultVrf_Areas) GetEntityData() *types.CommonEntityData {
    areas.EntityData.YFilter = areas.YFilter
    areas.EntityData.YangName = "areas"
    areas.EntityData.BundleName = "cisco_ios_xr"
    areas.EntityData.ParentYangName = "default-vrf"
    areas.EntityData.SegmentPath = "areas"
    areas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areas.EntityData.Children = types.NewOrderedMap()
    areas.EntityData.Children.Append("area", types.YChild{"Area", nil})
    for i := range areas.Area {
        areas.EntityData.Children.Append(types.GetSegmentPath(areas.Area[i]), types.YChild{"Area", areas.Area[i]})
    }
    areas.EntityData.Leafs = types.NewOrderedMap()

    areas.EntityData.YListKeys = []string {}

    return &(areas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area
// Container for per area data
type Ospf_Processes_Process_DefaultVrf_Areas_Area struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area specific flood list table.
    FloodListAreaTable Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable

    // Neighbor table.
    Neighbors Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors

    // OSPF Interface Brief Table.
    InterfaceBriefs Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs

    // Request List table.
    Requests Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests

    // Retransmission list table.
    Retransmissions Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions

    // Container for Statistics.
    AreaStatistics Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics

    // Neighbor detail table.
    NeighborDetails Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails

    // OSPF Interface Table.
    Interfaces Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces
}

func (area *Ospf_Processes_Process_DefaultVrf_Areas_Area) GetEntityData() *types.CommonEntityData {
    area.EntityData.YFilter = area.YFilter
    area.EntityData.YangName = "area"
    area.EntityData.BundleName = "cisco_ios_xr"
    area.EntityData.ParentYangName = "areas"
    area.EntityData.SegmentPath = "area" + types.AddKeyToken(area.AreaId, "area-id")
    area.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    area.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    area.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    area.EntityData.Children = types.NewOrderedMap()
    area.EntityData.Children.Append("flood-list-area-table", types.YChild{"FloodListAreaTable", &area.FloodListAreaTable})
    area.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &area.Neighbors})
    area.EntityData.Children.Append("interface-briefs", types.YChild{"InterfaceBriefs", &area.InterfaceBriefs})
    area.EntityData.Children.Append("requests", types.YChild{"Requests", &area.Requests})
    area.EntityData.Children.Append("retransmissions", types.YChild{"Retransmissions", &area.Retransmissions})
    area.EntityData.Children.Append("area-statistics", types.YChild{"AreaStatistics", &area.AreaStatistics})
    area.EntityData.Children.Append("neighbor-details", types.YChild{"NeighborDetails", &area.NeighborDetails})
    area.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &area.Interfaces})
    area.EntityData.Leafs = types.NewOrderedMap()
    area.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", area.AreaId})

    area.EntityData.YListKeys = []string {"AreaId"}

    return &(area.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable
// Area specific flood list table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flooding information for a specific interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood.
    Flood []*Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood
}

func (floodListAreaTable *Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable) GetEntityData() *types.CommonEntityData {
    floodListAreaTable.EntityData.YFilter = floodListAreaTable.YFilter
    floodListAreaTable.EntityData.YangName = "flood-list-area-table"
    floodListAreaTable.EntityData.BundleName = "cisco_ios_xr"
    floodListAreaTable.EntityData.ParentYangName = "area"
    floodListAreaTable.EntityData.SegmentPath = "flood-list-area-table"
    floodListAreaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListAreaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListAreaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListAreaTable.EntityData.Children = types.NewOrderedMap()
    floodListAreaTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListAreaTable.Flood {
        floodListAreaTable.EntityData.Children.Append(types.GetSegmentPath(floodListAreaTable.Flood[i]), types.YChild{"Flood", floodListAreaTable.Flood[i]})
    }
    floodListAreaTable.EntityData.Leafs = types.NewOrderedMap()

    floodListAreaTable.EntityData.YListKeys = []string {}

    return &(floodListAreaTable.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood
// Flooding information for a specific interface
type Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    FloodInterfaceName interface{}

    // Time until next LS update due (ms). The type is interface{} with range:
    // 0..4294967295.
    FloodPacingTimer interface{}

    // Number of LSAs currently being flooded. The type is interface{} with range:
    // 0..4294967295.
    FloodLsaCount interface{}

    // Area scope floodlist. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood.
    AreaFlood []*Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AsFlood.
    AsFlood []*Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AsFlood
}

func (flood *Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-area-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("flood-interface-name", types.YLeaf{"FloodInterfaceName", flood.FloodInterfaceName})
    flood.EntityData.Leafs.Append("flood-pacing-timer", types.YLeaf{"FloodPacingTimer", flood.FloodPacingTimer})
    flood.EntityData.Leafs.Append("flood-lsa-count", types.YLeaf{"FloodLsaCount", flood.FloodLsaCount})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood
// Area scope floodlist
type Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (areaFlood *Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood"
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", areaFlood.HeaderLsId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})
    areaFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", areaFlood.HeaderLsaChecksum})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AsFlood
// AS scope floodlist
type Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (asFlood *Ospf_Processes_Process_DefaultVrf_Areas_Area_FloodListAreaTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood"
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", asFlood.HeaderLsId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})
    asFlood.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", asFlood.HeaderLsaChecksum})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors
// Neighbor table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor.
    Neighbor []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "area"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor
// Neighbor information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighbor.NeighborBfdInformation})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighbor.NeighborId})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighbor.NeighborInterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighbor.DrBdrState})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighbor.NeighborMadjInterface})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_DefaultVrf_Areas_Area_Neighbors_Neighbor_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs
// OSPF Interface Brief Table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface brief information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []*Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs) GetEntityData() *types.CommonEntityData {
    interfaceBriefs.EntityData.YFilter = interfaceBriefs.YFilter
    interfaceBriefs.EntityData.YangName = "interface-briefs"
    interfaceBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefs.EntityData.ParentYangName = "area"
    interfaceBriefs.EntityData.SegmentPath = "interface-briefs"
    interfaceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceBriefs.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefs.InterfaceBrief {
        interfaceBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefs.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefs.InterfaceBrief[i]})
    }
    interfaceBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefs.EntityData.YListKeys = []string {}

    return &(interfaceBriefs.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief
// OSPF interface brief information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface in fast detect hold down state. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj
}

func (interfaceBrief *Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-briefs"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range interfaceBrief.InterfaceMadj {
        interfaceBrief.EntityData.Children.Append(types.GetSegmentPath(interfaceBrief.InterfaceMadj[i]), types.YChild{"InterfaceMadj", interfaceBrief.InterfaceMadj[i]})
    }
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceBrief.InterfaceNameXr})
    interfaceBrief.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceBrief.InterfaceArea})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", interfaceBrief.InterfaceMask})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", interfaceBrief.InterfaceFastDetectHoldDown})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceBrief.InterfaceNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceBrief.InterfaceAdjNeighborCount})
    interfaceBrief.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", interfaceBrief.InterfaceisMadj})
    interfaceBrief.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", interfaceBrief.InterfaceMadjCount})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefs_InterfaceBrief_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface-brief"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests
// Request List table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Request list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request.
    Request []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request
}

func (requests *Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests) GetEntityData() *types.CommonEntityData {
    requests.EntityData.YFilter = requests.YFilter
    requests.EntityData.YangName = "requests"
    requests.EntityData.BundleName = "cisco_ios_xr"
    requests.EntityData.ParentYangName = "area"
    requests.EntityData.SegmentPath = "requests"
    requests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requests.EntityData.Children = types.NewOrderedMap()
    requests.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requests.Request {
        requests.EntityData.Children.Append(types.GetSegmentPath(requests.Request[i]), types.YChild{"Request", requests.Request[i]})
    }
    requests.EntityData.Leafs = types.NewOrderedMap()

    requests.EntityData.YListKeys = []string {}

    return &(requests.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request
// Request list for a particular adjacency
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborId interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // Request list interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    RequestInterfaceName interface{}

    // List of request list entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request_Request.
    Request []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request_Request
}

func (request *Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "requests"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-id", types.YLeaf{"RequestNeighborId", request.RequestNeighborId})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("request-interface-name", types.YLeaf{"RequestInterfaceName", request.RequestInterfaceName})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request_Request
// List of request list entries
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (request *Ospf_Processes_Process_DefaultVrf_Areas_Area_Requests_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request"
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", request.HeaderLsId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})
    request.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", request.HeaderLsaChecksum})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions
// Retransmission list table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Retransmission list for a particular adjacency. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission.
    Retransmission []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission
}

func (retransmissions *Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions) GetEntityData() *types.CommonEntityData {
    retransmissions.EntityData.YFilter = retransmissions.YFilter
    retransmissions.EntityData.YangName = "retransmissions"
    retransmissions.EntityData.BundleName = "cisco_ios_xr"
    retransmissions.EntityData.ParentYangName = "area"
    retransmissions.EntityData.SegmentPath = "retransmissions"
    retransmissions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissions.EntityData.Children = types.NewOrderedMap()
    retransmissions.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissions.Retransmission {
        retransmissions.EntityData.Children.Append(types.GetSegmentPath(retransmissions.Retransmission[i]), types.YChild{"Retransmission", retransmissions.Retransmission[i]})
    }
    retransmissions.EntityData.Leafs = types.NewOrderedMap()

    retransmissions.EntityData.YListKeys = []string {}

    return &(retransmissions.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission
// Retransmission list for a particular adjacency
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborIpAddress interface{}

    // Retransmission list interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    RetransmissionInterfaceName interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionCount interface{}

    // List of Area scope entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb

    // List of AS Scope entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmissions"
    retransmission.EntityData.SegmentPath = "retransmission"
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-id", types.YLeaf{"RetransmissionNeighborId", retransmission.RetransmissionNeighborId})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-ip-address", types.YLeaf{"RetransmissionNeighborIpAddress", retransmission.RetransmissionNeighborIpAddress})
    retransmission.EntityData.Leafs.Append("retransmission-interface-name", types.YLeaf{"RetransmissionInterfaceName", retransmission.RetransmissionInterfaceName})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-count", types.YLeaf{"RetransmissionCount", retransmission.RetransmissionCount})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb
// List of Area scope entries
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAreaDb *Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db"
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAreaDb.HeaderLsId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAreaDb.HeaderLsaChecksum})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb
// List of AS Scope entries
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA Type. The type is Lsa.
    HeaderLsaType interface{}

    // Age of the LSA (s). The type is interface{} with range: 0..65535.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsId interface{}

    // Router ID of the Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // 0..4294967295.
    HeaderSequenceNumber interface{}

    // Checksum of the LSA. The type is interface{} with range: 0..65535.
    HeaderLsaChecksum interface{}
}

func (retransmissionAsdb *Ospf_Processes_Process_DefaultVrf_Areas_Area_Retransmissions_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb"
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-ls-id", types.YLeaf{"HeaderLsId", retransmissionAsdb.HeaderLsId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-checksum", types.YLeaf{"HeaderLsaChecksum", retransmissionAsdb.HeaderLsaChecksum})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics
// Container for Statistics
type Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics innformation Interface table.
    InterfaceStatsEntries Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries
}

func (areaStatistics *Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics) GetEntityData() *types.CommonEntityData {
    areaStatistics.EntityData.YFilter = areaStatistics.YFilter
    areaStatistics.EntityData.YangName = "area-statistics"
    areaStatistics.EntityData.BundleName = "cisco_ios_xr"
    areaStatistics.EntityData.ParentYangName = "area"
    areaStatistics.EntityData.SegmentPath = "area-statistics"
    areaStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStatistics.EntityData.Children = types.NewOrderedMap()
    areaStatistics.EntityData.Children.Append("interface-stats-entries", types.YChild{"InterfaceStatsEntries", &areaStatistics.InterfaceStatsEntries})
    areaStatistics.EntityData.Leafs = types.NewOrderedMap()

    areaStatistics.EntityData.YListKeys = []string {}

    return &(areaStatistics.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries
// Statistics innformation Interface table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics information for a specific interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry.
    InterfaceStatsEntry []*Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
}

func (interfaceStatsEntries *Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntries.EntityData.YFilter = interfaceStatsEntries.YFilter
    interfaceStatsEntries.EntityData.YangName = "interface-stats-entries"
    interfaceStatsEntries.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntries.EntityData.ParentYangName = "area-statistics"
    interfaceStatsEntries.EntityData.SegmentPath = "interface-stats-entries"
    interfaceStatsEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntries.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntries.EntityData.Children.Append("interface-stats-entry", types.YChild{"InterfaceStatsEntry", nil})
    for i := range interfaceStatsEntries.InterfaceStatsEntry {
        interfaceStatsEntries.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntries.InterfaceStatsEntry[i]), types.YChild{"InterfaceStatsEntry", interfaceStatsEntries.InterfaceStatsEntry[i]})
    }
    interfaceStatsEntries.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatsEntries.EntityData.YListKeys = []string {}

    return &(interfaceStatsEntries.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
// Statistics information for a specific interface
type Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // interface handle type. The type is string with pattern: [a-zA-Z0-9./-]+.
    Handle interface{}

    // interface name. The type is string.
    IfNameStr interface{}

    // interface entry. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry.
    IfEntry []*Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
}

func (interfaceStatsEntry *Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntry.EntityData.YFilter = interfaceStatsEntry.YFilter
    interfaceStatsEntry.EntityData.YangName = "interface-stats-entry"
    interfaceStatsEntry.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntry.EntityData.ParentYangName = "interface-stats-entries"
    interfaceStatsEntry.EntityData.SegmentPath = "interface-stats-entry" + types.AddKeyToken(interfaceStatsEntry.InterfaceName, "interface-name")
    interfaceStatsEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntry.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Children.Append("if-entry", types.YChild{"IfEntry", nil})
    for i := range interfaceStatsEntry.IfEntry {
        interfaceStatsEntry.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntry.IfEntry[i]), types.YChild{"IfEntry", interfaceStatsEntry.IfEntry[i]})
    }
    interfaceStatsEntry.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatsEntry.InterfaceName})
    interfaceStatsEntry.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", interfaceStatsEntry.Handle})
    interfaceStatsEntry.EntityData.Leafs.Append("if-name-str", types.YLeaf{"IfNameStr", interfaceStatsEntry.IfNameStr})

    interfaceStatsEntry.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatsEntry.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
// interface entry
type Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF madj interface. The type is bool.
    MadjIntf interface{}

    // OSPF area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // OSPF aread id string. The type is string.
    AreaIdStr interface{}

    // OSPF interface statistics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat.
    IfStat []*Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
}

func (ifEntry *Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry) GetEntityData() *types.CommonEntityData {
    ifEntry.EntityData.YFilter = ifEntry.YFilter
    ifEntry.EntityData.YangName = "if-entry"
    ifEntry.EntityData.BundleName = "cisco_ios_xr"
    ifEntry.EntityData.ParentYangName = "interface-stats-entry"
    ifEntry.EntityData.SegmentPath = "if-entry"
    ifEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifEntry.EntityData.Children = types.NewOrderedMap()
    ifEntry.EntityData.Children.Append("if-stat", types.YChild{"IfStat", nil})
    for i := range ifEntry.IfStat {
        ifEntry.EntityData.Children.Append(types.GetSegmentPath(ifEntry.IfStat[i]), types.YChild{"IfStat", ifEntry.IfStat[i]})
    }
    ifEntry.EntityData.Leafs = types.NewOrderedMap()
    ifEntry.EntityData.Leafs.Append("madj-intf", types.YLeaf{"MadjIntf", ifEntry.MadjIntf})
    ifEntry.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", ifEntry.AreaId})
    ifEntry.EntityData.Leafs.Append("area-id-str", types.YLeaf{"AreaIdStr", ifEntry.AreaIdStr})

    ifEntry.EntityData.YListKeys = []string {}

    return &(ifEntry.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
// OSPF interface statistics
type Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (ifStat *Ospf_Processes_Process_DefaultVrf_Areas_Area_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat) GetEntityData() *types.CommonEntityData {
    ifStat.EntityData.YFilter = ifStat.YFilter
    ifStat.EntityData.YangName = "if-stat"
    ifStat.EntityData.BundleName = "cisco_ios_xr"
    ifStat.EntityData.ParentYangName = "if-entry"
    ifStat.EntityData.SegmentPath = "if-stat"
    ifStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifStat.EntityData.Children = types.NewOrderedMap()
    ifStat.EntityData.Leafs = types.NewOrderedMap()
    ifStat.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", ifStat.Entry})

    ifStat.EntityData.YListKeys = []string {}

    return &(ifStat.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails
// Neighbor detail table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single neighbor's detail information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail.
    NeighborDetail []*Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail
}

func (neighborDetails *Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails) GetEntityData() *types.CommonEntityData {
    neighborDetails.EntityData.YFilter = neighborDetails.YFilter
    neighborDetails.EntityData.YangName = "neighbor-details"
    neighborDetails.EntityData.BundleName = "cisco_ios_xr"
    neighborDetails.EntityData.ParentYangName = "area"
    neighborDetails.EntityData.SegmentPath = "neighbor-details"
    neighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetails.EntityData.Children = types.NewOrderedMap()
    neighborDetails.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetails.NeighborDetail {
        neighborDetails.EntityData.Children.Append(types.GetSegmentPath(neighborDetails.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetails.NeighborDetail[i]})
    }
    neighborDetails.EntityData.Leafs = types.NewOrderedMap()

    neighborDetails.EntityData.YListKeys = []string {}

    return &(neighborDetails.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail
// A single neighbor's detail information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    NeighborAreaId interface{}

    // Number of state changes. The type is interface{} with range: 0..65535.
    StateChangeCount interface{}

    // Cost of path to this neighbor. The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs. The type is bool.
    NeighborFilter interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Interface_.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // This is bitmaks of neighbor's option field received. The type is
    // interface{} with range: 0..255.
    NeighborOption interface{}

    // Number of pending events. The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // This is a bitmask of Link Local signalling options received from the
    // neighbor. The type is interface{} with range: 0..4294967295.
    NeighborLlsOption interface{}

    // Out-Of-Bound resynchronization in progress. The type is bool.
    OobResynchronization interface{}

    // For cisco NSF, the router is either Requester or Receiver. The type is
    // NsfRtr.
    NsfRouterState interface{}

    // The amount of time in seconds since last time Out-Of-Band resynchronization
    // was done with this neighbor. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastOobTime interface{}

    // LFA Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    LfaInterface interface{}

    // LFA Next Hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNextHop interface{}

    // LFA Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LfaNeighborId interface{}

    // LFA Neighbor Revision. The type is interface{} with range: 0..4294967295.
    LfaNeighborRevision interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    NeighborAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    NeighborAckListHighWatermark interface{}

    // SR Adjacency SID Label. The type is interface{} with range: 0..4294967295.
    AdjacencySidLabel interface{}

    // SR Adjacency SID Protected. The type is bool.
    AdjacencySidProtected interface{}

    // SR Adjacency SID Unprotected Label. The type is interface{} with range:
    // 0..4294967295.
    AdjacencySidUnprotectedLabel interface{}

    // Interface ID of neighbor recived via LLS. The type is interface{} with
    // range: 0..65535.
    NeighborInterfaceId interface{}

    // Neighbor summary information.
    NeighborSummary Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation

    // Retransmission information with this neighbor.
    NeighborRetransmissionInformation Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
}

func (neighborDetail *Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-details"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-summary", types.YChild{"NeighborSummary", &neighborDetail.NeighborSummary})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborDetail.NeighborBfdInformation})
    neighborDetail.EntityData.Children.Append("neighbor-retransmission-information", types.YChild{"NeighborRetransmissionInformation", &neighborDetail.NeighborRetransmissionInformation})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-area-id", types.YLeaf{"NeighborAreaId", neighborDetail.NeighborAreaId})
    neighborDetail.EntityData.Leafs.Append("state-change-count", types.YLeaf{"StateChangeCount", neighborDetail.StateChangeCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("neighbor-filter", types.YLeaf{"NeighborFilter", neighborDetail.NeighborFilter})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})
    neighborDetail.EntityData.Leafs.Append("neighbor-lls-option", types.YLeaf{"NeighborLlsOption", neighborDetail.NeighborLlsOption})
    neighborDetail.EntityData.Leafs.Append("oob-resynchronization", types.YLeaf{"OobResynchronization", neighborDetail.OobResynchronization})
    neighborDetail.EntityData.Leafs.Append("nsf-router-state", types.YLeaf{"NsfRouterState", neighborDetail.NsfRouterState})
    neighborDetail.EntityData.Leafs.Append("last-oob-time", types.YLeaf{"LastOobTime", neighborDetail.LastOobTime})
    neighborDetail.EntityData.Leafs.Append("lfa-interface", types.YLeaf{"LfaInterface", neighborDetail.LfaInterface})
    neighborDetail.EntityData.Leafs.Append("lfa-next-hop", types.YLeaf{"LfaNextHop", neighborDetail.LfaNextHop})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-id", types.YLeaf{"LfaNeighborId", neighborDetail.LfaNeighborId})
    neighborDetail.EntityData.Leafs.Append("lfa-neighbor-revision", types.YLeaf{"LfaNeighborRevision", neighborDetail.LfaNeighborRevision})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-count", types.YLeaf{"NeighborAckListCount", neighborDetail.NeighborAckListCount})
    neighborDetail.EntityData.Leafs.Append("neighbor-ack-list-high-watermark", types.YLeaf{"NeighborAckListHighWatermark", neighborDetail.NeighborAckListHighWatermark})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-label", types.YLeaf{"AdjacencySidLabel", neighborDetail.AdjacencySidLabel})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-protected", types.YLeaf{"AdjacencySidProtected", neighborDetail.AdjacencySidProtected})
    neighborDetail.EntityData.Leafs.Append("adjacency-sid-unprotected-label", types.YLeaf{"AdjacencySidUnprotectedLabel", neighborDetail.AdjacencySidUnprotectedLabel})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary
// Neighbor summary information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborId interface{}

    // Neighbor IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Interface via which the neighbor is seen. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is NeighborState.
    NeighborState interface{}

    // Designated Router state. The type is DrBdrState.
    DrBdrState interface{}

    // Time until neighbor's dead timer expires (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (s). The type is interface{} with
    // range: 0..4294967295.
    NeighborUpTime interface{}

    // Interface is MADJ. The type is bool.
    NeighborMadjInterface interface{}

    // Neighbor BFD information.
    NeighborBfdInformation Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
}

func (neighborSummary *Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary) GetEntityData() *types.CommonEntityData {
    neighborSummary.EntityData.YFilter = neighborSummary.YFilter
    neighborSummary.EntityData.YangName = "neighbor-summary"
    neighborSummary.EntityData.BundleName = "cisco_ios_xr"
    neighborSummary.EntityData.ParentYangName = "neighbor-detail"
    neighborSummary.EntityData.SegmentPath = "neighbor-summary"
    neighborSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummary.EntityData.Children = types.NewOrderedMap()
    neighborSummary.EntityData.Children.Append("neighbor-bfd-information", types.YChild{"NeighborBfdInformation", &neighborSummary.NeighborBfdInformation})
    neighborSummary.EntityData.Leafs = types.NewOrderedMap()
    neighborSummary.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", neighborSummary.NeighborId})
    neighborSummary.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborSummary.NeighborAddressXr})
    neighborSummary.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", neighborSummary.NeighborInterfaceName})
    neighborSummary.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborSummary.NeighborDrPriority})
    neighborSummary.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborSummary.NeighborState})
    neighborSummary.EntityData.Leafs.Append("dr-bdr-state", types.YLeaf{"DrBdrState", neighborSummary.DrBdrState})
    neighborSummary.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborSummary.NeighborDeadTimer})
    neighborSummary.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborSummary.NeighborUpTime})
    neighborSummary.EntityData.Leafs.Append("neighbor-madj-interface", types.YLeaf{"NeighborMadjInterface", neighborSummary.NeighborMadjInterface})

    neighborSummary.EntityData.YListKeys = []string {}

    return &(neighborSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborSummary_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-summary"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation
// Neighbor BFD information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInformation *Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborBfdInformation) GetEntityData() *types.CommonEntityData {
    neighborBfdInformation.EntityData.YFilter = neighborBfdInformation.YFilter
    neighborBfdInformation.EntityData.YangName = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInformation.EntityData.SegmentPath = "neighbor-bfd-information"
    neighborBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInformation.EntityData.Children = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInformation.BfdIntfEnableMode})
    neighborBfdInformation.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInformation.BfdStatusFlag})

    neighborBfdInformation.EntityData.YListKeys = []string {}

    return &(neighborBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation
// Retransmission information with this neighbor
type Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of DBD retransmissions during last exchange. The type is interface{}
    // with range: 0..4294967295.
    DbdRetransmissionCount interface{}

    // Total number of DBD retransmissions for this neighbor. The type is
    // interface{} with range: 0..4294967295.
    DbdRetransmissionTotalCount interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodingIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissionCount interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRetransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFloodInformation interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodInformationIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFloodInformation interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodInformationIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFloodInformation interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodInformationIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFloodInformation interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodInformationIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmissionInformation *Ospf_Processes_Process_DefaultVrf_Areas_Area_NeighborDetails_NeighborDetail_NeighborRetransmissionInformation) GetEntityData() *types.CommonEntityData {
    neighborRetransmissionInformation.EntityData.YFilter = neighborRetransmissionInformation.YFilter
    neighborRetransmissionInformation.EntityData.YangName = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmissionInformation.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmissionInformation.EntityData.SegmentPath = "neighbor-retransmission-information"
    neighborRetransmissionInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmissionInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmissionInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmissionInformation.EntityData.Children = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-count", types.YLeaf{"DbdRetransmissionCount", neighborRetransmissionInformation.DbdRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("dbd-retransmission-total-count", types.YLeaf{"DbdRetransmissionTotalCount", neighborRetransmissionInformation.DbdRetransmissionTotalCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-flooding-index", types.YLeaf{"AreaFloodingIndex", neighborRetransmissionInformation.AreaFloodingIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmissionInformation.AsFloodIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("neighbor-retransmission-count", types.YLeaf{"NeighborRetransmissionCount", neighborRetransmissionInformation.NeighborRetransmissionCount})
    neighborRetransmissionInformation.EntityData.Leafs.Append("number-of-retransmissions", types.YLeaf{"NumberOfRetransmissions", neighborRetransmissionInformation.NumberOfRetransmissions})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information", types.YLeaf{"AreaFirstFloodInformation", neighborRetransmissionInformation.AreaFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-first-flood-information-index", types.YLeaf{"AreaFirstFloodInformationIndex", neighborRetransmissionInformation.AreaFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information", types.YLeaf{"AsFirstFloodInformation", neighborRetransmissionInformation.AsFirstFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-first-flood-information-index", types.YLeaf{"AsFirstFloodInformationIndex", neighborRetransmissionInformation.AsFirstFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information", types.YLeaf{"AreaNextFloodInformation", neighborRetransmissionInformation.AreaNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("area-next-flood-information-index", types.YLeaf{"AreaNextFloodInformationIndex", neighborRetransmissionInformation.AreaNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information", types.YLeaf{"AsNextFloodInformation", neighborRetransmissionInformation.AsNextFloodInformation})
    neighborRetransmissionInformation.EntityData.Leafs.Append("as-next-flood-information-index", types.YLeaf{"AsNextFloodInformationIndex", neighborRetransmissionInformation.AsNextFloodInformationIndex})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmissionInformation.LastRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmissionInformation.MaximumRetransmissionLength})
    neighborRetransmissionInformation.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmissionInformation.LastRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmissionInformation.MaximumRetransmissionTime})
    neighborRetransmissionInformation.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmissionInformation.LsaRetransmissionTimer})

    neighborRetransmissionInformation.EntityData.YListKeys = []string {}

    return &(neighborRetransmissionInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces
// OSPF Interface Table
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF interface information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface.
    Interface []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface
}

func (interfaces *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "area"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface
// OSPF interface information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is InterfaceState.
    InterfaceState interface{}

    // If true, line protocol is up. The type is bool.
    InterfaceLineState interface{}

    // Interface IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface IP Mask. The type is interface{} with range: 0..4294967295.
    InterfaceMask interface{}

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Interface SID. The type is interface{} with range: 0..4294967295.
    InterfaceSid interface{}

    // SID PHP Off. The type is bool.
    InterfaceSidPhpOff interface{}

    // SID N-Flag Clear. The type is bool.
    InterfaceSidNFlagClear interface{}

    // Interface Strict-SPF SID. The type is interface{} with range:
    // 0..4294967295.
    InterfaceStrictSpfSid interface{}

    // Strict-SPF SID PHP Off. The type is bool.
    InterfaceStrictSpfSidPhpOff interface{}

    // Strict-SPF SID N-Flag Clear. The type is bool.
    InterfaceStrictSpfSidNFlagClear interface{}

    // Interface Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Interface_.
    NetworkType interface{}

    // IP MTU. The type is interface{} with range: 0..65535.
    IpMtu interface{}

    // Maximum Packet Size. The type is interface{} with range: 0..65535.
    MaximumPacketSize interface{}

    // Interface tunnel flags. The type is interface{} with range: 0..4294967295.
    InterfaceTunnelFlags interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface bandwidth. The type is interface{} with range: 0..4294967295.
    InterfaceBandwidth interface{}

    // If true, cost fallback is configured. The type is bool.
    CfgCostFallback interface{}

    // Interface fallback cost. The type is interface{} with range: 0..65535.
    InterfaceCostFallback interface{}

    // If true, cost fallback is active. The type is bool.
    CostFallbackActive interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, sync igp shortcuts. The type is bool.
    ConfiguredLdpSyncIgpShortcuts interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // If true, configured as demand circuit. The type is bool.
    ConfiguredDemandCircuit interface{}

    // If true, interface running as demand circuit. The type is bool.
    InterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsaCount interface{}

    // Interface Transmission delay. The type is interface{} with range: 0..65535.
    TransmissionDelay interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    DesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // If true, backup designated router. The type is bool.
    BackupDesignatedRouter interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires. The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs. The type is bool.
    InterfaceLsaFilter interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured hello interval (ms). The type is interface{} with range:
    // 0..4294967295.
    HelloIntervalMs interface{}

    // Configured dead interval (s). The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s). The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterrval interface{}

    // If true, NSF is enabled. The type is bool.
    InterfaceNsfEnabled interface{}

    // If true, NSF restart in progress on this interface. The type is bool.
    InterfaceNsf interface{}

    // Time since last NSF restart (s). The type is interface{} with range:
    // 0..4294967295.
    InterfaceLastNsf interface{}

    // If true, passive interface. The type is bool.
    PassiveInterface interface{}

    // Time until next Hello (s). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Time until next Hello (ms). The type is interface{} with range:
    // 0..4294967295.
    NextHelloTimeMs interface{}

    // TTL security enabled on the interface. The type is bool.
    TtlSecurityEnabled interface{}

    // TTL security hop counts. The type is interface{} with range: 0..4294967295.
    TtlSecurityHopCount interface{}

    // If true, interface is multi-area. The type is bool.
    InterfaceisMadj interface{}

    // Total number of multi-area. The type is interface{} with range: 0..65535.
    InterfaceMadjCount interface{}

    // Prefix Suppression for primary addresses. The type is bool.
    PrefixSuppressPrimaryAddresses interface{}

    // Prefix Suppression for secondary addresses. The type is bool.
    PrefixSuppressSecondaryAddresses interface{}

    // If true, loopback interface is advertised as a stub network. The type is
    // bool.
    IsLoopbackStubNetwork interface{}

    // Ack List Count. The type is interface{} with range: 0..4294967295.
    InterfaceAckListCount interface{}

    // Ack List High Watermark. The type is interface{} with range: 0..4294967295.
    InterfaceAckListHighWatermark interface{}

    // Registered for Link Down Fast Detection. The type is bool.
    RegisteredForLinkDownFastDetection interface{}

    // Hold-down time in ms for fast-detect event. The type is interface{} with
    // range: 0..4294967295.
    FastDetectHoldDownTime interface{}

    // Link in hold-down state due to fast detect event. The type is bool.
    InterfaceFastDetectHoldDown interface{}

    // Remaining hold down time in ms. The type is interface{} with range:
    // 0..4294967295.
    FastDetectHoldDownTimeRemaining interface{}

    // IP Fast Reroute Type. The type is Ipfrr.
    FastRerouteType interface{}

    // Topology Independent LFA. The type is bool.
    FastRerouteTopologyIndependentLfa interface{}

    // Unnumbered interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceUnnum interface{}

    // Forward reference interface. The type is bool.
    InterfaceForw interface{}

    // Max number of primary labels. The type is interface{} with range: 0..255.
    InterfacePriLabels interface{}

    // Max number of backup labels. The type is interface{} with range: 0..255.
    InterfaceBkpLabels interface{}

    // Max number of SRTE labels. The type is interface{} with range: 0..255.
    InterfaceSrteLabels interface{}

    // PerfMeas Delay values available. The type is bool.
    PmDelaySet interface{}

    // PerfMeas Average Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayAvg interface{}

    // PerfMeas Minimum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMin interface{}

    // PerfMeas Maximum Link Delay. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayMax interface{}

    // PerfMeas Link Delay Variance. The type is interface{} with range:
    // 0..4294967295.
    LinkDelayVar interface{}

    // PerfMeas Link Loss values available. The type is bool.
    PmLossSet interface{}

    // PerfMeas Link Loss. The type is interface{} with range: 0..4294967295.
    LinkLoss interface{}

    // PerfMeas BW Util values available. The type is bool.
    PmbwUtilSet interface{}

    // PerfMeas Total Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    TotalBandwidth interface{}

    // PerfMeas RSVP-TE Bandwidth. The type is interface{} with range:
    // 0..4294967295.
    RsvpteBandwidth interface{}

    // Remote LFA. The type is interface{} with range: 0..255.
    RemoteLfa interface{}

    // SRTE Metric available. The type is bool.
    SrteMetricSet interface{}

    // SRTE Metric. The type is interface{} with range: 0..4294967295.
    SrteMetric interface{}

    // SRTE App Weight. The type is interface{} with range: 0..4294967295.
    SrteAppWeight interface{}

    // SRTE Ext. Admin Group available. The type is bool.
    SrteExtAdminGroupSet interface{}

    // BFD information.
    InterfaceBfdInformation Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation

    // Active interface details.
    ActiveInterface Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface

    // SRLG Values. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_Srlg.
    Srlg []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_Srlg

    // SRTE Ext. Admin Group. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup.
    SrteteExtAdminGroup []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup

    // Information for neighbors on the interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor

    // Information for multi-area on the interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceMadj.
    InterfaceMadj []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceMadj

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers.
    IpfrrTiebreakers []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers

    // Secondary IP address list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpSecAddr.
    IpSecAddr []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpSecAddr
}

func (self *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("interface-bfd-information", types.YChild{"InterfaceBfdInformation", &self.InterfaceBfdInformation})
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("srlg", types.YChild{"Srlg", nil})
    for i := range self.Srlg {
        self.EntityData.Children.Append(types.GetSegmentPath(self.Srlg[i]), types.YChild{"Srlg", self.Srlg[i]})
    }
    self.EntityData.Children.Append("srtete-ext-admin-group", types.YChild{"SrteteExtAdminGroup", nil})
    for i := range self.SrteteExtAdminGroup {
        self.EntityData.Children.Append(types.GetSegmentPath(self.SrteteExtAdminGroup[i]), types.YChild{"SrteteExtAdminGroup", self.SrteteExtAdminGroup[i]})
    }
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Children.Append("interface-madj", types.YChild{"InterfaceMadj", nil})
    for i := range self.InterfaceMadj {
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceMadj[i]), types.YChild{"InterfaceMadj", self.InterfaceMadj[i]})
    }
    self.EntityData.Children.Append("ipfrr-tiebreakers", types.YChild{"IpfrrTiebreakers", nil})
    for i := range self.IpfrrTiebreakers {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpfrrTiebreakers[i]), types.YChild{"IpfrrTiebreakers", self.IpfrrTiebreakers[i]})
    }
    self.EntityData.Children.Append("ip-sec-addr", types.YChild{"IpSecAddr", nil})
    for i := range self.IpSecAddr {
        self.EntityData.Children.Append(types.GetSegmentPath(self.IpSecAddr[i]), types.YChild{"IpSecAddr", self.IpSecAddr[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("interface-line-state", types.YLeaf{"InterfaceLineState", self.InterfaceLineState})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-mask", types.YLeaf{"InterfaceMask", self.InterfaceMask})
    self.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", self.InterfaceArea})
    self.EntityData.Leafs.Append("interface-sid", types.YLeaf{"InterfaceSid", self.InterfaceSid})
    self.EntityData.Leafs.Append("interface-sid-php-off", types.YLeaf{"InterfaceSidPhpOff", self.InterfaceSidPhpOff})
    self.EntityData.Leafs.Append("interface-sid-n-flag-clear", types.YLeaf{"InterfaceSidNFlagClear", self.InterfaceSidNFlagClear})
    self.EntityData.Leafs.Append("interface-strict-spf-sid", types.YLeaf{"InterfaceStrictSpfSid", self.InterfaceStrictSpfSid})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-php-off", types.YLeaf{"InterfaceStrictSpfSidPhpOff", self.InterfaceStrictSpfSidPhpOff})
    self.EntityData.Leafs.Append("interface-strict-spf-sid-n-flag-clear", types.YLeaf{"InterfaceStrictSpfSidNFlagClear", self.InterfaceStrictSpfSidNFlagClear})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("ip-mtu", types.YLeaf{"IpMtu", self.IpMtu})
    self.EntityData.Leafs.Append("maximum-packet-size", types.YLeaf{"MaximumPacketSize", self.MaximumPacketSize})
    self.EntityData.Leafs.Append("interface-tunnel-flags", types.YLeaf{"InterfaceTunnelFlags", self.InterfaceTunnelFlags})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("interface-bandwidth", types.YLeaf{"InterfaceBandwidth", self.InterfaceBandwidth})
    self.EntityData.Leafs.Append("cfg-cost-fallback", types.YLeaf{"CfgCostFallback", self.CfgCostFallback})
    self.EntityData.Leafs.Append("interface-cost-fallback", types.YLeaf{"InterfaceCostFallback", self.InterfaceCostFallback})
    self.EntityData.Leafs.Append("cost-fallback-active", types.YLeaf{"CostFallbackActive", self.CostFallbackActive})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("configured-ldp-sync-igp-shortcuts", types.YLeaf{"ConfiguredLdpSyncIgpShortcuts", self.ConfiguredLdpSyncIgpShortcuts})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})
    self.EntityData.Leafs.Append("configured-demand-circuit", types.YLeaf{"ConfiguredDemandCircuit", self.ConfiguredDemandCircuit})
    self.EntityData.Leafs.Append("interface-demand-circuit", types.YLeaf{"InterfaceDemandCircuit", self.InterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-lsa-count", types.YLeaf{"InterfaceDcBitlessLsaCount", self.InterfaceDcBitlessLsaCount})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("designated-router", types.YLeaf{"DesignatedRouter", self.DesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router", types.YLeaf{"BackupDesignatedRouter", self.BackupDesignatedRouter})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("interface-lsa-filter", types.YLeaf{"InterfaceLsaFilter", self.InterfaceLsaFilter})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("hello-interval-ms", types.YLeaf{"HelloIntervalMs", self.HelloIntervalMs})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interrval", types.YLeaf{"InterfaceRetransmissionInterrval", self.InterfaceRetransmissionInterrval})
    self.EntityData.Leafs.Append("interface-nsf-enabled", types.YLeaf{"InterfaceNsfEnabled", self.InterfaceNsfEnabled})
    self.EntityData.Leafs.Append("interface-nsf", types.YLeaf{"InterfaceNsf", self.InterfaceNsf})
    self.EntityData.Leafs.Append("interface-last-nsf", types.YLeaf{"InterfaceLastNsf", self.InterfaceLastNsf})
    self.EntityData.Leafs.Append("passive-interface", types.YLeaf{"PassiveInterface", self.PassiveInterface})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("next-hello-time-ms", types.YLeaf{"NextHelloTimeMs", self.NextHelloTimeMs})
    self.EntityData.Leafs.Append("ttl-security-enabled", types.YLeaf{"TtlSecurityEnabled", self.TtlSecurityEnabled})
    self.EntityData.Leafs.Append("ttl-security-hop-count", types.YLeaf{"TtlSecurityHopCount", self.TtlSecurityHopCount})
    self.EntityData.Leafs.Append("interfaceis-madj", types.YLeaf{"InterfaceisMadj", self.InterfaceisMadj})
    self.EntityData.Leafs.Append("interface-madj-count", types.YLeaf{"InterfaceMadjCount", self.InterfaceMadjCount})
    self.EntityData.Leafs.Append("prefix-suppress-primary-addresses", types.YLeaf{"PrefixSuppressPrimaryAddresses", self.PrefixSuppressPrimaryAddresses})
    self.EntityData.Leafs.Append("prefix-suppress-secondary-addresses", types.YLeaf{"PrefixSuppressSecondaryAddresses", self.PrefixSuppressSecondaryAddresses})
    self.EntityData.Leafs.Append("is-loopback-stub-network", types.YLeaf{"IsLoopbackStubNetwork", self.IsLoopbackStubNetwork})
    self.EntityData.Leafs.Append("interface-ack-list-count", types.YLeaf{"InterfaceAckListCount", self.InterfaceAckListCount})
    self.EntityData.Leafs.Append("interface-ack-list-high-watermark", types.YLeaf{"InterfaceAckListHighWatermark", self.InterfaceAckListHighWatermark})
    self.EntityData.Leafs.Append("registered-for-link-down-fast-detection", types.YLeaf{"RegisteredForLinkDownFastDetection", self.RegisteredForLinkDownFastDetection})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time", types.YLeaf{"FastDetectHoldDownTime", self.FastDetectHoldDownTime})
    self.EntityData.Leafs.Append("interface-fast-detect-hold-down", types.YLeaf{"InterfaceFastDetectHoldDown", self.InterfaceFastDetectHoldDown})
    self.EntityData.Leafs.Append("fast-detect-hold-down-time-remaining", types.YLeaf{"FastDetectHoldDownTimeRemaining", self.FastDetectHoldDownTimeRemaining})
    self.EntityData.Leafs.Append("fast-reroute-type", types.YLeaf{"FastRerouteType", self.FastRerouteType})
    self.EntityData.Leafs.Append("fast-reroute-topology-independent-lfa", types.YLeaf{"FastRerouteTopologyIndependentLfa", self.FastRerouteTopologyIndependentLfa})
    self.EntityData.Leafs.Append("interface-unnum", types.YLeaf{"InterfaceUnnum", self.InterfaceUnnum})
    self.EntityData.Leafs.Append("interface-forw", types.YLeaf{"InterfaceForw", self.InterfaceForw})
    self.EntityData.Leafs.Append("interface-pri-labels", types.YLeaf{"InterfacePriLabels", self.InterfacePriLabels})
    self.EntityData.Leafs.Append("interface-bkp-labels", types.YLeaf{"InterfaceBkpLabels", self.InterfaceBkpLabels})
    self.EntityData.Leafs.Append("interface-srte-labels", types.YLeaf{"InterfaceSrteLabels", self.InterfaceSrteLabels})
    self.EntityData.Leafs.Append("pm-delay-set", types.YLeaf{"PmDelaySet", self.PmDelaySet})
    self.EntityData.Leafs.Append("link-delay-avg", types.YLeaf{"LinkDelayAvg", self.LinkDelayAvg})
    self.EntityData.Leafs.Append("link-delay-min", types.YLeaf{"LinkDelayMin", self.LinkDelayMin})
    self.EntityData.Leafs.Append("link-delay-max", types.YLeaf{"LinkDelayMax", self.LinkDelayMax})
    self.EntityData.Leafs.Append("link-delay-var", types.YLeaf{"LinkDelayVar", self.LinkDelayVar})
    self.EntityData.Leafs.Append("pm-loss-set", types.YLeaf{"PmLossSet", self.PmLossSet})
    self.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", self.LinkLoss})
    self.EntityData.Leafs.Append("pmbw-util-set", types.YLeaf{"PmbwUtilSet", self.PmbwUtilSet})
    self.EntityData.Leafs.Append("total-bandwidth", types.YLeaf{"TotalBandwidth", self.TotalBandwidth})
    self.EntityData.Leafs.Append("rsvpte-bandwidth", types.YLeaf{"RsvpteBandwidth", self.RsvpteBandwidth})
    self.EntityData.Leafs.Append("remote-lfa", types.YLeaf{"RemoteLfa", self.RemoteLfa})
    self.EntityData.Leafs.Append("srte-metric-set", types.YLeaf{"SrteMetricSet", self.SrteMetricSet})
    self.EntityData.Leafs.Append("srte-metric", types.YLeaf{"SrteMetric", self.SrteMetric})
    self.EntityData.Leafs.Append("srte-app-weight", types.YLeaf{"SrteAppWeight", self.SrteAppWeight})
    self.EntityData.Leafs.Append("srte-ext-admin-group-set", types.YLeaf{"SrteExtAdminGroupSet", self.SrteExtAdminGroupSet})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation
// BFD information
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms). The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // BFD detection multiplier. The type is interface{} with range:
    // 0..4294967295.
    DetectionMultiplier interface{}
}

func (interfaceBfdInformation *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceBfdInformation) GetEntityData() *types.CommonEntityData {
    interfaceBfdInformation.EntityData.YFilter = interfaceBfdInformation.YFilter
    interfaceBfdInformation.EntityData.YangName = "interface-bfd-information"
    interfaceBfdInformation.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfdInformation.EntityData.ParentYangName = "interface"
    interfaceBfdInformation.EntityData.SegmentPath = "interface-bfd-information"
    interfaceBfdInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfdInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfdInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfdInformation.EntityData.Children = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfdInformation.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfdInformation.BfdIntfEnableMode})
    interfaceBfdInformation.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", interfaceBfdInformation.Interval})
    interfaceBfdInformation.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", interfaceBfdInformation.DetectionMultiplier})

    interfaceBfdInformation.EntityData.YListKeys = []string {}

    return &(interfaceBfdInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface
// Active interface details
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    InterfaceFloodLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope). The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Last flood scan length. The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length. The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms). The type is interface{} with range: 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms). The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Number of neighbors for which hellos are suppressed. The type is
    // interface{} with range: 0..65535.
    SuppressHelloCount interface{}

    // Authentication type. The type is Authentication.
    InterfaceAuthenticationType interface{}

    // If true, MD key is configured. The type is bool.
    YoungestMdKey interface{}

    // Number of neighbors using the old key (if rollover in progress). The type
    // is interface{} with range: 0..4294967295.
    OldMd5KeyNeighborCount interface{}

    // Youngest MD key ID. The type is interface{} with range: 0..65535.
    YoungestMdKeyId interface{}

    // Keychain ID. The type is interface{} with range: 0..18446744073709551615.
    KeychainId interface{}

    // List of old MD keys. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys.
    MdKeys []*Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys
}

func (activeInterface *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Children.Append("md-keys", types.YChild{"MdKeys", nil})
    for i := range activeInterface.MdKeys {
        activeInterface.EntityData.Children.Append(types.GetSegmentPath(activeInterface.MdKeys[i]), types.YChild{"MdKeys", activeInterface.MdKeys[i]})
    }
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-flood-length", types.YLeaf{"InterfaceFloodLength", activeInterface.InterfaceFloodLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", activeInterface.InterfaceNeighborCount})
    activeInterface.EntityData.Leafs.Append("suppress-hello-count", types.YLeaf{"SuppressHelloCount", activeInterface.SuppressHelloCount})
    activeInterface.EntityData.Leafs.Append("interface-authentication-type", types.YLeaf{"InterfaceAuthenticationType", activeInterface.InterfaceAuthenticationType})
    activeInterface.EntityData.Leafs.Append("youngest-md-key", types.YLeaf{"YoungestMdKey", activeInterface.YoungestMdKey})
    activeInterface.EntityData.Leafs.Append("old-md5-key-neighbor-count", types.YLeaf{"OldMd5KeyNeighborCount", activeInterface.OldMd5KeyNeighborCount})
    activeInterface.EntityData.Leafs.Append("youngest-md-key-id", types.YLeaf{"YoungestMdKeyId", activeInterface.YoungestMdKeyId})
    activeInterface.EntityData.Leafs.Append("keychain-id", types.YLeaf{"KeychainId", activeInterface.KeychainId})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys
// List of old MD keys
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..65535.
    Entry interface{}
}

func (mdKeys *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_ActiveInterface_MdKeys) GetEntityData() *types.CommonEntityData {
    mdKeys.EntityData.YFilter = mdKeys.YFilter
    mdKeys.EntityData.YangName = "md-keys"
    mdKeys.EntityData.BundleName = "cisco_ios_xr"
    mdKeys.EntityData.ParentYangName = "active-interface"
    mdKeys.EntityData.SegmentPath = "md-keys"
    mdKeys.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mdKeys.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mdKeys.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mdKeys.EntityData.Children = types.NewOrderedMap()
    mdKeys.EntityData.Leafs = types.NewOrderedMap()
    mdKeys.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", mdKeys.Entry})

    mdKeys.EntityData.YListKeys = []string {}

    return &(mdKeys.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_Srlg
// SRLG Values
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlg *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_Srlg) GetEntityData() *types.CommonEntityData {
    srlg.EntityData.YFilter = srlg.YFilter
    srlg.EntityData.YangName = "srlg"
    srlg.EntityData.BundleName = "cisco_ios_xr"
    srlg.EntityData.ParentYangName = "interface"
    srlg.EntityData.SegmentPath = "srlg"
    srlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlg.EntityData.Children = types.NewOrderedMap()
    srlg.EntityData.Leafs = types.NewOrderedMap()
    srlg.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlg.Entry})

    srlg.EntityData.YListKeys = []string {}

    return &(srlg.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup
// SRTE Ext. Admin Group
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srteteExtAdminGroup *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_SrteteExtAdminGroup) GetEntityData() *types.CommonEntityData {
    srteteExtAdminGroup.EntityData.YFilter = srteteExtAdminGroup.YFilter
    srteteExtAdminGroup.EntityData.YangName = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    srteteExtAdminGroup.EntityData.ParentYangName = "interface"
    srteteExtAdminGroup.EntityData.SegmentPath = "srtete-ext-admin-group"
    srteteExtAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srteteExtAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srteteExtAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srteteExtAdminGroup.EntityData.Children = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs = types.NewOrderedMap()
    srteteExtAdminGroup.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srteteExtAdminGroup.Entry})

    srteteExtAdminGroup.EntityData.YListKeys = []string {}

    return &(srteteExtAdminGroup.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, Designated router. The type is bool.
    NeighborDr interface{}

    // If true, Backup designated router. The type is bool.
    NeighborBdr interface{}

    // If true, hellos suppressed. The type is bool.
    SuppressHello interface{}
}

func (interfaceNeighbor *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor"
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-dr", types.YLeaf{"NeighborDr", interfaceNeighbor.NeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("neighbor-bdr", types.YLeaf{"NeighborBdr", interfaceNeighbor.NeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("suppress-hello", types.YLeaf{"SuppressHello", interfaceNeighbor.SuppressHello})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceMadj
// Information for multi-area on the interface
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceMadj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID string in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    InterfaceArea interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    MadjAreaId interface{}

    // Number of Neighbors. The type is interface{} with range: 0..65535.
    InterfaceNeighborCount interface{}

    // Total number of Adjacent Neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjNeighborCount interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is OspfInterfaceState.
    OspfInterfaceState interface{}
}

func (interfaceMadj *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_InterfaceMadj) GetEntityData() *types.CommonEntityData {
    interfaceMadj.EntityData.YFilter = interfaceMadj.YFilter
    interfaceMadj.EntityData.YangName = "interface-madj"
    interfaceMadj.EntityData.BundleName = "cisco_ios_xr"
    interfaceMadj.EntityData.ParentYangName = "interface"
    interfaceMadj.EntityData.SegmentPath = "interface-madj"
    interfaceMadj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMadj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMadj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMadj.EntityData.Children = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs = types.NewOrderedMap()
    interfaceMadj.EntityData.Leafs.Append("interface-area", types.YLeaf{"InterfaceArea", interfaceMadj.InterfaceArea})
    interfaceMadj.EntityData.Leafs.Append("madj-area-id", types.YLeaf{"MadjAreaId", interfaceMadj.MadjAreaId})
    interfaceMadj.EntityData.Leafs.Append("interface-neighbor-count", types.YLeaf{"InterfaceNeighborCount", interfaceMadj.InterfaceNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-adj-neighbor-count", types.YLeaf{"InterfaceAdjNeighborCount", interfaceMadj.InterfaceAdjNeighborCount})
    interfaceMadj.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceMadj.InterfaceLinkCost})
    interfaceMadj.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceMadj.OspfInterfaceState})

    interfaceMadj.EntityData.YListKeys = []string {}

    return &(interfaceMadj.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpfrrTiebreakers) GetEntityData() *types.CommonEntityData {
    ipfrrTiebreakers.EntityData.YFilter = ipfrrTiebreakers.YFilter
    ipfrrTiebreakers.EntityData.YangName = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTiebreakers.EntityData.ParentYangName = "interface"
    ipfrrTiebreakers.EntityData.SegmentPath = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTiebreakers.EntityData.Children = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-type", types.YLeaf{"TiebreakerType", ipfrrTiebreakers.TiebreakerType})
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-index", types.YLeaf{"TiebreakerIndex", ipfrrTiebreakers.TiebreakerIndex})

    ipfrrTiebreakers.EntityData.YListKeys = []string {}

    return &(ipfrrTiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpSecAddr
// Secondary IP address list
type Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpSecAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Secondary Address Type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryAddr interface{}

    // Secondary Prefix Length. The type is interface{} with range: 0..4294967295.
    SecondaryPrefix interface{}
}

func (ipSecAddr *Ospf_Processes_Process_DefaultVrf_Areas_Area_Interfaces_Interface_IpSecAddr) GetEntityData() *types.CommonEntityData {
    ipSecAddr.EntityData.YFilter = ipSecAddr.YFilter
    ipSecAddr.EntityData.YangName = "ip-sec-addr"
    ipSecAddr.EntityData.BundleName = "cisco_ios_xr"
    ipSecAddr.EntityData.ParentYangName = "interface"
    ipSecAddr.EntityData.SegmentPath = "ip-sec-addr"
    ipSecAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSecAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSecAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSecAddr.EntityData.Children = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs = types.NewOrderedMap()
    ipSecAddr.EntityData.Leafs.Append("secondary-addr", types.YLeaf{"SecondaryAddr", ipSecAddr.SecondaryAddr})
    ipSecAddr.EntityData.Leafs.Append("secondary-prefix", types.YLeaf{"SecondaryPrefix", ipSecAddr.SecondaryPrefix})

    ipSecAddr.EntityData.YListKeys = []string {}

    return &(ipSecAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database
// OSPF Link State Database
type Ospf_Processes_Process_DefaultVrf_Database struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-Area view of Link state database.
    DatabaseAreas Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas

    // Link State database summary table.
    DatabaseSummaries Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries

    // Link State Database summary for the AS.
    DatabaseSummaryAs Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs

    // Link State Database Table.
    Lsas Ospf_Processes_Process_DefaultVrf_Database_Lsas

    // Link state advertisement summary table.
    LsaSummaries Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries
}

func (database *Ospf_Processes_Process_DefaultVrf_Database) GetEntityData() *types.CommonEntityData {
    database.EntityData.YFilter = database.YFilter
    database.EntityData.YangName = "database"
    database.EntityData.BundleName = "cisco_ios_xr"
    database.EntityData.ParentYangName = "default-vrf"
    database.EntityData.SegmentPath = "database"
    database.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    database.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    database.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    database.EntityData.Children = types.NewOrderedMap()
    database.EntityData.Children.Append("database-areas", types.YChild{"DatabaseAreas", &database.DatabaseAreas})
    database.EntityData.Children.Append("database-summaries", types.YChild{"DatabaseSummaries", &database.DatabaseSummaries})
    database.EntityData.Children.Append("database-summary-as", types.YChild{"DatabaseSummaryAs", &database.DatabaseSummaryAs})
    database.EntityData.Children.Append("lsas", types.YChild{"Lsas", &database.Lsas})
    database.EntityData.Children.Append("lsa-summaries", types.YChild{"LsaSummaries", &database.LsaSummaries})
    database.EntityData.Leafs = types.NewOrderedMap()

    database.EntityData.YListKeys = []string {}

    return &(database.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas
// Per-Area view of Link state database
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-Area Link State Database data. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea.
    DatabaseArea []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea
}

func (databaseAreas *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas) GetEntityData() *types.CommonEntityData {
    databaseAreas.EntityData.YFilter = databaseAreas.YFilter
    databaseAreas.EntityData.YangName = "database-areas"
    databaseAreas.EntityData.BundleName = "cisco_ios_xr"
    databaseAreas.EntityData.ParentYangName = "database"
    databaseAreas.EntityData.SegmentPath = "database-areas"
    databaseAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseAreas.EntityData.Children = types.NewOrderedMap()
    databaseAreas.EntityData.Children.Append("database-area", types.YChild{"DatabaseArea", nil})
    for i := range databaseAreas.DatabaseArea {
        databaseAreas.EntityData.Children.Append(types.GetSegmentPath(databaseAreas.DatabaseArea[i]), types.YChild{"DatabaseArea", databaseAreas.DatabaseArea[i]})
    }
    databaseAreas.EntityData.Leafs = types.NewOrderedMap()

    databaseAreas.EntityData.YListKeys = []string {}

    return &(databaseAreas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea
// Per-Area Link State Database data
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Link State Database Table.
    Lsas Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas

    // Link state advertisement summary table.
    LsaSummaries Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries
}

func (databaseArea *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea) GetEntityData() *types.CommonEntityData {
    databaseArea.EntityData.YFilter = databaseArea.YFilter
    databaseArea.EntityData.YangName = "database-area"
    databaseArea.EntityData.BundleName = "cisco_ios_xr"
    databaseArea.EntityData.ParentYangName = "database-areas"
    databaseArea.EntityData.SegmentPath = "database-area" + types.AddKeyToken(databaseArea.AreaId, "area-id")
    databaseArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseArea.EntityData.Children = types.NewOrderedMap()
    databaseArea.EntityData.Children.Append("lsas", types.YChild{"Lsas", &databaseArea.Lsas})
    databaseArea.EntityData.Children.Append("lsa-summaries", types.YChild{"LsaSummaries", &databaseArea.LsaSummaries})
    databaseArea.EntityData.Leafs = types.NewOrderedMap()
    databaseArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", databaseArea.AreaId})

    databaseArea.EntityData.YListKeys = []string {"AreaId"}

    return &(databaseArea.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas
// Link State Database Table
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link State Advertisement information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa.
    Lsa []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa
}

func (lsas *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas) GetEntityData() *types.CommonEntityData {
    lsas.EntityData.YFilter = lsas.YFilter
    lsas.EntityData.YangName = "lsas"
    lsas.EntityData.BundleName = "cisco_ios_xr"
    lsas.EntityData.ParentYangName = "database-area"
    lsas.EntityData.SegmentPath = "lsas"
    lsas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsas.EntityData.Children = types.NewOrderedMap()
    lsas.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsas.Lsa {
        lsas.EntityData.Children.Append(types.GetSegmentPath(lsas.Lsa[i]), types.YChild{"Lsa", lsas.Lsa[i]})
    }
    lsas.EntityData.Leafs = types.NewOrderedMap()

    lsas.EntityData.YListKeys = []string {}

    return &(lsas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa
// Link State Advertisement information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Header information.
    LsaHeader Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader

    // Detailed LSA Information.
    LsaDetailData Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData

    // Information pertaining to a specific LSA type.
    LsaInternalData Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData
}

func (lsa *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsas"
    lsa.EntityData.SegmentPath = "lsa"
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsa.LsaHeader})
    lsa.EntityData.Children.Append("lsa-detail-data", types.YChild{"LsaDetailData", &lsa.LsaDetailData})
    lsa.EntityData.Children.Append("lsa-internal-data", types.YChild{"LsaInternalData", &lsa.LsaInternalData})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader
// Header information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData
// Detailed LSA Information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, type of service capable indicated by LSA's option field. The type
    // is bool.
    TosCapable interface{}

    // If true,  capable of type 7 to 5 translation indicated by LSA's option
    // field. The type is bool.
    NssaTranslation interface{}

    // If true, capable of demand circuit as indicated by LSA's option field. The
    // type is bool.
    DemandCircuit interface{}

    // if true, DN bit set on the summary LSA indicated by LSA's option field. The
    // type is bool.
    DnBit interface{}

    // Due time for rate-limit timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRateLimitDueTime interface{}

    // Clock stamp since boot. The type is interface{} with range:
    // 0..18446744073709551615.
    LsadbBaseClock interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    RoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    AdvertisingRouterReachable interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    Length interface{}

    // Summary Origin. The type is interface{} with range: 0..65535.
    SumOrigin interface{}

    // External Origin. The type is interface{} with range: 0..65535.
    AseOrigin interface{}

    // Not In Sync With Active. The type is interface{} with range: 0..255.
    InSync interface{}

    // Current LSA prefix priority. The type is interface{} with range: 0..255.
    LsaPrefixPriority interface{}

    // New LSA prefix priority. The type is interface{} with range: 0..255.
    NewLsaPrefixPriority interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // LSA throttle timer table information.
    LsaThrottleTimer Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer

    // Time LSA was last updated.
    LsaLastUpdatedTime Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime

    // Current time stamp.
    LsadbBaseTimeStamp Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp

    // Reason why LSA is not deleted.
    NotDelete Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete
}

func (lsaDetailData *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData) GetEntityData() *types.CommonEntityData {
    lsaDetailData.EntityData.YFilter = lsaDetailData.YFilter
    lsaDetailData.EntityData.YangName = "lsa-detail-data"
    lsaDetailData.EntityData.BundleName = "cisco_ios_xr"
    lsaDetailData.EntityData.ParentYangName = "lsa"
    lsaDetailData.EntityData.SegmentPath = "lsa-detail-data"
    lsaDetailData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetailData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetailData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetailData.EntityData.Children = types.NewOrderedMap()
    lsaDetailData.EntityData.Children.Append("lsa-throttle-timer", types.YChild{"LsaThrottleTimer", &lsaDetailData.LsaThrottleTimer})
    lsaDetailData.EntityData.Children.Append("lsa-last-updated-time", types.YChild{"LsaLastUpdatedTime", &lsaDetailData.LsaLastUpdatedTime})
    lsaDetailData.EntityData.Children.Append("lsadb-base-time-stamp", types.YChild{"LsadbBaseTimeStamp", &lsaDetailData.LsadbBaseTimeStamp})
    lsaDetailData.EntityData.Children.Append("not-delete", types.YChild{"NotDelete", &lsaDetailData.NotDelete})
    lsaDetailData.EntityData.Leafs = types.NewOrderedMap()
    lsaDetailData.EntityData.Leafs.Append("tos-capable", types.YLeaf{"TosCapable", lsaDetailData.TosCapable})
    lsaDetailData.EntityData.Leafs.Append("nssa-translation", types.YLeaf{"NssaTranslation", lsaDetailData.NssaTranslation})
    lsaDetailData.EntityData.Leafs.Append("demand-circuit", types.YLeaf{"DemandCircuit", lsaDetailData.DemandCircuit})
    lsaDetailData.EntityData.Leafs.Append("dn-bit", types.YLeaf{"DnBit", lsaDetailData.DnBit})
    lsaDetailData.EntityData.Leafs.Append("lsa-rate-limit-due-time", types.YLeaf{"LsaRateLimitDueTime", lsaDetailData.LsaRateLimitDueTime})
    lsaDetailData.EntityData.Leafs.Append("lsadb-base-clock", types.YLeaf{"LsadbBaseClock", lsaDetailData.LsadbBaseClock})
    lsaDetailData.EntityData.Leafs.Append("routing-bit", types.YLeaf{"RoutingBit", lsaDetailData.RoutingBit})
    lsaDetailData.EntityData.Leafs.Append("advertising-router-reachable", types.YLeaf{"AdvertisingRouterReachable", lsaDetailData.AdvertisingRouterReachable})
    lsaDetailData.EntityData.Leafs.Append("length", types.YLeaf{"Length", lsaDetailData.Length})
    lsaDetailData.EntityData.Leafs.Append("sum-origin", types.YLeaf{"SumOrigin", lsaDetailData.SumOrigin})
    lsaDetailData.EntityData.Leafs.Append("ase-origin", types.YLeaf{"AseOrigin", lsaDetailData.AseOrigin})
    lsaDetailData.EntityData.Leafs.Append("in-sync", types.YLeaf{"InSync", lsaDetailData.InSync})
    lsaDetailData.EntityData.Leafs.Append("lsa-prefix-priority", types.YLeaf{"LsaPrefixPriority", lsaDetailData.LsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("new-lsa-prefix-priority", types.YLeaf{"NewLsaPrefixPriority", lsaDetailData.NewLsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetailData.LsaFloodRequiredPostFailOver})

    lsaDetailData.EntityData.YListKeys = []string {}

    return &(lsaDetailData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer
// LSA throttle timer table information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timer table. The type is TimerTable.
    TimerLocation interface{}

    // Timer type. The type is Timer.
    TimerType interface{}

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // Last Second table index processed. The type is interface{} with range:
    // 0..255.
    LastInstSecondTableIndex interface{}

    // Last Minute table index processed. The type is interface{} with range:
    // 0..255.
    LastInstMinuteTableIndex interface{}
}

func (lsaThrottleTimer *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaThrottleTimer) GetEntityData() *types.CommonEntityData {
    lsaThrottleTimer.EntityData.YFilter = lsaThrottleTimer.YFilter
    lsaThrottleTimer.EntityData.YangName = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.BundleName = "cisco_ios_xr"
    lsaThrottleTimer.EntityData.ParentYangName = "lsa-detail-data"
    lsaThrottleTimer.EntityData.SegmentPath = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaThrottleTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaThrottleTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaThrottleTimer.EntityData.Children = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs.Append("timer-location", types.YLeaf{"TimerLocation", lsaThrottleTimer.TimerLocation})
    lsaThrottleTimer.EntityData.Leafs.Append("timer-type", types.YLeaf{"TimerType", lsaThrottleTimer.TimerType})
    lsaThrottleTimer.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaThrottleTimer.SecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaThrottleTimer.MinuteTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-second-table-index", types.YLeaf{"LastInstSecondTableIndex", lsaThrottleTimer.LastInstSecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-minute-table-index", types.YLeaf{"LastInstMinuteTableIndex", lsaThrottleTimer.LastInstMinuteTableIndex})

    lsaThrottleTimer.EntityData.YListKeys = []string {}

    return &(lsaThrottleTimer.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime
// Time LSA was last updated
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsaLastUpdatedTime *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime) GetEntityData() *types.CommonEntityData {
    lsaLastUpdatedTime.EntityData.YFilter = lsaLastUpdatedTime.YFilter
    lsaLastUpdatedTime.EntityData.YangName = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.BundleName = "cisco_ios_xr"
    lsaLastUpdatedTime.EntityData.ParentYangName = "lsa-detail-data"
    lsaLastUpdatedTime.EntityData.SegmentPath = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaLastUpdatedTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaLastUpdatedTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaLastUpdatedTime.EntityData.Children = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsaLastUpdatedTime.Second})
    lsaLastUpdatedTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsaLastUpdatedTime.Nanosecond})

    lsaLastUpdatedTime.EntityData.YListKeys = []string {}

    return &(lsaLastUpdatedTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp
// Current time stamp
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsadbBaseTimeStamp *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp) GetEntityData() *types.CommonEntityData {
    lsadbBaseTimeStamp.EntityData.YFilter = lsadbBaseTimeStamp.YFilter
    lsadbBaseTimeStamp.EntityData.YangName = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.BundleName = "cisco_ios_xr"
    lsadbBaseTimeStamp.EntityData.ParentYangName = "lsa-detail-data"
    lsadbBaseTimeStamp.EntityData.SegmentPath = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsadbBaseTimeStamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsadbBaseTimeStamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsadbBaseTimeStamp.EntityData.Children = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsadbBaseTimeStamp.Second})
    lsadbBaseTimeStamp.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsadbBaseTimeStamp.Nanosecond})

    lsadbBaseTimeStamp.EntityData.YListKeys = []string {}

    return &(lsadbBaseTimeStamp.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete
// Reason why LSA is not deleted
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    NoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    NeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table. The type is bool.
    RoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty. The type is bool.
    Acknowledgement interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    MaximumAge interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    PartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    FloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    NsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending summary
    // LSA originating. The type is bool.
    SumOrigPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}
}

func (notDelete *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaDetailData_NotDelete) GetEntityData() *types.CommonEntityData {
    notDelete.EntityData.YFilter = notDelete.YFilter
    notDelete.EntityData.YangName = "not-delete"
    notDelete.EntityData.BundleName = "cisco_ios_xr"
    notDelete.EntityData.ParentYangName = "lsa-detail-data"
    notDelete.EntityData.SegmentPath = "not-delete"
    notDelete.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notDelete.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notDelete.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notDelete.EntityData.Children = types.NewOrderedMap()
    notDelete.EntityData.Leafs = types.NewOrderedMap()
    notDelete.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", notDelete.FreeTime})
    notDelete.EntityData.Leafs.Append("no-delete", types.YLeaf{"NoDelete", notDelete.NoDelete})
    notDelete.EntityData.Leafs.Append("neighbor-exchange", types.YLeaf{"NeighborExchange", notDelete.NeighborExchange})
    notDelete.EntityData.Leafs.Append("routing-table", types.YLeaf{"RoutingTable", notDelete.RoutingTable})
    notDelete.EntityData.Leafs.Append("acknowledgement", types.YLeaf{"Acknowledgement", notDelete.Acknowledgement})
    notDelete.EntityData.Leafs.Append("maximum-age", types.YLeaf{"MaximumAge", notDelete.MaximumAge})
    notDelete.EntityData.Leafs.Append("partial-spf", types.YLeaf{"PartialSpf", notDelete.PartialSpf})
    notDelete.EntityData.Leafs.Append("flood-pending", types.YLeaf{"FloodPending", notDelete.FloodPending})
    notDelete.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", notDelete.RateLimit})
    notDelete.EntityData.Leafs.Append("nsr-ack-pending", types.YLeaf{"NsrAckPending", notDelete.NsrAckPending})
    notDelete.EntityData.Leafs.Append("sum-orig-pending", types.YLeaf{"SumOrigPending", notDelete.SumOrigPending})
    notDelete.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", notDelete.NsrFloodRequired})

    notDelete.EntityData.YListKeys = []string {}

    return &(notDelete.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData
// Information pertaining to a specific LSA type
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // InternalLSAType. The type is OspfInternalLsaTypes.
    InternalLsaType interface{}

    // Router LSA.
    RouterLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType

    // Summary LSA.
    SummaryLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType

    // External LSA.
    ExternalLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType

    // Opaque-Link LSA.
    OpaqueLinkLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType

    // Opaque-Area, opaque type 1 LSA.
    OpaqueMplsTeLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType

    // Opaque-link, opaque type 3 Grace LSA.
    OpaqueGraceLsa Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa

    // Opaque Router Information LSA.
    OpaqueRouterInfoLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType

    // Extende Prefix LSA type.
    OpaqueEpLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType

    // Extended Link LSA type.
    OpaqueElLsaType Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
}

func (lsaInternalData *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData) GetEntityData() *types.CommonEntityData {
    lsaInternalData.EntityData.YFilter = lsaInternalData.YFilter
    lsaInternalData.EntityData.YangName = "lsa-internal-data"
    lsaInternalData.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalData.EntityData.ParentYangName = "lsa"
    lsaInternalData.EntityData.SegmentPath = "lsa-internal-data"
    lsaInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalData.EntityData.Children = types.NewOrderedMap()
    lsaInternalData.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInternalData.RouterLsaType})
    lsaInternalData.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInternalData.NetworkLsaType})
    lsaInternalData.EntityData.Children.Append("summary-lsa-type", types.YChild{"SummaryLsaType", &lsaInternalData.SummaryLsaType})
    lsaInternalData.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInternalData.ExternalLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-link-lsa-type", types.YChild{"OpaqueLinkLsaType", &lsaInternalData.OpaqueLinkLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-mpls-te-lsa-type", types.YChild{"OpaqueMplsTeLsaType", &lsaInternalData.OpaqueMplsTeLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-grace-lsa", types.YChild{"OpaqueGraceLsa", &lsaInternalData.OpaqueGraceLsa})
    lsaInternalData.EntityData.Children.Append("opaque-router-info-lsa-type", types.YChild{"OpaqueRouterInfoLsaType", &lsaInternalData.OpaqueRouterInfoLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-ep-lsa-type", types.YChild{"OpaqueEpLsaType", &lsaInternalData.OpaqueEpLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-el-lsa-type", types.YChild{"OpaqueElLsaType", &lsaInternalData.OpaqueElLsaType})
    lsaInternalData.EntityData.Leafs = types.NewOrderedMap()
    lsaInternalData.EntityData.Leafs.Append("internal-lsa-type", types.YLeaf{"InternalLsaType", lsaInternalData.InternalLsaType})

    lsaInternalData.EntityData.YListKeys = []string {}

    return &(lsaInternalData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType
// Router LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If True, router is an Autonomous system Border Router. The type is bool.
    RouterAsbr interface{}

    // If True, router is an Area Border Router. The type is bool.
    RouterAbr interface{}

    // If true, internal LSA. The type is bool.
    InternalLsa interface{}

    // List of links in this LSA. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link.
    Link []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link

    // List of links for internal LSA. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink.
    InternalLink []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
}

func (routerLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-internal-data"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Children.Append("internal-link", types.YChild{"InternalLink", nil})
    for i := range routerLsaType.InternalLink {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.InternalLink[i]), types.YChild{"InternalLink", routerLsaType.InternalLink[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-asbr", types.YLeaf{"RouterAsbr", routerLsaType.RouterAsbr})
    routerLsaType.EntityData.Leafs.Append("router-abr", types.YLeaf{"RouterAbr", routerLsaType.RouterAbr})
    routerLsaType.EntityData.Leafs.Append("internal-lsa", types.YLeaf{"InternalLsa", routerLsaType.InternalLsa})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link
// List of links in this LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos.
    LinkTos []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
}

func (link *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range link.LinkTos {
        link.EntityData.Children.Append(types.GetSegmentPath(link.LinkTos[i]), types.YChild{"LinkTos", link.LinkTos[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", link.LinkId})
    link.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", link.LinkData})
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
// List of links for internal LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos.
    LinkTos []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
}

func (internalLink *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink) GetEntityData() *types.CommonEntityData {
    internalLink.EntityData.YFilter = internalLink.YFilter
    internalLink.EntityData.YangName = "internal-link"
    internalLink.EntityData.BundleName = "cisco_ios_xr"
    internalLink.EntityData.ParentYangName = "router-lsa-type"
    internalLink.EntityData.SegmentPath = "internal-link"
    internalLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalLink.EntityData.Children = types.NewOrderedMap()
    internalLink.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range internalLink.LinkTos {
        internalLink.EntityData.Children.Append(types.GetSegmentPath(internalLink.LinkTos[i]), types.YChild{"LinkTos", internalLink.LinkTos[i]})
    }
    internalLink.EntityData.Leafs = types.NewOrderedMap()
    internalLink.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", internalLink.LinkId})
    internalLink.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", internalLink.LinkData})
    internalLink.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", internalLink.LinkType})
    internalLink.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", internalLink.LinkMetric})

    internalLink.EntityData.YListKeys = []string {}

    return &(internalLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "internal-link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType
// Network LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network prefix length. The type is interface{} with range: 0..4294967295.
    NetworkPrefixLength interface{}

    // Neighbor router list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter.
    NeighborRouter []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
}

func (networkLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("neighbor-router", types.YChild{"NeighborRouter", nil})
    for i := range networkLsaType.NeighborRouter {
        networkLsaType.EntityData.Children.Append(types.GetSegmentPath(networkLsaType.NeighborRouter[i]), types.YChild{"NeighborRouter", networkLsaType.NeighborRouter[i]})
    }
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("network-prefix-length", types.YLeaf{"NetworkPrefixLength", networkLsaType.NetworkPrefixLength})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
// Neighbor router list
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (neighborRouter *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter) GetEntityData() *types.CommonEntityData {
    neighborRouter.EntityData.YFilter = neighborRouter.YFilter
    neighborRouter.EntityData.YangName = "neighbor-router"
    neighborRouter.EntityData.BundleName = "cisco_ios_xr"
    neighborRouter.EntityData.ParentYangName = "network-lsa-type"
    neighborRouter.EntityData.SegmentPath = "neighbor-router"
    neighborRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRouter.EntityData.Children = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborRouter.Entry})

    neighborRouter.EntityData.YListKeys = []string {}

    return &(neighborRouter.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType
// Summary LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary LSA prefix length. The type is interface{} with range:
    // 0..4294967295.
    SummaryPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalSumLsa interface{}

    // Metric. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric.
    SummaryLsaMetric []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
}

func (summaryLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType) GetEntityData() *types.CommonEntityData {
    summaryLsaType.EntityData.YFilter = summaryLsaType.YFilter
    summaryLsaType.EntityData.YangName = "summary-lsa-type"
    summaryLsaType.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaType.EntityData.ParentYangName = "lsa-internal-data"
    summaryLsaType.EntityData.SegmentPath = "summary-lsa-type"
    summaryLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaType.EntityData.Children = types.NewOrderedMap()
    summaryLsaType.EntityData.Children.Append("summary-lsa-metric", types.YChild{"SummaryLsaMetric", nil})
    for i := range summaryLsaType.SummaryLsaMetric {
        summaryLsaType.EntityData.Children.Append(types.GetSegmentPath(summaryLsaType.SummaryLsaMetric[i]), types.YChild{"SummaryLsaMetric", summaryLsaType.SummaryLsaMetric[i]})
    }
    summaryLsaType.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaType.EntityData.Leafs.Append("summary-prefix-length", types.YLeaf{"SummaryPrefixLength", summaryLsaType.SummaryPrefixLength})
    summaryLsaType.EntityData.Leafs.Append("internal-sum-lsa", types.YLeaf{"InternalSumLsa", summaryLsaType.InternalSumLsa})

    summaryLsaType.EntityData.YListKeys = []string {}

    return &(summaryLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
// Metric
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (summaryLsaMetric *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric) GetEntityData() *types.CommonEntityData {
    summaryLsaMetric.EntityData.YFilter = summaryLsaMetric.YFilter
    summaryLsaMetric.EntityData.YangName = "summary-lsa-metric"
    summaryLsaMetric.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaMetric.EntityData.ParentYangName = "summary-lsa-type"
    summaryLsaMetric.EntityData.SegmentPath = "summary-lsa-metric"
    summaryLsaMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaMetric.EntityData.Children = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", summaryLsaMetric.Entry})

    summaryLsaMetric.EntityData.YListKeys = []string {}

    return &(summaryLsaMetric.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType
// External LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix length. The type is interface{} with range: 0..4294967295.
    ExternalPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalExternalLsa interface{}

    // Type of service information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric.
    ExternalTosMetric []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
}

func (externalLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-internal-data"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("external-tos-metric", types.YChild{"ExternalTosMetric", nil})
    for i := range externalLsaType.ExternalTosMetric {
        externalLsaType.EntityData.Children.Append(types.GetSegmentPath(externalLsaType.ExternalTosMetric[i]), types.YChild{"ExternalTosMetric", externalLsaType.ExternalTosMetric[i]})
    }
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("external-prefix-length", types.YLeaf{"ExternalPrefixLength", externalLsaType.ExternalPrefixLength})
    externalLsaType.EntityData.Leafs.Append("internal-external-lsa", types.YLeaf{"InternalExternalLsa", externalLsaType.InternalExternalLsa})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
// Type of service information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cost of this route. The type is interface{} with range: 0..4294967295.
    ExternalMetric interface{}

    // External LSA metric type. The type is ExMetric.
    ExternalMetricType interface{}

    // Type of Service. The type is interface{} with range: 0..4294967295.
    ExternalTos interface{}

    // Forwarding Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}
}

func (externalTosMetric *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric) GetEntityData() *types.CommonEntityData {
    externalTosMetric.EntityData.YFilter = externalTosMetric.YFilter
    externalTosMetric.EntityData.YangName = "external-tos-metric"
    externalTosMetric.EntityData.BundleName = "cisco_ios_xr"
    externalTosMetric.EntityData.ParentYangName = "external-lsa-type"
    externalTosMetric.EntityData.SegmentPath = "external-tos-metric"
    externalTosMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalTosMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalTosMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalTosMetric.EntityData.Children = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs.Append("external-metric", types.YLeaf{"ExternalMetric", externalTosMetric.ExternalMetric})
    externalTosMetric.EntityData.Leafs.Append("external-metric-type", types.YLeaf{"ExternalMetricType", externalTosMetric.ExternalMetricType})
    externalTosMetric.EntityData.Leafs.Append("external-tos", types.YLeaf{"ExternalTos", externalTosMetric.ExternalTos})
    externalTosMetric.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalTosMetric.ForwardingAddress})
    externalTosMetric.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalTosMetric.ExternalTag})

    externalTosMetric.EntityData.YListKeys = []string {}

    return &(externalTosMetric.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType
// Opaque-Link LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface on which the Opaque link LSA is received. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    OpaqueInterfaceName interface{}
}

func (opaqueLinkLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType) GetEntityData() *types.CommonEntityData {
    opaqueLinkLsaType.EntityData.YFilter = opaqueLinkLsaType.YFilter
    opaqueLinkLsaType.EntityData.YangName = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueLinkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueLinkLsaType.EntityData.SegmentPath = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueLinkLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs.Append("opaque-interface-name", types.YLeaf{"OpaqueInterfaceName", opaqueLinkLsaType.OpaqueInterfaceName})

    opaqueLinkLsaType.EntityData.YListKeys = []string {}

    return &(opaqueLinkLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType
// Opaque-Area, opaque type 1 LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
}

func (opaqueMplsTeLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType) GetEntityData() *types.CommonEntityData {
    opaqueMplsTeLsaType.EntityData.YFilter = opaqueMplsTeLsaType.YFilter
    opaqueMplsTeLsaType.EntityData.YangName = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueMplsTeLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueMplsTeLsaType.EntityData.SegmentPath = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueMplsTeLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueMplsTeLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueMplsTeLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueMplsTeLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueMplsTeLsaType.Tlv {
        opaqueMplsTeLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueMplsTeLsaType.Tlv[i]), types.YChild{"Tlv", opaqueMplsTeLsaType.Tlv[i]})
    }
    opaqueMplsTeLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueMplsTeLsaType.EntityData.YListKeys = []string {}

    return &(opaqueMplsTeLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-mpls-te-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa
// Opaque-link, opaque type 3 Grace LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time the router's neighbor should advertise it fully adjacent
    // (s). The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is OspfGrReason.
    GraceReason interface{}

    // IP interface address on the subnet associated with the grace LSA. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpAddress interface{}
}

func (opaqueGraceLsa *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa) GetEntityData() *types.CommonEntityData {
    opaqueGraceLsa.EntityData.YFilter = opaqueGraceLsa.YFilter
    opaqueGraceLsa.EntityData.YangName = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.BundleName = "cisco_ios_xr"
    opaqueGraceLsa.EntityData.ParentYangName = "lsa-internal-data"
    opaqueGraceLsa.EntityData.SegmentPath = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueGraceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueGraceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueGraceLsa.EntityData.Children = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", opaqueGraceLsa.GracePeriod})
    opaqueGraceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", opaqueGraceLsa.GraceReason})
    opaqueGraceLsa.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", opaqueGraceLsa.IpAddress})

    opaqueGraceLsa.EntityData.YListKeys = []string {}

    return &(opaqueGraceLsa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType
// Opaque Router Information LSA
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Opaque LSA flooding scope, a.k.a., Opaque LSA Type. The type is
    // OspfLsaOpqRiScope.
    OpaqueRilsaScope interface{}

    // Interface on which this Link-Local Opaque link LSA is received. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    OpaqueRiInterfaceName interface{}

    // Router Information TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv.
    OpaqueRitlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
}

func (opaqueRouterInfoLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType) GetEntityData() *types.CommonEntityData {
    opaqueRouterInfoLsaType.EntityData.YFilter = opaqueRouterInfoLsaType.YFilter
    opaqueRouterInfoLsaType.EntityData.YangName = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueRouterInfoLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueRouterInfoLsaType.EntityData.SegmentPath = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRouterInfoLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRouterInfoLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRouterInfoLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Children.Append("opaque-ritlv", types.YChild{"OpaqueRitlv", nil})
    for i := range opaqueRouterInfoLsaType.OpaqueRitlv {
        opaqueRouterInfoLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueRouterInfoLsaType.OpaqueRitlv[i]), types.YChild{"OpaqueRitlv", opaqueRouterInfoLsaType.OpaqueRitlv[i]})
    }
    opaqueRouterInfoLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-rilsa-scope", types.YLeaf{"OpaqueRilsaScope", opaqueRouterInfoLsaType.OpaqueRilsaScope})
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-ri-interface-name", types.YLeaf{"OpaqueRiInterfaceName", opaqueRouterInfoLsaType.OpaqueRiInterfaceName})

    opaqueRouterInfoLsaType.EntityData.YListKeys = []string {}

    return &(opaqueRouterInfoLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
// Router Information TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RITLVInternalType. The type is OspfShOpqRiTlvTypes.
    RitlvInternalType interface{}

    // Unknown Rtr Info TLV.
    UnknownTlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv

    // Rtr Cap TLV.
    RtrCapTlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv

    // PCE Discovery TLV.
    Pcedtlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv

    // SR Algorithm TLV.
    SrAlgoTlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv

    // SR Range TLV.
    SrRangeTlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv

    // Node MSD TLV.
    NodeMsdtlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
}

func (opaqueRitlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv) GetEntityData() *types.CommonEntityData {
    opaqueRitlv.EntityData.YFilter = opaqueRitlv.YFilter
    opaqueRitlv.EntityData.YangName = "opaque-ritlv"
    opaqueRitlv.EntityData.BundleName = "cisco_ios_xr"
    opaqueRitlv.EntityData.ParentYangName = "opaque-router-info-lsa-type"
    opaqueRitlv.EntityData.SegmentPath = "opaque-ritlv"
    opaqueRitlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRitlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRitlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRitlv.EntityData.Children = types.NewOrderedMap()
    opaqueRitlv.EntityData.Children.Append("unknown-tlv", types.YChild{"UnknownTlv", &opaqueRitlv.UnknownTlv})
    opaqueRitlv.EntityData.Children.Append("rtr-cap-tlv", types.YChild{"RtrCapTlv", &opaqueRitlv.RtrCapTlv})
    opaqueRitlv.EntityData.Children.Append("pcedtlv", types.YChild{"Pcedtlv", &opaqueRitlv.Pcedtlv})
    opaqueRitlv.EntityData.Children.Append("sr-algo-tlv", types.YChild{"SrAlgoTlv", &opaqueRitlv.SrAlgoTlv})
    opaqueRitlv.EntityData.Children.Append("sr-range-tlv", types.YChild{"SrRangeTlv", &opaqueRitlv.SrRangeTlv})
    opaqueRitlv.EntityData.Children.Append("node-msdtlv", types.YChild{"NodeMsdtlv", &opaqueRitlv.NodeMsdtlv})
    opaqueRitlv.EntityData.Leafs = types.NewOrderedMap()
    opaqueRitlv.EntityData.Leafs.Append("ritlv-internal-type", types.YLeaf{"RitlvInternalType", opaqueRitlv.RitlvInternalType})

    opaqueRitlv.EntityData.YListKeys = []string {}

    return &(opaqueRitlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv
// Unknown Rtr Info TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (unknownTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv) GetEntityData() *types.CommonEntityData {
    unknownTlv.EntityData.YFilter = unknownTlv.YFilter
    unknownTlv.EntityData.YangName = "unknown-tlv"
    unknownTlv.EntityData.BundleName = "cisco_ios_xr"
    unknownTlv.EntityData.ParentYangName = "opaque-ritlv"
    unknownTlv.EntityData.SegmentPath = "unknown-tlv"
    unknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownTlv.EntityData.Children = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", unknownTlv.RiGenTlvType})
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", unknownTlv.RiGenTlvLength})
    unknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", unknownTlv.RiGenvalue})

    unknownTlv.EntityData.YListKeys = []string {}

    return &(unknownTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv
// Rtr Cap TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    RtrCapTlvLength interface{}

    // Graceful Restart Capability. The type is bool.
    RtrCapGracefulRestart interface{}

    // Graceful Restart Helper Capability. The type is bool.
    RtrCapGracefulRestartHelper interface{}

    // Stub Router capability. The type is bool.
    RtrCapStubRtr interface{}

    // Traffic Engineering capability of area. The type is bool.
    RtrCapAreaTe interface{}

    // P2P LAN Capability. The type is bool.
    RtrCapP2plan interface{}

    // TE Experimental bit. The type is bool.
    RtrCapTeExp interface{}

    // All capability bits. The type is interface{} with range: 0..4294967295.
    RtrCapAllBits interface{}

    // Additional Information in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RtrCapAdditionalInfo interface{}
}

func (rtrCapTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv) GetEntityData() *types.CommonEntityData {
    rtrCapTlv.EntityData.YFilter = rtrCapTlv.YFilter
    rtrCapTlv.EntityData.YangName = "rtr-cap-tlv"
    rtrCapTlv.EntityData.BundleName = "cisco_ios_xr"
    rtrCapTlv.EntityData.ParentYangName = "opaque-ritlv"
    rtrCapTlv.EntityData.SegmentPath = "rtr-cap-tlv"
    rtrCapTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtrCapTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtrCapTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtrCapTlv.EntityData.Children = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-tlv-length", types.YLeaf{"RtrCapTlvLength", rtrCapTlv.RtrCapTlvLength})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart", types.YLeaf{"RtrCapGracefulRestart", rtrCapTlv.RtrCapGracefulRestart})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart-helper", types.YLeaf{"RtrCapGracefulRestartHelper", rtrCapTlv.RtrCapGracefulRestartHelper})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-stub-rtr", types.YLeaf{"RtrCapStubRtr", rtrCapTlv.RtrCapStubRtr})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-area-te", types.YLeaf{"RtrCapAreaTe", rtrCapTlv.RtrCapAreaTe})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-p2plan", types.YLeaf{"RtrCapP2plan", rtrCapTlv.RtrCapP2plan})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-te-exp", types.YLeaf{"RtrCapTeExp", rtrCapTlv.RtrCapTeExp})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-all-bits", types.YLeaf{"RtrCapAllBits", rtrCapTlv.RtrCapAllBits})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-additional-info", types.YLeaf{"RtrCapAdditionalInfo", rtrCapTlv.RtrCapAdditionalInfo})

    rtrCapTlv.EntityData.YListKeys = []string {}

    return &(rtrCapTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv
// PCE Discovery TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    PcedtlvLength interface{}

    // PCE Address.
    PcedAddr Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr

    // PCE Scope Information.
    PcedScope Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
}

func (pcedtlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv) GetEntityData() *types.CommonEntityData {
    pcedtlv.EntityData.YFilter = pcedtlv.YFilter
    pcedtlv.EntityData.YangName = "pcedtlv"
    pcedtlv.EntityData.BundleName = "cisco_ios_xr"
    pcedtlv.EntityData.ParentYangName = "opaque-ritlv"
    pcedtlv.EntityData.SegmentPath = "pcedtlv"
    pcedtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedtlv.EntityData.Children = types.NewOrderedMap()
    pcedtlv.EntityData.Children.Append("pced-addr", types.YChild{"PcedAddr", &pcedtlv.PcedAddr})
    pcedtlv.EntityData.Children.Append("pced-scope", types.YChild{"PcedScope", &pcedtlv.PcedScope})
    pcedtlv.EntityData.Leafs = types.NewOrderedMap()
    pcedtlv.EntityData.Leafs.Append("pcedtlv-length", types.YLeaf{"PcedtlvLength", pcedtlv.PcedtlvLength})

    pcedtlv.EntityData.YListKeys = []string {}

    return &(pcedtlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr
// PCE Address
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCEAddrType. The type is OspfShOpqRiPceAddrTypes.
    PceAddrType interface{}

    // Unknown PCE Addr TLV.
    PceAddrUnknownTlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv

    // IPv4 PCE Address.
    Ipv4pceAddr Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr

    // IPv6 PCE Address.
    Ipv6pceAddr Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
}

func (pcedAddr *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr) GetEntityData() *types.CommonEntityData {
    pcedAddr.EntityData.YFilter = pcedAddr.YFilter
    pcedAddr.EntityData.YangName = "pced-addr"
    pcedAddr.EntityData.BundleName = "cisco_ios_xr"
    pcedAddr.EntityData.ParentYangName = "pcedtlv"
    pcedAddr.EntityData.SegmentPath = "pced-addr"
    pcedAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedAddr.EntityData.Children = types.NewOrderedMap()
    pcedAddr.EntityData.Children.Append("pce-addr-unknown-tlv", types.YChild{"PceAddrUnknownTlv", &pcedAddr.PceAddrUnknownTlv})
    pcedAddr.EntityData.Children.Append("ipv4pce-addr", types.YChild{"Ipv4pceAddr", &pcedAddr.Ipv4pceAddr})
    pcedAddr.EntityData.Children.Append("ipv6pce-addr", types.YChild{"Ipv6pceAddr", &pcedAddr.Ipv6pceAddr})
    pcedAddr.EntityData.Leafs = types.NewOrderedMap()
    pcedAddr.EntityData.Leafs.Append("pce-addr-type", types.YLeaf{"PceAddrType", pcedAddr.PceAddrType})

    pcedAddr.EntityData.YListKeys = []string {}

    return &(pcedAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv
// Unknown PCE Addr TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (pceAddrUnknownTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv) GetEntityData() *types.CommonEntityData {
    pceAddrUnknownTlv.EntityData.YFilter = pceAddrUnknownTlv.YFilter
    pceAddrUnknownTlv.EntityData.YangName = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.BundleName = "cisco_ios_xr"
    pceAddrUnknownTlv.EntityData.ParentYangName = "pced-addr"
    pceAddrUnknownTlv.EntityData.SegmentPath = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pceAddrUnknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pceAddrUnknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pceAddrUnknownTlv.EntityData.Children = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", pceAddrUnknownTlv.RiGenTlvType})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", pceAddrUnknownTlv.RiGenTlvLength})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", pceAddrUnknownTlv.RiGenvalue})

    pceAddrUnknownTlv.EntityData.YListKeys = []string {}

    return &(pceAddrUnknownTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr
// IPv4 PCE Address
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Pceipv4Addr interface{}
}

func (ipv4pceAddr *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr) GetEntityData() *types.CommonEntityData {
    ipv4pceAddr.EntityData.YFilter = ipv4pceAddr.YFilter
    ipv4pceAddr.EntityData.YangName = "ipv4pce-addr"
    ipv4pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv4pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv4pceAddr.EntityData.SegmentPath = "ipv4pce-addr"
    ipv4pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs.Append("pceipv4-addr", types.YLeaf{"Pceipv4Addr", ipv4pceAddr.Pceipv4Addr})

    ipv4pceAddr.EntityData.YListKeys = []string {}

    return &(ipv4pceAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
// IPv6 PCE Address
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv6 Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Pceipv6Addr interface{}
}

func (ipv6pceAddr *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr) GetEntityData() *types.CommonEntityData {
    ipv6pceAddr.EntityData.YFilter = ipv6pceAddr.YFilter
    ipv6pceAddr.EntityData.YangName = "ipv6pce-addr"
    ipv6pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv6pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv6pceAddr.EntityData.SegmentPath = "ipv6pce-addr"
    ipv6pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs.Append("pceipv6-addr", types.YLeaf{"Pceipv6Addr", ipv6pceAddr.Pceipv6Addr})

    ipv6pceAddr.EntityData.YListKeys = []string {}

    return &(ipv6pceAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
// PCE Scope Information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L Bit. The type is bool.
    Lbit interface{}

    // R Bit. The type is bool.
    Rbit interface{}

    // Rd Bit. The type is bool.
    RdBit interface{}

    // S Bit. The type is bool.
    Sbit interface{}

    // Sd Bit. The type is bool.
    SdBit interface{}

    // Y Bit. The type is bool.
    Ybit interface{}

    // Pref L. The type is interface{} with range: 0..255.
    PrefL interface{}

    // Pref R. The type is interface{} with range: 0..255.
    PrefR interface{}

    // Pref S. The type is interface{} with range: 0..255.
    PrefS interface{}

    // Pref Y. The type is interface{} with range: 0..255.
    PrefY interface{}

    // PCE Scope Information. The type is interface{} with range: 0..4294967295.
    AllScopeInfoBits interface{}
}

func (pcedScope *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope) GetEntityData() *types.CommonEntityData {
    pcedScope.EntityData.YFilter = pcedScope.YFilter
    pcedScope.EntityData.YangName = "pced-scope"
    pcedScope.EntityData.BundleName = "cisco_ios_xr"
    pcedScope.EntityData.ParentYangName = "pcedtlv"
    pcedScope.EntityData.SegmentPath = "pced-scope"
    pcedScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedScope.EntityData.Children = types.NewOrderedMap()
    pcedScope.EntityData.Leafs = types.NewOrderedMap()
    pcedScope.EntityData.Leafs.Append("lbit", types.YLeaf{"Lbit", pcedScope.Lbit})
    pcedScope.EntityData.Leafs.Append("rbit", types.YLeaf{"Rbit", pcedScope.Rbit})
    pcedScope.EntityData.Leafs.Append("rd-bit", types.YLeaf{"RdBit", pcedScope.RdBit})
    pcedScope.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", pcedScope.Sbit})
    pcedScope.EntityData.Leafs.Append("sd-bit", types.YLeaf{"SdBit", pcedScope.SdBit})
    pcedScope.EntityData.Leafs.Append("ybit", types.YLeaf{"Ybit", pcedScope.Ybit})
    pcedScope.EntityData.Leafs.Append("pref-l", types.YLeaf{"PrefL", pcedScope.PrefL})
    pcedScope.EntityData.Leafs.Append("pref-r", types.YLeaf{"PrefR", pcedScope.PrefR})
    pcedScope.EntityData.Leafs.Append("pref-s", types.YLeaf{"PrefS", pcedScope.PrefS})
    pcedScope.EntityData.Leafs.Append("pref-y", types.YLeaf{"PrefY", pcedScope.PrefY})
    pcedScope.EntityData.Leafs.Append("all-scope-info-bits", types.YLeaf{"AllScopeInfoBits", pcedScope.AllScopeInfoBits})

    pcedScope.EntityData.YListKeys = []string {}

    return &(pcedScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv
// SR Algorithm TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Algorithms. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue.
    SrAlgoValue []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
}

func (srAlgoTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv) GetEntityData() *types.CommonEntityData {
    srAlgoTlv.EntityData.YFilter = srAlgoTlv.YFilter
    srAlgoTlv.EntityData.YangName = "sr-algo-tlv"
    srAlgoTlv.EntityData.BundleName = "cisco_ios_xr"
    srAlgoTlv.EntityData.ParentYangName = "opaque-ritlv"
    srAlgoTlv.EntityData.SegmentPath = "sr-algo-tlv"
    srAlgoTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoTlv.EntityData.Children = types.NewOrderedMap()
    srAlgoTlv.EntityData.Children.Append("sr-algo-value", types.YChild{"SrAlgoValue", nil})
    for i := range srAlgoTlv.SrAlgoValue {
        srAlgoTlv.EntityData.Children.Append(types.GetSegmentPath(srAlgoTlv.SrAlgoValue[i]), types.YChild{"SrAlgoValue", srAlgoTlv.SrAlgoValue[i]})
    }
    srAlgoTlv.EntityData.Leafs = types.NewOrderedMap()

    srAlgoTlv.EntityData.YListKeys = []string {}

    return &(srAlgoTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
// SR Algorithms
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..255.
    Entry interface{}
}

func (srAlgoValue *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue) GetEntityData() *types.CommonEntityData {
    srAlgoValue.EntityData.YFilter = srAlgoValue.YFilter
    srAlgoValue.EntityData.YangName = "sr-algo-value"
    srAlgoValue.EntityData.BundleName = "cisco_ios_xr"
    srAlgoValue.EntityData.ParentYangName = "sr-algo-tlv"
    srAlgoValue.EntityData.SegmentPath = "sr-algo-value"
    srAlgoValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoValue.EntityData.Children = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srAlgoValue.Entry})

    srAlgoValue.EntityData.YListKeys = []string {}

    return &(srAlgoValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv
// SR Range TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    SrRangeLength interface{}

    // SR Range Size. The type is interface{} with range: 0..4294967295.
    SrRangeSize interface{}

    // SID sub-TLV.
    Sidtlv Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
}

func (srRangeTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv) GetEntityData() *types.CommonEntityData {
    srRangeTlv.EntityData.YFilter = srRangeTlv.YFilter
    srRangeTlv.EntityData.YangName = "sr-range-tlv"
    srRangeTlv.EntityData.BundleName = "cisco_ios_xr"
    srRangeTlv.EntityData.ParentYangName = "opaque-ritlv"
    srRangeTlv.EntityData.SegmentPath = "sr-range-tlv"
    srRangeTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srRangeTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srRangeTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srRangeTlv.EntityData.Children = types.NewOrderedMap()
    srRangeTlv.EntityData.Children.Append("sidtlv", types.YChild{"Sidtlv", &srRangeTlv.Sidtlv})
    srRangeTlv.EntityData.Leafs = types.NewOrderedMap()
    srRangeTlv.EntityData.Leafs.Append("sr-range-length", types.YLeaf{"SrRangeLength", srRangeTlv.SrRangeLength})
    srRangeTlv.EntityData.Leafs.Append("sr-range-size", types.YLeaf{"SrRangeSize", srRangeTlv.SrRangeSize})

    srRangeTlv.EntityData.YListKeys = []string {}

    return &(srRangeTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
// SID sub-TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of sub-TLV. The type is interface{} with range: 0..65535.
    SrSidLength interface{}

    // SID Value. The type is interface{} with range: 0..4294967295.
    SrSidValue interface{}
}

func (sidtlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv) GetEntityData() *types.CommonEntityData {
    sidtlv.EntityData.YFilter = sidtlv.YFilter
    sidtlv.EntityData.YangName = "sidtlv"
    sidtlv.EntityData.BundleName = "cisco_ios_xr"
    sidtlv.EntityData.ParentYangName = "sr-range-tlv"
    sidtlv.EntityData.SegmentPath = "sidtlv"
    sidtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sidtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sidtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sidtlv.EntityData.Children = types.NewOrderedMap()
    sidtlv.EntityData.Leafs = types.NewOrderedMap()
    sidtlv.EntityData.Leafs.Append("sr-sid-length", types.YLeaf{"SrSidLength", sidtlv.SrSidLength})
    sidtlv.EntityData.Leafs.Append("sr-sid-value", types.YLeaf{"SrSidValue", sidtlv.SrSidValue})

    sidtlv.EntityData.YListKeys = []string {}

    return &(sidtlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
// Node MSD TLV
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    NodeMsdtlvLength interface{}

    // Node MSD Subtypes.
    NodeMsdSubTypes Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
}

func (nodeMsdtlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv) GetEntityData() *types.CommonEntityData {
    nodeMsdtlv.EntityData.YFilter = nodeMsdtlv.YFilter
    nodeMsdtlv.EntityData.YangName = "node-msdtlv"
    nodeMsdtlv.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdtlv.EntityData.ParentYangName = "opaque-ritlv"
    nodeMsdtlv.EntityData.SegmentPath = "node-msdtlv"
    nodeMsdtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdtlv.EntityData.Children = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Children.Append("node-msd-sub-types", types.YChild{"NodeMsdSubTypes", &nodeMsdtlv.NodeMsdSubTypes})
    nodeMsdtlv.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Leafs.Append("node-msdtlv-length", types.YLeaf{"NodeMsdtlvLength", nodeMsdtlv.NodeMsdtlvLength})

    nodeMsdtlv.EntityData.YListKeys = []string {}

    return &(nodeMsdtlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
// Node MSD Subtypes
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MSD SubType. The type is interface{} with range: 0..255.
    MsdSubType interface{}

    // MSD Value. The type is interface{} with range: 0..255.
    MsdValue interface{}
}

func (nodeMsdSubTypes *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes) GetEntityData() *types.CommonEntityData {
    nodeMsdSubTypes.EntityData.YFilter = nodeMsdSubTypes.YFilter
    nodeMsdSubTypes.EntityData.YangName = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdSubTypes.EntityData.ParentYangName = "node-msdtlv"
    nodeMsdSubTypes.EntityData.SegmentPath = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdSubTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdSubTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdSubTypes.EntityData.Children = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-sub-type", types.YLeaf{"MsdSubType", nodeMsdSubTypes.MsdSubType})
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-value", types.YLeaf{"MsdValue", nodeMsdSubTypes.MsdValue})

    nodeMsdSubTypes.EntityData.YListKeys = []string {}

    return &(nodeMsdSubTypes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType
// Extende Prefix LSA type
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
}

func (opaqueEpLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType) GetEntityData() *types.CommonEntityData {
    opaqueEpLsaType.EntityData.YFilter = opaqueEpLsaType.YFilter
    opaqueEpLsaType.EntityData.YangName = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueEpLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueEpLsaType.EntityData.SegmentPath = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueEpLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueEpLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueEpLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueEpLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueEpLsaType.Tlv {
        opaqueEpLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueEpLsaType.Tlv[i]), types.YChild{"Tlv", opaqueEpLsaType.Tlv[i]})
    }
    opaqueEpLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueEpLsaType.EntityData.YListKeys = []string {}

    return &(opaqueEpLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-ep-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
// Extended Link LSA type
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
}

func (opaqueElLsaType *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType) GetEntityData() *types.CommonEntityData {
    opaqueElLsaType.EntityData.YFilter = opaqueElLsaType.YFilter
    opaqueElLsaType.EntityData.YangName = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueElLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueElLsaType.EntityData.SegmentPath = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueElLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueElLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueElLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueElLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueElLsaType.Tlv {
        opaqueElLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueElLsaType.Tlv[i]), types.YChild{"Tlv", opaqueElLsaType.Tlv[i]})
    }
    opaqueElLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueElLsaType.EntityData.YListKeys = []string {}

    return &(opaqueElLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-el-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries
// Link state advertisement summary table
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA summary information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary.
    LsaSummary []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary
}

func (lsaSummaries *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries) GetEntityData() *types.CommonEntityData {
    lsaSummaries.EntityData.YFilter = lsaSummaries.YFilter
    lsaSummaries.EntityData.YangName = "lsa-summaries"
    lsaSummaries.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaries.EntityData.ParentYangName = "database-area"
    lsaSummaries.EntityData.SegmentPath = "lsa-summaries"
    lsaSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaries.EntityData.Children = types.NewOrderedMap()
    lsaSummaries.EntityData.Children.Append("lsa-summary", types.YChild{"LsaSummary", nil})
    for i := range lsaSummaries.LsaSummary {
        lsaSummaries.EntityData.Children.Append(types.GetSegmentPath(lsaSummaries.LsaSummary[i]), types.YChild{"LsaSummary", lsaSummaries.LsaSummary[i]})
    }
    lsaSummaries.EntityData.Leafs = types.NewOrderedMap()

    lsaSummaries.EntityData.YListKeys = []string {}

    return &(lsaSummaries.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary
// LSA summary information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Number of links. The type is interface{} with range: 0..65535.
    LinkCount interface{}

    // LSA header information.
    LsaHeader Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader
}

func (lsaSummary *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary) GetEntityData() *types.CommonEntityData {
    lsaSummary.EntityData.YFilter = lsaSummary.YFilter
    lsaSummary.EntityData.YangName = "lsa-summary"
    lsaSummary.EntityData.BundleName = "cisco_ios_xr"
    lsaSummary.EntityData.ParentYangName = "lsa-summaries"
    lsaSummary.EntityData.SegmentPath = "lsa-summary"
    lsaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummary.EntityData.Children = types.NewOrderedMap()
    lsaSummary.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummary.LsaHeader})
    lsaSummary.EntityData.Leafs = types.NewOrderedMap()
    lsaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsaSummary.AreaId})
    lsaSummary.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaSummary.LsType})
    lsaSummary.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaSummary.LsId})
    lsaSummary.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaSummary.AdvertisingRouter})
    lsaSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummary.InterfaceName})
    lsaSummary.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", lsaSummary.ExternalTag})
    lsaSummary.EntityData.Leafs.Append("link-count", types.YLeaf{"LinkCount", lsaSummary.LinkCount})

    lsaSummary.EntityData.YListKeys = []string {}

    return &(lsaSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader
// LSA header information
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_DefaultVrf_Database_DatabaseAreas_DatabaseArea_LsaSummaries_LsaSummary_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries
// Link State database summary table
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link State Database summary for a particular area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary.
    DatabaseSummary []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary
}

func (databaseSummaries *Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries) GetEntityData() *types.CommonEntityData {
    databaseSummaries.EntityData.YFilter = databaseSummaries.YFilter
    databaseSummaries.EntityData.YangName = "database-summaries"
    databaseSummaries.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaries.EntityData.ParentYangName = "database"
    databaseSummaries.EntityData.SegmentPath = "database-summaries"
    databaseSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaries.EntityData.Children = types.NewOrderedMap()
    databaseSummaries.EntityData.Children.Append("database-summary", types.YChild{"DatabaseSummary", nil})
    for i := range databaseSummaries.DatabaseSummary {
        databaseSummaries.EntityData.Children.Append(types.GetSegmentPath(databaseSummaries.DatabaseSummary[i]), types.YChild{"DatabaseSummary", databaseSummaries.DatabaseSummary[i]})
    }
    databaseSummaries.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaries.EntityData.YListKeys = []string {}

    return &(databaseSummaries.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary
// Link State Database summary for a particular
// area
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Area id. The type is string with length: 0..16.
    DbaseSumAreaIdString interface{}

    // Summary counters for Area scope LSAs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter.
    AreaLsaCounter []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter
}

func (databaseSummary *Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary) GetEntityData() *types.CommonEntityData {
    databaseSummary.EntityData.YFilter = databaseSummary.YFilter
    databaseSummary.EntityData.YangName = "database-summary"
    databaseSummary.EntityData.BundleName = "cisco_ios_xr"
    databaseSummary.EntityData.ParentYangName = "database-summaries"
    databaseSummary.EntityData.SegmentPath = "database-summary" + types.AddKeyToken(databaseSummary.AreaId, "area-id")
    databaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummary.EntityData.Children = types.NewOrderedMap()
    databaseSummary.EntityData.Children.Append("area-lsa-counter", types.YChild{"AreaLsaCounter", nil})
    for i := range databaseSummary.AreaLsaCounter {
        databaseSummary.EntityData.Children.Append(types.GetSegmentPath(databaseSummary.AreaLsaCounter[i]), types.YChild{"AreaLsaCounter", databaseSummary.AreaLsaCounter[i]})
    }
    databaseSummary.EntityData.Leafs = types.NewOrderedMap()
    databaseSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", databaseSummary.AreaId})
    databaseSummary.EntityData.Leafs.Append("dbase-sum-area-id-string", types.YLeaf{"DbaseSumAreaIdString", databaseSummary.DbaseSumAreaIdString})

    databaseSummary.EntityData.YListKeys = []string {"AreaId"}

    return &(databaseSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter
// Summary counters for Area scope LSAs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of LSAs. The type is Lsa.
    LsaType interface{}

    // Number of LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaCount interface{}

    // Number of deleted LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaDeleteCount interface{}

    // Number of MaxAged LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaMaxageCount interface{}

    // Number of self-generated LSAs. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaSelfCount interface{}
}

func (areaLsaCounter *Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaries_DatabaseSummary_AreaLsaCounter) GetEntityData() *types.CommonEntityData {
    areaLsaCounter.EntityData.YFilter = areaLsaCounter.YFilter
    areaLsaCounter.EntityData.YangName = "area-lsa-counter"
    areaLsaCounter.EntityData.BundleName = "cisco_ios_xr"
    areaLsaCounter.EntityData.ParentYangName = "database-summary"
    areaLsaCounter.EntityData.SegmentPath = "area-lsa-counter"
    areaLsaCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaLsaCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaLsaCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaLsaCounter.EntityData.Children = types.NewOrderedMap()
    areaLsaCounter.EntityData.Leafs = types.NewOrderedMap()
    areaLsaCounter.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", areaLsaCounter.LsaType})
    areaLsaCounter.EntityData.Leafs.Append("lsa-count", types.YLeaf{"LsaCount", areaLsaCounter.LsaCount})
    areaLsaCounter.EntityData.Leafs.Append("lsa-delete-count", types.YLeaf{"LsaDeleteCount", areaLsaCounter.LsaDeleteCount})
    areaLsaCounter.EntityData.Leafs.Append("lsa-maxage-count", types.YLeaf{"LsaMaxageCount", areaLsaCounter.LsaMaxageCount})
    areaLsaCounter.EntityData.Leafs.Append("lsa-self-count", types.YLeaf{"LsaSelfCount", areaLsaCounter.LsaSelfCount})

    areaLsaCounter.EntityData.YListKeys = []string {}

    return &(areaLsaCounter.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs
// Link State Database summary for the AS
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary counter for AS scope LSAs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs_AsLsaCounter.
    AsLsaCounter []*Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs_AsLsaCounter
}

func (databaseSummaryAs *Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs) GetEntityData() *types.CommonEntityData {
    databaseSummaryAs.EntityData.YFilter = databaseSummaryAs.YFilter
    databaseSummaryAs.EntityData.YangName = "database-summary-as"
    databaseSummaryAs.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaryAs.EntityData.ParentYangName = "database"
    databaseSummaryAs.EntityData.SegmentPath = "database-summary-as"
    databaseSummaryAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaryAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaryAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaryAs.EntityData.Children = types.NewOrderedMap()
    databaseSummaryAs.EntityData.Children.Append("as-lsa-counter", types.YChild{"AsLsaCounter", nil})
    for i := range databaseSummaryAs.AsLsaCounter {
        databaseSummaryAs.EntityData.Children.Append(types.GetSegmentPath(databaseSummaryAs.AsLsaCounter[i]), types.YChild{"AsLsaCounter", databaseSummaryAs.AsLsaCounter[i]})
    }
    databaseSummaryAs.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaryAs.EntityData.YListKeys = []string {}

    return &(databaseSummaryAs.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs_AsLsaCounter
// Summary counter for AS scope LSAs
type Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs_AsLsaCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of LSAs. The type is Lsa.
    LsaType interface{}

    // Number of LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaCount interface{}

    // Number of deleted LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaDeleteCount interface{}

    // Number of MaxAged LSAs of this type. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaMaxageCount interface{}

    // Number of self-generated LSAs. The type is interface{} with range:
    // -2147483648..2147483647.
    LsaSelfCount interface{}
}

func (asLsaCounter *Ospf_Processes_Process_DefaultVrf_Database_DatabaseSummaryAs_AsLsaCounter) GetEntityData() *types.CommonEntityData {
    asLsaCounter.EntityData.YFilter = asLsaCounter.YFilter
    asLsaCounter.EntityData.YangName = "as-lsa-counter"
    asLsaCounter.EntityData.BundleName = "cisco_ios_xr"
    asLsaCounter.EntityData.ParentYangName = "database-summary-as"
    asLsaCounter.EntityData.SegmentPath = "as-lsa-counter"
    asLsaCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asLsaCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asLsaCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asLsaCounter.EntityData.Children = types.NewOrderedMap()
    asLsaCounter.EntityData.Leafs = types.NewOrderedMap()
    asLsaCounter.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", asLsaCounter.LsaType})
    asLsaCounter.EntityData.Leafs.Append("lsa-count", types.YLeaf{"LsaCount", asLsaCounter.LsaCount})
    asLsaCounter.EntityData.Leafs.Append("lsa-delete-count", types.YLeaf{"LsaDeleteCount", asLsaCounter.LsaDeleteCount})
    asLsaCounter.EntityData.Leafs.Append("lsa-maxage-count", types.YLeaf{"LsaMaxageCount", asLsaCounter.LsaMaxageCount})
    asLsaCounter.EntityData.Leafs.Append("lsa-self-count", types.YLeaf{"LsaSelfCount", asLsaCounter.LsaSelfCount})

    asLsaCounter.EntityData.YListKeys = []string {}

    return &(asLsaCounter.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas
// Link State Database Table
type Ospf_Processes_Process_DefaultVrf_Database_Lsas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link State Advertisement information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa.
    Lsa []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa
}

func (lsas *Ospf_Processes_Process_DefaultVrf_Database_Lsas) GetEntityData() *types.CommonEntityData {
    lsas.EntityData.YFilter = lsas.YFilter
    lsas.EntityData.YangName = "lsas"
    lsas.EntityData.BundleName = "cisco_ios_xr"
    lsas.EntityData.ParentYangName = "database"
    lsas.EntityData.SegmentPath = "lsas"
    lsas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsas.EntityData.Children = types.NewOrderedMap()
    lsas.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsas.Lsa {
        lsas.EntityData.Children.Append(types.GetSegmentPath(lsas.Lsa[i]), types.YChild{"Lsa", lsas.Lsa[i]})
    }
    lsas.EntityData.Leafs = types.NewOrderedMap()

    lsas.EntityData.YListKeys = []string {}

    return &(lsas.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa
// Link State Advertisement information
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Header information.
    LsaHeader Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaHeader

    // Detailed LSA Information.
    LsaDetailData Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData

    // Information pertaining to a specific LSA type.
    LsaInternalData Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData
}

func (lsa *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsas"
    lsa.EntityData.SegmentPath = "lsa"
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsa.LsaHeader})
    lsa.EntityData.Children.Append("lsa-detail-data", types.YChild{"LsaDetailData", &lsa.LsaDetailData})
    lsa.EntityData.Children.Append("lsa-internal-data", types.YChild{"LsaInternalData", &lsa.LsaInternalData})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaHeader
// Header information
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData
// Detailed LSA Information
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, type of service capable indicated by LSA's option field. The type
    // is bool.
    TosCapable interface{}

    // If true,  capable of type 7 to 5 translation indicated by LSA's option
    // field. The type is bool.
    NssaTranslation interface{}

    // If true, capable of demand circuit as indicated by LSA's option field. The
    // type is bool.
    DemandCircuit interface{}

    // if true, DN bit set on the summary LSA indicated by LSA's option field. The
    // type is bool.
    DnBit interface{}

    // Due time for rate-limit timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRateLimitDueTime interface{}

    // Clock stamp since boot. The type is interface{} with range:
    // 0..18446744073709551615.
    LsadbBaseClock interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    RoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    AdvertisingRouterReachable interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    Length interface{}

    // Summary Origin. The type is interface{} with range: 0..65535.
    SumOrigin interface{}

    // External Origin. The type is interface{} with range: 0..65535.
    AseOrigin interface{}

    // Not In Sync With Active. The type is interface{} with range: 0..255.
    InSync interface{}

    // Current LSA prefix priority. The type is interface{} with range: 0..255.
    LsaPrefixPriority interface{}

    // New LSA prefix priority. The type is interface{} with range: 0..255.
    NewLsaPrefixPriority interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // LSA throttle timer table information.
    LsaThrottleTimer Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer

    // Time LSA was last updated.
    LsaLastUpdatedTime Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime

    // Current time stamp.
    LsadbBaseTimeStamp Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp

    // Reason why LSA is not deleted.
    NotDelete Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_NotDelete
}

func (lsaDetailData *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData) GetEntityData() *types.CommonEntityData {
    lsaDetailData.EntityData.YFilter = lsaDetailData.YFilter
    lsaDetailData.EntityData.YangName = "lsa-detail-data"
    lsaDetailData.EntityData.BundleName = "cisco_ios_xr"
    lsaDetailData.EntityData.ParentYangName = "lsa"
    lsaDetailData.EntityData.SegmentPath = "lsa-detail-data"
    lsaDetailData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetailData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetailData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetailData.EntityData.Children = types.NewOrderedMap()
    lsaDetailData.EntityData.Children.Append("lsa-throttle-timer", types.YChild{"LsaThrottleTimer", &lsaDetailData.LsaThrottleTimer})
    lsaDetailData.EntityData.Children.Append("lsa-last-updated-time", types.YChild{"LsaLastUpdatedTime", &lsaDetailData.LsaLastUpdatedTime})
    lsaDetailData.EntityData.Children.Append("lsadb-base-time-stamp", types.YChild{"LsadbBaseTimeStamp", &lsaDetailData.LsadbBaseTimeStamp})
    lsaDetailData.EntityData.Children.Append("not-delete", types.YChild{"NotDelete", &lsaDetailData.NotDelete})
    lsaDetailData.EntityData.Leafs = types.NewOrderedMap()
    lsaDetailData.EntityData.Leafs.Append("tos-capable", types.YLeaf{"TosCapable", lsaDetailData.TosCapable})
    lsaDetailData.EntityData.Leafs.Append("nssa-translation", types.YLeaf{"NssaTranslation", lsaDetailData.NssaTranslation})
    lsaDetailData.EntityData.Leafs.Append("demand-circuit", types.YLeaf{"DemandCircuit", lsaDetailData.DemandCircuit})
    lsaDetailData.EntityData.Leafs.Append("dn-bit", types.YLeaf{"DnBit", lsaDetailData.DnBit})
    lsaDetailData.EntityData.Leafs.Append("lsa-rate-limit-due-time", types.YLeaf{"LsaRateLimitDueTime", lsaDetailData.LsaRateLimitDueTime})
    lsaDetailData.EntityData.Leafs.Append("lsadb-base-clock", types.YLeaf{"LsadbBaseClock", lsaDetailData.LsadbBaseClock})
    lsaDetailData.EntityData.Leafs.Append("routing-bit", types.YLeaf{"RoutingBit", lsaDetailData.RoutingBit})
    lsaDetailData.EntityData.Leafs.Append("advertising-router-reachable", types.YLeaf{"AdvertisingRouterReachable", lsaDetailData.AdvertisingRouterReachable})
    lsaDetailData.EntityData.Leafs.Append("length", types.YLeaf{"Length", lsaDetailData.Length})
    lsaDetailData.EntityData.Leafs.Append("sum-origin", types.YLeaf{"SumOrigin", lsaDetailData.SumOrigin})
    lsaDetailData.EntityData.Leafs.Append("ase-origin", types.YLeaf{"AseOrigin", lsaDetailData.AseOrigin})
    lsaDetailData.EntityData.Leafs.Append("in-sync", types.YLeaf{"InSync", lsaDetailData.InSync})
    lsaDetailData.EntityData.Leafs.Append("lsa-prefix-priority", types.YLeaf{"LsaPrefixPriority", lsaDetailData.LsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("new-lsa-prefix-priority", types.YLeaf{"NewLsaPrefixPriority", lsaDetailData.NewLsaPrefixPriority})
    lsaDetailData.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetailData.LsaFloodRequiredPostFailOver})

    lsaDetailData.EntityData.YListKeys = []string {}

    return &(lsaDetailData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer
// LSA throttle timer table information
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timer table. The type is TimerTable.
    TimerLocation interface{}

    // Timer type. The type is Timer.
    TimerType interface{}

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // Last Second table index processed. The type is interface{} with range:
    // 0..255.
    LastInstSecondTableIndex interface{}

    // Last Minute table index processed. The type is interface{} with range:
    // 0..255.
    LastInstMinuteTableIndex interface{}
}

func (lsaThrottleTimer *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaThrottleTimer) GetEntityData() *types.CommonEntityData {
    lsaThrottleTimer.EntityData.YFilter = lsaThrottleTimer.YFilter
    lsaThrottleTimer.EntityData.YangName = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.BundleName = "cisco_ios_xr"
    lsaThrottleTimer.EntityData.ParentYangName = "lsa-detail-data"
    lsaThrottleTimer.EntityData.SegmentPath = "lsa-throttle-timer"
    lsaThrottleTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaThrottleTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaThrottleTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaThrottleTimer.EntityData.Children = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs = types.NewOrderedMap()
    lsaThrottleTimer.EntityData.Leafs.Append("timer-location", types.YLeaf{"TimerLocation", lsaThrottleTimer.TimerLocation})
    lsaThrottleTimer.EntityData.Leafs.Append("timer-type", types.YLeaf{"TimerType", lsaThrottleTimer.TimerType})
    lsaThrottleTimer.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaThrottleTimer.SecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaThrottleTimer.MinuteTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-second-table-index", types.YLeaf{"LastInstSecondTableIndex", lsaThrottleTimer.LastInstSecondTableIndex})
    lsaThrottleTimer.EntityData.Leafs.Append("last-inst-minute-table-index", types.YLeaf{"LastInstMinuteTableIndex", lsaThrottleTimer.LastInstMinuteTableIndex})

    lsaThrottleTimer.EntityData.YListKeys = []string {}

    return &(lsaThrottleTimer.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime
// Time LSA was last updated
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsaLastUpdatedTime *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsaLastUpdatedTime) GetEntityData() *types.CommonEntityData {
    lsaLastUpdatedTime.EntityData.YFilter = lsaLastUpdatedTime.YFilter
    lsaLastUpdatedTime.EntityData.YangName = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.BundleName = "cisco_ios_xr"
    lsaLastUpdatedTime.EntityData.ParentYangName = "lsa-detail-data"
    lsaLastUpdatedTime.EntityData.SegmentPath = "lsa-last-updated-time"
    lsaLastUpdatedTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaLastUpdatedTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaLastUpdatedTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaLastUpdatedTime.EntityData.Children = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs = types.NewOrderedMap()
    lsaLastUpdatedTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsaLastUpdatedTime.Second})
    lsaLastUpdatedTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsaLastUpdatedTime.Nanosecond})

    lsaLastUpdatedTime.EntityData.YListKeys = []string {}

    return &(lsaLastUpdatedTime.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp
// Current time stamp
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second. The type is interface{} with range: 0..4294967295.
    Second interface{}

    // Nanosecond. The type is interface{} with range: 0..4294967295.
    Nanosecond interface{}
}

func (lsadbBaseTimeStamp *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_LsadbBaseTimeStamp) GetEntityData() *types.CommonEntityData {
    lsadbBaseTimeStamp.EntityData.YFilter = lsadbBaseTimeStamp.YFilter
    lsadbBaseTimeStamp.EntityData.YangName = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.BundleName = "cisco_ios_xr"
    lsadbBaseTimeStamp.EntityData.ParentYangName = "lsa-detail-data"
    lsadbBaseTimeStamp.EntityData.SegmentPath = "lsadb-base-time-stamp"
    lsadbBaseTimeStamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsadbBaseTimeStamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsadbBaseTimeStamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsadbBaseTimeStamp.EntityData.Children = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs = types.NewOrderedMap()
    lsadbBaseTimeStamp.EntityData.Leafs.Append("second", types.YLeaf{"Second", lsadbBaseTimeStamp.Second})
    lsadbBaseTimeStamp.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lsadbBaseTimeStamp.Nanosecond})

    lsadbBaseTimeStamp.EntityData.YListKeys = []string {}

    return &(lsadbBaseTimeStamp.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_NotDelete
// Reason why LSA is not deleted
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_NotDelete struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    NoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    NeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table. The type is bool.
    RoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty. The type is bool.
    Acknowledgement interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    MaximumAge interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    PartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    FloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    NsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending summary
    // LSA originating. The type is bool.
    SumOrigPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}
}

func (notDelete *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaDetailData_NotDelete) GetEntityData() *types.CommonEntityData {
    notDelete.EntityData.YFilter = notDelete.YFilter
    notDelete.EntityData.YangName = "not-delete"
    notDelete.EntityData.BundleName = "cisco_ios_xr"
    notDelete.EntityData.ParentYangName = "lsa-detail-data"
    notDelete.EntityData.SegmentPath = "not-delete"
    notDelete.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notDelete.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notDelete.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notDelete.EntityData.Children = types.NewOrderedMap()
    notDelete.EntityData.Leafs = types.NewOrderedMap()
    notDelete.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", notDelete.FreeTime})
    notDelete.EntityData.Leafs.Append("no-delete", types.YLeaf{"NoDelete", notDelete.NoDelete})
    notDelete.EntityData.Leafs.Append("neighbor-exchange", types.YLeaf{"NeighborExchange", notDelete.NeighborExchange})
    notDelete.EntityData.Leafs.Append("routing-table", types.YLeaf{"RoutingTable", notDelete.RoutingTable})
    notDelete.EntityData.Leafs.Append("acknowledgement", types.YLeaf{"Acknowledgement", notDelete.Acknowledgement})
    notDelete.EntityData.Leafs.Append("maximum-age", types.YLeaf{"MaximumAge", notDelete.MaximumAge})
    notDelete.EntityData.Leafs.Append("partial-spf", types.YLeaf{"PartialSpf", notDelete.PartialSpf})
    notDelete.EntityData.Leafs.Append("flood-pending", types.YLeaf{"FloodPending", notDelete.FloodPending})
    notDelete.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", notDelete.RateLimit})
    notDelete.EntityData.Leafs.Append("nsr-ack-pending", types.YLeaf{"NsrAckPending", notDelete.NsrAckPending})
    notDelete.EntityData.Leafs.Append("sum-orig-pending", types.YLeaf{"SumOrigPending", notDelete.SumOrigPending})
    notDelete.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", notDelete.NsrFloodRequired})

    notDelete.EntityData.YListKeys = []string {}

    return &(notDelete.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData
// Information pertaining to a specific LSA type
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // InternalLSAType. The type is OspfInternalLsaTypes.
    InternalLsaType interface{}

    // Router LSA.
    RouterLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType

    // Summary LSA.
    SummaryLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType

    // External LSA.
    ExternalLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType

    // Opaque-Link LSA.
    OpaqueLinkLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType

    // Opaque-Area, opaque type 1 LSA.
    OpaqueMplsTeLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType

    // Opaque-link, opaque type 3 Grace LSA.
    OpaqueGraceLsa Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa

    // Opaque Router Information LSA.
    OpaqueRouterInfoLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType

    // Extende Prefix LSA type.
    OpaqueEpLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType

    // Extended Link LSA type.
    OpaqueElLsaType Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
}

func (lsaInternalData *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData) GetEntityData() *types.CommonEntityData {
    lsaInternalData.EntityData.YFilter = lsaInternalData.YFilter
    lsaInternalData.EntityData.YangName = "lsa-internal-data"
    lsaInternalData.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalData.EntityData.ParentYangName = "lsa"
    lsaInternalData.EntityData.SegmentPath = "lsa-internal-data"
    lsaInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalData.EntityData.Children = types.NewOrderedMap()
    lsaInternalData.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInternalData.RouterLsaType})
    lsaInternalData.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInternalData.NetworkLsaType})
    lsaInternalData.EntityData.Children.Append("summary-lsa-type", types.YChild{"SummaryLsaType", &lsaInternalData.SummaryLsaType})
    lsaInternalData.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInternalData.ExternalLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-link-lsa-type", types.YChild{"OpaqueLinkLsaType", &lsaInternalData.OpaqueLinkLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-mpls-te-lsa-type", types.YChild{"OpaqueMplsTeLsaType", &lsaInternalData.OpaqueMplsTeLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-grace-lsa", types.YChild{"OpaqueGraceLsa", &lsaInternalData.OpaqueGraceLsa})
    lsaInternalData.EntityData.Children.Append("opaque-router-info-lsa-type", types.YChild{"OpaqueRouterInfoLsaType", &lsaInternalData.OpaqueRouterInfoLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-ep-lsa-type", types.YChild{"OpaqueEpLsaType", &lsaInternalData.OpaqueEpLsaType})
    lsaInternalData.EntityData.Children.Append("opaque-el-lsa-type", types.YChild{"OpaqueElLsaType", &lsaInternalData.OpaqueElLsaType})
    lsaInternalData.EntityData.Leafs = types.NewOrderedMap()
    lsaInternalData.EntityData.Leafs.Append("internal-lsa-type", types.YLeaf{"InternalLsaType", lsaInternalData.InternalLsaType})

    lsaInternalData.EntityData.YListKeys = []string {}

    return &(lsaInternalData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType
// Router LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If True, router is an Autonomous system Border Router. The type is bool.
    RouterAsbr interface{}

    // If True, router is an Area Border Router. The type is bool.
    RouterAbr interface{}

    // If true, internal LSA. The type is bool.
    InternalLsa interface{}

    // List of links in this LSA. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link.
    Link []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link

    // List of links for internal LSA. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink.
    InternalLink []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
}

func (routerLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-internal-data"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Children.Append("internal-link", types.YChild{"InternalLink", nil})
    for i := range routerLsaType.InternalLink {
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.InternalLink[i]), types.YChild{"InternalLink", routerLsaType.InternalLink[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-asbr", types.YLeaf{"RouterAsbr", routerLsaType.RouterAsbr})
    routerLsaType.EntityData.Leafs.Append("router-abr", types.YLeaf{"RouterAbr", routerLsaType.RouterAbr})
    routerLsaType.EntityData.Leafs.Append("internal-lsa", types.YLeaf{"InternalLsa", routerLsaType.InternalLsa})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link
// List of links in this LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos.
    LinkTos []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
}

func (link *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range link.LinkTos {
        link.EntityData.Children.Append(types.GetSegmentPath(link.LinkTos[i]), types.YChild{"LinkTos", link.LinkTos[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", link.LinkId})
    link.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", link.LinkData})
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_Link_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink
// List of links for internal LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkId interface{}

    // Link Data. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LinkData interface{}

    // Type of link. The type is OspfLinkTypes.
    LinkType interface{}

    // Cost for using this link. The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // List of type of service metrics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos.
    LinkTos []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
}

func (internalLink *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink) GetEntityData() *types.CommonEntityData {
    internalLink.EntityData.YFilter = internalLink.YFilter
    internalLink.EntityData.YangName = "internal-link"
    internalLink.EntityData.BundleName = "cisco_ios_xr"
    internalLink.EntityData.ParentYangName = "router-lsa-type"
    internalLink.EntityData.SegmentPath = "internal-link"
    internalLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalLink.EntityData.Children = types.NewOrderedMap()
    internalLink.EntityData.Children.Append("link-tos", types.YChild{"LinkTos", nil})
    for i := range internalLink.LinkTos {
        internalLink.EntityData.Children.Append(types.GetSegmentPath(internalLink.LinkTos[i]), types.YChild{"LinkTos", internalLink.LinkTos[i]})
    }
    internalLink.EntityData.Leafs = types.NewOrderedMap()
    internalLink.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", internalLink.LinkId})
    internalLink.EntityData.Leafs.Append("link-data", types.YLeaf{"LinkData", internalLink.LinkData})
    internalLink.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", internalLink.LinkType})
    internalLink.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", internalLink.LinkMetric})

    internalLink.EntityData.YListKeys = []string {}

    return &(internalLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos
// List of type of service metrics
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Service. The type is interface{} with range: 0..65535.
    RouterTos interface{}

    // Type of service specific metric. The type is interface{} with range:
    // 0..65535.
    TosCost interface{}
}

func (linkTos *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_RouterLsaType_InternalLink_LinkTos) GetEntityData() *types.CommonEntityData {
    linkTos.EntityData.YFilter = linkTos.YFilter
    linkTos.EntityData.YangName = "link-tos"
    linkTos.EntityData.BundleName = "cisco_ios_xr"
    linkTos.EntityData.ParentYangName = "internal-link"
    linkTos.EntityData.SegmentPath = "link-tos"
    linkTos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkTos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkTos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkTos.EntityData.Children = types.NewOrderedMap()
    linkTos.EntityData.Leafs = types.NewOrderedMap()
    linkTos.EntityData.Leafs.Append("router-tos", types.YLeaf{"RouterTos", linkTos.RouterTos})
    linkTos.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", linkTos.TosCost})

    linkTos.EntityData.YListKeys = []string {}

    return &(linkTos.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType
// Network LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network prefix length. The type is interface{} with range: 0..4294967295.
    NetworkPrefixLength interface{}

    // Neighbor router list. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter.
    NeighborRouter []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
}

func (networkLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("neighbor-router", types.YChild{"NeighborRouter", nil})
    for i := range networkLsaType.NeighborRouter {
        networkLsaType.EntityData.Children.Append(types.GetSegmentPath(networkLsaType.NeighborRouter[i]), types.YChild{"NeighborRouter", networkLsaType.NeighborRouter[i]})
    }
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("network-prefix-length", types.YLeaf{"NetworkPrefixLength", networkLsaType.NetworkPrefixLength})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter
// Neighbor router list
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (neighborRouter *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_NetworkLsaType_NeighborRouter) GetEntityData() *types.CommonEntityData {
    neighborRouter.EntityData.YFilter = neighborRouter.YFilter
    neighborRouter.EntityData.YangName = "neighbor-router"
    neighborRouter.EntityData.BundleName = "cisco_ios_xr"
    neighborRouter.EntityData.ParentYangName = "network-lsa-type"
    neighborRouter.EntityData.SegmentPath = "neighbor-router"
    neighborRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRouter.EntityData.Children = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs = types.NewOrderedMap()
    neighborRouter.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborRouter.Entry})

    neighborRouter.EntityData.YListKeys = []string {}

    return &(neighborRouter.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType
// Summary LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary LSA prefix length. The type is interface{} with range:
    // 0..4294967295.
    SummaryPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalSumLsa interface{}

    // Metric. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric.
    SummaryLsaMetric []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
}

func (summaryLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType) GetEntityData() *types.CommonEntityData {
    summaryLsaType.EntityData.YFilter = summaryLsaType.YFilter
    summaryLsaType.EntityData.YangName = "summary-lsa-type"
    summaryLsaType.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaType.EntityData.ParentYangName = "lsa-internal-data"
    summaryLsaType.EntityData.SegmentPath = "summary-lsa-type"
    summaryLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaType.EntityData.Children = types.NewOrderedMap()
    summaryLsaType.EntityData.Children.Append("summary-lsa-metric", types.YChild{"SummaryLsaMetric", nil})
    for i := range summaryLsaType.SummaryLsaMetric {
        summaryLsaType.EntityData.Children.Append(types.GetSegmentPath(summaryLsaType.SummaryLsaMetric[i]), types.YChild{"SummaryLsaMetric", summaryLsaType.SummaryLsaMetric[i]})
    }
    summaryLsaType.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaType.EntityData.Leafs.Append("summary-prefix-length", types.YLeaf{"SummaryPrefixLength", summaryLsaType.SummaryPrefixLength})
    summaryLsaType.EntityData.Leafs.Append("internal-sum-lsa", types.YLeaf{"InternalSumLsa", summaryLsaType.InternalSumLsa})

    summaryLsaType.EntityData.YListKeys = []string {}

    return &(summaryLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric
// Metric
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (summaryLsaMetric *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_SummaryLsaType_SummaryLsaMetric) GetEntityData() *types.CommonEntityData {
    summaryLsaMetric.EntityData.YFilter = summaryLsaMetric.YFilter
    summaryLsaMetric.EntityData.YangName = "summary-lsa-metric"
    summaryLsaMetric.EntityData.BundleName = "cisco_ios_xr"
    summaryLsaMetric.EntityData.ParentYangName = "summary-lsa-type"
    summaryLsaMetric.EntityData.SegmentPath = "summary-lsa-metric"
    summaryLsaMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryLsaMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryLsaMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryLsaMetric.EntityData.Children = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs = types.NewOrderedMap()
    summaryLsaMetric.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", summaryLsaMetric.Entry})

    summaryLsaMetric.EntityData.YListKeys = []string {}

    return &(summaryLsaMetric.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType
// External LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix length. The type is interface{} with range: 0..4294967295.
    ExternalPrefixLength interface{}

    // If true, internal max-metric LSA. The type is bool.
    InternalExternalLsa interface{}

    // Type of service information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric.
    ExternalTosMetric []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
}

func (externalLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-internal-data"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("external-tos-metric", types.YChild{"ExternalTosMetric", nil})
    for i := range externalLsaType.ExternalTosMetric {
        externalLsaType.EntityData.Children.Append(types.GetSegmentPath(externalLsaType.ExternalTosMetric[i]), types.YChild{"ExternalTosMetric", externalLsaType.ExternalTosMetric[i]})
    }
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("external-prefix-length", types.YLeaf{"ExternalPrefixLength", externalLsaType.ExternalPrefixLength})
    externalLsaType.EntityData.Leafs.Append("internal-external-lsa", types.YLeaf{"InternalExternalLsa", externalLsaType.InternalExternalLsa})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric
// Type of service information
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cost of this route. The type is interface{} with range: 0..4294967295.
    ExternalMetric interface{}

    // External LSA metric type. The type is ExMetric.
    ExternalMetricType interface{}

    // Type of Service. The type is interface{} with range: 0..4294967295.
    ExternalTos interface{}

    // Forwarding Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}
}

func (externalTosMetric *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_ExternalLsaType_ExternalTosMetric) GetEntityData() *types.CommonEntityData {
    externalTosMetric.EntityData.YFilter = externalTosMetric.YFilter
    externalTosMetric.EntityData.YangName = "external-tos-metric"
    externalTosMetric.EntityData.BundleName = "cisco_ios_xr"
    externalTosMetric.EntityData.ParentYangName = "external-lsa-type"
    externalTosMetric.EntityData.SegmentPath = "external-tos-metric"
    externalTosMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalTosMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalTosMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalTosMetric.EntityData.Children = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs = types.NewOrderedMap()
    externalTosMetric.EntityData.Leafs.Append("external-metric", types.YLeaf{"ExternalMetric", externalTosMetric.ExternalMetric})
    externalTosMetric.EntityData.Leafs.Append("external-metric-type", types.YLeaf{"ExternalMetricType", externalTosMetric.ExternalMetricType})
    externalTosMetric.EntityData.Leafs.Append("external-tos", types.YLeaf{"ExternalTos", externalTosMetric.ExternalTos})
    externalTosMetric.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalTosMetric.ForwardingAddress})
    externalTosMetric.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalTosMetric.ExternalTag})

    externalTosMetric.EntityData.YListKeys = []string {}

    return &(externalTosMetric.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType
// Opaque-Link LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface on which the Opaque link LSA is received. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    OpaqueInterfaceName interface{}
}

func (opaqueLinkLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueLinkLsaType) GetEntityData() *types.CommonEntityData {
    opaqueLinkLsaType.EntityData.YFilter = opaqueLinkLsaType.YFilter
    opaqueLinkLsaType.EntityData.YangName = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueLinkLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueLinkLsaType.EntityData.SegmentPath = "opaque-link-lsa-type"
    opaqueLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueLinkLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueLinkLsaType.EntityData.Leafs.Append("opaque-interface-name", types.YLeaf{"OpaqueInterfaceName", opaqueLinkLsaType.OpaqueInterfaceName})

    opaqueLinkLsaType.EntityData.YListKeys = []string {}

    return &(opaqueLinkLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType
// Opaque-Area, opaque type 1 LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
}

func (opaqueMplsTeLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType) GetEntityData() *types.CommonEntityData {
    opaqueMplsTeLsaType.EntityData.YFilter = opaqueMplsTeLsaType.YFilter
    opaqueMplsTeLsaType.EntityData.YangName = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueMplsTeLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueMplsTeLsaType.EntityData.SegmentPath = "opaque-mpls-te-lsa-type"
    opaqueMplsTeLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueMplsTeLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueMplsTeLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueMplsTeLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueMplsTeLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueMplsTeLsaType.Tlv {
        opaqueMplsTeLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueMplsTeLsaType.Tlv[i]), types.YChild{"Tlv", opaqueMplsTeLsaType.Tlv[i]})
    }
    opaqueMplsTeLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueMplsTeLsaType.EntityData.YListKeys = []string {}

    return &(opaqueMplsTeLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-mpls-te-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueMplsTeLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa
// Opaque-link, opaque type 3 Grace LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The amount of time the router's neighbor should advertise it fully adjacent
    // (s). The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is OspfGrReason.
    GraceReason interface{}

    // IP interface address on the subnet associated with the grace LSA. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpAddress interface{}
}

func (opaqueGraceLsa *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueGraceLsa) GetEntityData() *types.CommonEntityData {
    opaqueGraceLsa.EntityData.YFilter = opaqueGraceLsa.YFilter
    opaqueGraceLsa.EntityData.YangName = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.BundleName = "cisco_ios_xr"
    opaqueGraceLsa.EntityData.ParentYangName = "lsa-internal-data"
    opaqueGraceLsa.EntityData.SegmentPath = "opaque-grace-lsa"
    opaqueGraceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueGraceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueGraceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueGraceLsa.EntityData.Children = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs = types.NewOrderedMap()
    opaqueGraceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", opaqueGraceLsa.GracePeriod})
    opaqueGraceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", opaqueGraceLsa.GraceReason})
    opaqueGraceLsa.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", opaqueGraceLsa.IpAddress})

    opaqueGraceLsa.EntityData.YListKeys = []string {}

    return &(opaqueGraceLsa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType
// Opaque Router Information LSA
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Opaque LSA flooding scope, a.k.a., Opaque LSA Type. The type is
    // OspfLsaOpqRiScope.
    OpaqueRilsaScope interface{}

    // Interface on which this Link-Local Opaque link LSA is received. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    OpaqueRiInterfaceName interface{}

    // Router Information TLV. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv.
    OpaqueRitlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
}

func (opaqueRouterInfoLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType) GetEntityData() *types.CommonEntityData {
    opaqueRouterInfoLsaType.EntityData.YFilter = opaqueRouterInfoLsaType.YFilter
    opaqueRouterInfoLsaType.EntityData.YangName = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueRouterInfoLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueRouterInfoLsaType.EntityData.SegmentPath = "opaque-router-info-lsa-type"
    opaqueRouterInfoLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRouterInfoLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRouterInfoLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRouterInfoLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Children.Append("opaque-ritlv", types.YChild{"OpaqueRitlv", nil})
    for i := range opaqueRouterInfoLsaType.OpaqueRitlv {
        opaqueRouterInfoLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueRouterInfoLsaType.OpaqueRitlv[i]), types.YChild{"OpaqueRitlv", opaqueRouterInfoLsaType.OpaqueRitlv[i]})
    }
    opaqueRouterInfoLsaType.EntityData.Leafs = types.NewOrderedMap()
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-rilsa-scope", types.YLeaf{"OpaqueRilsaScope", opaqueRouterInfoLsaType.OpaqueRilsaScope})
    opaqueRouterInfoLsaType.EntityData.Leafs.Append("opaque-ri-interface-name", types.YLeaf{"OpaqueRiInterfaceName", opaqueRouterInfoLsaType.OpaqueRiInterfaceName})

    opaqueRouterInfoLsaType.EntityData.YListKeys = []string {}

    return &(opaqueRouterInfoLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv
// Router Information TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RITLVInternalType. The type is OspfShOpqRiTlvTypes.
    RitlvInternalType interface{}

    // Unknown Rtr Info TLV.
    UnknownTlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv

    // Rtr Cap TLV.
    RtrCapTlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv

    // PCE Discovery TLV.
    Pcedtlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv

    // SR Algorithm TLV.
    SrAlgoTlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv

    // SR Range TLV.
    SrRangeTlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv

    // Node MSD TLV.
    NodeMsdtlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
}

func (opaqueRitlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv) GetEntityData() *types.CommonEntityData {
    opaqueRitlv.EntityData.YFilter = opaqueRitlv.YFilter
    opaqueRitlv.EntityData.YangName = "opaque-ritlv"
    opaqueRitlv.EntityData.BundleName = "cisco_ios_xr"
    opaqueRitlv.EntityData.ParentYangName = "opaque-router-info-lsa-type"
    opaqueRitlv.EntityData.SegmentPath = "opaque-ritlv"
    opaqueRitlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueRitlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueRitlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueRitlv.EntityData.Children = types.NewOrderedMap()
    opaqueRitlv.EntityData.Children.Append("unknown-tlv", types.YChild{"UnknownTlv", &opaqueRitlv.UnknownTlv})
    opaqueRitlv.EntityData.Children.Append("rtr-cap-tlv", types.YChild{"RtrCapTlv", &opaqueRitlv.RtrCapTlv})
    opaqueRitlv.EntityData.Children.Append("pcedtlv", types.YChild{"Pcedtlv", &opaqueRitlv.Pcedtlv})
    opaqueRitlv.EntityData.Children.Append("sr-algo-tlv", types.YChild{"SrAlgoTlv", &opaqueRitlv.SrAlgoTlv})
    opaqueRitlv.EntityData.Children.Append("sr-range-tlv", types.YChild{"SrRangeTlv", &opaqueRitlv.SrRangeTlv})
    opaqueRitlv.EntityData.Children.Append("node-msdtlv", types.YChild{"NodeMsdtlv", &opaqueRitlv.NodeMsdtlv})
    opaqueRitlv.EntityData.Leafs = types.NewOrderedMap()
    opaqueRitlv.EntityData.Leafs.Append("ritlv-internal-type", types.YLeaf{"RitlvInternalType", opaqueRitlv.RitlvInternalType})

    opaqueRitlv.EntityData.YListKeys = []string {}

    return &(opaqueRitlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv
// Unknown Rtr Info TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (unknownTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_UnknownTlv) GetEntityData() *types.CommonEntityData {
    unknownTlv.EntityData.YFilter = unknownTlv.YFilter
    unknownTlv.EntityData.YangName = "unknown-tlv"
    unknownTlv.EntityData.BundleName = "cisco_ios_xr"
    unknownTlv.EntityData.ParentYangName = "opaque-ritlv"
    unknownTlv.EntityData.SegmentPath = "unknown-tlv"
    unknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownTlv.EntityData.Children = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs = types.NewOrderedMap()
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", unknownTlv.RiGenTlvType})
    unknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", unknownTlv.RiGenTlvLength})
    unknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", unknownTlv.RiGenvalue})

    unknownTlv.EntityData.YListKeys = []string {}

    return &(unknownTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv
// Rtr Cap TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    RtrCapTlvLength interface{}

    // Graceful Restart Capability. The type is bool.
    RtrCapGracefulRestart interface{}

    // Graceful Restart Helper Capability. The type is bool.
    RtrCapGracefulRestartHelper interface{}

    // Stub Router capability. The type is bool.
    RtrCapStubRtr interface{}

    // Traffic Engineering capability of area. The type is bool.
    RtrCapAreaTe interface{}

    // P2P LAN Capability. The type is bool.
    RtrCapP2plan interface{}

    // TE Experimental bit. The type is bool.
    RtrCapTeExp interface{}

    // All capability bits. The type is interface{} with range: 0..4294967295.
    RtrCapAllBits interface{}

    // Additional Information in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RtrCapAdditionalInfo interface{}
}

func (rtrCapTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_RtrCapTlv) GetEntityData() *types.CommonEntityData {
    rtrCapTlv.EntityData.YFilter = rtrCapTlv.YFilter
    rtrCapTlv.EntityData.YangName = "rtr-cap-tlv"
    rtrCapTlv.EntityData.BundleName = "cisco_ios_xr"
    rtrCapTlv.EntityData.ParentYangName = "opaque-ritlv"
    rtrCapTlv.EntityData.SegmentPath = "rtr-cap-tlv"
    rtrCapTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtrCapTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtrCapTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtrCapTlv.EntityData.Children = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs = types.NewOrderedMap()
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-tlv-length", types.YLeaf{"RtrCapTlvLength", rtrCapTlv.RtrCapTlvLength})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart", types.YLeaf{"RtrCapGracefulRestart", rtrCapTlv.RtrCapGracefulRestart})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-graceful-restart-helper", types.YLeaf{"RtrCapGracefulRestartHelper", rtrCapTlv.RtrCapGracefulRestartHelper})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-stub-rtr", types.YLeaf{"RtrCapStubRtr", rtrCapTlv.RtrCapStubRtr})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-area-te", types.YLeaf{"RtrCapAreaTe", rtrCapTlv.RtrCapAreaTe})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-p2plan", types.YLeaf{"RtrCapP2plan", rtrCapTlv.RtrCapP2plan})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-te-exp", types.YLeaf{"RtrCapTeExp", rtrCapTlv.RtrCapTeExp})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-all-bits", types.YLeaf{"RtrCapAllBits", rtrCapTlv.RtrCapAllBits})
    rtrCapTlv.EntityData.Leafs.Append("rtr-cap-additional-info", types.YLeaf{"RtrCapAdditionalInfo", rtrCapTlv.RtrCapAdditionalInfo})

    rtrCapTlv.EntityData.YListKeys = []string {}

    return &(rtrCapTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv
// PCE Discovery TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    PcedtlvLength interface{}

    // PCE Address.
    PcedAddr Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr

    // PCE Scope Information.
    PcedScope Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
}

func (pcedtlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv) GetEntityData() *types.CommonEntityData {
    pcedtlv.EntityData.YFilter = pcedtlv.YFilter
    pcedtlv.EntityData.YangName = "pcedtlv"
    pcedtlv.EntityData.BundleName = "cisco_ios_xr"
    pcedtlv.EntityData.ParentYangName = "opaque-ritlv"
    pcedtlv.EntityData.SegmentPath = "pcedtlv"
    pcedtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedtlv.EntityData.Children = types.NewOrderedMap()
    pcedtlv.EntityData.Children.Append("pced-addr", types.YChild{"PcedAddr", &pcedtlv.PcedAddr})
    pcedtlv.EntityData.Children.Append("pced-scope", types.YChild{"PcedScope", &pcedtlv.PcedScope})
    pcedtlv.EntityData.Leafs = types.NewOrderedMap()
    pcedtlv.EntityData.Leafs.Append("pcedtlv-length", types.YLeaf{"PcedtlvLength", pcedtlv.PcedtlvLength})

    pcedtlv.EntityData.YListKeys = []string {}

    return &(pcedtlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr
// PCE Address
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCEAddrType. The type is OspfShOpqRiPceAddrTypes.
    PceAddrType interface{}

    // Unknown PCE Addr TLV.
    PceAddrUnknownTlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv

    // IPv4 PCE Address.
    Ipv4pceAddr Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr

    // IPv6 PCE Address.
    Ipv6pceAddr Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
}

func (pcedAddr *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr) GetEntityData() *types.CommonEntityData {
    pcedAddr.EntityData.YFilter = pcedAddr.YFilter
    pcedAddr.EntityData.YangName = "pced-addr"
    pcedAddr.EntityData.BundleName = "cisco_ios_xr"
    pcedAddr.EntityData.ParentYangName = "pcedtlv"
    pcedAddr.EntityData.SegmentPath = "pced-addr"
    pcedAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedAddr.EntityData.Children = types.NewOrderedMap()
    pcedAddr.EntityData.Children.Append("pce-addr-unknown-tlv", types.YChild{"PceAddrUnknownTlv", &pcedAddr.PceAddrUnknownTlv})
    pcedAddr.EntityData.Children.Append("ipv4pce-addr", types.YChild{"Ipv4pceAddr", &pcedAddr.Ipv4pceAddr})
    pcedAddr.EntityData.Children.Append("ipv6pce-addr", types.YChild{"Ipv6pceAddr", &pcedAddr.Ipv6pceAddr})
    pcedAddr.EntityData.Leafs = types.NewOrderedMap()
    pcedAddr.EntityData.Leafs.Append("pce-addr-type", types.YLeaf{"PceAddrType", pcedAddr.PceAddrType})

    pcedAddr.EntityData.YListKeys = []string {}

    return &(pcedAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv
// Unknown PCE Addr TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvType interface{}

    // Length of TLV. The type is interface{} with range: 0..65535.
    RiGenTlvLength interface{}

    // Data in TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RiGenvalue interface{}
}

func (pceAddrUnknownTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_PceAddrUnknownTlv) GetEntityData() *types.CommonEntityData {
    pceAddrUnknownTlv.EntityData.YFilter = pceAddrUnknownTlv.YFilter
    pceAddrUnknownTlv.EntityData.YangName = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.BundleName = "cisco_ios_xr"
    pceAddrUnknownTlv.EntityData.ParentYangName = "pced-addr"
    pceAddrUnknownTlv.EntityData.SegmentPath = "pce-addr-unknown-tlv"
    pceAddrUnknownTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pceAddrUnknownTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pceAddrUnknownTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pceAddrUnknownTlv.EntityData.Children = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs = types.NewOrderedMap()
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-type", types.YLeaf{"RiGenTlvType", pceAddrUnknownTlv.RiGenTlvType})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-gen-tlv-length", types.YLeaf{"RiGenTlvLength", pceAddrUnknownTlv.RiGenTlvLength})
    pceAddrUnknownTlv.EntityData.Leafs.Append("ri-genvalue", types.YLeaf{"RiGenvalue", pceAddrUnknownTlv.RiGenvalue})

    pceAddrUnknownTlv.EntityData.YListKeys = []string {}

    return &(pceAddrUnknownTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr
// IPv4 PCE Address
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Pceipv4Addr interface{}
}

func (ipv4pceAddr *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv4pceAddr) GetEntityData() *types.CommonEntityData {
    ipv4pceAddr.EntityData.YFilter = ipv4pceAddr.YFilter
    ipv4pceAddr.EntityData.YangName = "ipv4pce-addr"
    ipv4pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv4pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv4pceAddr.EntityData.SegmentPath = "ipv4pce-addr"
    ipv4pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv4pceAddr.EntityData.Leafs.Append("pceipv4-addr", types.YLeaf{"Pceipv4Addr", ipv4pceAddr.Pceipv4Addr})

    ipv4pceAddr.EntityData.YListKeys = []string {}

    return &(ipv4pceAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr
// IPv6 PCE Address
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PCE IPv6 Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Pceipv6Addr interface{}
}

func (ipv6pceAddr *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedAddr_Ipv6pceAddr) GetEntityData() *types.CommonEntityData {
    ipv6pceAddr.EntityData.YFilter = ipv6pceAddr.YFilter
    ipv6pceAddr.EntityData.YangName = "ipv6pce-addr"
    ipv6pceAddr.EntityData.BundleName = "cisco_ios_xr"
    ipv6pceAddr.EntityData.ParentYangName = "pced-addr"
    ipv6pceAddr.EntityData.SegmentPath = "ipv6pce-addr"
    ipv6pceAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6pceAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6pceAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6pceAddr.EntityData.Children = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs = types.NewOrderedMap()
    ipv6pceAddr.EntityData.Leafs.Append("pceipv6-addr", types.YLeaf{"Pceipv6Addr", ipv6pceAddr.Pceipv6Addr})

    ipv6pceAddr.EntityData.YListKeys = []string {}

    return &(ipv6pceAddr.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope
// PCE Scope Information
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L Bit. The type is bool.
    Lbit interface{}

    // R Bit. The type is bool.
    Rbit interface{}

    // Rd Bit. The type is bool.
    RdBit interface{}

    // S Bit. The type is bool.
    Sbit interface{}

    // Sd Bit. The type is bool.
    SdBit interface{}

    // Y Bit. The type is bool.
    Ybit interface{}

    // Pref L. The type is interface{} with range: 0..255.
    PrefL interface{}

    // Pref R. The type is interface{} with range: 0..255.
    PrefR interface{}

    // Pref S. The type is interface{} with range: 0..255.
    PrefS interface{}

    // Pref Y. The type is interface{} with range: 0..255.
    PrefY interface{}

    // PCE Scope Information. The type is interface{} with range: 0..4294967295.
    AllScopeInfoBits interface{}
}

func (pcedScope *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_Pcedtlv_PcedScope) GetEntityData() *types.CommonEntityData {
    pcedScope.EntityData.YFilter = pcedScope.YFilter
    pcedScope.EntityData.YangName = "pced-scope"
    pcedScope.EntityData.BundleName = "cisco_ios_xr"
    pcedScope.EntityData.ParentYangName = "pcedtlv"
    pcedScope.EntityData.SegmentPath = "pced-scope"
    pcedScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pcedScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pcedScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pcedScope.EntityData.Children = types.NewOrderedMap()
    pcedScope.EntityData.Leafs = types.NewOrderedMap()
    pcedScope.EntityData.Leafs.Append("lbit", types.YLeaf{"Lbit", pcedScope.Lbit})
    pcedScope.EntityData.Leafs.Append("rbit", types.YLeaf{"Rbit", pcedScope.Rbit})
    pcedScope.EntityData.Leafs.Append("rd-bit", types.YLeaf{"RdBit", pcedScope.RdBit})
    pcedScope.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", pcedScope.Sbit})
    pcedScope.EntityData.Leafs.Append("sd-bit", types.YLeaf{"SdBit", pcedScope.SdBit})
    pcedScope.EntityData.Leafs.Append("ybit", types.YLeaf{"Ybit", pcedScope.Ybit})
    pcedScope.EntityData.Leafs.Append("pref-l", types.YLeaf{"PrefL", pcedScope.PrefL})
    pcedScope.EntityData.Leafs.Append("pref-r", types.YLeaf{"PrefR", pcedScope.PrefR})
    pcedScope.EntityData.Leafs.Append("pref-s", types.YLeaf{"PrefS", pcedScope.PrefS})
    pcedScope.EntityData.Leafs.Append("pref-y", types.YLeaf{"PrefY", pcedScope.PrefY})
    pcedScope.EntityData.Leafs.Append("all-scope-info-bits", types.YLeaf{"AllScopeInfoBits", pcedScope.AllScopeInfoBits})

    pcedScope.EntityData.YListKeys = []string {}

    return &(pcedScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv
// SR Algorithm TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SR Algorithms. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue.
    SrAlgoValue []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
}

func (srAlgoTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv) GetEntityData() *types.CommonEntityData {
    srAlgoTlv.EntityData.YFilter = srAlgoTlv.YFilter
    srAlgoTlv.EntityData.YangName = "sr-algo-tlv"
    srAlgoTlv.EntityData.BundleName = "cisco_ios_xr"
    srAlgoTlv.EntityData.ParentYangName = "opaque-ritlv"
    srAlgoTlv.EntityData.SegmentPath = "sr-algo-tlv"
    srAlgoTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoTlv.EntityData.Children = types.NewOrderedMap()
    srAlgoTlv.EntityData.Children.Append("sr-algo-value", types.YChild{"SrAlgoValue", nil})
    for i := range srAlgoTlv.SrAlgoValue {
        srAlgoTlv.EntityData.Children.Append(types.GetSegmentPath(srAlgoTlv.SrAlgoValue[i]), types.YChild{"SrAlgoValue", srAlgoTlv.SrAlgoValue[i]})
    }
    srAlgoTlv.EntityData.Leafs = types.NewOrderedMap()

    srAlgoTlv.EntityData.YListKeys = []string {}

    return &(srAlgoTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue
// SR Algorithms
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..255.
    Entry interface{}
}

func (srAlgoValue *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrAlgoTlv_SrAlgoValue) GetEntityData() *types.CommonEntityData {
    srAlgoValue.EntityData.YFilter = srAlgoValue.YFilter
    srAlgoValue.EntityData.YangName = "sr-algo-value"
    srAlgoValue.EntityData.BundleName = "cisco_ios_xr"
    srAlgoValue.EntityData.ParentYangName = "sr-algo-tlv"
    srAlgoValue.EntityData.SegmentPath = "sr-algo-value"
    srAlgoValue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAlgoValue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAlgoValue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAlgoValue.EntityData.Children = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs = types.NewOrderedMap()
    srAlgoValue.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srAlgoValue.Entry})

    srAlgoValue.EntityData.YListKeys = []string {}

    return &(srAlgoValue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv
// SR Range TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    SrRangeLength interface{}

    // SR Range Size. The type is interface{} with range: 0..4294967295.
    SrRangeSize interface{}

    // SID sub-TLV.
    Sidtlv Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
}

func (srRangeTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv) GetEntityData() *types.CommonEntityData {
    srRangeTlv.EntityData.YFilter = srRangeTlv.YFilter
    srRangeTlv.EntityData.YangName = "sr-range-tlv"
    srRangeTlv.EntityData.BundleName = "cisco_ios_xr"
    srRangeTlv.EntityData.ParentYangName = "opaque-ritlv"
    srRangeTlv.EntityData.SegmentPath = "sr-range-tlv"
    srRangeTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srRangeTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srRangeTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srRangeTlv.EntityData.Children = types.NewOrderedMap()
    srRangeTlv.EntityData.Children.Append("sidtlv", types.YChild{"Sidtlv", &srRangeTlv.Sidtlv})
    srRangeTlv.EntityData.Leafs = types.NewOrderedMap()
    srRangeTlv.EntityData.Leafs.Append("sr-range-length", types.YLeaf{"SrRangeLength", srRangeTlv.SrRangeLength})
    srRangeTlv.EntityData.Leafs.Append("sr-range-size", types.YLeaf{"SrRangeSize", srRangeTlv.SrRangeSize})

    srRangeTlv.EntityData.YListKeys = []string {}

    return &(srRangeTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv
// SID sub-TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of sub-TLV. The type is interface{} with range: 0..65535.
    SrSidLength interface{}

    // SID Value. The type is interface{} with range: 0..4294967295.
    SrSidValue interface{}
}

func (sidtlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_SrRangeTlv_Sidtlv) GetEntityData() *types.CommonEntityData {
    sidtlv.EntityData.YFilter = sidtlv.YFilter
    sidtlv.EntityData.YangName = "sidtlv"
    sidtlv.EntityData.BundleName = "cisco_ios_xr"
    sidtlv.EntityData.ParentYangName = "sr-range-tlv"
    sidtlv.EntityData.SegmentPath = "sidtlv"
    sidtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sidtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sidtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sidtlv.EntityData.Children = types.NewOrderedMap()
    sidtlv.EntityData.Leafs = types.NewOrderedMap()
    sidtlv.EntityData.Leafs.Append("sr-sid-length", types.YLeaf{"SrSidLength", sidtlv.SrSidLength})
    sidtlv.EntityData.Leafs.Append("sr-sid-value", types.YLeaf{"SrSidValue", sidtlv.SrSidValue})

    sidtlv.EntityData.YListKeys = []string {}

    return &(sidtlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv
// Node MSD TLV
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Length of TLV. The type is interface{} with range: 0..65535.
    NodeMsdtlvLength interface{}

    // Node MSD Subtypes.
    NodeMsdSubTypes Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
}

func (nodeMsdtlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv) GetEntityData() *types.CommonEntityData {
    nodeMsdtlv.EntityData.YFilter = nodeMsdtlv.YFilter
    nodeMsdtlv.EntityData.YangName = "node-msdtlv"
    nodeMsdtlv.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdtlv.EntityData.ParentYangName = "opaque-ritlv"
    nodeMsdtlv.EntityData.SegmentPath = "node-msdtlv"
    nodeMsdtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdtlv.EntityData.Children = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Children.Append("node-msd-sub-types", types.YChild{"NodeMsdSubTypes", &nodeMsdtlv.NodeMsdSubTypes})
    nodeMsdtlv.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdtlv.EntityData.Leafs.Append("node-msdtlv-length", types.YLeaf{"NodeMsdtlvLength", nodeMsdtlv.NodeMsdtlvLength})

    nodeMsdtlv.EntityData.YListKeys = []string {}

    return &(nodeMsdtlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes
// Node MSD Subtypes
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MSD SubType. The type is interface{} with range: 0..255.
    MsdSubType interface{}

    // MSD Value. The type is interface{} with range: 0..255.
    MsdValue interface{}
}

func (nodeMsdSubTypes *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueRouterInfoLsaType_OpaqueRitlv_NodeMsdtlv_NodeMsdSubTypes) GetEntityData() *types.CommonEntityData {
    nodeMsdSubTypes.EntityData.YFilter = nodeMsdSubTypes.YFilter
    nodeMsdSubTypes.EntityData.YangName = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.BundleName = "cisco_ios_xr"
    nodeMsdSubTypes.EntityData.ParentYangName = "node-msdtlv"
    nodeMsdSubTypes.EntityData.SegmentPath = "node-msd-sub-types"
    nodeMsdSubTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeMsdSubTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeMsdSubTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeMsdSubTypes.EntityData.Children = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs = types.NewOrderedMap()
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-sub-type", types.YLeaf{"MsdSubType", nodeMsdSubTypes.MsdSubType})
    nodeMsdSubTypes.EntityData.Leafs.Append("msd-value", types.YLeaf{"MsdValue", nodeMsdSubTypes.MsdValue})

    nodeMsdSubTypes.EntityData.YListKeys = []string {}

    return &(nodeMsdSubTypes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType
// Extende Prefix LSA type
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
}

func (opaqueEpLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType) GetEntityData() *types.CommonEntityData {
    opaqueEpLsaType.EntityData.YFilter = opaqueEpLsaType.YFilter
    opaqueEpLsaType.EntityData.YangName = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueEpLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueEpLsaType.EntityData.SegmentPath = "opaque-ep-lsa-type"
    opaqueEpLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueEpLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueEpLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueEpLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueEpLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueEpLsaType.Tlv {
        opaqueEpLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueEpLsaType.Tlv[i]), types.YChild{"Tlv", opaqueEpLsaType.Tlv[i]})
    }
    opaqueEpLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueEpLsaType.EntityData.YListKeys = []string {}

    return &(opaqueEpLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-ep-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueEpLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType
// Extended Link LSA type
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv.
    Tlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
}

func (opaqueElLsaType *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType) GetEntityData() *types.CommonEntityData {
    opaqueElLsaType.EntityData.YFilter = opaqueElLsaType.YFilter
    opaqueElLsaType.EntityData.YangName = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.BundleName = "cisco_ios_xr"
    opaqueElLsaType.EntityData.ParentYangName = "lsa-internal-data"
    opaqueElLsaType.EntityData.SegmentPath = "opaque-el-lsa-type"
    opaqueElLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opaqueElLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opaqueElLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opaqueElLsaType.EntityData.Children = types.NewOrderedMap()
    opaqueElLsaType.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range opaqueElLsaType.Tlv {
        opaqueElLsaType.EntityData.Children.Append(types.GetSegmentPath(opaqueElLsaType.Tlv[i]), types.YChild{"Tlv", opaqueElLsaType.Tlv[i]})
    }
    opaqueElLsaType.EntityData.Leafs = types.NewOrderedMap()

    opaqueElLsaType.EntityData.YListKeys = []string {}

    return &(opaqueElLsaType.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv
// List of TLVs
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of top-level TLV. The type is interface{} with range: 0..65535.
    TlvType interface{}

    // Length of top-level TLV. The type is interface{} with range: 0..65535.
    TlvLength interface{}

    // MPLS-TE Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MplsRouterId interface{}

    // MPLS DS-TE supported. The type is bool.
    MplsDsteLink interface{}

    // TLV direct data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TlvData interface{}

    // List of Sub-TLVs. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv.
    TeLinkSubTlv []*Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
}

func (tlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "cisco_ios_xr"
    tlv.EntityData.ParentYangName = "opaque-el-lsa-type"
    tlv.EntityData.SegmentPath = "tlv"
    tlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("te-link-sub-tlv", types.YChild{"TeLinkSubTlv", nil})
    for i := range tlv.TeLinkSubTlv {
        tlv.EntityData.Children.Append(types.GetSegmentPath(tlv.TeLinkSubTlv[i]), types.YChild{"TeLinkSubTlv", tlv.TeLinkSubTlv[i]})
    }
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("tlv-type", types.YLeaf{"TlvType", tlv.TlvType})
    tlv.EntityData.Leafs.Append("tlv-length", types.YLeaf{"TlvLength", tlv.TlvLength})
    tlv.EntityData.Leafs.Append("mpls-router-id", types.YLeaf{"MplsRouterId", tlv.MplsRouterId})
    tlv.EntityData.Leafs.Append("mpls-dste-link", types.YLeaf{"MplsDsteLink", tlv.MplsDsteLink})
    tlv.EntityData.Leafs.Append("tlv-data", types.YLeaf{"TlvData", tlv.TlvData})

    tlv.EntityData.YListKeys = []string {}

    return &(tlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv
// List of Sub-TLVs
type Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is Stlv.
    SubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    SubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SubTlvValue interface{}
}

func (teLinkSubTlv *Ospf_Processes_Process_DefaultVrf_Database_Lsas_Lsa_LsaInternalData_OpaqueElLsaType_Tlv_TeLinkSubTlv) GetEntityData() *types.CommonEntityData {
    teLinkSubTlv.EntityData.YFilter = teLinkSubTlv.YFilter
    teLinkSubTlv.EntityData.YangName = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teLinkSubTlv.EntityData.ParentYangName = "tlv"
    teLinkSubTlv.EntityData.SegmentPath = "te-link-sub-tlv"
    teLinkSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teLinkSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teLinkSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teLinkSubTlv.EntityData.Children = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-type", types.YLeaf{"SubTlvType", teLinkSubTlv.SubTlvType})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-length", types.YLeaf{"SubTlvLength", teLinkSubTlv.SubTlvLength})
    teLinkSubTlv.EntityData.Leafs.Append("sub-tlv-value", types.YLeaf{"SubTlvValue", teLinkSubTlv.SubTlvValue})

    teLinkSubTlv.EntityData.YListKeys = []string {}

    return &(teLinkSubTlv.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries
// Link state advertisement summary table
type Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA summary information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary.
    LsaSummary []*Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary
}

func (lsaSummaries *Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries) GetEntityData() *types.CommonEntityData {
    lsaSummaries.EntityData.YFilter = lsaSummaries.YFilter
    lsaSummaries.EntityData.YangName = "lsa-summaries"
    lsaSummaries.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaries.EntityData.ParentYangName = "database"
    lsaSummaries.EntityData.SegmentPath = "lsa-summaries"
    lsaSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaries.EntityData.Children = types.NewOrderedMap()
    lsaSummaries.EntityData.Children.Append("lsa-summary", types.YChild{"LsaSummary", nil})
    for i := range lsaSummaries.LsaSummary {
        lsaSummaries.EntityData.Children.Append(types.GetSegmentPath(lsaSummaries.LsaSummary[i]), types.YChild{"LsaSummary", lsaSummaries.LsaSummary[i]})
    }
    lsaSummaries.EntityData.Leafs = types.NewOrderedMap()

    lsaSummaries.EntityData.YListKeys = []string {}

    return &(lsaSummaries.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary
// LSA summary information
type Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Link state type. The type is OspfLs.
    LsType interface{}

    // Link state ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsId interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Number of links. The type is interface{} with range: 0..65535.
    LinkCount interface{}

    // LSA header information.
    LsaHeader Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary_LsaHeader
}

func (lsaSummary *Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary) GetEntityData() *types.CommonEntityData {
    lsaSummary.EntityData.YFilter = lsaSummary.YFilter
    lsaSummary.EntityData.YangName = "lsa-summary"
    lsaSummary.EntityData.BundleName = "cisco_ios_xr"
    lsaSummary.EntityData.ParentYangName = "lsa-summaries"
    lsaSummary.EntityData.SegmentPath = "lsa-summary"
    lsaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummary.EntityData.Children = types.NewOrderedMap()
    lsaSummary.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummary.LsaHeader})
    lsaSummary.EntityData.Leafs = types.NewOrderedMap()
    lsaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsaSummary.AreaId})
    lsaSummary.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaSummary.LsType})
    lsaSummary.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaSummary.LsId})
    lsaSummary.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaSummary.AdvertisingRouter})
    lsaSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummary.InterfaceName})
    lsaSummary.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", lsaSummary.ExternalTag})
    lsaSummary.EntityData.Leafs.Append("link-count", types.YLeaf{"LinkCount", lsaSummary.LinkCount})

    lsaSummary.EntityData.YListKeys = []string {}

    return &(lsaSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary_LsaHeader
// LSA header information
type Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is Lsa.
    LsType interface{}

    // LS ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Lsid interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    DnAgeLsa interface{}

    // If true,  LSA received from neighbor during NSF. The type is bool.
    Nsf interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}
}

func (lsaHeader *Ospf_Processes_Process_DefaultVrf_Database_LsaSummaries_LsaSummary_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsaHeader.LsType})
    lsaHeader.EntityData.Leafs.Append("lsid", types.YLeaf{"Lsid", lsaHeader.Lsid})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("dn-age-lsa", types.YLeaf{"DnAgeLsa", lsaHeader.DnAgeLsa})
    lsaHeader.EntityData.Leafs.Append("nsf", types.YLeaf{"Nsf", lsaHeader.Nsf})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes
// Summary prefix table
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary prefix information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []*Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetEntityData() *types.CommonEntityData {
    summaryPrefixes.EntityData.YFilter = summaryPrefixes.YFilter
    summaryPrefixes.EntityData.YangName = "summary-prefixes"
    summaryPrefixes.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixes.EntityData.ParentYangName = "default-vrf"
    summaryPrefixes.EntityData.SegmentPath = "summary-prefixes"
    summaryPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixes.EntityData.Children = types.NewOrderedMap()
    summaryPrefixes.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", nil})
    for i := range summaryPrefixes.SummaryPrefix {
        summaryPrefixes.EntityData.Children.Append(types.GetSegmentPath(summaryPrefixes.SummaryPrefix[i]), types.YChild{"SummaryPrefix", summaryPrefixes.SummaryPrefix[i]})
    }
    summaryPrefixes.EntityData.Leafs = types.NewOrderedMap()

    summaryPrefixes.EntityData.YListKeys = []string {}

    return &(summaryPrefixes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
// Summary prefix information
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Summary Mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Summary prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SummaryPrefix interface{}

    // Summary Netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SummaryMask interface{}

    // Cost of Summary. The type is interface{} with range: 0..4294967295.
    SummaryMetric interface{}

    // Type of Metric. The type is ExMetric.
    SummaryMetricType interface{}

    // Tag associated with this summary prefix. The type is interface{} with
    // range: 0..4294967295.
    SummaryTag interface{}
}

func (summaryPrefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summary-prefixes"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("netmask", types.YLeaf{"Netmask", summaryPrefix.Netmask})
    summaryPrefix.EntityData.Leafs.Append("summary-prefix", types.YLeaf{"SummaryPrefix", summaryPrefix.SummaryPrefix})
    summaryPrefix.EntityData.Leafs.Append("summary-mask", types.YLeaf{"SummaryMask", summaryPrefix.SummaryMask})
    summaryPrefix.EntityData.Leafs.Append("summary-metric", types.YLeaf{"SummaryMetric", summaryPrefix.SummaryMetric})
    summaryPrefix.EntityData.Leafs.Append("summary-metric-type", types.YLeaf{"SummaryMetricType", summaryPrefix.SummaryMetricType})
    summaryPrefix.EntityData.Leafs.Append("summary-tag", types.YLeaf{"SummaryTag", summaryPrefix.SummaryTag})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaStatistics
// Container for Statistics
type Ospf_Processes_Process_DefaultVrf_AreaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics innformation Interface table.
    InterfaceStatsEntries Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries
}

func (areaStatistics *Ospf_Processes_Process_DefaultVrf_AreaStatistics) GetEntityData() *types.CommonEntityData {
    areaStatistics.EntityData.YFilter = areaStatistics.YFilter
    areaStatistics.EntityData.YangName = "area-statistics"
    areaStatistics.EntityData.BundleName = "cisco_ios_xr"
    areaStatistics.EntityData.ParentYangName = "default-vrf"
    areaStatistics.EntityData.SegmentPath = "area-statistics"
    areaStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStatistics.EntityData.Children = types.NewOrderedMap()
    areaStatistics.EntityData.Children.Append("interface-stats-entries", types.YChild{"InterfaceStatsEntries", &areaStatistics.InterfaceStatsEntries})
    areaStatistics.EntityData.Leafs = types.NewOrderedMap()

    areaStatistics.EntityData.YListKeys = []string {}

    return &(areaStatistics.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries
// Statistics innformation Interface table
type Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics information for a specific interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry.
    InterfaceStatsEntry []*Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
}

func (interfaceStatsEntries *Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntries.EntityData.YFilter = interfaceStatsEntries.YFilter
    interfaceStatsEntries.EntityData.YangName = "interface-stats-entries"
    interfaceStatsEntries.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntries.EntityData.ParentYangName = "area-statistics"
    interfaceStatsEntries.EntityData.SegmentPath = "interface-stats-entries"
    interfaceStatsEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntries.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntries.EntityData.Children.Append("interface-stats-entry", types.YChild{"InterfaceStatsEntry", nil})
    for i := range interfaceStatsEntries.InterfaceStatsEntry {
        interfaceStatsEntries.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntries.InterfaceStatsEntry[i]), types.YChild{"InterfaceStatsEntry", interfaceStatsEntries.InterfaceStatsEntry[i]})
    }
    interfaceStatsEntries.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatsEntries.EntityData.YListKeys = []string {}

    return &(interfaceStatsEntries.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry
// Statistics information for a specific interface
type Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // interface handle type. The type is string with pattern: [a-zA-Z0-9./-]+.
    Handle interface{}

    // interface name. The type is string.
    IfNameStr interface{}

    // interface entry. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry.
    IfEntry []*Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
}

func (interfaceStatsEntry *Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry) GetEntityData() *types.CommonEntityData {
    interfaceStatsEntry.EntityData.YFilter = interfaceStatsEntry.YFilter
    interfaceStatsEntry.EntityData.YangName = "interface-stats-entry"
    interfaceStatsEntry.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatsEntry.EntityData.ParentYangName = "interface-stats-entries"
    interfaceStatsEntry.EntityData.SegmentPath = "interface-stats-entry" + types.AddKeyToken(interfaceStatsEntry.InterfaceName, "interface-name")
    interfaceStatsEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatsEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatsEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatsEntry.EntityData.Children = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Children.Append("if-entry", types.YChild{"IfEntry", nil})
    for i := range interfaceStatsEntry.IfEntry {
        interfaceStatsEntry.EntityData.Children.Append(types.GetSegmentPath(interfaceStatsEntry.IfEntry[i]), types.YChild{"IfEntry", interfaceStatsEntry.IfEntry[i]})
    }
    interfaceStatsEntry.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatsEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatsEntry.InterfaceName})
    interfaceStatsEntry.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", interfaceStatsEntry.Handle})
    interfaceStatsEntry.EntityData.Leafs.Append("if-name-str", types.YLeaf{"IfNameStr", interfaceStatsEntry.IfNameStr})

    interfaceStatsEntry.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatsEntry.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry
// interface entry
type Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF madj interface. The type is bool.
    MadjIntf interface{}

    // OSPF area id. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // OSPF aread id string. The type is string.
    AreaIdStr interface{}

    // OSPF interface statistics. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat.
    IfStat []*Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
}

func (ifEntry *Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry) GetEntityData() *types.CommonEntityData {
    ifEntry.EntityData.YFilter = ifEntry.YFilter
    ifEntry.EntityData.YangName = "if-entry"
    ifEntry.EntityData.BundleName = "cisco_ios_xr"
    ifEntry.EntityData.ParentYangName = "interface-stats-entry"
    ifEntry.EntityData.SegmentPath = "if-entry"
    ifEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifEntry.EntityData.Children = types.NewOrderedMap()
    ifEntry.EntityData.Children.Append("if-stat", types.YChild{"IfStat", nil})
    for i := range ifEntry.IfStat {
        ifEntry.EntityData.Children.Append(types.GetSegmentPath(ifEntry.IfStat[i]), types.YChild{"IfStat", ifEntry.IfStat[i]})
    }
    ifEntry.EntityData.Leafs = types.NewOrderedMap()
    ifEntry.EntityData.Leafs.Append("madj-intf", types.YLeaf{"MadjIntf", ifEntry.MadjIntf})
    ifEntry.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", ifEntry.AreaId})
    ifEntry.EntityData.Leafs.Append("area-id-str", types.YLeaf{"AreaIdStr", ifEntry.AreaIdStr})

    ifEntry.EntityData.YListKeys = []string {}

    return &(ifEntry.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat
// OSPF interface statistics
type Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (ifStat *Ospf_Processes_Process_DefaultVrf_AreaStatistics_InterfaceStatsEntries_InterfaceStatsEntry_IfEntry_IfStat) GetEntityData() *types.CommonEntityData {
    ifStat.EntityData.YFilter = ifStat.YFilter
    ifStat.EntityData.YangName = "if-stat"
    ifStat.EntityData.BundleName = "cisco_ios_xr"
    ifStat.EntityData.ParentYangName = "if-entry"
    ifStat.EntityData.SegmentPath = "if-stat"
    ifStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifStat.EntityData.Children = types.NewOrderedMap()
    ifStat.EntityData.Leafs = types.NewOrderedMap()
    ifStat.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", ifStat.Entry})

    ifStat.EntityData.YListKeys = []string {}

    return &(ifStat.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_OspfSummary
// Fast-reroute topology information
type Ospf_Processes_Process_DefaultVrf_OspfSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sa num nbrs. The type is interface{} with range: 0..4294967295.
    SaNumNbrs interface{}

    // sa num nbrs up. The type is interface{} with range: 0..4294967295.
    SaNumNbrsUp interface{}

    // sa num intf. The type is interface{} with range: 0..4294967295.
    SaNumIntf interface{}

    // sa num intf up. The type is interface{} with range: 0..4294967295.
    SaNumIntfUp interface{}

    // sa num vintf up. The type is interface{} with range: 0..4294967295.
    SaNumVintfUp interface{}

    // sa num slintf up. The type is interface{} with range: 0..4294967295.
    SaNumSlintfUp interface{}

    // sa num areas. The type is interface{} with range: 0..4294967295.
    SaNumAreas interface{}

    // sa lsa cnt type rtr. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeRtr interface{}

    // sa lsa cnt type net. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeNet interface{}

    // sa lsa cnt type sum net. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeSumNet interface{}

    // sa lsa cnt type sum asb. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeSumAsb interface{}

    // sa lsa cnt type ase. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeAse interface{}

    // sa lsa cnt type mospf. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeMospf interface{}

    // sa lsa cnt type 7ase. The type is interface{} with range: 0..4294967295.
    SaLsaCntType7ase interface{}

    // sa lsa cnt type 8 ignore. The type is interface{} with range:
    // 0..4294967295.
    SaLsaCntType8Ignore interface{}

    // sa lsa cnt type opq link. The type is interface{} with range:
    // 0..4294967295.
    SaLsaCntTypeOpqLink interface{}

    // sa lsa cnt type opq area. The type is interface{} with range:
    // 0..4294967295.
    SaLsaCntTypeOpqArea interface{}

    // sa lsa cnt type opq as. The type is interface{} with range: 0..4294967295.
    SaLsaCntTypeOpqAs interface{}
}

func (ospfSummary *Ospf_Processes_Process_DefaultVrf_OspfSummary) GetEntityData() *types.CommonEntityData {
    ospfSummary.EntityData.YFilter = ospfSummary.YFilter
    ospfSummary.EntityData.YangName = "ospf-summary"
    ospfSummary.EntityData.BundleName = "cisco_ios_xr"
    ospfSummary.EntityData.ParentYangName = "default-vrf"
    ospfSummary.EntityData.SegmentPath = "ospf-summary"
    ospfSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfSummary.EntityData.Children = types.NewOrderedMap()
    ospfSummary.EntityData.Leafs = types.NewOrderedMap()
    ospfSummary.EntityData.Leafs.Append("sa-num-nbrs", types.YLeaf{"SaNumNbrs", ospfSummary.SaNumNbrs})
    ospfSummary.EntityData.Leafs.Append("sa-num-nbrs-up", types.YLeaf{"SaNumNbrsUp", ospfSummary.SaNumNbrsUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-intf", types.YLeaf{"SaNumIntf", ospfSummary.SaNumIntf})
    ospfSummary.EntityData.Leafs.Append("sa-num-intf-up", types.YLeaf{"SaNumIntfUp", ospfSummary.SaNumIntfUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-vintf-up", types.YLeaf{"SaNumVintfUp", ospfSummary.SaNumVintfUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-slintf-up", types.YLeaf{"SaNumSlintfUp", ospfSummary.SaNumSlintfUp})
    ospfSummary.EntityData.Leafs.Append("sa-num-areas", types.YLeaf{"SaNumAreas", ospfSummary.SaNumAreas})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-rtr", types.YLeaf{"SaLsaCntTypeRtr", ospfSummary.SaLsaCntTypeRtr})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-net", types.YLeaf{"SaLsaCntTypeNet", ospfSummary.SaLsaCntTypeNet})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-sum-net", types.YLeaf{"SaLsaCntTypeSumNet", ospfSummary.SaLsaCntTypeSumNet})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-sum-asb", types.YLeaf{"SaLsaCntTypeSumAsb", ospfSummary.SaLsaCntTypeSumAsb})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-ase", types.YLeaf{"SaLsaCntTypeAse", ospfSummary.SaLsaCntTypeAse})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-mospf", types.YLeaf{"SaLsaCntTypeMospf", ospfSummary.SaLsaCntTypeMospf})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-7ase", types.YLeaf{"SaLsaCntType7ase", ospfSummary.SaLsaCntType7ase})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-8-ignore", types.YLeaf{"SaLsaCntType8Ignore", ospfSummary.SaLsaCntType8Ignore})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-opq-link", types.YLeaf{"SaLsaCntTypeOpqLink", ospfSummary.SaLsaCntTypeOpqLink})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-opq-area", types.YLeaf{"SaLsaCntTypeOpqArea", ospfSummary.SaLsaCntTypeOpqArea})
    ospfSummary.EntityData.Leafs.Append("sa-lsa-cnt-type-opq-as", types.YLeaf{"SaLsaCntTypeOpqAs", ospfSummary.SaLsaCntTypeOpqAs})

    ospfSummary.EntityData.YListKeys = []string {}

    return &(ospfSummary.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute
// Container for FastReroute
type Ospf_Processes_Process_DefaultVrf_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute topology information table.
    Topologies Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "default-vrf"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = types.NewOrderedMap()
    fastReroute.EntityData.Children.Append("topologies", types.YChild{"Topologies", &fastReroute.Topologies})
    fastReroute.EntityData.Leafs = types.NewOrderedMap()

    fastReroute.EntityData.YListKeys = []string {}

    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies
// Fast-reroute topology information table
type Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute topology information. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology.
    Topology []*Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology
}

func (topologies *Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "fast-reroute"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology
// Fast-reroute topology information
type Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    IpfrrTopoAreaId interface{}

    // OSPF Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpfrrRouterId interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    IpfrrAreaRevision interface{}

    // IPFRR Topology entries. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology_IpfrrTopo.
    IpfrrTopo []*Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology_IpfrrTopo
}

func (topology *Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology"
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("ipfrr-topo", types.YChild{"IpfrrTopo", nil})
    for i := range topology.IpfrrTopo {
        topology.EntityData.Children.Append(types.GetSegmentPath(topology.IpfrrTopo[i]), types.YChild{"IpfrrTopo", topology.IpfrrTopo[i]})
    }
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", topology.RouterId})
    topology.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", topology.AreaId})
    topology.EntityData.Leafs.Append("ipfrr-topo-area-id", types.YLeaf{"IpfrrTopoAreaId", topology.IpfrrTopoAreaId})
    topology.EntityData.Leafs.Append("ipfrr-router-id", types.YLeaf{"IpfrrRouterId", topology.IpfrrRouterId})
    topology.EntityData.Leafs.Append("ipfrr-area-revision", types.YLeaf{"IpfrrAreaRevision", topology.IpfrrAreaRevision})

    topology.EntityData.YListKeys = []string {}

    return &(topology.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology_IpfrrTopo
// IPFRR Topology entries
type Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology_IpfrrTopo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPFRR Topology Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // IPFRR Topology Distance. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // IPFRR Topology Reverse Distance. The type is interface{} with range:
    // 0..4294967295.
    DistanceReverse interface{}

    // IPFRR Topoogy Type-4 entry. The type is bool.
    Type4 interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    Revision interface{}

    // IPFRR Topology Neighbor Sourced. The type is bool.
    NeighborSourced interface{}

    // IPFRR Topology DR entry. The type is bool.
    Dr interface{}

    // IPFRR Topology rSPT poison. The type is bool.
    Poison interface{}
}

func (ipfrrTopo *Ospf_Processes_Process_DefaultVrf_FastReroute_Topologies_Topology_IpfrrTopo) GetEntityData() *types.CommonEntityData {
    ipfrrTopo.EntityData.YFilter = ipfrrTopo.YFilter
    ipfrrTopo.EntityData.YangName = "ipfrr-topo"
    ipfrrTopo.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTopo.EntityData.ParentYangName = "topology"
    ipfrrTopo.EntityData.SegmentPath = "ipfrr-topo"
    ipfrrTopo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTopo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTopo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTopo.EntityData.Children = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", ipfrrTopo.NodeId})
    ipfrrTopo.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", ipfrrTopo.Distance})
    ipfrrTopo.EntityData.Leafs.Append("distance-reverse", types.YLeaf{"DistanceReverse", ipfrrTopo.DistanceReverse})
    ipfrrTopo.EntityData.Leafs.Append("type4", types.YLeaf{"Type4", ipfrrTopo.Type4})
    ipfrrTopo.EntityData.Leafs.Append("revision", types.YLeaf{"Revision", ipfrrTopo.Revision})
    ipfrrTopo.EntityData.Leafs.Append("neighbor-sourced", types.YLeaf{"NeighborSourced", ipfrrTopo.NeighborSourced})
    ipfrrTopo.EntityData.Leafs.Append("dr", types.YLeaf{"Dr", ipfrrTopo.Dr})
    ipfrrTopo.EntityData.Leafs.Append("poison", types.YLeaf{"Poison", ipfrrTopo.Poison})

    ipfrrTopo.EntityData.YListKeys = []string {}

    return &(ipfrrTopo.EntityData)
}

