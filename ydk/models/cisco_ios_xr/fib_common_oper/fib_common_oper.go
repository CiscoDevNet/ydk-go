// This module contains a collection of YANG definitions
// for Cisco IOS-XR fib-common package operational data.
// 
// This module contains definitions
// for the following management objects:
//   fib-statistics: cef interface drops operational data
//   fib: fib
//   oc-aft-l3: oc aft l3
//   mpls-forwarding: mpls forwarding
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package fib_common_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package fib_common_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper fib-statistics}", reflect.TypeOf(FibStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:fib-statistics", reflect.TypeOf(FibStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper fib}", reflect.TypeOf(Fib{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:fib", reflect.TypeOf(Fib{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper oc-aft-l3}", reflect.TypeOf(OcAftL3{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:oc-aft-l3", reflect.TypeOf(OcAftL3{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper mpls-forwarding}", reflect.TypeOf(MplsForwarding{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:mpls-forwarding", reflect.TypeOf(MplsForwarding{}))
}

// MgmtFibMplsFrrState represents MPLS FRR entry state
type MgmtFibMplsFrrState string

const (
    // Partial
    MgmtFibMplsFrrState_partial MgmtFibMplsFrrState = "partial"

    // Active
    MgmtFibMplsFrrState_active MgmtFibMplsFrrState = "active"

    // Ready
    MgmtFibMplsFrrState_ready MgmtFibMplsFrrState = "ready"

    // Complete
    MgmtFibMplsFrrState_complete MgmtFibMplsFrrState = "complete"

    // Any
    MgmtFibMplsFrrState_any MgmtFibMplsFrrState = "any"
)

// FibNehSpecial represents Fib neh special
type FibNehSpecial string

const (
    // nh not found
    FibNehSpecial_nh_not_found FibNehSpecial = "nh-not-found"

    // nh null0
    FibNehSpecial_nh_null0 FibNehSpecial = "nh-null0"

    // nh punt
    FibNehSpecial_nh_punt FibNehSpecial = "nh-punt"

    // nh drop
    FibNehSpecial_nh_drop FibNehSpecial = "nh-drop"

    // nh glean
    FibNehSpecial_nh_glean FibNehSpecial = "nh-glean"

    // nh receive
    FibNehSpecial_nh_receive FibNehSpecial = "nh-receive"

    // nh broadcast
    FibNehSpecial_nh_broadcast FibNehSpecial = "nh-broadcast"

    // nh external
    FibNehSpecial_nh_external FibNehSpecial = "nh-external"

    // nh lisp
    FibNehSpecial_nh_lisp FibNehSpecial = "nh-lisp"

    // nh lookup
    FibNehSpecial_nh_lookup FibNehSpecial = "nh-lookup"

    // nh max type
    FibNehSpecial_nh_max_type FibNehSpecial = "nh-max-type"
)

// Proto represents MPLS Forwarding Protocol Type
type Proto string

const (
    // IPv4
    Proto_ipv4 Proto = "ipv4"

    // IPv6
    Proto_ipv6 Proto = "ipv6"

    // MPLS
    Proto_mpls Proto = "mpls"
)

// FibShIpencapHdr represents IP Encap Header Type
type FibShIpencapHdr string

const (
    // No Header
    FibShIpencapHdr_fib_sh_ip_encap_none FibShIpencapHdr = "fib-sh-ip-encap-none"

    // IPv4 Header
    FibShIpencapHdr_fib_sh_ip_encap_ip4 FibShIpencapHdr = "fib-sh-ip-encap-ip4"

    // IPv6 Header
    FibShIpencapHdr_fib_sh_ip_encap_ip6 FibShIpencapHdr = "fib-sh-ip-encap-ip6"

    // UDP Header
    FibShIpencapHdr_fib_sh_ip_encap_udp FibShIpencapHdr = "fib-sh-ip-encap-udp"

    // Lisp Header
    FibShIpencapHdr_fib_sh_ip_encap_lisp FibShIpencapHdr = "fib-sh-ip-encap-lisp"
)

// FibAdjacencyShow represents Adjacency types
type FibAdjacencyShow string

const (
    // Normal adjacency
    FibAdjacencyShow_fib_adjacency_normal FibAdjacencyShow = "fib-adjacency-normal"

    // Null adjacency
    FibAdjacencyShow_fib_adjacency_null FibAdjacencyShow = "fib-adjacency-null"

    // Punt adjacency
    FibAdjacencyShow_fib_adjacency_punt FibAdjacencyShow = "fib-adjacency-punt"

    // Drop adjacency
    FibAdjacencyShow_fib_adjacency_drop FibAdjacencyShow = "fib-adjacency-drop"

    // Glean adjacency
    FibAdjacencyShow_fib_adjacency_glean FibAdjacencyShow = "fib-adjacency-glean"

    // Discard adjacency
    FibAdjacencyShow_fib_adjacency_discard FibAdjacencyShow = "fib-adjacency-discard"

    // Broadcast adjacency
    FibAdjacencyShow_fib_adjacency_broadcast FibAdjacencyShow = "fib-adjacency-broadcast"

    // external adjacency
    FibAdjacencyShow_fib_adjacency_external FibAdjacencyShow = "fib-adjacency-external"

    // LISP adjacency
    FibAdjacencyShow_fib_adjacency_lisp FibAdjacencyShow = "fib-adjacency-lisp"

    // Unknown adjacency
    FibAdjacencyShow_fib_adjacency_unknown FibAdjacencyShow = "fib-adjacency-unknown"
)

// FibNhinfoExtBag represents FIB NHINFO extension type
type FibNhinfoExtBag string

const (
    // Replicated NHINFO
    FibNhinfoExtBag_replicated_nh_info FibNhinfoExtBag = "replicated-nh-info"

    // Shared NHINFO
    FibNhinfoExtBag_shared_nh_info FibNhinfoExtBag = "shared-nh-info"
)

// SsLbaState represents Load Balance config
type SsLbaState string

const (
    // L3 Load Balance config
    SsLbaState_l3 SsLbaState = "l3"

    // L4 Load Balance config
    SsLbaState_l4 SsLbaState = "l4"
)

// FibRouteSource represents Fib route source
type FibRouteSource string

const (
    // LSD
    FibRouteSource_lsd FibRouteSource = "lsd"

    // RIB
    FibRouteSource_rib FibRouteSource = "rib"

    // MRIB
    FibRouteSource_mrib FibRouteSource = "mrib"
)

// FibMplsLlcEntryBag represents Fib mpls llc entry bag
type FibMplsLlcEntryBag string

const (
    // fib mpls llc bag type xc
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_xc FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-xc"

    // fib mpls llc bag type pfx
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_pfx FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-pfx"

    // fib mpls llc bag type lsm
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_lsm FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-lsm"

    // fib mpls llc bag type max
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_max FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-max"
)

// FibRpfMode represents RPF mode types
type FibRpfMode string

const (
    // RPF mode strict
    FibRpfMode_fib_rpf_mode_strict FibRpfMode = "fib-rpf-mode-strict"

    // RPF mode loose
    FibRpfMode_fib_rpf_mode_loose FibRpfMode = "fib-rpf-mode-loose"

    // RPF mode unknown
    FibRpfMode_fib_rpf_mode_unknown FibRpfMode = "fib-rpf-mode-unknown"
)

// FibafiProto represents Fibafi proto
type FibafiProto string

const (
    // ipv4 protocol
    FibafiProto_ipv4 FibafiProto = "ipv4"

    // ipv4 mpls protocol
    FibafiProto_ipv4_mpls FibafiProto = "ipv4-mpls"

    // ipv6 protocol
    FibafiProto_ipv6 FibafiProto = "ipv6"

    // ipv6 mpls protocol
    FibafiProto_ipv6_mpls FibafiProto = "ipv6-mpls"
)

// Mplseos represents Mplseos
type Mplseos string

const (
    // EOS Disable
    Mplseos_eos0 Mplseos = "eos0"

    // EOS Enable
    Mplseos_eos1 Mplseos = "eos1"
)

// FibFrrProtocolShow represents Fib frr protocol show
type FibFrrProtocolShow string

const (
    // frr protocol ipv4
    FibFrrProtocolShow_frr_protocol_ipv4 FibFrrProtocolShow = "frr-protocol-ipv4"

    // frr protocol ipv6
    FibFrrProtocolShow_frr_protocol_ipv6 FibFrrProtocolShow = "frr-protocol-ipv6"

    // frr protocol mpls
    FibFrrProtocolShow_frr_protocol_mpls FibFrrProtocolShow = "frr-protocol-mpls"
)

// FibLink represents Fib link
type FibLink string

const (
    // IPv4 link protocol
    FibLink_link_ipv4 FibLink = "link-ipv4"

    // IPv6 link protocol
    FibLink_link_ipv6 FibLink = "link-ipv6"

    // MPLS link protocol
    FibLink_link_mpls FibLink = "link-mpls"
)

// FibUpdatePathLfaProtection represents LFA protection type
type FibUpdatePathLfaProtection string

const (
    // Not LFA-protected
    FibUpdatePathLfaProtection_not_lfa_protected FibUpdatePathLfaProtection = "not-lfa-protected"

    // Local-LFA protected
    FibUpdatePathLfaProtection_local_lfa_protected FibUpdatePathLfaProtection = "local-lfa-protected"

    // Remote-LFA protected
    FibUpdatePathLfaProtection_remote_lfa_protected FibUpdatePathLfaProtection = "remote-lfa-protected"

    // TI-LFA protected
    FibUpdatePathLfaProtection_ti_lfa_protected FibUpdatePathLfaProtection = "ti-lfa-protected"
)

// FibLoadshareShow represents Loadsharing type
type FibLoadshareShow string

const (
    // No loadsharing
    FibLoadshareShow_fib_load_share_none FibLoadshareShow = "fib-load-share-none"

    // Per packet loadsharing
    FibLoadshareShow_fib_load_share_per_packet FibLoadshareShow = "fib-load-share-per-packet"

    // Destination loadsharing
    FibLoadshareShow_fib_load_share_dest_sharing FibLoadshareShow = "fib-load-share-dest-sharing"
)

// FibllcEntry represents Fibllc entry
type FibllcEntry string

const (
    // LabelXconnect
    FibllcEntry_xc FibllcEntry = "xc"

    // IPPrefix
    FibllcEntry_pfx FibllcEntry = "pfx"
)

// FibNeh represents Fib neh
type FibNeh string

const (
    // nh local
    FibNeh_nh_local FibNeh = "nh-local"

    // nh remote
    FibNeh_nh_remote FibNeh = "nh-remote"

    // nh special
    FibNeh_nh_special FibNeh = "nh-special"
)

// NextHop represents MPLS Forwarding Next Hop Type
type NextHop string

const (
    // TX
    NextHop_tx NextHop = "tx"

    // RX
    NextHop_rx NextHop = "rx"

    // Special
    NextHop_special NextHop = "special"
)

// MgmtFibMplsLspRole represents MPLS FRR entry role
type MgmtFibMplsLspRole string

const (
    // Head
    MgmtFibMplsLspRole_head MgmtFibMplsLspRole = "head"

    // Midpoint
    MgmtFibMplsLspRole_midpoint MgmtFibMplsLspRole = "midpoint"
)

// FibProtocol represents Fib protocol
type FibProtocol string

const (
    // ipv4 protocol
    FibProtocol_ipv4 FibProtocol = "ipv4"

    // ipv6 protocol
    FibProtocol_ipv6 FibProtocol = "ipv6"

    // MPLS protocol
    FibProtocol_mpls FibProtocol = "mpls"
)

// FibidbOper represents Fibidb oper
type FibidbOper string

const (
    // fibidb none
    FibidbOper_fibidb_none FibidbOper = "fibidb-none"

    // fibidb create
    FibidbOper_fibidb_create FibidbOper = "fibidb-create"

    // fibidb delete
    FibidbOper_fibidb_delete FibidbOper = "fibidb-delete"

    // fibidb modify
    FibidbOper_fibidb_modify FibidbOper = "fibidb-modify"

    // fibidb max
    FibidbOper_fibidb_max FibidbOper = "fibidb-max"
)

// FibShTblFibExtBag represents Fib sh tbl fib ext bag
type FibShTblFibExtBag string

const (
    // Leaf Extension
    FibShTblFibExtBag_leaf_extension FibShTblFibExtBag = "leaf-extension"
)

// FibStatistics
// cef interface drops operational data
type FibStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of nodes.
    Nodes FibStatistics_Nodes
}

func (fibStatistics *FibStatistics) GetEntityData() *types.CommonEntityData {
    fibStatistics.EntityData.YFilter = fibStatistics.YFilter
    fibStatistics.EntityData.YangName = "fib-statistics"
    fibStatistics.EntityData.BundleName = "cisco_ios_xr"
    fibStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-fib-common-oper"
    fibStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-fib-common-oper:fib-statistics"
    fibStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibStatistics.EntityData.Children = types.NewOrderedMap()
    fibStatistics.EntityData.Children.Append("nodes", types.YChild{"Nodes", &fibStatistics.Nodes})
    fibStatistics.EntityData.Leafs = types.NewOrderedMap()

    fibStatistics.EntityData.YListKeys = []string {}

    return &(fibStatistics.EntityData)
}

// FibStatistics_Nodes
// List of nodes
type FibStatistics_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific node operational data. The type is slice of
    // FibStatistics_Nodes_Node.
    Node []*FibStatistics_Nodes_Node
}

func (nodes *FibStatistics_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "fib-statistics"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = types.NewOrderedMap()
    nodes.EntityData.Children.Append("node", types.YChild{"Node", nil})
    for i := range nodes.Node {
        nodes.EntityData.Children.Append(types.GetSegmentPath(nodes.Node[i]), types.YChild{"Node", nodes.Node[i]})
    }
    nodes.EntityData.Leafs = types.NewOrderedMap()

    nodes.EntityData.YListKeys = []string {}

    return &(nodes.EntityData)
}

// FibStatistics_Nodes_Node
// Specific node operational data
type FibStatistics_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Specific node drops.
    Drops FibStatistics_Nodes_Node_Drops
}

func (node *FibStatistics_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + types.AddKeyToken(node.NodeName, "node-name")
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = types.NewOrderedMap()
    node.EntityData.Children.Append("drops", types.YChild{"Drops", &node.Drops})
    node.EntityData.Leafs = types.NewOrderedMap()
    node.EntityData.Leafs.Append("node-name", types.YLeaf{"NodeName", node.NodeName})

    node.EntityData.YListKeys = []string {"NodeName"}

    return &(node.EntityData)
}

// FibStatistics_Nodes_Node_Drops
// Specific node drops
type FibStatistics_Nodes_Node_Drops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // no route pkt. The type is interface{} with range: 0..18446744073709551615.
    NoRoutePackets interface{}

    // Punt generate unreach pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    PuntUnreachablePackets interface{}

    // DF unreachable pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    DfUnreachablePackets interface{}

    // encapsulation failure pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    EncapsulationFailurePackets interface{}

    // incomplete adjacency pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    IncompleteAdjacencyPackets interface{}

    // unresolved prefix pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    UnresolvedPrefixPackets interface{}

    // unsupported feature pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    UnsupportedFeaturePackets interface{}

    // discard pkt. The type is interface{} with range: 0..18446744073709551615.
    DiscardPackets interface{}

    // checksum error pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErrorPackets interface{}

    // frag consumed packet pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    FragmenationConsumedPackets interface{}

    // fragmenation failure pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    FragmenationFailurePackets interface{}

    // null0 pkt. The type is interface{} with range: 0..18446744073709551615.
    NullPackets interface{}

    // RPF check failures pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    RpfCheckFailurePackets interface{}

    // ACL in RPF pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    AclInRpfPackets interface{}

    // rp dest drop pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    RpDestinationDropPackets interface{}

    // the total number of drop pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNumberOfDropPackets interface{}

    // mpls disabled in interface. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsDisabledInterface interface{}

    // GRE tunnel lookup failed drop pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    GreLookupFailedDrop interface{}

    // GRE processing errors. The type is interface{} with range:
    // 0..18446744073709551615.
    GreErrorDrop interface{}

    // LISP Punt drops. The type is interface{} with range:
    // 0..18446744073709551615.
    LispPuntDrops interface{}

    // Lisp encap error drops. The type is interface{} with range:
    // 0..18446744073709551615.
    LispEncapErrorDrops interface{}

    // Lisp decap error drops. The type is interface{} with range:
    // 0..18446744073709551615.
    LispDecapErrorDrops interface{}

    // Drops for the packets with multi[le labels. The type is interface{} with
    // range: 0..18446744073709551615.
    MultiLabelDrops interface{}
}

func (drops *FibStatistics_Nodes_Node_Drops) GetEntityData() *types.CommonEntityData {
    drops.EntityData.YFilter = drops.YFilter
    drops.EntityData.YangName = "drops"
    drops.EntityData.BundleName = "cisco_ios_xr"
    drops.EntityData.ParentYangName = "node"
    drops.EntityData.SegmentPath = "drops"
    drops.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drops.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drops.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drops.EntityData.Children = types.NewOrderedMap()
    drops.EntityData.Leafs = types.NewOrderedMap()
    drops.EntityData.Leafs.Append("no-route-packets", types.YLeaf{"NoRoutePackets", drops.NoRoutePackets})
    drops.EntityData.Leafs.Append("punt-unreachable-packets", types.YLeaf{"PuntUnreachablePackets", drops.PuntUnreachablePackets})
    drops.EntityData.Leafs.Append("df-unreachable-packets", types.YLeaf{"DfUnreachablePackets", drops.DfUnreachablePackets})
    drops.EntityData.Leafs.Append("encapsulation-failure-packets", types.YLeaf{"EncapsulationFailurePackets", drops.EncapsulationFailurePackets})
    drops.EntityData.Leafs.Append("incomplete-adjacency-packets", types.YLeaf{"IncompleteAdjacencyPackets", drops.IncompleteAdjacencyPackets})
    drops.EntityData.Leafs.Append("unresolved-prefix-packets", types.YLeaf{"UnresolvedPrefixPackets", drops.UnresolvedPrefixPackets})
    drops.EntityData.Leafs.Append("unsupported-feature-packets", types.YLeaf{"UnsupportedFeaturePackets", drops.UnsupportedFeaturePackets})
    drops.EntityData.Leafs.Append("discard-packets", types.YLeaf{"DiscardPackets", drops.DiscardPackets})
    drops.EntityData.Leafs.Append("checksum-error-packets", types.YLeaf{"ChecksumErrorPackets", drops.ChecksumErrorPackets})
    drops.EntityData.Leafs.Append("fragmenation-consumed-packets", types.YLeaf{"FragmenationConsumedPackets", drops.FragmenationConsumedPackets})
    drops.EntityData.Leafs.Append("fragmenation-failure-packets", types.YLeaf{"FragmenationFailurePackets", drops.FragmenationFailurePackets})
    drops.EntityData.Leafs.Append("null-packets", types.YLeaf{"NullPackets", drops.NullPackets})
    drops.EntityData.Leafs.Append("rpf-check-failure-packets", types.YLeaf{"RpfCheckFailurePackets", drops.RpfCheckFailurePackets})
    drops.EntityData.Leafs.Append("acl-in-rpf-packets", types.YLeaf{"AclInRpfPackets", drops.AclInRpfPackets})
    drops.EntityData.Leafs.Append("rp-destination-drop-packets", types.YLeaf{"RpDestinationDropPackets", drops.RpDestinationDropPackets})
    drops.EntityData.Leafs.Append("total-number-of-drop-packets", types.YLeaf{"TotalNumberOfDropPackets", drops.TotalNumberOfDropPackets})
    drops.EntityData.Leafs.Append("mpls-disabled-interface", types.YLeaf{"MplsDisabledInterface", drops.MplsDisabledInterface})
    drops.EntityData.Leafs.Append("gre-lookup-failed-drop", types.YLeaf{"GreLookupFailedDrop", drops.GreLookupFailedDrop})
    drops.EntityData.Leafs.Append("gre-error-drop", types.YLeaf{"GreErrorDrop", drops.GreErrorDrop})
    drops.EntityData.Leafs.Append("lisp-punt-drops", types.YLeaf{"LispPuntDrops", drops.LispPuntDrops})
    drops.EntityData.Leafs.Append("lisp-encap-error-drops", types.YLeaf{"LispEncapErrorDrops", drops.LispEncapErrorDrops})
    drops.EntityData.Leafs.Append("lisp-decap-error-drops", types.YLeaf{"LispDecapErrorDrops", drops.LispDecapErrorDrops})
    drops.EntityData.Leafs.Append("multi-label-drops", types.YLeaf{"MultiLabelDrops", drops.MultiLabelDrops})

    drops.EntityData.YListKeys = []string {}

    return &(drops.EntityData)
}

// Fib
// fib
type Fib struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of nodes.
    Nodes Fib_Nodes
}

func (fib *Fib) GetEntityData() *types.CommonEntityData {
    fib.EntityData.YFilter = fib.YFilter
    fib.EntityData.YangName = "fib"
    fib.EntityData.BundleName = "cisco_ios_xr"
    fib.EntityData.ParentYangName = "Cisco-IOS-XR-fib-common-oper"
    fib.EntityData.SegmentPath = "Cisco-IOS-XR-fib-common-oper:fib"
    fib.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fib.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fib.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fib.EntityData.Children = types.NewOrderedMap()
    fib.EntityData.Children.Append("nodes", types.YChild{"Nodes", &fib.Nodes})
    fib.EntityData.Leafs = types.NewOrderedMap()

    fib.EntityData.YListKeys = []string {}

    return &(fib.EntityData)
}

// Fib_Nodes
// Table of nodes
type Fib_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for a specific Node. The type is slice of Fib_Nodes_Node.
    Node []*Fib_Nodes_Node
}

func (nodes *Fib_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "fib"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = types.NewOrderedMap()
    nodes.EntityData.Children.Append("node", types.YChild{"Node", nil})
    for i := range nodes.Node {
        nodes.EntityData.Children.Append(types.GetSegmentPath(nodes.Node[i]), types.YChild{"Node", nodes.Node[i]})
    }
    nodes.EntityData.Leafs = types.NewOrderedMap()

    nodes.EntityData.YListKeys = []string {}

    return &(nodes.EntityData)
}

// Fib_Nodes_Node
// Operational data for a specific Node
type Fib_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // FIB Global info.
    Global Fib_Nodes_Node_Global

    // Protocol table.
    Protocols Fib_Nodes_Node_Protocols
}

func (node *Fib_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + types.AddKeyToken(node.NodeName, "node-name")
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = types.NewOrderedMap()
    node.EntityData.Children.Append("global", types.YChild{"Global", &node.Global})
    node.EntityData.Children.Append("protocols", types.YChild{"Protocols", &node.Protocols})
    node.EntityData.Leafs = types.NewOrderedMap()
    node.EntityData.Leafs.Append("node-name", types.YLeaf{"NodeName", node.NodeName})

    node.EntityData.YListKeys = []string {"NodeName"}

    return &(node.EntityData)
}

// Fib_Nodes_Node_Global
// FIB Global info
type Fib_Nodes_Node_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Collapsed Forwarding.
    FibCofo Fib_Nodes_Node_Global_FibCofo

    // Global Summary.
    Summary Fib_Nodes_Node_Global_Summary

    // Object History.
    ObjectHistory Fib_Nodes_Node_Global_ObjectHistory
}

func (global *Fib_Nodes_Node_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "cisco_ios_xr"
    global.EntityData.ParentYangName = "node"
    global.EntityData.SegmentPath = "global"
    global.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    global.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("fib-cofo", types.YChild{"FibCofo", &global.FibCofo})
    global.EntityData.Children.Append("summary", types.YChild{"Summary", &global.Summary})
    global.EntityData.Children.Append("object-history", types.YChild{"ObjectHistory", &global.ObjectHistory})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo
// Collapsed Forwarding
type Fib_Nodes_Node_Global_FibCofo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Collapsed Forwarding IDB Table.
    FibCofoIdb Fib_Nodes_Node_Global_FibCofo_FibCofoIdb

    // Collapsed Forwarding Table Id Table.
    FibCofoTableId Fib_Nodes_Node_Global_FibCofo_FibCofoTableId
}

func (fibCofo *Fib_Nodes_Node_Global_FibCofo) GetEntityData() *types.CommonEntityData {
    fibCofo.EntityData.YFilter = fibCofo.YFilter
    fibCofo.EntityData.YangName = "fib-cofo"
    fibCofo.EntityData.BundleName = "cisco_ios_xr"
    fibCofo.EntityData.ParentYangName = "global"
    fibCofo.EntityData.SegmentPath = "fib-cofo"
    fibCofo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofo.EntityData.Children = types.NewOrderedMap()
    fibCofo.EntityData.Children.Append("fib-cofo-idb", types.YChild{"FibCofoIdb", &fibCofo.FibCofoIdb})
    fibCofo.EntityData.Children.Append("fib-cofo-table-id", types.YChild{"FibCofoTableId", &fibCofo.FibCofoTableId})
    fibCofo.EntityData.Leafs = types.NewOrderedMap()

    fibCofo.EntityData.YListKeys = []string {}

    return &(fibCofo.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoIdb
// Collapsed Forwarding IDB Table
type Fib_Nodes_Node_Global_FibCofo_FibCofoIdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Collapsed Forwarding Idb Table Entries.
    FibCofoIdbTableEntries Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries
}

func (fibCofoIdb *Fib_Nodes_Node_Global_FibCofo_FibCofoIdb) GetEntityData() *types.CommonEntityData {
    fibCofoIdb.EntityData.YFilter = fibCofoIdb.YFilter
    fibCofoIdb.EntityData.YangName = "fib-cofo-idb"
    fibCofoIdb.EntityData.BundleName = "cisco_ios_xr"
    fibCofoIdb.EntityData.ParentYangName = "fib-cofo"
    fibCofoIdb.EntityData.SegmentPath = "fib-cofo-idb"
    fibCofoIdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoIdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoIdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoIdb.EntityData.Children = types.NewOrderedMap()
    fibCofoIdb.EntityData.Children.Append("fib-cofo-idb-table-entries", types.YChild{"FibCofoIdbTableEntries", &fibCofoIdb.FibCofoIdbTableEntries})
    fibCofoIdb.EntityData.Leafs = types.NewOrderedMap()

    fibCofoIdb.EntityData.YListKeys = []string {}

    return &(fibCofoIdb.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries
// Collapsed Forwarding Idb Table Entries
type Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Collapsed Forwarding Idb Table Entries. The type is slice of
    // Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry.
    FibCofoIdbTableEntry []*Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry
}

func (fibCofoIdbTableEntries *Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries) GetEntityData() *types.CommonEntityData {
    fibCofoIdbTableEntries.EntityData.YFilter = fibCofoIdbTableEntries.YFilter
    fibCofoIdbTableEntries.EntityData.YangName = "fib-cofo-idb-table-entries"
    fibCofoIdbTableEntries.EntityData.BundleName = "cisco_ios_xr"
    fibCofoIdbTableEntries.EntityData.ParentYangName = "fib-cofo-idb"
    fibCofoIdbTableEntries.EntityData.SegmentPath = "fib-cofo-idb-table-entries"
    fibCofoIdbTableEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoIdbTableEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoIdbTableEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoIdbTableEntries.EntityData.Children = types.NewOrderedMap()
    fibCofoIdbTableEntries.EntityData.Children.Append("fib-cofo-idb-table-entry", types.YChild{"FibCofoIdbTableEntry", nil})
    for i := range fibCofoIdbTableEntries.FibCofoIdbTableEntry {
        fibCofoIdbTableEntries.EntityData.Children.Append(types.GetSegmentPath(fibCofoIdbTableEntries.FibCofoIdbTableEntry[i]), types.YChild{"FibCofoIdbTableEntry", fibCofoIdbTableEntries.FibCofoIdbTableEntry[i]})
    }
    fibCofoIdbTableEntries.EntityData.Leafs = types.NewOrderedMap()

    fibCofoIdbTableEntries.EntityData.YListKeys = []string {}

    return &(fibCofoIdbTableEntries.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry
// Collapsed Forwarding Idb Table Entries
type Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SDR ID value. The type is interface{} with range: 0..4294967295.
    SdrId interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    IfIndex interface{}

    // SDR ID. The type is interface{} with range: 0..4294967295.
    Sdrid interface{}

    // Interface Type. The type is interface{} with range: 0..4294967295.
    IntfType interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    IntfIndex interface{}

    // Parent Interface Index. The type is interface{} with range: 0..4294967295.
    ParentIntfIndex interface{}

    // Bundle Member Total Weight. The type is interface{} with range: 0..65535.
    BundleMemberTotalWeight interface{}

    // Main Interface Pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    MainPointer interface{}

    // Table Pointer. The type is interface{} with range: 0..18446744073709551615.
    TablePointer interface{}

    // Hardware Handle. The type is interface{} with range:
    // 0..18446744073709551615.
    HardwareHandle interface{}

    // Interface Name. The type is string.
    IntfName interface{}

    // Port Information Context. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    Pic []interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_ObjectBase

    // Bundle Member Info. The type is slice of
    // Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_BundleMemberInfo.
    BundleMemberInfo []*Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_BundleMemberInfo
}

func (fibCofoIdbTableEntry *Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry) GetEntityData() *types.CommonEntityData {
    fibCofoIdbTableEntry.EntityData.YFilter = fibCofoIdbTableEntry.YFilter
    fibCofoIdbTableEntry.EntityData.YangName = "fib-cofo-idb-table-entry"
    fibCofoIdbTableEntry.EntityData.BundleName = "cisco_ios_xr"
    fibCofoIdbTableEntry.EntityData.ParentYangName = "fib-cofo-idb-table-entries"
    fibCofoIdbTableEntry.EntityData.SegmentPath = "fib-cofo-idb-table-entry"
    fibCofoIdbTableEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoIdbTableEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoIdbTableEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoIdbTableEntry.EntityData.Children = types.NewOrderedMap()
    fibCofoIdbTableEntry.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &fibCofoIdbTableEntry.ObjectBase})
    fibCofoIdbTableEntry.EntityData.Children.Append("bundle-member-info", types.YChild{"BundleMemberInfo", nil})
    for i := range fibCofoIdbTableEntry.BundleMemberInfo {
        fibCofoIdbTableEntry.EntityData.Children.Append(types.GetSegmentPath(fibCofoIdbTableEntry.BundleMemberInfo[i]), types.YChild{"BundleMemberInfo", fibCofoIdbTableEntry.BundleMemberInfo[i]})
    }
    fibCofoIdbTableEntry.EntityData.Leafs = types.NewOrderedMap()
    fibCofoIdbTableEntry.EntityData.Leafs.Append("sdr-id", types.YLeaf{"SdrId", fibCofoIdbTableEntry.SdrId})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("if-index", types.YLeaf{"IfIndex", fibCofoIdbTableEntry.IfIndex})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("sdrid", types.YLeaf{"Sdrid", fibCofoIdbTableEntry.Sdrid})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("intf-type", types.YLeaf{"IntfType", fibCofoIdbTableEntry.IntfType})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("intf-index", types.YLeaf{"IntfIndex", fibCofoIdbTableEntry.IntfIndex})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("parent-intf-index", types.YLeaf{"ParentIntfIndex", fibCofoIdbTableEntry.ParentIntfIndex})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("bundle-member-total-weight", types.YLeaf{"BundleMemberTotalWeight", fibCofoIdbTableEntry.BundleMemberTotalWeight})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("main-pointer", types.YLeaf{"MainPointer", fibCofoIdbTableEntry.MainPointer})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("table-pointer", types.YLeaf{"TablePointer", fibCofoIdbTableEntry.TablePointer})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("hardware-handle", types.YLeaf{"HardwareHandle", fibCofoIdbTableEntry.HardwareHandle})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("intf-name", types.YLeaf{"IntfName", fibCofoIdbTableEntry.IntfName})
    fibCofoIdbTableEntry.EntityData.Leafs.Append("pic", types.YLeaf{"Pic", fibCofoIdbTableEntry.Pic})

    fibCofoIdbTableEntry.EntityData.YListKeys = []string {}

    return &(fibCofoIdbTableEntry.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "fib-cofo-idb-table-entry"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_BundleMemberInfo
// Bundle Member Info
type Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_BundleMemberInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Index. The type is interface{} with range: 0..4294967295.
    IntfIndex interface{}

    // Unique Identifier. The type is interface{} with range: 0..255.
    UniqueId interface{}

    // Member Weight. The type is interface{} with range: 0..255.
    Weight interface{}

    // Port Information Context. The type is interface{} with range:
    // 0..18446744073709551615.
    Pic interface{}
}

func (bundleMemberInfo *Fib_Nodes_Node_Global_FibCofo_FibCofoIdb_FibCofoIdbTableEntries_FibCofoIdbTableEntry_BundleMemberInfo) GetEntityData() *types.CommonEntityData {
    bundleMemberInfo.EntityData.YFilter = bundleMemberInfo.YFilter
    bundleMemberInfo.EntityData.YangName = "bundle-member-info"
    bundleMemberInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleMemberInfo.EntityData.ParentYangName = "fib-cofo-idb-table-entry"
    bundleMemberInfo.EntityData.SegmentPath = "bundle-member-info"
    bundleMemberInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMemberInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMemberInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMemberInfo.EntityData.Children = types.NewOrderedMap()
    bundleMemberInfo.EntityData.Leafs = types.NewOrderedMap()
    bundleMemberInfo.EntityData.Leafs.Append("intf-index", types.YLeaf{"IntfIndex", bundleMemberInfo.IntfIndex})
    bundleMemberInfo.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", bundleMemberInfo.UniqueId})
    bundleMemberInfo.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", bundleMemberInfo.Weight})
    bundleMemberInfo.EntityData.Leafs.Append("pic", types.YLeaf{"Pic", bundleMemberInfo.Pic})

    bundleMemberInfo.EntityData.YListKeys = []string {}

    return &(bundleMemberInfo.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoTableId
// Collapsed Forwarding Table Id Table
type Fib_Nodes_Node_Global_FibCofo_FibCofoTableId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Collapsed Forwarding Table Id Entries.
    FibCofoTableIdEntries Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries

    // Collapsed Forwarding Table Id Entries.
    FibCofoTableIdSummary Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary
}

func (fibCofoTableId *Fib_Nodes_Node_Global_FibCofo_FibCofoTableId) GetEntityData() *types.CommonEntityData {
    fibCofoTableId.EntityData.YFilter = fibCofoTableId.YFilter
    fibCofoTableId.EntityData.YangName = "fib-cofo-table-id"
    fibCofoTableId.EntityData.BundleName = "cisco_ios_xr"
    fibCofoTableId.EntityData.ParentYangName = "fib-cofo"
    fibCofoTableId.EntityData.SegmentPath = "fib-cofo-table-id"
    fibCofoTableId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoTableId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoTableId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoTableId.EntityData.Children = types.NewOrderedMap()
    fibCofoTableId.EntityData.Children.Append("fib-cofo-table-id-entries", types.YChild{"FibCofoTableIdEntries", &fibCofoTableId.FibCofoTableIdEntries})
    fibCofoTableId.EntityData.Children.Append("fib-cofo-table-id-summary", types.YChild{"FibCofoTableIdSummary", &fibCofoTableId.FibCofoTableIdSummary})
    fibCofoTableId.EntityData.Leafs = types.NewOrderedMap()

    fibCofoTableId.EntityData.YListKeys = []string {}

    return &(fibCofoTableId.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries
// Collapsed Forwarding Table Id Entries
type Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Collapsed Forwarding Idb Table Entries. The type is slice of
    // Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry.
    FibCofoTableIdEntry []*Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry
}

func (fibCofoTableIdEntries *Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries) GetEntityData() *types.CommonEntityData {
    fibCofoTableIdEntries.EntityData.YFilter = fibCofoTableIdEntries.YFilter
    fibCofoTableIdEntries.EntityData.YangName = "fib-cofo-table-id-entries"
    fibCofoTableIdEntries.EntityData.BundleName = "cisco_ios_xr"
    fibCofoTableIdEntries.EntityData.ParentYangName = "fib-cofo-table-id"
    fibCofoTableIdEntries.EntityData.SegmentPath = "fib-cofo-table-id-entries"
    fibCofoTableIdEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoTableIdEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoTableIdEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoTableIdEntries.EntityData.Children = types.NewOrderedMap()
    fibCofoTableIdEntries.EntityData.Children.Append("fib-cofo-table-id-entry", types.YChild{"FibCofoTableIdEntry", nil})
    for i := range fibCofoTableIdEntries.FibCofoTableIdEntry {
        fibCofoTableIdEntries.EntityData.Children.Append(types.GetSegmentPath(fibCofoTableIdEntries.FibCofoTableIdEntry[i]), types.YChild{"FibCofoTableIdEntry", fibCofoTableIdEntries.FibCofoTableIdEntry[i]})
    }
    fibCofoTableIdEntries.EntityData.Leafs = types.NewOrderedMap()

    fibCofoTableIdEntries.EntityData.YListKeys = []string {}

    return &(fibCofoTableIdEntries.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry
// Collapsed Forwarding Idb Table Entries
type Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SDR ID value. The type is interface{} with range: 0..4294967295.
    SdrId interface{}

    // Protocol. The type is FibProtocol.
    Protocol interface{}

    // Route Distinguisher. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Rd interface{}

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // SDR ID. The type is interface{} with range: 0..4294967295.
    Sdrid interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    ProtocolType interface{}

    // Route Distinguisher. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    RouteDistinguisher interface{}

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableIdXr interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Table Pointer. The type is interface{} with range: 0..18446744073709551615.
    TablePointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry_ObjectBase
}

func (fibCofoTableIdEntry *Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry) GetEntityData() *types.CommonEntityData {
    fibCofoTableIdEntry.EntityData.YFilter = fibCofoTableIdEntry.YFilter
    fibCofoTableIdEntry.EntityData.YangName = "fib-cofo-table-id-entry"
    fibCofoTableIdEntry.EntityData.BundleName = "cisco_ios_xr"
    fibCofoTableIdEntry.EntityData.ParentYangName = "fib-cofo-table-id-entries"
    fibCofoTableIdEntry.EntityData.SegmentPath = "fib-cofo-table-id-entry"
    fibCofoTableIdEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoTableIdEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoTableIdEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoTableIdEntry.EntityData.Children = types.NewOrderedMap()
    fibCofoTableIdEntry.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &fibCofoTableIdEntry.ObjectBase})
    fibCofoTableIdEntry.EntityData.Leafs = types.NewOrderedMap()
    fibCofoTableIdEntry.EntityData.Leafs.Append("sdr-id", types.YLeaf{"SdrId", fibCofoTableIdEntry.SdrId})
    fibCofoTableIdEntry.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", fibCofoTableIdEntry.Protocol})
    fibCofoTableIdEntry.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", fibCofoTableIdEntry.Rd})
    fibCofoTableIdEntry.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", fibCofoTableIdEntry.TableId})
    fibCofoTableIdEntry.EntityData.Leafs.Append("sdrid", types.YLeaf{"Sdrid", fibCofoTableIdEntry.Sdrid})
    fibCofoTableIdEntry.EntityData.Leafs.Append("protocol-type", types.YLeaf{"ProtocolType", fibCofoTableIdEntry.ProtocolType})
    fibCofoTableIdEntry.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", fibCofoTableIdEntry.RouteDistinguisher})
    fibCofoTableIdEntry.EntityData.Leafs.Append("table-id-xr", types.YLeaf{"TableIdXr", fibCofoTableIdEntry.TableIdXr})
    fibCofoTableIdEntry.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", fibCofoTableIdEntry.VrfName})
    fibCofoTableIdEntry.EntityData.Leafs.Append("table-pointer", types.YLeaf{"TablePointer", fibCofoTableIdEntry.TablePointer})

    fibCofoTableIdEntry.EntityData.YListKeys = []string {}

    return &(fibCofoTableIdEntry.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdEntries_FibCofoTableIdEntry_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "fib-cofo-table-id-entry"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary
// Collapsed Forwarding Table Id Entries
type Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of Table Id Allocated. The type is interface{} with range:
    // 0..4294967295.
    NumberOfTblIdAllocated interface{}

    // Minimum Table Id in Range. The type is interface{} with range:
    // 0..4294967295.
    TblIdMinimum interface{}

    // Maximum Table Id in Range. The type is interface{} with range:
    // 0..4294967295.
    TblIdMaximum interface{}

    // Last Table Id Allocated. The type is interface{} with range: 0..4294967295.
    TblIdLastAllocated interface{}

    // COFO default V4 Table Id. The type is interface{} with range:
    // 0..4294967295.
    TblIdDefaultV4 interface{}

    // COFO default V6 Table Id. The type is interface{} with range:
    // 0..4294967295.
    TblIdDefaultV6 interface{}

    // Number of Table Id in Garbage Collection List. The type is interface{} with
    // range: 0..4294967295.
    NumberOfTblIdInGc interface{}

    // Per SDR statistics. The type is slice of
    // Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary_PerSdrStat.
    PerSdrStat []*Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary_PerSdrStat
}

func (fibCofoTableIdSummary *Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary) GetEntityData() *types.CommonEntityData {
    fibCofoTableIdSummary.EntityData.YFilter = fibCofoTableIdSummary.YFilter
    fibCofoTableIdSummary.EntityData.YangName = "fib-cofo-table-id-summary"
    fibCofoTableIdSummary.EntityData.BundleName = "cisco_ios_xr"
    fibCofoTableIdSummary.EntityData.ParentYangName = "fib-cofo-table-id"
    fibCofoTableIdSummary.EntityData.SegmentPath = "fib-cofo-table-id-summary"
    fibCofoTableIdSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibCofoTableIdSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibCofoTableIdSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibCofoTableIdSummary.EntityData.Children = types.NewOrderedMap()
    fibCofoTableIdSummary.EntityData.Children.Append("per-sdr-stat", types.YChild{"PerSdrStat", nil})
    for i := range fibCofoTableIdSummary.PerSdrStat {
        fibCofoTableIdSummary.EntityData.Children.Append(types.GetSegmentPath(fibCofoTableIdSummary.PerSdrStat[i]), types.YChild{"PerSdrStat", fibCofoTableIdSummary.PerSdrStat[i]})
    }
    fibCofoTableIdSummary.EntityData.Leafs = types.NewOrderedMap()
    fibCofoTableIdSummary.EntityData.Leafs.Append("number-of-tbl-id-allocated", types.YLeaf{"NumberOfTblIdAllocated", fibCofoTableIdSummary.NumberOfTblIdAllocated})
    fibCofoTableIdSummary.EntityData.Leafs.Append("tbl-id-minimum", types.YLeaf{"TblIdMinimum", fibCofoTableIdSummary.TblIdMinimum})
    fibCofoTableIdSummary.EntityData.Leafs.Append("tbl-id-maximum", types.YLeaf{"TblIdMaximum", fibCofoTableIdSummary.TblIdMaximum})
    fibCofoTableIdSummary.EntityData.Leafs.Append("tbl-id-last-allocated", types.YLeaf{"TblIdLastAllocated", fibCofoTableIdSummary.TblIdLastAllocated})
    fibCofoTableIdSummary.EntityData.Leafs.Append("tbl-id-default-v4", types.YLeaf{"TblIdDefaultV4", fibCofoTableIdSummary.TblIdDefaultV4})
    fibCofoTableIdSummary.EntityData.Leafs.Append("tbl-id-default-v6", types.YLeaf{"TblIdDefaultV6", fibCofoTableIdSummary.TblIdDefaultV6})
    fibCofoTableIdSummary.EntityData.Leafs.Append("number-of-tbl-id-in-gc", types.YLeaf{"NumberOfTblIdInGc", fibCofoTableIdSummary.NumberOfTblIdInGc})

    fibCofoTableIdSummary.EntityData.YListKeys = []string {}

    return &(fibCofoTableIdSummary.EntityData)
}

// Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary_PerSdrStat
// Per SDR statistics
type Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary_PerSdrStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SDR ID. The type is interface{} with range: 0..4294967295.
    Sdrid interface{}

    // Number of Tables for IPv4. The type is interface{} with range: 0..65535.
    NumOfipv4Tables interface{}

    // Number of Tables for IPv6. The type is interface{} with range: 0..65535.
    NumOfipv6Tables interface{}

    // Number of Tables for MPLS. The type is interface{} with range: 0..65535.
    NumOfmplsTables interface{}
}

func (perSdrStat *Fib_Nodes_Node_Global_FibCofo_FibCofoTableId_FibCofoTableIdSummary_PerSdrStat) GetEntityData() *types.CommonEntityData {
    perSdrStat.EntityData.YFilter = perSdrStat.YFilter
    perSdrStat.EntityData.YangName = "per-sdr-stat"
    perSdrStat.EntityData.BundleName = "cisco_ios_xr"
    perSdrStat.EntityData.ParentYangName = "fib-cofo-table-id-summary"
    perSdrStat.EntityData.SegmentPath = "per-sdr-stat"
    perSdrStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perSdrStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perSdrStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perSdrStat.EntityData.Children = types.NewOrderedMap()
    perSdrStat.EntityData.Leafs = types.NewOrderedMap()
    perSdrStat.EntityData.Leafs.Append("sdrid", types.YLeaf{"Sdrid", perSdrStat.Sdrid})
    perSdrStat.EntityData.Leafs.Append("num-ofipv4-tables", types.YLeaf{"NumOfipv4Tables", perSdrStat.NumOfipv4Tables})
    perSdrStat.EntityData.Leafs.Append("num-ofipv6-tables", types.YLeaf{"NumOfipv6Tables", perSdrStat.NumOfipv6Tables})
    perSdrStat.EntityData.Leafs.Append("num-ofmpls-tables", types.YLeaf{"NumOfmplsTables", perSdrStat.NumOfmplsTables})

    perSdrStat.EntityData.YListKeys = []string {}

    return &(perSdrStat.EntityData)
}

// Fib_Nodes_Node_Global_Summary
// Global Summary
type Fib_Nodes_Node_Global_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Display total counters and common info.
    Total Fib_Nodes_Node_Global_Summary_Total

    // Proto Table.
    Protos Fib_Nodes_Node_Global_Summary_Protos
}

func (summary *Fib_Nodes_Node_Global_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "global"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("total", types.YChild{"Total", &summary.Total})
    summary.EntityData.Children.Append("protos", types.YChild{"Protos", &summary.Protos})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Total
// Display total counters and common info
type Fib_Nodes_Node_Global_Summary_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Common info.
    CommonInfo Fib_Nodes_Node_Global_Summary_Total_CommonInfo

    // Aggregate counters of all protocols.
    TotalCounters Fib_Nodes_Node_Global_Summary_Total_TotalCounters
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "summary"
    total.EntityData.SegmentPath = "total"
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Children.Append("common-info", types.YChild{"CommonInfo", &total.CommonInfo})
    total.EntityData.Children.Append("total-counters", types.YChild{"TotalCounters", &total.TotalCounters})
    total.EntityData.Leafs = types.NewOrderedMap()

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Total_CommonInfo
// Common info
type Fib_Nodes_Node_Global_Summary_Total_CommonInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Placeholder for common info counts. The type is interface{} with range:
    // 0..4294967295.
    Count interface{}
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetEntityData() *types.CommonEntityData {
    commonInfo.EntityData.YFilter = commonInfo.YFilter
    commonInfo.EntityData.YangName = "common-info"
    commonInfo.EntityData.BundleName = "cisco_ios_xr"
    commonInfo.EntityData.ParentYangName = "total"
    commonInfo.EntityData.SegmentPath = "common-info"
    commonInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonInfo.EntityData.Children = types.NewOrderedMap()
    commonInfo.EntityData.Leafs = types.NewOrderedMap()
    commonInfo.EntityData.Leafs.Append("count", types.YLeaf{"Count", commonInfo.Count})

    commonInfo.EntityData.YListKeys = []string {}

    return &(commonInfo.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Total_TotalCounters
// Aggregate counters of all protocols
type Fib_Nodes_Node_Global_Summary_Total_TotalCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // number of retry timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    NumRetryTimeouts interface{}

    // number of elements in retry db. The type is interface{} with range:
    // 0..4294967295.
    NumRetryOjbects interface{}

    // number of objects in retry db. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry.
    ArrayNumberOfRetry []*Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry

    // total number of objects. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject.
    ArrayNumberOfObject []*Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetEntityData() *types.CommonEntityData {
    totalCounters.EntityData.YFilter = totalCounters.YFilter
    totalCounters.EntityData.YangName = "total-counters"
    totalCounters.EntityData.BundleName = "cisco_ios_xr"
    totalCounters.EntityData.ParentYangName = "total"
    totalCounters.EntityData.SegmentPath = "total-counters"
    totalCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    totalCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    totalCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    totalCounters.EntityData.Children = types.NewOrderedMap()
    totalCounters.EntityData.Children.Append("array-number-of-retry", types.YChild{"ArrayNumberOfRetry", nil})
    for i := range totalCounters.ArrayNumberOfRetry {
        totalCounters.EntityData.Children.Append(types.GetSegmentPath(totalCounters.ArrayNumberOfRetry[i]), types.YChild{"ArrayNumberOfRetry", totalCounters.ArrayNumberOfRetry[i]})
    }
    totalCounters.EntityData.Children.Append("array-number-of-object", types.YChild{"ArrayNumberOfObject", nil})
    for i := range totalCounters.ArrayNumberOfObject {
        totalCounters.EntityData.Children.Append(types.GetSegmentPath(totalCounters.ArrayNumberOfObject[i]), types.YChild{"ArrayNumberOfObject", totalCounters.ArrayNumberOfObject[i]})
    }
    totalCounters.EntityData.Leafs = types.NewOrderedMap()
    totalCounters.EntityData.Leafs.Append("num-retry-timeouts", types.YLeaf{"NumRetryTimeouts", totalCounters.NumRetryTimeouts})
    totalCounters.EntityData.Leafs.Append("num-retry-ojbects", types.YLeaf{"NumRetryOjbects", totalCounters.NumRetryOjbects})

    totalCounters.EntityData.YListKeys = []string {}

    return &(totalCounters.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry
// number of objects in retry db
type Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // retry object. The type is string with length: 0..30.
    RetryObjectType interface{}

    // number of elements for this obj type in retry db. The type is interface{}
    // with range: 0..18446744073709551615.
    NumRetries interface{}
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetEntityData() *types.CommonEntityData {
    arrayNumberOfRetry.EntityData.YFilter = arrayNumberOfRetry.YFilter
    arrayNumberOfRetry.EntityData.YangName = "array-number-of-retry"
    arrayNumberOfRetry.EntityData.BundleName = "cisco_ios_xr"
    arrayNumberOfRetry.EntityData.ParentYangName = "total-counters"
    arrayNumberOfRetry.EntityData.SegmentPath = "array-number-of-retry"
    arrayNumberOfRetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrayNumberOfRetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrayNumberOfRetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrayNumberOfRetry.EntityData.Children = types.NewOrderedMap()
    arrayNumberOfRetry.EntityData.Leafs = types.NewOrderedMap()
    arrayNumberOfRetry.EntityData.Leafs.Append("retry-object-type", types.YLeaf{"RetryObjectType", arrayNumberOfRetry.RetryObjectType})
    arrayNumberOfRetry.EntityData.Leafs.Append("num-retries", types.YLeaf{"NumRetries", arrayNumberOfRetry.NumRetries})

    arrayNumberOfRetry.EntityData.YListKeys = []string {}

    return &(arrayNumberOfRetry.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject
// total number of objects
type Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // object. The type is string with length: 0..30.
    ObjectType interface{}

    // number of elements for this obj type. The type is interface{} with range:
    // 0..4294967295.
    NumObjects interface{}
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetEntityData() *types.CommonEntityData {
    arrayNumberOfObject.EntityData.YFilter = arrayNumberOfObject.YFilter
    arrayNumberOfObject.EntityData.YangName = "array-number-of-object"
    arrayNumberOfObject.EntityData.BundleName = "cisco_ios_xr"
    arrayNumberOfObject.EntityData.ParentYangName = "total-counters"
    arrayNumberOfObject.EntityData.SegmentPath = "array-number-of-object"
    arrayNumberOfObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrayNumberOfObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrayNumberOfObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrayNumberOfObject.EntityData.Children = types.NewOrderedMap()
    arrayNumberOfObject.EntityData.Leafs = types.NewOrderedMap()
    arrayNumberOfObject.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", arrayNumberOfObject.ObjectType})
    arrayNumberOfObject.EntityData.Leafs.Append("num-objects", types.YLeaf{"NumObjects", arrayNumberOfObject.NumObjects})

    arrayNumberOfObject.EntityData.YListKeys = []string {}

    return &(arrayNumberOfObject.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos
// Proto Table
type Fib_Nodes_Node_Global_Summary_Protos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Proto Table entry. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Protos_Proto.
    Proto []*Fib_Nodes_Node_Global_Summary_Protos_Proto
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetEntityData() *types.CommonEntityData {
    protos.EntityData.YFilter = protos.YFilter
    protos.EntityData.YangName = "protos"
    protos.EntityData.BundleName = "cisco_ios_xr"
    protos.EntityData.ParentYangName = "summary"
    protos.EntityData.SegmentPath = "protos"
    protos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protos.EntityData.Children = types.NewOrderedMap()
    protos.EntityData.Children.Append("proto", types.YChild{"Proto", nil})
    for i := range protos.Proto {
        protos.EntityData.Children.Append(types.GetSegmentPath(protos.Proto[i]), types.YChild{"Proto", protos.Proto[i]})
    }
    protos.EntityData.Leafs = types.NewOrderedMap()

    protos.EntityData.YListKeys = []string {}

    return &(protos.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto
// Proto Table entry
type Fib_Nodes_Node_Global_Summary_Protos_Proto struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol Name. The type is FibafiProto.
    ProtocolName interface{}

    // Common Info.
    CommonInfo Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo

    // Global summary.
    Summary Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetEntityData() *types.CommonEntityData {
    proto.EntityData.YFilter = proto.YFilter
    proto.EntityData.YangName = "proto"
    proto.EntityData.BundleName = "cisco_ios_xr"
    proto.EntityData.ParentYangName = "protos"
    proto.EntityData.SegmentPath = "proto" + types.AddKeyToken(proto.ProtocolName, "protocol-name")
    proto.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    proto.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    proto.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    proto.EntityData.Children = types.NewOrderedMap()
    proto.EntityData.Children.Append("common-info", types.YChild{"CommonInfo", &proto.CommonInfo})
    proto.EntityData.Children.Append("summary", types.YChild{"Summary", &proto.Summary})
    proto.EntityData.Leafs = types.NewOrderedMap()
    proto.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", proto.ProtocolName})

    proto.EntityData.YListKeys = []string {"ProtocolName"}

    return &(proto.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo
// Common Info
type Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Placeholder for common info counts. The type is interface{} with range:
    // 0..4294967295.
    Count interface{}
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetEntityData() *types.CommonEntityData {
    commonInfo.EntityData.YFilter = commonInfo.YFilter
    commonInfo.EntityData.YangName = "common-info"
    commonInfo.EntityData.BundleName = "cisco_ios_xr"
    commonInfo.EntityData.ParentYangName = "proto"
    commonInfo.EntityData.SegmentPath = "common-info"
    commonInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonInfo.EntityData.Children = types.NewOrderedMap()
    commonInfo.EntityData.Leafs = types.NewOrderedMap()
    commonInfo.EntityData.Leafs.Append("count", types.YLeaf{"Count", commonInfo.Count})

    commonInfo.EntityData.YListKeys = []string {}

    return &(commonInfo.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary
// Global summary
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Base object.
    BaseObject Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject

    // Global Summary counts.
    SummaryCounts Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts

    // Global summary health.
    Health Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "proto"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("base-object", types.YChild{"BaseObject", &summary.BaseObject})
    summary.EntityData.Children.Append("summary-counts", types.YChild{"SummaryCounts", &summary.SummaryCounts})
    summary.EntityData.Children.Append("health", types.YChild{"Health", &summary.Health})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject
// Base object
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetEntityData() *types.CommonEntityData {
    baseObject.EntityData.YFilter = baseObject.YFilter
    baseObject.EntityData.YangName = "base-object"
    baseObject.EntityData.BundleName = "cisco_ios_xr"
    baseObject.EntityData.ParentYangName = "summary"
    baseObject.EntityData.SegmentPath = "base-object"
    baseObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    baseObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    baseObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    baseObject.EntityData.Children = types.NewOrderedMap()
    baseObject.EntityData.Leafs = types.NewOrderedMap()
    baseObject.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", baseObject.Protocol})

    baseObject.EntityData.YListKeys = []string {}

    return &(baseObject.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts
// Global Summary counts
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // number of retry timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    NumRetryTimeouts interface{}

    // number of elements in retry db. The type is interface{} with range:
    // 0..4294967295.
    NumRetryOjbects interface{}

    // number of objects in retry db. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry.
    ArrayNumberOfRetry []*Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry

    // total number of objects. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject.
    ArrayNumberOfObject []*Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetEntityData() *types.CommonEntityData {
    summaryCounts.EntityData.YFilter = summaryCounts.YFilter
    summaryCounts.EntityData.YangName = "summary-counts"
    summaryCounts.EntityData.BundleName = "cisco_ios_xr"
    summaryCounts.EntityData.ParentYangName = "summary"
    summaryCounts.EntityData.SegmentPath = "summary-counts"
    summaryCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryCounts.EntityData.Children = types.NewOrderedMap()
    summaryCounts.EntityData.Children.Append("array-number-of-retry", types.YChild{"ArrayNumberOfRetry", nil})
    for i := range summaryCounts.ArrayNumberOfRetry {
        summaryCounts.EntityData.Children.Append(types.GetSegmentPath(summaryCounts.ArrayNumberOfRetry[i]), types.YChild{"ArrayNumberOfRetry", summaryCounts.ArrayNumberOfRetry[i]})
    }
    summaryCounts.EntityData.Children.Append("array-number-of-object", types.YChild{"ArrayNumberOfObject", nil})
    for i := range summaryCounts.ArrayNumberOfObject {
        summaryCounts.EntityData.Children.Append(types.GetSegmentPath(summaryCounts.ArrayNumberOfObject[i]), types.YChild{"ArrayNumberOfObject", summaryCounts.ArrayNumberOfObject[i]})
    }
    summaryCounts.EntityData.Leafs = types.NewOrderedMap()
    summaryCounts.EntityData.Leafs.Append("num-retry-timeouts", types.YLeaf{"NumRetryTimeouts", summaryCounts.NumRetryTimeouts})
    summaryCounts.EntityData.Leafs.Append("num-retry-ojbects", types.YLeaf{"NumRetryOjbects", summaryCounts.NumRetryOjbects})

    summaryCounts.EntityData.YListKeys = []string {}

    return &(summaryCounts.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry
// number of objects in retry db
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // retry object. The type is string with length: 0..30.
    RetryObjectType interface{}

    // number of elements for this obj type in retry db. The type is interface{}
    // with range: 0..18446744073709551615.
    NumRetries interface{}
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetEntityData() *types.CommonEntityData {
    arrayNumberOfRetry.EntityData.YFilter = arrayNumberOfRetry.YFilter
    arrayNumberOfRetry.EntityData.YangName = "array-number-of-retry"
    arrayNumberOfRetry.EntityData.BundleName = "cisco_ios_xr"
    arrayNumberOfRetry.EntityData.ParentYangName = "summary-counts"
    arrayNumberOfRetry.EntityData.SegmentPath = "array-number-of-retry"
    arrayNumberOfRetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrayNumberOfRetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrayNumberOfRetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrayNumberOfRetry.EntityData.Children = types.NewOrderedMap()
    arrayNumberOfRetry.EntityData.Leafs = types.NewOrderedMap()
    arrayNumberOfRetry.EntityData.Leafs.Append("retry-object-type", types.YLeaf{"RetryObjectType", arrayNumberOfRetry.RetryObjectType})
    arrayNumberOfRetry.EntityData.Leafs.Append("num-retries", types.YLeaf{"NumRetries", arrayNumberOfRetry.NumRetries})

    arrayNumberOfRetry.EntityData.YListKeys = []string {}

    return &(arrayNumberOfRetry.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject
// total number of objects
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // object. The type is string with length: 0..30.
    ObjectType interface{}

    // number of elements for this obj type. The type is interface{} with range:
    // 0..4294967295.
    NumObjects interface{}
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetEntityData() *types.CommonEntityData {
    arrayNumberOfObject.EntityData.YFilter = arrayNumberOfObject.YFilter
    arrayNumberOfObject.EntityData.YangName = "array-number-of-object"
    arrayNumberOfObject.EntityData.BundleName = "cisco_ios_xr"
    arrayNumberOfObject.EntityData.ParentYangName = "summary-counts"
    arrayNumberOfObject.EntityData.SegmentPath = "array-number-of-object"
    arrayNumberOfObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    arrayNumberOfObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    arrayNumberOfObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    arrayNumberOfObject.EntityData.Children = types.NewOrderedMap()
    arrayNumberOfObject.EntityData.Leafs = types.NewOrderedMap()
    arrayNumberOfObject.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", arrayNumberOfObject.ObjectType})
    arrayNumberOfObject.EntityData.Leafs.Append("num-objects", types.YLeaf{"NumObjects", arrayNumberOfObject.NumObjects})

    arrayNumberOfObject.EntityData.YListKeys = []string {}

    return &(arrayNumberOfObject.EntityData)
}

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health
// Global summary health
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the retry db empty?. The type is bool.
    IsRetryDbEmpty interface{}
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetEntityData() *types.CommonEntityData {
    health.EntityData.YFilter = health.YFilter
    health.EntityData.YangName = "health"
    health.EntityData.BundleName = "cisco_ios_xr"
    health.EntityData.ParentYangName = "summary"
    health.EntityData.SegmentPath = "health"
    health.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    health.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    health.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    health.EntityData.Children = types.NewOrderedMap()
    health.EntityData.Leafs = types.NewOrderedMap()
    health.EntityData.Leafs.Append("is-retry-db-empty", types.YLeaf{"IsRetryDbEmpty", health.IsRetryDbEmpty})

    health.EntityData.YListKeys = []string {}

    return &(health.EntityData)
}

// Fib_Nodes_Node_Global_ObjectHistory
// Object History
type Fib_Nodes_Node_Global_ObjectHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Proto Table.
    ObjHistoryProtos Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetEntityData() *types.CommonEntityData {
    objectHistory.EntityData.YFilter = objectHistory.YFilter
    objectHistory.EntityData.YangName = "object-history"
    objectHistory.EntityData.BundleName = "cisco_ios_xr"
    objectHistory.EntityData.ParentYangName = "global"
    objectHistory.EntityData.SegmentPath = "object-history"
    objectHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectHistory.EntityData.Children = types.NewOrderedMap()
    objectHistory.EntityData.Children.Append("obj-history-protos", types.YChild{"ObjHistoryProtos", &objectHistory.ObjHistoryProtos})
    objectHistory.EntityData.Leafs = types.NewOrderedMap()

    objectHistory.EntityData.YListKeys = []string {}

    return &(objectHistory.EntityData)
}

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos
// Proto Table
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol Table entry. The type is slice of
    // Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto.
    ObjHistoryProto []*Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetEntityData() *types.CommonEntityData {
    objHistoryProtos.EntityData.YFilter = objHistoryProtos.YFilter
    objHistoryProtos.EntityData.YangName = "obj-history-protos"
    objHistoryProtos.EntityData.BundleName = "cisco_ios_xr"
    objHistoryProtos.EntityData.ParentYangName = "object-history"
    objHistoryProtos.EntityData.SegmentPath = "obj-history-protos"
    objHistoryProtos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objHistoryProtos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objHistoryProtos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objHistoryProtos.EntityData.Children = types.NewOrderedMap()
    objHistoryProtos.EntityData.Children.Append("obj-history-proto", types.YChild{"ObjHistoryProto", nil})
    for i := range objHistoryProtos.ObjHistoryProto {
        objHistoryProtos.EntityData.Children.Append(types.GetSegmentPath(objHistoryProtos.ObjHistoryProto[i]), types.YChild{"ObjHistoryProto", objHistoryProtos.ObjHistoryProto[i]})
    }
    objHistoryProtos.EntityData.Leafs = types.NewOrderedMap()

    objHistoryProtos.EntityData.YListKeys = []string {}

    return &(objHistoryProtos.EntityData)
}

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto
// Protocol Table entry
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol Name. The type is FibafiProto.
    ProtocolName interface{}

    // Base object.
    BaseObject Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject

    // Obj History.
    ObjectHistory Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetEntityData() *types.CommonEntityData {
    objHistoryProto.EntityData.YFilter = objHistoryProto.YFilter
    objHistoryProto.EntityData.YangName = "obj-history-proto"
    objHistoryProto.EntityData.BundleName = "cisco_ios_xr"
    objHistoryProto.EntityData.ParentYangName = "obj-history-protos"
    objHistoryProto.EntityData.SegmentPath = "obj-history-proto" + types.AddKeyToken(objHistoryProto.ProtocolName, "protocol-name")
    objHistoryProto.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objHistoryProto.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objHistoryProto.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objHistoryProto.EntityData.Children = types.NewOrderedMap()
    objHistoryProto.EntityData.Children.Append("base-object", types.YChild{"BaseObject", &objHistoryProto.BaseObject})
    objHistoryProto.EntityData.Children.Append("object-history", types.YChild{"ObjectHistory", &objHistoryProto.ObjectHistory})
    objHistoryProto.EntityData.Leafs = types.NewOrderedMap()
    objHistoryProto.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", objHistoryProto.ProtocolName})

    objHistoryProto.EntityData.YListKeys = []string {"ProtocolName"}

    return &(objHistoryProto.EntityData)
}

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject
// Base object
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetEntityData() *types.CommonEntityData {
    baseObject.EntityData.YFilter = baseObject.YFilter
    baseObject.EntityData.YangName = "base-object"
    baseObject.EntityData.BundleName = "cisco_ios_xr"
    baseObject.EntityData.ParentYangName = "obj-history-proto"
    baseObject.EntityData.SegmentPath = "base-object"
    baseObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    baseObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    baseObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    baseObject.EntityData.Children = types.NewOrderedMap()
    baseObject.EntityData.Leafs = types.NewOrderedMap()
    baseObject.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", baseObject.Protocol})

    baseObject.EntityData.YListKeys = []string {}

    return &(baseObject.EntityData)
}

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory
// Obj History
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Placeholder for obj history counts. The type is interface{} with range:
    // 0..4294967295.
    Count interface{}
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetEntityData() *types.CommonEntityData {
    objectHistory.EntityData.YFilter = objectHistory.YFilter
    objectHistory.EntityData.YangName = "object-history"
    objectHistory.EntityData.BundleName = "cisco_ios_xr"
    objectHistory.EntityData.ParentYangName = "obj-history-proto"
    objectHistory.EntityData.SegmentPath = "object-history"
    objectHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectHistory.EntityData.Children = types.NewOrderedMap()
    objectHistory.EntityData.Leafs = types.NewOrderedMap()
    objectHistory.EntityData.Leafs.Append("count", types.YLeaf{"Count", objectHistory.Count})

    objectHistory.EntityData.YListKeys = []string {}

    return &(objectHistory.EntityData)
}

// Fib_Nodes_Node_Protocols
// Protocol table
type Fib_Nodes_Node_Protocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol.
    Protocol []*Fib_Nodes_Node_Protocols_Protocol
}

func (protocols *Fib_Nodes_Node_Protocols) GetEntityData() *types.CommonEntityData {
    protocols.EntityData.YFilter = protocols.YFilter
    protocols.EntityData.YangName = "protocols"
    protocols.EntityData.BundleName = "cisco_ios_xr"
    protocols.EntityData.ParentYangName = "node"
    protocols.EntityData.SegmentPath = "protocols"
    protocols.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocols.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocols.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocols.EntityData.Children = types.NewOrderedMap()
    protocols.EntityData.Children.Append("protocol", types.YChild{"Protocol", nil})
    for i := range protocols.Protocol {
        protocols.EntityData.Children.Append(types.GetSegmentPath(protocols.Protocol[i]), types.YChild{"Protocol", protocols.Protocol[i]})
    }
    protocols.EntityData.Leafs = types.NewOrderedMap()

    protocols.EntityData.YListKeys = []string {}

    return &(protocols.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol
// Protocol table entry
type Fib_Nodes_Node_Protocols_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol Name . The type is FibProtocol.
    ProtocolName interface{}

    // CEF ISSU State.
    IssuState Fib_Nodes_Node_Protocols_Protocol_IssuState

    // Resource information.
    Resource Fib_Nodes_Node_Protocols_Protocol_Resource

    // Summary for FIB tables.
    FibSummaries Fib_Nodes_Node_Protocols_Protocol_FibSummaries

    // Summary for all external clients.
    ExternalSummaryAll Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll

    // Table of Fast Reroute activation logs.
    FrrLog Fib_Nodes_Node_Protocols_Protocol_FrrLog

    // VRF table.
    Vrfs Fib_Nodes_Node_Protocols_Protocol_Vrfs

    // Exact Route Table.
    ExactRoutes Fib_Nodes_Node_Protocols_Protocol_ExactRoutes

    // NHIdTable is accessed by two keys; {NHIdValue} and/or
    // {NHInterface,NHAddress.
    NhIds Fib_Nodes_Node_Protocols_Protocol_NhIds

    // External Client Summary Table.
    ExternalClientSummaries Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries

    // CEF misc hidden data.
    Misc Fib_Nodes_Node_Protocols_Protocol_Misc

    // Local label.
    LocalLabel Fib_Nodes_Node_Protocols_Protocol_LocalLabel
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "protocols"
    protocol.EntityData.SegmentPath = "protocol" + types.AddKeyToken(protocol.ProtocolName, "protocol-name")
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Children.Append("issu-state", types.YChild{"IssuState", &protocol.IssuState})
    protocol.EntityData.Children.Append("resource", types.YChild{"Resource", &protocol.Resource})
    protocol.EntityData.Children.Append("fib-summaries", types.YChild{"FibSummaries", &protocol.FibSummaries})
    protocol.EntityData.Children.Append("external-summary-all", types.YChild{"ExternalSummaryAll", &protocol.ExternalSummaryAll})
    protocol.EntityData.Children.Append("frr-log", types.YChild{"FrrLog", &protocol.FrrLog})
    protocol.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &protocol.Vrfs})
    protocol.EntityData.Children.Append("exact-routes", types.YChild{"ExactRoutes", &protocol.ExactRoutes})
    protocol.EntityData.Children.Append("nh-ids", types.YChild{"NhIds", &protocol.NhIds})
    protocol.EntityData.Children.Append("external-client-summaries", types.YChild{"ExternalClientSummaries", &protocol.ExternalClientSummaries})
    protocol.EntityData.Children.Append("misc", types.YChild{"Misc", &protocol.Misc})
    protocol.EntityData.Children.Append("local-label", types.YChild{"LocalLabel", &protocol.LocalLabel})
    protocol.EntityData.Leafs = types.NewOrderedMap()
    protocol.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocol.ProtocolName})

    protocol.EntityData.YListKeys = []string {"ProtocolName"}

    return &(protocol.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_IssuState
// CEF ISSU State
type Fib_Nodes_Node_Protocols_Protocol_IssuState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IMDR supported. The type is bool.
    ImdrSupport interface{}

    // SLC supported. The type is bool.
    SlcSupport interface{}

    // ISSU restart. The type is bool.
    FisIssuRestart interface{}

    // IMDR End-of-config implicit. The type is bool.
    ImdrEocImplicit interface{}

    // SLC End-of-config implicit. The type is bool.
    SlcEocImplicit interface{}

    // End-of-config received from IMDR timestamp. The type is string with length:
    // 0..33.
    EocReceivedImdrTimeStamp interface{}

    // End-of-config received from SLC timestamp. The type is string with length:
    // 0..33.
    EocReceivedSlcTimeStamp interface{}

    // End-of-download received from IM timestamp. The type is string with length:
    // 0..33.
    EodReceivedImTimeStamp interface{}

    // End-of-download send to IMDR timestamp. The type is string with length:
    // 0..33.
    EodSentImdrTimeStamp interface{}

    // End-of-download send to SLC timestamp. The type is string with length:
    // 0..33.
    EodSentSlcTimeStamp interface{}

    // ISSU error sent to ISSUMGR timetstamp. The type is interface{} with range:
    // 0..18446744073709551615.
    FisIssuErrorTs interface{}

    // IMDR state for the protocols. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState.
    FisProtoState []*Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetEntityData() *types.CommonEntityData {
    issuState.EntityData.YFilter = issuState.YFilter
    issuState.EntityData.YangName = "issu-state"
    issuState.EntityData.BundleName = "cisco_ios_xr"
    issuState.EntityData.ParentYangName = "protocol"
    issuState.EntityData.SegmentPath = "issu-state"
    issuState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issuState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issuState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issuState.EntityData.Children = types.NewOrderedMap()
    issuState.EntityData.Children.Append("fis-proto-state", types.YChild{"FisProtoState", nil})
    for i := range issuState.FisProtoState {
        issuState.EntityData.Children.Append(types.GetSegmentPath(issuState.FisProtoState[i]), types.YChild{"FisProtoState", issuState.FisProtoState[i]})
    }
    issuState.EntityData.Leafs = types.NewOrderedMap()
    issuState.EntityData.Leafs.Append("imdr-support", types.YLeaf{"ImdrSupport", issuState.ImdrSupport})
    issuState.EntityData.Leafs.Append("slc-support", types.YLeaf{"SlcSupport", issuState.SlcSupport})
    issuState.EntityData.Leafs.Append("fis-issu-restart", types.YLeaf{"FisIssuRestart", issuState.FisIssuRestart})
    issuState.EntityData.Leafs.Append("imdr-eoc-implicit", types.YLeaf{"ImdrEocImplicit", issuState.ImdrEocImplicit})
    issuState.EntityData.Leafs.Append("slc-eoc-implicit", types.YLeaf{"SlcEocImplicit", issuState.SlcEocImplicit})
    issuState.EntityData.Leafs.Append("eoc-received-imdr-time-stamp", types.YLeaf{"EocReceivedImdrTimeStamp", issuState.EocReceivedImdrTimeStamp})
    issuState.EntityData.Leafs.Append("eoc-received-slc-time-stamp", types.YLeaf{"EocReceivedSlcTimeStamp", issuState.EocReceivedSlcTimeStamp})
    issuState.EntityData.Leafs.Append("eod-received-im-time-stamp", types.YLeaf{"EodReceivedImTimeStamp", issuState.EodReceivedImTimeStamp})
    issuState.EntityData.Leafs.Append("eod-sent-imdr-time-stamp", types.YLeaf{"EodSentImdrTimeStamp", issuState.EodSentImdrTimeStamp})
    issuState.EntityData.Leafs.Append("eod-sent-slc-time-stamp", types.YLeaf{"EodSentSlcTimeStamp", issuState.EodSentSlcTimeStamp})
    issuState.EntityData.Leafs.Append("fis-issu-error-ts", types.YLeaf{"FisIssuErrorTs", issuState.FisIssuErrorTs})

    issuState.EntityData.YListKeys = []string {}

    return &(issuState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState
// IMDR state for the protocols
type Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol name. The type is string with length: 0..6.
    ProtocolName interface{}

    // AIB EODTimeStamp. The type is string with length: 0..33.
    AibEodTimeStamp interface{}

    // RSI EOD expected/valid. The type is bool.
    RsiEodValid interface{}

    // RSI EOD received timestamp. The type is string with length: 0..33.
    RsiEodTimeStamp interface{}

    // LSD EOD expected/valid. The type is bool.
    LsdEodValid interface{}

    // LSD EOD received timestamp. The type is string with length: 0..33.
    LsdEodTimeStamp interface{}

    // LMRIB EOD expected/valid. The type is bool.
    LmribEodValid interface{}

    // LMRIB EOD received timestamp. The type is string with length: 0..33.
    LmribEodTimeStamp interface{}

    // RIB table info valid. The type is bool.
    RibInfoValid interface{}

    // Number of BCDL tables. The type is interface{} with range: 0..4294967295.
    BcdlTables interface{}

    // Number of tables converged. The type is interface{} with range:
    // 0..4294967295.
    ConvergedTables interface{}

    // All RIB tables converged timestamp. The type is string with length: 0..33.
    RibTablesConvergedTimeStamp interface{}

    // Protocol EOD expected/valid. The type is bool.
    ProtocolEodValid interface{}

    // Protocol EOD sent timestamp. The type is string with length: 0..33.
    ProtocolEodTimeStamp interface{}
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetEntityData() *types.CommonEntityData {
    fisProtoState.EntityData.YFilter = fisProtoState.YFilter
    fisProtoState.EntityData.YangName = "fis-proto-state"
    fisProtoState.EntityData.BundleName = "cisco_ios_xr"
    fisProtoState.EntityData.ParentYangName = "issu-state"
    fisProtoState.EntityData.SegmentPath = "fis-proto-state"
    fisProtoState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fisProtoState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fisProtoState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fisProtoState.EntityData.Children = types.NewOrderedMap()
    fisProtoState.EntityData.Leafs = types.NewOrderedMap()
    fisProtoState.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", fisProtoState.ProtocolName})
    fisProtoState.EntityData.Leafs.Append("aib-eod-time-stamp", types.YLeaf{"AibEodTimeStamp", fisProtoState.AibEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("rsi-eod-valid", types.YLeaf{"RsiEodValid", fisProtoState.RsiEodValid})
    fisProtoState.EntityData.Leafs.Append("rsi-eod-time-stamp", types.YLeaf{"RsiEodTimeStamp", fisProtoState.RsiEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("lsd-eod-valid", types.YLeaf{"LsdEodValid", fisProtoState.LsdEodValid})
    fisProtoState.EntityData.Leafs.Append("lsd-eod-time-stamp", types.YLeaf{"LsdEodTimeStamp", fisProtoState.LsdEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("lmrib-eod-valid", types.YLeaf{"LmribEodValid", fisProtoState.LmribEodValid})
    fisProtoState.EntityData.Leafs.Append("lmrib-eod-time-stamp", types.YLeaf{"LmribEodTimeStamp", fisProtoState.LmribEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("rib-info-valid", types.YLeaf{"RibInfoValid", fisProtoState.RibInfoValid})
    fisProtoState.EntityData.Leafs.Append("bcdl-tables", types.YLeaf{"BcdlTables", fisProtoState.BcdlTables})
    fisProtoState.EntityData.Leafs.Append("converged-tables", types.YLeaf{"ConvergedTables", fisProtoState.ConvergedTables})
    fisProtoState.EntityData.Leafs.Append("rib-tables-converged-time-stamp", types.YLeaf{"RibTablesConvergedTimeStamp", fisProtoState.RibTablesConvergedTimeStamp})
    fisProtoState.EntityData.Leafs.Append("protocol-eod-valid", types.YLeaf{"ProtocolEodValid", fisProtoState.ProtocolEodValid})
    fisProtoState.EntityData.Leafs.Append("protocol-eod-time-stamp", types.YLeaf{"ProtocolEodTimeStamp", fisProtoState.ProtocolEodTimeStamp})

    fisProtoState.EntityData.YListKeys = []string {}

    return &(fisProtoState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource
// Resource information
type Fib_Nodes_Node_Protocols_Protocol_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info.
    ResourceDetailInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo

    // Detailed info with ingress hardware info.
    ResourceHardwareIngressInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo

    // Detailed info with egress hardware info.
    ResourceHardwareEgressInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo

    // Summary info.
    ResourceSummaryInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "protocol"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = types.NewOrderedMap()
    resource.EntityData.Children.Append("resource-detail-info", types.YChild{"ResourceDetailInfo", &resource.ResourceDetailInfo})
    resource.EntityData.Children.Append("resource-hardware-ingress-info", types.YChild{"ResourceHardwareIngressInfo", &resource.ResourceHardwareIngressInfo})
    resource.EntityData.Children.Append("resource-hardware-egress-info", types.YChild{"ResourceHardwareEgressInfo", &resource.ResourceHardwareEgressInfo})
    resource.EntityData.Children.Append("resource-summary-info", types.YChild{"ResourceSummaryInfo", &resource.ResourceSummaryInfo})
    resource.EntityData.Leafs = types.NewOrderedMap()

    resource.EntityData.YListKeys = []string {}

    return &(resource.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo
// Detailed info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode.
    SrHwrsrcMode []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState.
    SrShmState []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetEntityData() *types.CommonEntityData {
    resourceDetailInfo.EntityData.YFilter = resourceDetailInfo.YFilter
    resourceDetailInfo.EntityData.YangName = "resource-detail-info"
    resourceDetailInfo.EntityData.BundleName = "cisco_ios_xr"
    resourceDetailInfo.EntityData.ParentYangName = "resource"
    resourceDetailInfo.EntityData.SegmentPath = "resource-detail-info"
    resourceDetailInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resourceDetailInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resourceDetailInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resourceDetailInfo.EntityData.Children = types.NewOrderedMap()
    resourceDetailInfo.EntityData.Children.Append("sr-hwrsrc-mode", types.YChild{"SrHwrsrcMode", nil})
    for i := range resourceDetailInfo.SrHwrsrcMode {
        resourceDetailInfo.EntityData.Children.Append(types.GetSegmentPath(resourceDetailInfo.SrHwrsrcMode[i]), types.YChild{"SrHwrsrcMode", resourceDetailInfo.SrHwrsrcMode[i]})
    }
    resourceDetailInfo.EntityData.Children.Append("sr-shm-state", types.YChild{"SrShmState", nil})
    for i := range resourceDetailInfo.SrShmState {
        resourceDetailInfo.EntityData.Children.Append(types.GetSegmentPath(resourceDetailInfo.SrShmState[i]), types.YChild{"SrShmState", resourceDetailInfo.SrShmState[i]})
    }
    resourceDetailInfo.EntityData.Leafs = types.NewOrderedMap()
    resourceDetailInfo.EntityData.Leafs.Append("sr-curr-mode", types.YLeaf{"SrCurrMode", resourceDetailInfo.SrCurrMode})
    resourceDetailInfo.EntityData.Leafs.Append("sr-hwrsrc-info", types.YLeaf{"SrHwrsrcInfo", resourceDetailInfo.SrHwrsrcInfo})
    resourceDetailInfo.EntityData.Leafs.Append("sr-shmwin-oor-count", types.YLeaf{"SrShmwinOorCount", resourceDetailInfo.SrShmwinOorCount})
    resourceDetailInfo.EntityData.Leafs.Append("sr-hw-oor-count", types.YLeaf{"SrHwOorCount", resourceDetailInfo.SrHwOorCount})
    resourceDetailInfo.EntityData.Leafs.Append("sr-in-oor-ts", types.YLeaf{"SrInOorTs", resourceDetailInfo.SrInOorTs})
    resourceDetailInfo.EntityData.Leafs.Append("sr-out-oor-ts", types.YLeaf{"SrOutOorTs", resourceDetailInfo.SrOutOorTs})

    resourceDetailInfo.EntityData.YListKeys = []string {}

    return &(resourceDetailInfo.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetEntityData() *types.CommonEntityData {
    srHwrsrcMode.EntityData.YFilter = srHwrsrcMode.YFilter
    srHwrsrcMode.EntityData.YangName = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.BundleName = "cisco_ios_xr"
    srHwrsrcMode.EntityData.ParentYangName = "resource-detail-info"
    srHwrsrcMode.EntityData.SegmentPath = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srHwrsrcMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srHwrsrcMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srHwrsrcMode.EntityData.Children = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srHwrsrcMode.Entry})

    srHwrsrcMode.EntityData.YListKeys = []string {}

    return &(srHwrsrcMode.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetEntityData() *types.CommonEntityData {
    srShmState.EntityData.YFilter = srShmState.YFilter
    srShmState.EntityData.YangName = "sr-shm-state"
    srShmState.EntityData.BundleName = "cisco_ios_xr"
    srShmState.EntityData.ParentYangName = "resource-detail-info"
    srShmState.EntityData.SegmentPath = "sr-shm-state"
    srShmState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srShmState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srShmState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srShmState.EntityData.Children = types.NewOrderedMap()
    srShmState.EntityData.Leafs = types.NewOrderedMap()
    srShmState.EntityData.Leafs.Append("srs-curr-mode", types.YLeaf{"SrsCurrMode", srShmState.SrsCurrMode})
    srShmState.EntityData.Leafs.Append("srs-avg-avail", types.YLeaf{"SrsAvgAvail", srShmState.SrsAvgAvail})
    srShmState.EntityData.Leafs.Append("srs-max-avail", types.YLeaf{"SrsMaxAvail", srShmState.SrsMaxAvail})

    srShmState.EntityData.YListKeys = []string {}

    return &(srShmState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo
// Detailed info with ingress hardware info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode.
    SrHwrsrcMode []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState.
    SrShmState []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetEntityData() *types.CommonEntityData {
    resourceHardwareIngressInfo.EntityData.YFilter = resourceHardwareIngressInfo.YFilter
    resourceHardwareIngressInfo.EntityData.YangName = "resource-hardware-ingress-info"
    resourceHardwareIngressInfo.EntityData.BundleName = "cisco_ios_xr"
    resourceHardwareIngressInfo.EntityData.ParentYangName = "resource"
    resourceHardwareIngressInfo.EntityData.SegmentPath = "resource-hardware-ingress-info"
    resourceHardwareIngressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resourceHardwareIngressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resourceHardwareIngressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resourceHardwareIngressInfo.EntityData.Children = types.NewOrderedMap()
    resourceHardwareIngressInfo.EntityData.Children.Append("sr-hwrsrc-mode", types.YChild{"SrHwrsrcMode", nil})
    for i := range resourceHardwareIngressInfo.SrHwrsrcMode {
        resourceHardwareIngressInfo.EntityData.Children.Append(types.GetSegmentPath(resourceHardwareIngressInfo.SrHwrsrcMode[i]), types.YChild{"SrHwrsrcMode", resourceHardwareIngressInfo.SrHwrsrcMode[i]})
    }
    resourceHardwareIngressInfo.EntityData.Children.Append("sr-shm-state", types.YChild{"SrShmState", nil})
    for i := range resourceHardwareIngressInfo.SrShmState {
        resourceHardwareIngressInfo.EntityData.Children.Append(types.GetSegmentPath(resourceHardwareIngressInfo.SrShmState[i]), types.YChild{"SrShmState", resourceHardwareIngressInfo.SrShmState[i]})
    }
    resourceHardwareIngressInfo.EntityData.Leafs = types.NewOrderedMap()
    resourceHardwareIngressInfo.EntityData.Leafs.Append("sr-curr-mode", types.YLeaf{"SrCurrMode", resourceHardwareIngressInfo.SrCurrMode})
    resourceHardwareIngressInfo.EntityData.Leafs.Append("sr-hwrsrc-info", types.YLeaf{"SrHwrsrcInfo", resourceHardwareIngressInfo.SrHwrsrcInfo})
    resourceHardwareIngressInfo.EntityData.Leafs.Append("sr-shmwin-oor-count", types.YLeaf{"SrShmwinOorCount", resourceHardwareIngressInfo.SrShmwinOorCount})
    resourceHardwareIngressInfo.EntityData.Leafs.Append("sr-hw-oor-count", types.YLeaf{"SrHwOorCount", resourceHardwareIngressInfo.SrHwOorCount})
    resourceHardwareIngressInfo.EntityData.Leafs.Append("sr-in-oor-ts", types.YLeaf{"SrInOorTs", resourceHardwareIngressInfo.SrInOorTs})
    resourceHardwareIngressInfo.EntityData.Leafs.Append("sr-out-oor-ts", types.YLeaf{"SrOutOorTs", resourceHardwareIngressInfo.SrOutOorTs})

    resourceHardwareIngressInfo.EntityData.YListKeys = []string {}

    return &(resourceHardwareIngressInfo.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetEntityData() *types.CommonEntityData {
    srHwrsrcMode.EntityData.YFilter = srHwrsrcMode.YFilter
    srHwrsrcMode.EntityData.YangName = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.BundleName = "cisco_ios_xr"
    srHwrsrcMode.EntityData.ParentYangName = "resource-hardware-ingress-info"
    srHwrsrcMode.EntityData.SegmentPath = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srHwrsrcMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srHwrsrcMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srHwrsrcMode.EntityData.Children = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srHwrsrcMode.Entry})

    srHwrsrcMode.EntityData.YListKeys = []string {}

    return &(srHwrsrcMode.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetEntityData() *types.CommonEntityData {
    srShmState.EntityData.YFilter = srShmState.YFilter
    srShmState.EntityData.YangName = "sr-shm-state"
    srShmState.EntityData.BundleName = "cisco_ios_xr"
    srShmState.EntityData.ParentYangName = "resource-hardware-ingress-info"
    srShmState.EntityData.SegmentPath = "sr-shm-state"
    srShmState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srShmState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srShmState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srShmState.EntityData.Children = types.NewOrderedMap()
    srShmState.EntityData.Leafs = types.NewOrderedMap()
    srShmState.EntityData.Leafs.Append("srs-curr-mode", types.YLeaf{"SrsCurrMode", srShmState.SrsCurrMode})
    srShmState.EntityData.Leafs.Append("srs-avg-avail", types.YLeaf{"SrsAvgAvail", srShmState.SrsAvgAvail})
    srShmState.EntityData.Leafs.Append("srs-max-avail", types.YLeaf{"SrsMaxAvail", srShmState.SrsMaxAvail})

    srShmState.EntityData.YListKeys = []string {}

    return &(srShmState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo
// Detailed info with egress hardware info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode.
    SrHwrsrcMode []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState.
    SrShmState []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetEntityData() *types.CommonEntityData {
    resourceHardwareEgressInfo.EntityData.YFilter = resourceHardwareEgressInfo.YFilter
    resourceHardwareEgressInfo.EntityData.YangName = "resource-hardware-egress-info"
    resourceHardwareEgressInfo.EntityData.BundleName = "cisco_ios_xr"
    resourceHardwareEgressInfo.EntityData.ParentYangName = "resource"
    resourceHardwareEgressInfo.EntityData.SegmentPath = "resource-hardware-egress-info"
    resourceHardwareEgressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resourceHardwareEgressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resourceHardwareEgressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resourceHardwareEgressInfo.EntityData.Children = types.NewOrderedMap()
    resourceHardwareEgressInfo.EntityData.Children.Append("sr-hwrsrc-mode", types.YChild{"SrHwrsrcMode", nil})
    for i := range resourceHardwareEgressInfo.SrHwrsrcMode {
        resourceHardwareEgressInfo.EntityData.Children.Append(types.GetSegmentPath(resourceHardwareEgressInfo.SrHwrsrcMode[i]), types.YChild{"SrHwrsrcMode", resourceHardwareEgressInfo.SrHwrsrcMode[i]})
    }
    resourceHardwareEgressInfo.EntityData.Children.Append("sr-shm-state", types.YChild{"SrShmState", nil})
    for i := range resourceHardwareEgressInfo.SrShmState {
        resourceHardwareEgressInfo.EntityData.Children.Append(types.GetSegmentPath(resourceHardwareEgressInfo.SrShmState[i]), types.YChild{"SrShmState", resourceHardwareEgressInfo.SrShmState[i]})
    }
    resourceHardwareEgressInfo.EntityData.Leafs = types.NewOrderedMap()
    resourceHardwareEgressInfo.EntityData.Leafs.Append("sr-curr-mode", types.YLeaf{"SrCurrMode", resourceHardwareEgressInfo.SrCurrMode})
    resourceHardwareEgressInfo.EntityData.Leafs.Append("sr-hwrsrc-info", types.YLeaf{"SrHwrsrcInfo", resourceHardwareEgressInfo.SrHwrsrcInfo})
    resourceHardwareEgressInfo.EntityData.Leafs.Append("sr-shmwin-oor-count", types.YLeaf{"SrShmwinOorCount", resourceHardwareEgressInfo.SrShmwinOorCount})
    resourceHardwareEgressInfo.EntityData.Leafs.Append("sr-hw-oor-count", types.YLeaf{"SrHwOorCount", resourceHardwareEgressInfo.SrHwOorCount})
    resourceHardwareEgressInfo.EntityData.Leafs.Append("sr-in-oor-ts", types.YLeaf{"SrInOorTs", resourceHardwareEgressInfo.SrInOorTs})
    resourceHardwareEgressInfo.EntityData.Leafs.Append("sr-out-oor-ts", types.YLeaf{"SrOutOorTs", resourceHardwareEgressInfo.SrOutOorTs})

    resourceHardwareEgressInfo.EntityData.YListKeys = []string {}

    return &(resourceHardwareEgressInfo.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetEntityData() *types.CommonEntityData {
    srHwrsrcMode.EntityData.YFilter = srHwrsrcMode.YFilter
    srHwrsrcMode.EntityData.YangName = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.BundleName = "cisco_ios_xr"
    srHwrsrcMode.EntityData.ParentYangName = "resource-hardware-egress-info"
    srHwrsrcMode.EntityData.SegmentPath = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srHwrsrcMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srHwrsrcMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srHwrsrcMode.EntityData.Children = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srHwrsrcMode.Entry})

    srHwrsrcMode.EntityData.YListKeys = []string {}

    return &(srHwrsrcMode.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetEntityData() *types.CommonEntityData {
    srShmState.EntityData.YFilter = srShmState.YFilter
    srShmState.EntityData.YangName = "sr-shm-state"
    srShmState.EntityData.BundleName = "cisco_ios_xr"
    srShmState.EntityData.ParentYangName = "resource-hardware-egress-info"
    srShmState.EntityData.SegmentPath = "sr-shm-state"
    srShmState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srShmState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srShmState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srShmState.EntityData.Children = types.NewOrderedMap()
    srShmState.EntityData.Leafs = types.NewOrderedMap()
    srShmState.EntityData.Leafs.Append("srs-curr-mode", types.YLeaf{"SrsCurrMode", srShmState.SrsCurrMode})
    srShmState.EntityData.Leafs.Append("srs-avg-avail", types.YLeaf{"SrsAvgAvail", srShmState.SrsAvgAvail})
    srShmState.EntityData.Leafs.Append("srs-max-avail", types.YLeaf{"SrsMaxAvail", srShmState.SrsMaxAvail})

    srShmState.EntityData.YListKeys = []string {}

    return &(srShmState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo
// Summary info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode.
    SrHwrsrcMode []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState.
    SrShmState []*Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetEntityData() *types.CommonEntityData {
    resourceSummaryInfo.EntityData.YFilter = resourceSummaryInfo.YFilter
    resourceSummaryInfo.EntityData.YangName = "resource-summary-info"
    resourceSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    resourceSummaryInfo.EntityData.ParentYangName = "resource"
    resourceSummaryInfo.EntityData.SegmentPath = "resource-summary-info"
    resourceSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resourceSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resourceSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resourceSummaryInfo.EntityData.Children = types.NewOrderedMap()
    resourceSummaryInfo.EntityData.Children.Append("sr-hwrsrc-mode", types.YChild{"SrHwrsrcMode", nil})
    for i := range resourceSummaryInfo.SrHwrsrcMode {
        resourceSummaryInfo.EntityData.Children.Append(types.GetSegmentPath(resourceSummaryInfo.SrHwrsrcMode[i]), types.YChild{"SrHwrsrcMode", resourceSummaryInfo.SrHwrsrcMode[i]})
    }
    resourceSummaryInfo.EntityData.Children.Append("sr-shm-state", types.YChild{"SrShmState", nil})
    for i := range resourceSummaryInfo.SrShmState {
        resourceSummaryInfo.EntityData.Children.Append(types.GetSegmentPath(resourceSummaryInfo.SrShmState[i]), types.YChild{"SrShmState", resourceSummaryInfo.SrShmState[i]})
    }
    resourceSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    resourceSummaryInfo.EntityData.Leafs.Append("sr-curr-mode", types.YLeaf{"SrCurrMode", resourceSummaryInfo.SrCurrMode})
    resourceSummaryInfo.EntityData.Leafs.Append("sr-hwrsrc-info", types.YLeaf{"SrHwrsrcInfo", resourceSummaryInfo.SrHwrsrcInfo})
    resourceSummaryInfo.EntityData.Leafs.Append("sr-shmwin-oor-count", types.YLeaf{"SrShmwinOorCount", resourceSummaryInfo.SrShmwinOorCount})
    resourceSummaryInfo.EntityData.Leafs.Append("sr-hw-oor-count", types.YLeaf{"SrHwOorCount", resourceSummaryInfo.SrHwOorCount})
    resourceSummaryInfo.EntityData.Leafs.Append("sr-in-oor-ts", types.YLeaf{"SrInOorTs", resourceSummaryInfo.SrInOorTs})
    resourceSummaryInfo.EntityData.Leafs.Append("sr-out-oor-ts", types.YLeaf{"SrOutOorTs", resourceSummaryInfo.SrOutOorTs})

    resourceSummaryInfo.EntityData.YListKeys = []string {}

    return &(resourceSummaryInfo.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetEntityData() *types.CommonEntityData {
    srHwrsrcMode.EntityData.YFilter = srHwrsrcMode.YFilter
    srHwrsrcMode.EntityData.YangName = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.BundleName = "cisco_ios_xr"
    srHwrsrcMode.EntityData.ParentYangName = "resource-summary-info"
    srHwrsrcMode.EntityData.SegmentPath = "sr-hwrsrc-mode"
    srHwrsrcMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srHwrsrcMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srHwrsrcMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srHwrsrcMode.EntityData.Children = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs = types.NewOrderedMap()
    srHwrsrcMode.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srHwrsrcMode.Entry})

    srHwrsrcMode.EntityData.YListKeys = []string {}

    return &(srHwrsrcMode.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetEntityData() *types.CommonEntityData {
    srShmState.EntityData.YFilter = srShmState.YFilter
    srShmState.EntityData.YangName = "sr-shm-state"
    srShmState.EntityData.BundleName = "cisco_ios_xr"
    srShmState.EntityData.ParentYangName = "resource-summary-info"
    srShmState.EntityData.SegmentPath = "sr-shm-state"
    srShmState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srShmState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srShmState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srShmState.EntityData.Children = types.NewOrderedMap()
    srShmState.EntityData.Leafs = types.NewOrderedMap()
    srShmState.EntityData.Leafs.Append("srs-curr-mode", types.YLeaf{"SrsCurrMode", srShmState.SrsCurrMode})
    srShmState.EntityData.Leafs.Append("srs-avg-avail", types.YLeaf{"SrsAvgAvail", srShmState.SrsAvgAvail})
    srShmState.EntityData.Leafs.Append("srs-max-avail", types.YLeaf{"SrsMaxAvail", srShmState.SrsMaxAvail})

    srShmState.EntityData.YListKeys = []string {}

    return &(srShmState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries
// Summary for FIB tables
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary for the requested fib table. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary.
    FibSummary []*Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetEntityData() *types.CommonEntityData {
    fibSummaries.EntityData.YFilter = fibSummaries.YFilter
    fibSummaries.EntityData.YangName = "fib-summaries"
    fibSummaries.EntityData.BundleName = "cisco_ios_xr"
    fibSummaries.EntityData.ParentYangName = "protocol"
    fibSummaries.EntityData.SegmentPath = "fib-summaries"
    fibSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibSummaries.EntityData.Children = types.NewOrderedMap()
    fibSummaries.EntityData.Children.Append("fib-summary", types.YChild{"FibSummary", nil})
    for i := range fibSummaries.FibSummary {
        fibSummaries.EntityData.Children.Append(types.GetSegmentPath(fibSummaries.FibSummary[i]), types.YChild{"FibSummary", fibSummaries.FibSummary[i]})
    }
    fibSummaries.EntityData.Leafs = types.NewOrderedMap()

    fibSummaries.EntityData.YListKeys = []string {}

    return &(fibSummaries.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary
// Summary for the requested fib table
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // FIB table id. The type is string with pattern: [0-9a-fA-F]{1,8}.
    TableId interface{}

    // The router-id. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Prefix interface{}

    // Table Id. The type is interface{} with range: 0..4294967295.
    SsTblId interface{}

    // Table Id Ptr. The type is interface{} with range: 0..4294967295.
    SsTblIdPtr interface{}

    // Virtual routing forwarding instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrfId interface{}

    // Virtual router instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrId interface{}

    // LBA configuration state. The type is SsLbaState.
    LoadBalancing interface{}

    // Number of forwarding elements linked to the table. The type is interface{}
    // with range: 0..4294967295.
    ForwardingElements interface{}

    // Number of routes. The type is interface{} with range: 0..4294967295.
    Routes interface{}

    // Number of inplace modifications. The type is interface{} with range:
    // 0..4294967295.
    PrefixInPlaceModifications interface{}

    // Number of deleted stale leafs. The type is interface{} with range:
    // 0..4294967295.
    StalePrefixDeletes interface{}

    // Count of load sharing elements. The type is interface{} with range:
    // 0..4294967295.
    LoadSharingElements interface{}

    // Count of load sharing references. The type is interface{} with range:
    // 0..18446744073709551615.
    LoadSharingReferences interface{}

    // Total memory used by load sharing elements. The type is interface{} with
    // range: 0..4294967295.
    TotalLoadShareElementBytes interface{}

    // Total memory used by leaves. The type is interface{} with range:
    // 0..4294967295.
    LeavesUsedBytes interface{}

    // Number of reresolved entries. The type is interface{} with range:
    // 0..4294967295.
    ReresolveEntries interface{}

    // Number of old unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    OldUnresolveEntries interface{}

    // Number of new unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    NewUnresolveEntries interface{}

    // Number of total unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    UnresolveEntries interface{}

    // Number of routes dropped by CEF. The type is interface{} with range:
    // 0..4294967295.
    CefRouteDrops interface{}

    // the number of routes dropped due to version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    CefVersionMismatchRouteDrops interface{}

    // Number of entries in the route delete cache. The type is interface{} with
    // range: 0..4294967295.
    DeleteCacheNumEntries interface{}

    // Number of entries present on addition. The type is interface{} with range:
    // 0..4294967295.
    ExistingLeavesRevisions interface{}

    // Default prefix. The type is interface{} with range: 0..4294967295.
    FibDefaultPrefix interface{}

    // Default prefix mask length. The type is interface{} with range:
    // 0..4294967295.
    FibDefaultPrefixMaskLength interface{}

    // Number of NHINFOS. The type is interface{} with range: 0..4294967295.
    NextHops interface{}

    // Number of incomplete NHINFOS. The type is interface{} with range:
    // 0..4294967295.
    IncompleteNextHops interface{}

    // IP CEF resolution timer in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ResolutionTimer interface{}

    // IP CEF slow processing time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    SlowProcessTimer interface{}

    // IP CEF max resolution time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaxResolutionTimer interface{}

    // Number of prefixes with imposition LDI. The type is interface{} with range:
    // 0..4294967295.
    ImpositionPrefixes interface{}

    // Number of prefixes with extended path-list. The type is interface{} with
    // range: 0..4294967295.
    ExtendedPrefixes interface{}

    // Number of routes updates with recycled label handled. The type is
    // interface{} with range: 0..4294967295.
    CeflBlRecycledRoutes interface{}

    // pd backwalks on LDI modify with backup path. The type is interface{} with
    // range: 0..4294967295.
    LdiBackwalks interface{}

    // Number of routes with FRR protection. The type is interface{} with range:
    // 0..4294967295.
    SsProtRouteCount interface{}

    // Number of lisp eid prefixes associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispEidPrefixes interface{}

    // Number of lisp eid prefixes eligible for forwarding. The type is
    // interface{} with range: 0..4294967295.
    LispEidValidPrefixes interface{}

    // Number of lisp rloc objects associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispRlocObjects interface{}

    // Number of SRv6 transit routes. The type is interface{} with range:
    // 0..4294967295.
    NumberRoutesSrv6Transit interface{}

    // Number of SRv6 end routes. The type is interface{} with range:
    // 0..4294967295.
    NumberRoutesSrv6End interface{}

    // VXLAN local Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    SsVxlanLtepIfh interface{}

    // Number of dropped pathlists. The type is interface{} with range:
    // 0..4294967295.
    SsDropPlCount interface{}

    // Exclusive load sharing element.
    ExclusiveLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement

    // Shared load sharing element.
    SharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement

    // Cross-table shared load sharing element.
    CrossSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement

    // Label-shared load sharing element.
    LabelSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement

    // Distribution of prefix mask lengths.
    PrefixMasklenDistribution Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetEntityData() *types.CommonEntityData {
    fibSummary.EntityData.YFilter = fibSummary.YFilter
    fibSummary.EntityData.YangName = "fib-summary"
    fibSummary.EntityData.BundleName = "cisco_ios_xr"
    fibSummary.EntityData.ParentYangName = "fib-summaries"
    fibSummary.EntityData.SegmentPath = "fib-summary"
    fibSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibSummary.EntityData.Children = types.NewOrderedMap()
    fibSummary.EntityData.Children.Append("exclusive-load-sharing-element", types.YChild{"ExclusiveLoadSharingElement", &fibSummary.ExclusiveLoadSharingElement})
    fibSummary.EntityData.Children.Append("shared-load-sharing-element", types.YChild{"SharedLoadSharingElement", &fibSummary.SharedLoadSharingElement})
    fibSummary.EntityData.Children.Append("cross-shared-load-sharing-element", types.YChild{"CrossSharedLoadSharingElement", &fibSummary.CrossSharedLoadSharingElement})
    fibSummary.EntityData.Children.Append("label-shared-load-sharing-element", types.YChild{"LabelSharedLoadSharingElement", &fibSummary.LabelSharedLoadSharingElement})
    fibSummary.EntityData.Children.Append("prefix-masklen-distribution", types.YChild{"PrefixMasklenDistribution", &fibSummary.PrefixMasklenDistribution})
    fibSummary.EntityData.Leafs = types.NewOrderedMap()
    fibSummary.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", fibSummary.VrfName})
    fibSummary.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", fibSummary.TableId})
    fibSummary.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", fibSummary.Prefix})
    fibSummary.EntityData.Leafs.Append("ss-tbl-id", types.YLeaf{"SsTblId", fibSummary.SsTblId})
    fibSummary.EntityData.Leafs.Append("ss-tbl-id-ptr", types.YLeaf{"SsTblIdPtr", fibSummary.SsTblIdPtr})
    fibSummary.EntityData.Leafs.Append("ss-vrf-id", types.YLeaf{"SsVrfId", fibSummary.SsVrfId})
    fibSummary.EntityData.Leafs.Append("ss-vr-id", types.YLeaf{"SsVrId", fibSummary.SsVrId})
    fibSummary.EntityData.Leafs.Append("load-balancing", types.YLeaf{"LoadBalancing", fibSummary.LoadBalancing})
    fibSummary.EntityData.Leafs.Append("forwarding-elements", types.YLeaf{"ForwardingElements", fibSummary.ForwardingElements})
    fibSummary.EntityData.Leafs.Append("routes", types.YLeaf{"Routes", fibSummary.Routes})
    fibSummary.EntityData.Leafs.Append("prefix-in-place-modifications", types.YLeaf{"PrefixInPlaceModifications", fibSummary.PrefixInPlaceModifications})
    fibSummary.EntityData.Leafs.Append("stale-prefix-deletes", types.YLeaf{"StalePrefixDeletes", fibSummary.StalePrefixDeletes})
    fibSummary.EntityData.Leafs.Append("load-sharing-elements", types.YLeaf{"LoadSharingElements", fibSummary.LoadSharingElements})
    fibSummary.EntityData.Leafs.Append("load-sharing-references", types.YLeaf{"LoadSharingReferences", fibSummary.LoadSharingReferences})
    fibSummary.EntityData.Leafs.Append("total-load-share-element-bytes", types.YLeaf{"TotalLoadShareElementBytes", fibSummary.TotalLoadShareElementBytes})
    fibSummary.EntityData.Leafs.Append("leaves-used-bytes", types.YLeaf{"LeavesUsedBytes", fibSummary.LeavesUsedBytes})
    fibSummary.EntityData.Leafs.Append("reresolve-entries", types.YLeaf{"ReresolveEntries", fibSummary.ReresolveEntries})
    fibSummary.EntityData.Leafs.Append("old-unresolve-entries", types.YLeaf{"OldUnresolveEntries", fibSummary.OldUnresolveEntries})
    fibSummary.EntityData.Leafs.Append("new-unresolve-entries", types.YLeaf{"NewUnresolveEntries", fibSummary.NewUnresolveEntries})
    fibSummary.EntityData.Leafs.Append("unresolve-entries", types.YLeaf{"UnresolveEntries", fibSummary.UnresolveEntries})
    fibSummary.EntityData.Leafs.Append("cef-route-drops", types.YLeaf{"CefRouteDrops", fibSummary.CefRouteDrops})
    fibSummary.EntityData.Leafs.Append("cef-version-mismatch-route-drops", types.YLeaf{"CefVersionMismatchRouteDrops", fibSummary.CefVersionMismatchRouteDrops})
    fibSummary.EntityData.Leafs.Append("delete-cache-num-entries", types.YLeaf{"DeleteCacheNumEntries", fibSummary.DeleteCacheNumEntries})
    fibSummary.EntityData.Leafs.Append("existing-leaves-revisions", types.YLeaf{"ExistingLeavesRevisions", fibSummary.ExistingLeavesRevisions})
    fibSummary.EntityData.Leafs.Append("fib-default-prefix", types.YLeaf{"FibDefaultPrefix", fibSummary.FibDefaultPrefix})
    fibSummary.EntityData.Leafs.Append("fib-default-prefix-mask-length", types.YLeaf{"FibDefaultPrefixMaskLength", fibSummary.FibDefaultPrefixMaskLength})
    fibSummary.EntityData.Leafs.Append("next-hops", types.YLeaf{"NextHops", fibSummary.NextHops})
    fibSummary.EntityData.Leafs.Append("incomplete-next-hops", types.YLeaf{"IncompleteNextHops", fibSummary.IncompleteNextHops})
    fibSummary.EntityData.Leafs.Append("resolution-timer", types.YLeaf{"ResolutionTimer", fibSummary.ResolutionTimer})
    fibSummary.EntityData.Leafs.Append("slow-process-timer", types.YLeaf{"SlowProcessTimer", fibSummary.SlowProcessTimer})
    fibSummary.EntityData.Leafs.Append("max-resolution-timer", types.YLeaf{"MaxResolutionTimer", fibSummary.MaxResolutionTimer})
    fibSummary.EntityData.Leafs.Append("imposition-prefixes", types.YLeaf{"ImpositionPrefixes", fibSummary.ImpositionPrefixes})
    fibSummary.EntityData.Leafs.Append("extended-prefixes", types.YLeaf{"ExtendedPrefixes", fibSummary.ExtendedPrefixes})
    fibSummary.EntityData.Leafs.Append("cefl-bl-recycled-routes", types.YLeaf{"CeflBlRecycledRoutes", fibSummary.CeflBlRecycledRoutes})
    fibSummary.EntityData.Leafs.Append("ldi-backwalks", types.YLeaf{"LdiBackwalks", fibSummary.LdiBackwalks})
    fibSummary.EntityData.Leafs.Append("ss-prot-route-count", types.YLeaf{"SsProtRouteCount", fibSummary.SsProtRouteCount})
    fibSummary.EntityData.Leafs.Append("lisp-eid-prefixes", types.YLeaf{"LispEidPrefixes", fibSummary.LispEidPrefixes})
    fibSummary.EntityData.Leafs.Append("lisp-eid-valid-prefixes", types.YLeaf{"LispEidValidPrefixes", fibSummary.LispEidValidPrefixes})
    fibSummary.EntityData.Leafs.Append("lisp-rloc-objects", types.YLeaf{"LispRlocObjects", fibSummary.LispRlocObjects})
    fibSummary.EntityData.Leafs.Append("number-routes-srv6-transit", types.YLeaf{"NumberRoutesSrv6Transit", fibSummary.NumberRoutesSrv6Transit})
    fibSummary.EntityData.Leafs.Append("number-routes-srv6-end", types.YLeaf{"NumberRoutesSrv6End", fibSummary.NumberRoutesSrv6End})
    fibSummary.EntityData.Leafs.Append("ss-vxlan-ltep-ifh", types.YLeaf{"SsVxlanLtepIfh", fibSummary.SsVxlanLtepIfh})
    fibSummary.EntityData.Leafs.Append("ss-drop-pl-count", types.YLeaf{"SsDropPlCount", fibSummary.SsDropPlCount})

    fibSummary.EntityData.YListKeys = []string {}

    return &(fibSummary.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement
// Exclusive load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetEntityData() *types.CommonEntityData {
    exclusiveLoadSharingElement.EntityData.YFilter = exclusiveLoadSharingElement.YFilter
    exclusiveLoadSharingElement.EntityData.YangName = "exclusive-load-sharing-element"
    exclusiveLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    exclusiveLoadSharingElement.EntityData.ParentYangName = "fib-summary"
    exclusiveLoadSharingElement.EntityData.SegmentPath = "exclusive-load-sharing-element"
    exclusiveLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exclusiveLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exclusiveLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exclusiveLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    exclusiveLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", exclusiveLoadSharingElement.TotalLoadSharingElementBytes})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", exclusiveLoadSharingElement.TotalLoadSharingElementReferences})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", exclusiveLoadSharingElement.TotalPathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", exclusiveLoadSharingElement.RecursivePathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", exclusiveLoadSharingElement.PlatformSharedPathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", exclusiveLoadSharingElement.RetryPathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", exclusiveLoadSharingElement.TotalLoadInfoElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", exclusiveLoadSharingElement.RecursiveLoadInfoElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", exclusiveLoadSharingElement.PlatformSharedLoadInfoElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", exclusiveLoadSharingElement.XplLoadInfoElements})

    exclusiveLoadSharingElement.EntityData.YListKeys = []string {}

    return &(exclusiveLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement
// Shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetEntityData() *types.CommonEntityData {
    sharedLoadSharingElement.EntityData.YFilter = sharedLoadSharingElement.YFilter
    sharedLoadSharingElement.EntityData.YangName = "shared-load-sharing-element"
    sharedLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    sharedLoadSharingElement.EntityData.ParentYangName = "fib-summary"
    sharedLoadSharingElement.EntityData.SegmentPath = "shared-load-sharing-element"
    sharedLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sharedLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sharedLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sharedLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    sharedLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    sharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", sharedLoadSharingElement.TotalLoadSharingElementBytes})
    sharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", sharedLoadSharingElement.TotalLoadSharingElementReferences})
    sharedLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", sharedLoadSharingElement.TotalPathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", sharedLoadSharingElement.RecursivePathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", sharedLoadSharingElement.PlatformSharedPathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", sharedLoadSharingElement.RetryPathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", sharedLoadSharingElement.TotalLoadInfoElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", sharedLoadSharingElement.RecursiveLoadInfoElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", sharedLoadSharingElement.PlatformSharedLoadInfoElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", sharedLoadSharingElement.XplLoadInfoElements})

    sharedLoadSharingElement.EntityData.YListKeys = []string {}

    return &(sharedLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement
// Cross-table shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetEntityData() *types.CommonEntityData {
    crossSharedLoadSharingElement.EntityData.YFilter = crossSharedLoadSharingElement.YFilter
    crossSharedLoadSharingElement.EntityData.YangName = "cross-shared-load-sharing-element"
    crossSharedLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    crossSharedLoadSharingElement.EntityData.ParentYangName = "fib-summary"
    crossSharedLoadSharingElement.EntityData.SegmentPath = "cross-shared-load-sharing-element"
    crossSharedLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    crossSharedLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    crossSharedLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    crossSharedLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    crossSharedLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", crossSharedLoadSharingElement.TotalLoadSharingElementBytes})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", crossSharedLoadSharingElement.TotalLoadSharingElementReferences})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", crossSharedLoadSharingElement.TotalPathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", crossSharedLoadSharingElement.RecursivePathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", crossSharedLoadSharingElement.PlatformSharedPathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", crossSharedLoadSharingElement.RetryPathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", crossSharedLoadSharingElement.TotalLoadInfoElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", crossSharedLoadSharingElement.RecursiveLoadInfoElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", crossSharedLoadSharingElement.PlatformSharedLoadInfoElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", crossSharedLoadSharingElement.XplLoadInfoElements})

    crossSharedLoadSharingElement.EntityData.YListKeys = []string {}

    return &(crossSharedLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement
// Label-shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetEntityData() *types.CommonEntityData {
    labelSharedLoadSharingElement.EntityData.YFilter = labelSharedLoadSharingElement.YFilter
    labelSharedLoadSharingElement.EntityData.YangName = "label-shared-load-sharing-element"
    labelSharedLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    labelSharedLoadSharingElement.EntityData.ParentYangName = "fib-summary"
    labelSharedLoadSharingElement.EntityData.SegmentPath = "label-shared-load-sharing-element"
    labelSharedLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSharedLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSharedLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSharedLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    labelSharedLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", labelSharedLoadSharingElement.TotalLoadSharingElementBytes})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", labelSharedLoadSharingElement.TotalLoadSharingElementReferences})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", labelSharedLoadSharingElement.TotalPathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", labelSharedLoadSharingElement.RecursivePathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", labelSharedLoadSharingElement.PlatformSharedPathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", labelSharedLoadSharingElement.RetryPathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", labelSharedLoadSharingElement.TotalLoadInfoElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", labelSharedLoadSharingElement.RecursiveLoadInfoElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", labelSharedLoadSharingElement.PlatformSharedLoadInfoElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", labelSharedLoadSharingElement.XplLoadInfoElements})

    labelSharedLoadSharingElement.EntityData.YListKeys = []string {}

    return &(labelSharedLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution
// Distribution of prefix mask lengths
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Masklength counts for unicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe.
    UnicastPrefixe []*Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe

    // Masklength counts for broadcast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe.
    BroadcastPrefixe []*Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe

    // Masklength counts for multicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix.
    MulticastPrefix []*Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetEntityData() *types.CommonEntityData {
    prefixMasklenDistribution.EntityData.YFilter = prefixMasklenDistribution.YFilter
    prefixMasklenDistribution.EntityData.YangName = "prefix-masklen-distribution"
    prefixMasklenDistribution.EntityData.BundleName = "cisco_ios_xr"
    prefixMasklenDistribution.EntityData.ParentYangName = "fib-summary"
    prefixMasklenDistribution.EntityData.SegmentPath = "prefix-masklen-distribution"
    prefixMasklenDistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixMasklenDistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixMasklenDistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixMasklenDistribution.EntityData.Children = types.NewOrderedMap()
    prefixMasklenDistribution.EntityData.Children.Append("unicast-prefixe", types.YChild{"UnicastPrefixe", nil})
    for i := range prefixMasklenDistribution.UnicastPrefixe {
        prefixMasklenDistribution.EntityData.Children.Append(types.GetSegmentPath(prefixMasklenDistribution.UnicastPrefixe[i]), types.YChild{"UnicastPrefixe", prefixMasklenDistribution.UnicastPrefixe[i]})
    }
    prefixMasklenDistribution.EntityData.Children.Append("broadcast-prefixe", types.YChild{"BroadcastPrefixe", nil})
    for i := range prefixMasklenDistribution.BroadcastPrefixe {
        prefixMasklenDistribution.EntityData.Children.Append(types.GetSegmentPath(prefixMasklenDistribution.BroadcastPrefixe[i]), types.YChild{"BroadcastPrefixe", prefixMasklenDistribution.BroadcastPrefixe[i]})
    }
    prefixMasklenDistribution.EntityData.Children.Append("multicast-prefix", types.YChild{"MulticastPrefix", nil})
    for i := range prefixMasklenDistribution.MulticastPrefix {
        prefixMasklenDistribution.EntityData.Children.Append(types.GetSegmentPath(prefixMasklenDistribution.MulticastPrefix[i]), types.YChild{"MulticastPrefix", prefixMasklenDistribution.MulticastPrefix[i]})
    }
    prefixMasklenDistribution.EntityData.Leafs = types.NewOrderedMap()

    prefixMasklenDistribution.EntityData.YListKeys = []string {}

    return &(prefixMasklenDistribution.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe
// Masklength counts for unicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetEntityData() *types.CommonEntityData {
    unicastPrefixe.EntityData.YFilter = unicastPrefixe.YFilter
    unicastPrefixe.EntityData.YangName = "unicast-prefixe"
    unicastPrefixe.EntityData.BundleName = "cisco_ios_xr"
    unicastPrefixe.EntityData.ParentYangName = "prefix-masklen-distribution"
    unicastPrefixe.EntityData.SegmentPath = "unicast-prefixe"
    unicastPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unicastPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unicastPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unicastPrefixe.EntityData.Children = types.NewOrderedMap()
    unicastPrefixe.EntityData.Leafs = types.NewOrderedMap()
    unicastPrefixe.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", unicastPrefixe.MaskLength})
    unicastPrefixe.EntityData.Leafs.Append("number-of-prefixes", types.YLeaf{"NumberOfPrefixes", unicastPrefixe.NumberOfPrefixes})

    unicastPrefixe.EntityData.YListKeys = []string {}

    return &(unicastPrefixe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe
// Masklength counts for broadcast prefixes
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetEntityData() *types.CommonEntityData {
    broadcastPrefixe.EntityData.YFilter = broadcastPrefixe.YFilter
    broadcastPrefixe.EntityData.YangName = "broadcast-prefixe"
    broadcastPrefixe.EntityData.BundleName = "cisco_ios_xr"
    broadcastPrefixe.EntityData.ParentYangName = "prefix-masklen-distribution"
    broadcastPrefixe.EntityData.SegmentPath = "broadcast-prefixe"
    broadcastPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    broadcastPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    broadcastPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    broadcastPrefixe.EntityData.Children = types.NewOrderedMap()
    broadcastPrefixe.EntityData.Leafs = types.NewOrderedMap()
    broadcastPrefixe.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", broadcastPrefixe.MaskLength})
    broadcastPrefixe.EntityData.Leafs.Append("number-of-prefixes", types.YLeaf{"NumberOfPrefixes", broadcastPrefixe.NumberOfPrefixes})

    broadcastPrefixe.EntityData.YListKeys = []string {}

    return &(broadcastPrefixe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix
// Masklength counts for multicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetEntityData() *types.CommonEntityData {
    multicastPrefix.EntityData.YFilter = multicastPrefix.YFilter
    multicastPrefix.EntityData.YangName = "multicast-prefix"
    multicastPrefix.EntityData.BundleName = "cisco_ios_xr"
    multicastPrefix.EntityData.ParentYangName = "prefix-masklen-distribution"
    multicastPrefix.EntityData.SegmentPath = "multicast-prefix"
    multicastPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPrefix.EntityData.Children = types.NewOrderedMap()
    multicastPrefix.EntityData.Leafs = types.NewOrderedMap()
    multicastPrefix.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", multicastPrefix.MaskLength})
    multicastPrefix.EntityData.Leafs.Append("number-of-prefixes", types.YLeaf{"NumberOfPrefixes", multicastPrefix.NumberOfPrefixes})

    multicastPrefix.EntityData.YListKeys = []string {}

    return &(multicastPrefix.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll
// Summary for all external clients
type Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Client information. The type is interface{} with range: 0..4294967295.
    SesaNumClient interface{}

    // External pathlist summary.
    SesaPlSum Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetEntityData() *types.CommonEntityData {
    externalSummaryAll.EntityData.YFilter = externalSummaryAll.YFilter
    externalSummaryAll.EntityData.YangName = "external-summary-all"
    externalSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    externalSummaryAll.EntityData.ParentYangName = "protocol"
    externalSummaryAll.EntityData.SegmentPath = "external-summary-all"
    externalSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalSummaryAll.EntityData.Children = types.NewOrderedMap()
    externalSummaryAll.EntityData.Children.Append("sesa-pl-sum", types.YChild{"SesaPlSum", &externalSummaryAll.SesaPlSum})
    externalSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    externalSummaryAll.EntityData.Leafs.Append("sesa-num-client", types.YLeaf{"SesaNumClient", externalSummaryAll.SesaNumClient})

    externalSummaryAll.EntityData.YListKeys = []string {}

    return &(externalSummaryAll.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum
// External pathlist summary
type Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of ECD pathlists. The type is interface{} with range: 0..4294967295.
    SepNumEcdPathlist interface{}

    // Number of ECD pathlists unresolved. The type is interface{} with range:
    // 0..4294967295.
    SepNumEcdPlUnresolved interface{}

    // Number of ECD pathlists per interest. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest.
    SepNumEcdPlPerInterest []*Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetEntityData() *types.CommonEntityData {
    sesaPlSum.EntityData.YFilter = sesaPlSum.YFilter
    sesaPlSum.EntityData.YangName = "sesa-pl-sum"
    sesaPlSum.EntityData.BundleName = "cisco_ios_xr"
    sesaPlSum.EntityData.ParentYangName = "external-summary-all"
    sesaPlSum.EntityData.SegmentPath = "sesa-pl-sum"
    sesaPlSum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sesaPlSum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sesaPlSum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sesaPlSum.EntityData.Children = types.NewOrderedMap()
    sesaPlSum.EntityData.Children.Append("sep-num-ecd-pl-per-interest", types.YChild{"SepNumEcdPlPerInterest", nil})
    for i := range sesaPlSum.SepNumEcdPlPerInterest {
        sesaPlSum.EntityData.Children.Append(types.GetSegmentPath(sesaPlSum.SepNumEcdPlPerInterest[i]), types.YChild{"SepNumEcdPlPerInterest", sesaPlSum.SepNumEcdPlPerInterest[i]})
    }
    sesaPlSum.EntityData.Leafs = types.NewOrderedMap()
    sesaPlSum.EntityData.Leafs.Append("sep-num-ecd-pathlist", types.YLeaf{"SepNumEcdPathlist", sesaPlSum.SepNumEcdPathlist})
    sesaPlSum.EntityData.Leafs.Append("sep-num-ecd-pl-unresolved", types.YLeaf{"SepNumEcdPlUnresolved", sesaPlSum.SepNumEcdPlUnresolved})

    sesaPlSum.EntityData.YListKeys = []string {}

    return &(sesaPlSum.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest
// Number of ECD pathlists per interest
type Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetEntityData() *types.CommonEntityData {
    sepNumEcdPlPerInterest.EntityData.YFilter = sepNumEcdPlPerInterest.YFilter
    sepNumEcdPlPerInterest.EntityData.YangName = "sep-num-ecd-pl-per-interest"
    sepNumEcdPlPerInterest.EntityData.BundleName = "cisco_ios_xr"
    sepNumEcdPlPerInterest.EntityData.ParentYangName = "sesa-pl-sum"
    sepNumEcdPlPerInterest.EntityData.SegmentPath = "sep-num-ecd-pl-per-interest"
    sepNumEcdPlPerInterest.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sepNumEcdPlPerInterest.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sepNumEcdPlPerInterest.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sepNumEcdPlPerInterest.EntityData.Children = types.NewOrderedMap()
    sepNumEcdPlPerInterest.EntityData.Leafs = types.NewOrderedMap()
    sepNumEcdPlPerInterest.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sepNumEcdPlPerInterest.Entry})

    sepNumEcdPlPerInterest.EntityData.YListKeys = []string {}

    return &(sepNumEcdPlPerInterest.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FrrLog
// Table of Fast Reroute activation logs
type Fib_Nodes_Node_Protocols_Protocol_FrrLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR Interface Table.
    FrrInterfaces Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetEntityData() *types.CommonEntityData {
    frrLog.EntityData.YFilter = frrLog.YFilter
    frrLog.EntityData.YangName = "frr-log"
    frrLog.EntityData.BundleName = "cisco_ios_xr"
    frrLog.EntityData.ParentYangName = "protocol"
    frrLog.EntityData.SegmentPath = "frr-log"
    frrLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrLog.EntityData.Children = types.NewOrderedMap()
    frrLog.EntityData.Children.Append("frr-interfaces", types.YChild{"FrrInterfaces", &frrLog.FrrInterfaces})
    frrLog.EntityData.Leafs = types.NewOrderedMap()

    frrLog.EntityData.YListKeys = []string {}

    return &(frrLog.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces
// FRR Interface Table
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify FRR Interface Name. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface.
    FrrInterface []*Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetEntityData() *types.CommonEntityData {
    frrInterfaces.EntityData.YFilter = frrInterfaces.YFilter
    frrInterfaces.EntityData.YangName = "frr-interfaces"
    frrInterfaces.EntityData.BundleName = "cisco_ios_xr"
    frrInterfaces.EntityData.ParentYangName = "frr-log"
    frrInterfaces.EntityData.SegmentPath = "frr-interfaces"
    frrInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrInterfaces.EntityData.Children = types.NewOrderedMap()
    frrInterfaces.EntityData.Children.Append("frr-interface", types.YChild{"FrrInterface", nil})
    for i := range frrInterfaces.FrrInterface {
        frrInterfaces.EntityData.Children.Append(types.GetSegmentPath(frrInterfaces.FrrInterface[i]), types.YChild{"FrrInterface", frrInterfaces.FrrInterface[i]})
    }
    frrInterfaces.EntityData.Leafs = types.NewOrderedMap()

    frrInterfaces.EntityData.YListKeys = []string {}

    return &(frrInterfaces.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface
// Specify FRR Interface Name
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR log table.
    Logs Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetEntityData() *types.CommonEntityData {
    frrInterface.EntityData.YFilter = frrInterface.YFilter
    frrInterface.EntityData.YangName = "frr-interface"
    frrInterface.EntityData.BundleName = "cisco_ios_xr"
    frrInterface.EntityData.ParentYangName = "frr-interfaces"
    frrInterface.EntityData.SegmentPath = "frr-interface" + types.AddKeyToken(frrInterface.FrrInterfaceName, "frr-interface-name")
    frrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrInterface.EntityData.Children = types.NewOrderedMap()
    frrInterface.EntityData.Children.Append("logs", types.YChild{"Logs", &frrInterface.Logs})
    frrInterface.EntityData.Leafs = types.NewOrderedMap()
    frrInterface.EntityData.Leafs.Append("frr-interface-name", types.YLeaf{"FrrInterfaceName", frrInterface.FrrInterfaceName})

    frrInterface.EntityData.YListKeys = []string {"FrrInterfaceName"}

    return &(frrInterface.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs
// FRR log table
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify index into frr log table. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log.
    Log []*Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetEntityData() *types.CommonEntityData {
    logs.EntityData.YFilter = logs.YFilter
    logs.EntityData.YangName = "logs"
    logs.EntityData.BundleName = "cisco_ios_xr"
    logs.EntityData.ParentYangName = "frr-interface"
    logs.EntityData.SegmentPath = "logs"
    logs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logs.EntityData.Children = types.NewOrderedMap()
    logs.EntityData.Children.Append("log", types.YChild{"Log", nil})
    for i := range logs.Log {
        logs.EntityData.Children.Append(types.GetSegmentPath(logs.Log[i]), types.YChild{"Log", logs.Log[i]})
    }
    logs.EntityData.Leafs = types.NewOrderedMap()

    logs.EntityData.YListKeys = []string {}

    return &(logs.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log
// Specify index into frr log table
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. FRR Log Index. The type is interface{} with range:
    // 0..4294967295.
    LogIndex interface{}

    // FIB Protocol Type. The type is FibFrrProtocolShow.
    FrrProtocolType interface{}

    // Interface assoc w frr nh. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // nh prefix. The type is string with length: 0..52.
    FrrPrefix interface{}

    // frr switching time. The type is interface{} with range: 0..4294967295.
    FrrSwitchingTime interface{}

    // bundle member. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleMemberInterfaceName interface{}

    // frr timestamp.
    FrrTimestamp Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetEntityData() *types.CommonEntityData {
    log.EntityData.YFilter = log.YFilter
    log.EntityData.YangName = "log"
    log.EntityData.BundleName = "cisco_ios_xr"
    log.EntityData.ParentYangName = "logs"
    log.EntityData.SegmentPath = "log" + types.AddKeyToken(log.LogIndex, "log-index")
    log.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    log.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    log.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    log.EntityData.Children = types.NewOrderedMap()
    log.EntityData.Children.Append("frr-timestamp", types.YChild{"FrrTimestamp", &log.FrrTimestamp})
    log.EntityData.Leafs = types.NewOrderedMap()
    log.EntityData.Leafs.Append("log-index", types.YLeaf{"LogIndex", log.LogIndex})
    log.EntityData.Leafs.Append("frr-protocol-type", types.YLeaf{"FrrProtocolType", log.FrrProtocolType})
    log.EntityData.Leafs.Append("frr-interface-name", types.YLeaf{"FrrInterfaceName", log.FrrInterfaceName})
    log.EntityData.Leafs.Append("frr-prefix", types.YLeaf{"FrrPrefix", log.FrrPrefix})
    log.EntityData.Leafs.Append("frr-switching-time", types.YLeaf{"FrrSwitchingTime", log.FrrSwitchingTime})
    log.EntityData.Leafs.Append("bundle-member-interface-name", types.YLeaf{"BundleMemberInterfaceName", log.BundleMemberInterfaceName})

    log.EntityData.YListKeys = []string {"LogIndex"}

    return &(log.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp
// frr timestamp
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds. The type is interface{} with range: -2147483648..2147483647.
    Seconds interface{}

    // NanoSeconds. The type is interface{} with range: -2147483648..2147483647.
    NanoSeconds interface{}
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetEntityData() *types.CommonEntityData {
    frrTimestamp.EntityData.YFilter = frrTimestamp.YFilter
    frrTimestamp.EntityData.YangName = "frr-timestamp"
    frrTimestamp.EntityData.BundleName = "cisco_ios_xr"
    frrTimestamp.EntityData.ParentYangName = "log"
    frrTimestamp.EntityData.SegmentPath = "frr-timestamp"
    frrTimestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrTimestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrTimestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrTimestamp.EntityData.Children = types.NewOrderedMap()
    frrTimestamp.EntityData.Leafs = types.NewOrderedMap()
    frrTimestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", frrTimestamp.Seconds})
    frrTimestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", frrTimestamp.NanoSeconds})

    frrTimestamp.EntityData.YListKeys = []string {}

    return &(frrTimestamp.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs
// VRF table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf.
    Vrf []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "protocol"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf
// VRF table entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress

    // IP FIB prefix detail table.
    IpPrefixDetails Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail

    // Operational data for FIB Tablee.
    Summary Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary

    // Table of InterfaceInfo.
    InterfaceInfos Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos

    // IP FIB prefix brief table.
    IpPrefixBriefs Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("nh-info-detail-hardware-egress", types.YChild{"NhInfoDetailHardwareEgress", &vrf.NhInfoDetailHardwareEgress})
    vrf.EntityData.Children.Append("ip-prefix-details", types.YChild{"IpPrefixDetails", &vrf.IpPrefixDetails})
    vrf.EntityData.Children.Append("nh-info-detail", types.YChild{"NhInfoDetail", &vrf.NhInfoDetail})
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("interface-infos", types.YChild{"InterfaceInfos", &vrf.InterfaceInfos})
    vrf.EntityData.Children.Append("ip-prefix-briefs", types.YChild{"IpPrefixBriefs", &vrf.IpPrefixBriefs})
    vrf.EntityData.Children.Append("nh-info-detail-hardware-ingress", types.YChild{"NhInfoDetailHardwareIngress", &vrf.NhInfoDetailHardwareIngress})
    vrf.EntityData.Children.Append("nh-info-brief", types.YChild{"NhInfoBrief", &vrf.NhInfoBrief})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware engress info for Special nhinfo.
    NhInfoSpecialDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress

    // Local (non-remote) nhinfo.
    NhInfoLocalDetailHardwareEgresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses

    // Detail hardware egress info for remote NHInfo table.
    NhInfoRemoteDetailHardwareEgresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoDetailHardwareEgress.EntityData.YFilter = nhInfoDetailHardwareEgress.YFilter
    nhInfoDetailHardwareEgress.EntityData.YangName = "nh-info-detail-hardware-egress"
    nhInfoDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoDetailHardwareEgress.EntityData.ParentYangName = "vrf"
    nhInfoDetailHardwareEgress.EntityData.SegmentPath = "nh-info-detail-hardware-egress"
    nhInfoDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoDetailHardwareEgress.EntityData.Children.Append("nh-info-special-detail-hardware-egress", types.YChild{"NhInfoSpecialDetailHardwareEgress", &nhInfoDetailHardwareEgress.NhInfoSpecialDetailHardwareEgress})
    nhInfoDetailHardwareEgress.EntityData.Children.Append("nh-info-local-detail-hardware-egresses", types.YChild{"NhInfoLocalDetailHardwareEgresses", &nhInfoDetailHardwareEgress.NhInfoLocalDetailHardwareEgresses})
    nhInfoDetailHardwareEgress.EntityData.Children.Append("nh-info-remote-detail-hardware-egresses", types.YChild{"NhInfoRemoteDetailHardwareEgresses", &nhInfoDetailHardwareEgress.NhInfoRemoteDetailHardwareEgresses})
    nhInfoDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()

    nhInfoDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress
// Detail hardware engress info for Special
// nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware engress info for special-null NHInfo entry.
    NhInfoSpecialNullDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress

    // Detail hardware engress info for special-punt NHInfo entry.
    NhInfoSpecialPuntDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress

    // Detail hardware engress info for special-discard NHInfo entry.
    NhInfoSpecialDiscardDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress

    // Detail hardware engress info for special-drop NHInfo entry.
    NhInfoSpecialDropDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDetailHardwareEgress.EntityData.YFilter = nhInfoSpecialDetailHardwareEgress.YFilter
    nhInfoSpecialDetailHardwareEgress.EntityData.YangName = "nh-info-special-detail-hardware-egress"
    nhInfoSpecialDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDetailHardwareEgress.EntityData.ParentYangName = "nh-info-detail-hardware-egress"
    nhInfoSpecialDetailHardwareEgress.EntityData.SegmentPath = "nh-info-special-detail-hardware-egress"
    nhInfoSpecialDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDetailHardwareEgress.EntityData.Children.Append("nh-info-special-null-detail-hardware-egress", types.YChild{"NhInfoSpecialNullDetailHardwareEgress", &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialNullDetailHardwareEgress})
    nhInfoSpecialDetailHardwareEgress.EntityData.Children.Append("nh-info-special-punt-detail-hardware-egress", types.YChild{"NhInfoSpecialPuntDetailHardwareEgress", &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialPuntDetailHardwareEgress})
    nhInfoSpecialDetailHardwareEgress.EntityData.Children.Append("nh-info-special-discard-detail-hardware-egress", types.YChild{"NhInfoSpecialDiscardDetailHardwareEgress", &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialDiscardDetailHardwareEgress})
    nhInfoSpecialDetailHardwareEgress.EntityData.Children.Append("nh-info-special-drop-detail-hardware-egress", types.YChild{"NhInfoSpecialDropDetailHardwareEgress", &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialDropDetailHardwareEgress})
    nhInfoSpecialDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()

    nhInfoSpecialDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress
// Detail hardware engress info for
// special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialNullDetailHardwareEgress.EntityData.YFilter = nhInfoSpecialNullDetailHardwareEgress.YFilter
    nhInfoSpecialNullDetailHardwareEgress.EntityData.YangName = "nh-info-special-null-detail-hardware-egress"
    nhInfoSpecialNullDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialNullDetailHardwareEgress.EntityData.ParentYangName = "nh-info-special-detail-hardware-egress"
    nhInfoSpecialNullDetailHardwareEgress.EntityData.SegmentPath = "nh-info-special-null-detail-hardware-egress"
    nhInfoSpecialNullDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialNullDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialNullDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialNullDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialNullDetailHardwareEgress.SiPwhe})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialNullDetailHardwareEgress.NhInfoExtension})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialNullDetailHardwareEgress.SiLinkProto})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialNullDetailHardwareEgress.SiNhinfo})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialNullDetailHardwareEgress.SiNhtype})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialNullDetailHardwareEgress.SiIfh})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialNullDetailHardwareEgress.SiPfiInterfaceType})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialNullDetailHardwareEgress.SiAdjPtr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialNullDetailHardwareEgress.SiAdjPresent})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialNullDetailHardwareEgress.SiSpecialType})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialNullDetailHardwareEgress.SiRefcount})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialNullDetailHardwareEgress.SiFlags})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialNullDetailHardwareEgress.SiAdjIf})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialNullDetailHardwareEgress.SiExtPfx})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialNullDetailHardwareEgress.SiExtPfxLen})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialNullDetailHardwareEgress.SiExtPfxProto})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialNullDetailHardwareEgress.SiAdjAddress})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialNullDetailHardwareEgress.SiAdjAddrlen})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialNullDetailHardwareEgress.SiAdjAddrProto})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialNullDetailHardwareEgress.SiAdjRwLen})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialNullDetailHardwareEgress.SiAdjRw})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialNullDetailHardwareEgress.SiDepNhinfoType})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialNullDetailHardwareEgress.SiDepNhinfo})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialNullDetailHardwareEgress.SiDepNhinfoIfh})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialNullDetailHardwareEgress.SiBkupFrr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialNullDetailHardwareEgress.SiProtectFrr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialNullDetailHardwareEgress.SiBkupNhinfo})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialNullDetailHardwareEgress.SiBkupIfh})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialNullDetailHardwareEgress.SiBkupAddr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialNullDetailHardwareEgress.SiBkupAddrlen})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialNullDetailHardwareEgress.SiBkupAddrProto})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialNullDetailHardwareEgress.SiFrrActive})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialNullDetailHardwareEgress.SiAttrIsExtMgd})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialNullDetailHardwareEgress.SiAttrIsIncomp})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialNullDetailHardwareEgress.SiAttrIsTunnel})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialNullDetailHardwareEgress.SiAttrIsTunnelSrte})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialNullDetailHardwareEgress.SiAttrIsGreTunnel})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialNullDetailHardwareEgress.SiGreTi})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialNullDetailHardwareEgress.SiGreTiFlags})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialNullDetailHardwareEgress.SiGreTiRefcnt})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialNullDetailHardwareEgress.SiGreTosPropagate})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialNullDetailHardwareEgress.SiHardware})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialNullDetailHardwareEgress.SiNhinfoPtr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialNullDetailHardwareEgress.SiFnbIdbPtr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialNullDetailHardwareEgress.SiAncIfh})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialNullDetailHardwareEgress.SiGreTiResolvingLeafp})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialNullDetailHardwareEgress.SiGreDestAddr})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialNullDetailHardwareEgress.SiNhid})
    nhInfoSpecialNullDetailHardwareEgress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialNullDetailHardwareEgress.SiUpdTs})

    nhInfoSpecialNullDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialNullDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-null-detail-hardware-egress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-null-detail-hardware-egress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress
// Detail hardware engress info for
// special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.YFilter = nhInfoSpecialPuntDetailHardwareEgress.YFilter
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.YangName = "nh-info-special-punt-detail-hardware-egress"
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.ParentYangName = "nh-info-special-detail-hardware-egress"
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.SegmentPath = "nh-info-special-punt-detail-hardware-egress"
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialPuntDetailHardwareEgress.SiPwhe})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialPuntDetailHardwareEgress.NhInfoExtension})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialPuntDetailHardwareEgress.SiLinkProto})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialPuntDetailHardwareEgress.SiNhinfo})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialPuntDetailHardwareEgress.SiNhtype})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialPuntDetailHardwareEgress.SiIfh})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialPuntDetailHardwareEgress.SiPfiInterfaceType})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialPuntDetailHardwareEgress.SiAdjPtr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialPuntDetailHardwareEgress.SiAdjPresent})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialPuntDetailHardwareEgress.SiSpecialType})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialPuntDetailHardwareEgress.SiRefcount})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialPuntDetailHardwareEgress.SiFlags})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialPuntDetailHardwareEgress.SiAdjIf})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialPuntDetailHardwareEgress.SiExtPfx})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialPuntDetailHardwareEgress.SiExtPfxLen})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialPuntDetailHardwareEgress.SiExtPfxProto})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialPuntDetailHardwareEgress.SiAdjAddress})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialPuntDetailHardwareEgress.SiAdjAddrlen})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialPuntDetailHardwareEgress.SiAdjAddrProto})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialPuntDetailHardwareEgress.SiAdjRwLen})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialPuntDetailHardwareEgress.SiAdjRw})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialPuntDetailHardwareEgress.SiDepNhinfoType})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialPuntDetailHardwareEgress.SiDepNhinfo})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialPuntDetailHardwareEgress.SiDepNhinfoIfh})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialPuntDetailHardwareEgress.SiBkupFrr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialPuntDetailHardwareEgress.SiProtectFrr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialPuntDetailHardwareEgress.SiBkupNhinfo})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialPuntDetailHardwareEgress.SiBkupIfh})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialPuntDetailHardwareEgress.SiBkupAddr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialPuntDetailHardwareEgress.SiBkupAddrlen})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialPuntDetailHardwareEgress.SiBkupAddrProto})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialPuntDetailHardwareEgress.SiFrrActive})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsExtMgd})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsIncomp})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsTunnel})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsTunnelSrte})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsGreTunnel})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialPuntDetailHardwareEgress.SiGreTi})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialPuntDetailHardwareEgress.SiGreTiFlags})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialPuntDetailHardwareEgress.SiGreTiRefcnt})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialPuntDetailHardwareEgress.SiGreTosPropagate})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialPuntDetailHardwareEgress.SiHardware})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialPuntDetailHardwareEgress.SiNhinfoPtr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialPuntDetailHardwareEgress.SiFnbIdbPtr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialPuntDetailHardwareEgress.SiAncIfh})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialPuntDetailHardwareEgress.SiGreTiResolvingLeafp})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialPuntDetailHardwareEgress.SiGreDestAddr})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialPuntDetailHardwareEgress.SiNhid})
    nhInfoSpecialPuntDetailHardwareEgress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialPuntDetailHardwareEgress.SiUpdTs})

    nhInfoSpecialPuntDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialPuntDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-punt-detail-hardware-egress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-punt-detail-hardware-egress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress
// Detail hardware engress info for
// special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.YFilter = nhInfoSpecialDiscardDetailHardwareEgress.YFilter
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.YangName = "nh-info-special-discard-detail-hardware-egress"
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.ParentYangName = "nh-info-special-detail-hardware-egress"
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.SegmentPath = "nh-info-special-discard-detail-hardware-egress"
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDiscardDetailHardwareEgress.SiPwhe})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDiscardDetailHardwareEgress.NhInfoExtension})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDiscardDetailHardwareEgress.SiLinkProto})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDiscardDetailHardwareEgress.SiNhinfo})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDiscardDetailHardwareEgress.SiNhtype})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDiscardDetailHardwareEgress.SiIfh})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDiscardDetailHardwareEgress.SiPfiInterfaceType})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjPtr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjPresent})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDiscardDetailHardwareEgress.SiSpecialType})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDiscardDetailHardwareEgress.SiRefcount})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDiscardDetailHardwareEgress.SiFlags})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjIf})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDiscardDetailHardwareEgress.SiExtPfx})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDiscardDetailHardwareEgress.SiExtPfxLen})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDiscardDetailHardwareEgress.SiExtPfxProto})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjAddress})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjAddrlen})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjAddrProto})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjRwLen})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDiscardDetailHardwareEgress.SiAdjRw})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDiscardDetailHardwareEgress.SiDepNhinfoType})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDiscardDetailHardwareEgress.SiDepNhinfo})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDiscardDetailHardwareEgress.SiDepNhinfoIfh})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDiscardDetailHardwareEgress.SiBkupFrr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDiscardDetailHardwareEgress.SiProtectFrr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDiscardDetailHardwareEgress.SiBkupNhinfo})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDiscardDetailHardwareEgress.SiBkupIfh})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDiscardDetailHardwareEgress.SiBkupAddr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDiscardDetailHardwareEgress.SiBkupAddrlen})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDiscardDetailHardwareEgress.SiBkupAddrProto})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDiscardDetailHardwareEgress.SiFrrActive})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsExtMgd})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsIncomp})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsTunnel})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsTunnelSrte})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsGreTunnel})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDiscardDetailHardwareEgress.SiGreTi})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDiscardDetailHardwareEgress.SiGreTiFlags})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDiscardDetailHardwareEgress.SiGreTiRefcnt})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDiscardDetailHardwareEgress.SiGreTosPropagate})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDiscardDetailHardwareEgress.SiHardware})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDiscardDetailHardwareEgress.SiNhinfoPtr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDiscardDetailHardwareEgress.SiFnbIdbPtr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDiscardDetailHardwareEgress.SiAncIfh})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDiscardDetailHardwareEgress.SiGreTiResolvingLeafp})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDiscardDetailHardwareEgress.SiGreDestAddr})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDiscardDetailHardwareEgress.SiNhid})
    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDiscardDetailHardwareEgress.SiUpdTs})

    nhInfoSpecialDiscardDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDiscardDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-discard-detail-hardware-egress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-discard-detail-hardware-egress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress
// Detail hardware engress info for
// special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDropDetailHardwareEgress.EntityData.YFilter = nhInfoSpecialDropDetailHardwareEgress.YFilter
    nhInfoSpecialDropDetailHardwareEgress.EntityData.YangName = "nh-info-special-drop-detail-hardware-egress"
    nhInfoSpecialDropDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDropDetailHardwareEgress.EntityData.ParentYangName = "nh-info-special-detail-hardware-egress"
    nhInfoSpecialDropDetailHardwareEgress.EntityData.SegmentPath = "nh-info-special-drop-detail-hardware-egress"
    nhInfoSpecialDropDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDropDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDropDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDropDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDropDetailHardwareEgress.SiPwhe})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDropDetailHardwareEgress.NhInfoExtension})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDropDetailHardwareEgress.SiLinkProto})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDropDetailHardwareEgress.SiNhinfo})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDropDetailHardwareEgress.SiNhtype})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDropDetailHardwareEgress.SiIfh})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDropDetailHardwareEgress.SiPfiInterfaceType})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDropDetailHardwareEgress.SiAdjPtr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDropDetailHardwareEgress.SiAdjPresent})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDropDetailHardwareEgress.SiSpecialType})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDropDetailHardwareEgress.SiRefcount})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDropDetailHardwareEgress.SiFlags})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDropDetailHardwareEgress.SiAdjIf})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDropDetailHardwareEgress.SiExtPfx})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDropDetailHardwareEgress.SiExtPfxLen})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDropDetailHardwareEgress.SiExtPfxProto})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDropDetailHardwareEgress.SiAdjAddress})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDropDetailHardwareEgress.SiAdjAddrlen})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDropDetailHardwareEgress.SiAdjAddrProto})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDropDetailHardwareEgress.SiAdjRwLen})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDropDetailHardwareEgress.SiAdjRw})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDropDetailHardwareEgress.SiDepNhinfoType})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDropDetailHardwareEgress.SiDepNhinfo})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDropDetailHardwareEgress.SiDepNhinfoIfh})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDropDetailHardwareEgress.SiBkupFrr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDropDetailHardwareEgress.SiProtectFrr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDropDetailHardwareEgress.SiBkupNhinfo})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDropDetailHardwareEgress.SiBkupIfh})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDropDetailHardwareEgress.SiBkupAddr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDropDetailHardwareEgress.SiBkupAddrlen})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDropDetailHardwareEgress.SiBkupAddrProto})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDropDetailHardwareEgress.SiFrrActive})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDropDetailHardwareEgress.SiAttrIsExtMgd})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDropDetailHardwareEgress.SiAttrIsIncomp})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDropDetailHardwareEgress.SiAttrIsTunnel})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDropDetailHardwareEgress.SiAttrIsTunnelSrte})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDropDetailHardwareEgress.SiAttrIsGreTunnel})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDropDetailHardwareEgress.SiGreTi})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDropDetailHardwareEgress.SiGreTiFlags})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDropDetailHardwareEgress.SiGreTiRefcnt})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDropDetailHardwareEgress.SiGreTosPropagate})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDropDetailHardwareEgress.SiHardware})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDropDetailHardwareEgress.SiNhinfoPtr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDropDetailHardwareEgress.SiFnbIdbPtr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDropDetailHardwareEgress.SiAncIfh})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDropDetailHardwareEgress.SiGreTiResolvingLeafp})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDropDetailHardwareEgress.SiGreDestAddr})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDropDetailHardwareEgress.SiNhid})
    nhInfoSpecialDropDetailHardwareEgress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDropDetailHardwareEgress.SiUpdTs})

    nhInfoSpecialDropDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDropDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-drop-detail-hardware-egress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-drop-detail-hardware-egress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware egress NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress.
    NhInfoLocalDetailHardwareEgress []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetEntityData() *types.CommonEntityData {
    nhInfoLocalDetailHardwareEgresses.EntityData.YFilter = nhInfoLocalDetailHardwareEgresses.YFilter
    nhInfoLocalDetailHardwareEgresses.EntityData.YangName = "nh-info-local-detail-hardware-egresses"
    nhInfoLocalDetailHardwareEgresses.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalDetailHardwareEgresses.EntityData.ParentYangName = "nh-info-detail-hardware-egress"
    nhInfoLocalDetailHardwareEgresses.EntityData.SegmentPath = "nh-info-local-detail-hardware-egresses"
    nhInfoLocalDetailHardwareEgresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalDetailHardwareEgresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalDetailHardwareEgresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalDetailHardwareEgresses.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalDetailHardwareEgresses.EntityData.Children.Append("nh-info-local-detail-hardware-egress", types.YChild{"NhInfoLocalDetailHardwareEgress", nil})
    for i := range nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress {
        nhInfoLocalDetailHardwareEgresses.EntityData.Children.Append(types.GetSegmentPath(nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress[i]), types.YChild{"NhInfoLocalDetailHardwareEgress", nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress[i]})
    }
    nhInfoLocalDetailHardwareEgresses.EntityData.Leafs = types.NewOrderedMap()

    nhInfoLocalDetailHardwareEgresses.EntityData.YListKeys = []string {}

    return &(nhInfoLocalDetailHardwareEgresses.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress
// Detail hardware egress NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoLocalDetailHardwareEgress.EntityData.YFilter = nhInfoLocalDetailHardwareEgress.YFilter
    nhInfoLocalDetailHardwareEgress.EntityData.YangName = "nh-info-local-detail-hardware-egress"
    nhInfoLocalDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalDetailHardwareEgress.EntityData.ParentYangName = "nh-info-local-detail-hardware-egresses"
    nhInfoLocalDetailHardwareEgress.EntityData.SegmentPath = "nh-info-local-detail-hardware-egress"
    nhInfoLocalDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalDetailHardwareEgress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoLocalDetailHardwareEgress.SiPwhe})
    nhInfoLocalDetailHardwareEgress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoLocalDetailHardwareEgress.NhInfoExtension})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoLocalDetailHardwareEgress.NhInterfaceName})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoLocalDetailHardwareEgress.NhAddress})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoLocalDetailHardwareEgress.SiLinkProto})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoLocalDetailHardwareEgress.SiNhinfo})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoLocalDetailHardwareEgress.SiNhtype})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoLocalDetailHardwareEgress.SiIfh})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoLocalDetailHardwareEgress.SiPfiInterfaceType})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoLocalDetailHardwareEgress.SiAdjPtr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoLocalDetailHardwareEgress.SiAdjPresent})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoLocalDetailHardwareEgress.SiSpecialType})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoLocalDetailHardwareEgress.SiRefcount})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoLocalDetailHardwareEgress.SiFlags})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoLocalDetailHardwareEgress.SiAdjIf})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoLocalDetailHardwareEgress.SiExtPfx})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoLocalDetailHardwareEgress.SiExtPfxLen})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoLocalDetailHardwareEgress.SiExtPfxProto})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoLocalDetailHardwareEgress.SiAdjAddress})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoLocalDetailHardwareEgress.SiAdjAddrlen})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoLocalDetailHardwareEgress.SiAdjAddrProto})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoLocalDetailHardwareEgress.SiAdjRwLen})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoLocalDetailHardwareEgress.SiAdjRw})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoLocalDetailHardwareEgress.SiDepNhinfoType})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoLocalDetailHardwareEgress.SiDepNhinfo})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoLocalDetailHardwareEgress.SiDepNhinfoIfh})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoLocalDetailHardwareEgress.SiBkupFrr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoLocalDetailHardwareEgress.SiProtectFrr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoLocalDetailHardwareEgress.SiBkupNhinfo})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoLocalDetailHardwareEgress.SiBkupIfh})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoLocalDetailHardwareEgress.SiBkupAddr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoLocalDetailHardwareEgress.SiBkupAddrlen})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoLocalDetailHardwareEgress.SiBkupAddrProto})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoLocalDetailHardwareEgress.SiFrrActive})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoLocalDetailHardwareEgress.SiAttrIsExtMgd})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoLocalDetailHardwareEgress.SiAttrIsIncomp})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoLocalDetailHardwareEgress.SiAttrIsTunnel})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoLocalDetailHardwareEgress.SiAttrIsTunnelSrte})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoLocalDetailHardwareEgress.SiAttrIsGreTunnel})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoLocalDetailHardwareEgress.SiGreTi})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoLocalDetailHardwareEgress.SiGreTiFlags})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoLocalDetailHardwareEgress.SiGreTiRefcnt})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoLocalDetailHardwareEgress.SiGreTosPropagate})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoLocalDetailHardwareEgress.SiHardware})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoLocalDetailHardwareEgress.SiNhinfoPtr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoLocalDetailHardwareEgress.SiFnbIdbPtr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoLocalDetailHardwareEgress.SiAncIfh})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoLocalDetailHardwareEgress.SiGreTiResolvingLeafp})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoLocalDetailHardwareEgress.SiGreDestAddr})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoLocalDetailHardwareEgress.SiNhid})
    nhInfoLocalDetailHardwareEgress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoLocalDetailHardwareEgress.SiUpdTs})

    nhInfoLocalDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoLocalDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-local-detail-hardware-egress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-local-detail-hardware-egress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses
// Detail hardware egress info for remote
// NHInfo table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware egress info for NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress.
    NhInfoRemoteDetailHardwareEgress []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteDetailHardwareEgresses.EntityData.YFilter = nhInfoRemoteDetailHardwareEgresses.YFilter
    nhInfoRemoteDetailHardwareEgresses.EntityData.YangName = "nh-info-remote-detail-hardware-egresses"
    nhInfoRemoteDetailHardwareEgresses.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteDetailHardwareEgresses.EntityData.ParentYangName = "nh-info-detail-hardware-egress"
    nhInfoRemoteDetailHardwareEgresses.EntityData.SegmentPath = "nh-info-remote-detail-hardware-egresses"
    nhInfoRemoteDetailHardwareEgresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteDetailHardwareEgresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteDetailHardwareEgresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteDetailHardwareEgresses.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteDetailHardwareEgresses.EntityData.Children.Append("nh-info-remote-detail-hardware-egress", types.YChild{"NhInfoRemoteDetailHardwareEgress", nil})
    for i := range nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress {
        nhInfoRemoteDetailHardwareEgresses.EntityData.Children.Append(types.GetSegmentPath(nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress[i]), types.YChild{"NhInfoRemoteDetailHardwareEgress", nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress[i]})
    }
    nhInfoRemoteDetailHardwareEgresses.EntityData.Leafs = types.NewOrderedMap()

    nhInfoRemoteDetailHardwareEgresses.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteDetailHardwareEgresses.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress
// Detail hardware egress info for NHinfo
// entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteDetailHardwareEgress.EntityData.YFilter = nhInfoRemoteDetailHardwareEgress.YFilter
    nhInfoRemoteDetailHardwareEgress.EntityData.YangName = "nh-info-remote-detail-hardware-egress"
    nhInfoRemoteDetailHardwareEgress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteDetailHardwareEgress.EntityData.ParentYangName = "nh-info-remote-detail-hardware-egresses"
    nhInfoRemoteDetailHardwareEgress.EntityData.SegmentPath = "nh-info-remote-detail-hardware-egress"
    nhInfoRemoteDetailHardwareEgress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteDetailHardwareEgress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteDetailHardwareEgress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteDetailHardwareEgress.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteDetailHardwareEgress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoRemoteDetailHardwareEgress.SiPwhe})
    nhInfoRemoteDetailHardwareEgress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoRemoteDetailHardwareEgress.NhInfoExtension})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoRemoteDetailHardwareEgress.NhInterfaceName})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoRemoteDetailHardwareEgress.NhAddress})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoRemoteDetailHardwareEgress.SiLinkProto})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoRemoteDetailHardwareEgress.SiNhinfo})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoRemoteDetailHardwareEgress.SiNhtype})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoRemoteDetailHardwareEgress.SiIfh})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoRemoteDetailHardwareEgress.SiPfiInterfaceType})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoRemoteDetailHardwareEgress.SiAdjPtr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoRemoteDetailHardwareEgress.SiAdjPresent})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoRemoteDetailHardwareEgress.SiSpecialType})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoRemoteDetailHardwareEgress.SiRefcount})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoRemoteDetailHardwareEgress.SiFlags})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoRemoteDetailHardwareEgress.SiAdjIf})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoRemoteDetailHardwareEgress.SiExtPfx})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoRemoteDetailHardwareEgress.SiExtPfxLen})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoRemoteDetailHardwareEgress.SiExtPfxProto})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoRemoteDetailHardwareEgress.SiAdjAddress})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoRemoteDetailHardwareEgress.SiAdjAddrlen})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoRemoteDetailHardwareEgress.SiAdjAddrProto})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoRemoteDetailHardwareEgress.SiAdjRwLen})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoRemoteDetailHardwareEgress.SiAdjRw})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoRemoteDetailHardwareEgress.SiDepNhinfoType})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoRemoteDetailHardwareEgress.SiDepNhinfo})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoRemoteDetailHardwareEgress.SiDepNhinfoIfh})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoRemoteDetailHardwareEgress.SiBkupFrr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoRemoteDetailHardwareEgress.SiProtectFrr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoRemoteDetailHardwareEgress.SiBkupNhinfo})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoRemoteDetailHardwareEgress.SiBkupIfh})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoRemoteDetailHardwareEgress.SiBkupAddr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoRemoteDetailHardwareEgress.SiBkupAddrlen})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoRemoteDetailHardwareEgress.SiBkupAddrProto})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoRemoteDetailHardwareEgress.SiFrrActive})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoRemoteDetailHardwareEgress.SiAttrIsExtMgd})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoRemoteDetailHardwareEgress.SiAttrIsIncomp})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoRemoteDetailHardwareEgress.SiAttrIsTunnel})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoRemoteDetailHardwareEgress.SiAttrIsTunnelSrte})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoRemoteDetailHardwareEgress.SiAttrIsGreTunnel})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoRemoteDetailHardwareEgress.SiGreTi})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoRemoteDetailHardwareEgress.SiGreTiFlags})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoRemoteDetailHardwareEgress.SiGreTiRefcnt})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoRemoteDetailHardwareEgress.SiGreTosPropagate})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoRemoteDetailHardwareEgress.SiHardware})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoRemoteDetailHardwareEgress.SiNhinfoPtr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoRemoteDetailHardwareEgress.SiFnbIdbPtr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoRemoteDetailHardwareEgress.SiAncIfh})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoRemoteDetailHardwareEgress.SiGreTiResolvingLeafp})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoRemoteDetailHardwareEgress.SiGreDestAddr})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoRemoteDetailHardwareEgress.SiNhid})
    nhInfoRemoteDetailHardwareEgress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoRemoteDetailHardwareEgress.SiUpdTs})

    nhInfoRemoteDetailHardwareEgress.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteDetailHardwareEgress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-remote-detail-hardware-egress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-remote-detail-hardware-egress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails
// IP FIB prefix detail table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP FIB prefix detail table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail.
    IpPrefixDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetEntityData() *types.CommonEntityData {
    ipPrefixDetails.EntityData.YFilter = ipPrefixDetails.YFilter
    ipPrefixDetails.EntityData.YangName = "ip-prefix-details"
    ipPrefixDetails.EntityData.BundleName = "cisco_ios_xr"
    ipPrefixDetails.EntityData.ParentYangName = "vrf"
    ipPrefixDetails.EntityData.SegmentPath = "ip-prefix-details"
    ipPrefixDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipPrefixDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipPrefixDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipPrefixDetails.EntityData.Children = types.NewOrderedMap()
    ipPrefixDetails.EntityData.Children.Append("ip-prefix-detail", types.YChild{"IpPrefixDetail", nil})
    for i := range ipPrefixDetails.IpPrefixDetail {
        ipPrefixDetails.EntityData.Children.Append(types.GetSegmentPath(ipPrefixDetails.IpPrefixDetail[i]), types.YChild{"IpPrefixDetail", ipPrefixDetails.IpPrefixDetail[i]})
    }
    ipPrefixDetails.EntityData.Leafs = types.NewOrderedMap()

    ipPrefixDetails.EntityData.YListKeys = []string {}

    return &(ipPrefixDetails.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail
// IP FIB prefix detail table entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination IP address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IP prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Proto type for this entry. The type is interface{} with range:
    // 0..4294967295.
    ProtocolTypeFibEntry interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardware interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToPathList interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // The pathlist source. The type is interface{} with range: 0..4294967295.
    PathListSource interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToLdi interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The flags of ext assocaited with LDI . The type is interface{} with range:
    // 0..4294967295.
    FlagsExternalLdi interface{}

    // The pointer to the ext assocaited with LDI. The type is interface{} with
    // range: 0..4294967295.
    PointerExternalLdi interface{}

    // exact-path interface handle. The type is interface{} with range:
    // 0..4294967295.
    ExactPathInterfaceHandle interface{}

    // exact-path GRE physical interface handle. The type is interface{} with
    // range: 0..4294967295.
    ExactPathGreInterfaceHandle interface{}

    // exact-route GRE phy ifh available. The type is bool.
    ExactRouteGrePhysIfhAvail interface{}

    // exact-route result. The type is bool.
    ExactRouteResult interface{}

    // Prefix is static or connected. The type is bool.
    PrefixIsStaticOrConnected interface{}

    // Packet should always be received. The type is bool.
    PacketShouldRecieve interface{}

    // Prefix is connected. The type is bool.
    PrefixConnected interface{}

    // Prefix is for an adjacency. The type is bool.
    PrefixForAdjancency interface{}

    // Prefix is for a PIC nexthop. The type is bool.
    PrefixForPicNextHop interface{}

    // Purgable after the purge interval. The type is bool.
    PurgableAfterPurgeInterval interface{}

    // Broadcast receive flag. The type is bool.
    BroadcastReciveFlag interface{}

    // Broadcast forward flag. The type is bool.
    BroadcastForwardFlag interface{}

    // 0/0 route added as default route. The type is bool.
    ZeroByZeroRouteAsDefault interface{}

    // External switch function triggered. The type is bool.
    ExternalSwitchTriggered interface{}

    // Route attributes summary flag. The type is bool.
    RouteAttributeFlag interface{}

    // Dummy real zero route. The type is bool.
    DummyRealZeroRoute interface{}

    // The LDI LW flags. The type is interface{} with range: 0..4294967295.
    LdiLwFlag interface{}

    // The refcounter of LDI LW LDI. The type is interface{} with range:
    // 0..4294967295.
    RefCounterOfLdiLwLdi interface{}

    // The type of LDI LW LDI. The type is interface{} with range: 0..4294967295.
    TypeOfLdiLwLdi interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    VersionOfRoute interface{}

    // Priority at which the route was downloaded. The type is interface{} with
    // range: 0..4294967295.
    FibRouteDownloadPriority interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}

    // Is L2 Subscriber route. The type is bool.
    L2SubscriberRoute interface{}

    // XConnect-id associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberXconnectId interface{}

    // Flags associated with L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2SubscriberFlags interface{}

    // IP protocol associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberIpProtocol interface{}

    // L2TPv3 cookie length for L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2tpv3CookieLengthBits interface{}

    // Route destined for Line Card that support External Reach only. The type is
    // bool.
    RouteForExternalReachLinecardFlag interface{}

    // Route is a MPLS Segment-Routing prefix. The type is bool.
    RouteIsSrFlag interface{}

    // This route is SRv6 Transit function. The type is bool.
    RouteIsSrv6Transit interface{}

    // This route is SRv6 End function. The type is bool.
    RouteIsSrv6End interface{}

    // SRv6 Operation Type. The type is string.
    Srv6OperationType interface{}

    // Detailed FIB entry information.
    DetailFibEntryInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation

    // FIB entry path details.
    FibEntryPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath

    // Leaf Extension Object List. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject.
    ExtensionObject []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetEntityData() *types.CommonEntityData {
    ipPrefixDetail.EntityData.YFilter = ipPrefixDetail.YFilter
    ipPrefixDetail.EntityData.YangName = "ip-prefix-detail"
    ipPrefixDetail.EntityData.BundleName = "cisco_ios_xr"
    ipPrefixDetail.EntityData.ParentYangName = "ip-prefix-details"
    ipPrefixDetail.EntityData.SegmentPath = "ip-prefix-detail"
    ipPrefixDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipPrefixDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipPrefixDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipPrefixDetail.EntityData.Children = types.NewOrderedMap()
    ipPrefixDetail.EntityData.Children.Append("detail-fib-entry-information", types.YChild{"DetailFibEntryInformation", &ipPrefixDetail.DetailFibEntryInformation})
    ipPrefixDetail.EntityData.Children.Append("fib-entry-path", types.YChild{"FibEntryPath", &ipPrefixDetail.FibEntryPath})
    ipPrefixDetail.EntityData.Children.Append("extension-object", types.YChild{"ExtensionObject", nil})
    for i := range ipPrefixDetail.ExtensionObject {
        ipPrefixDetail.EntityData.Children.Append(types.GetSegmentPath(ipPrefixDetail.ExtensionObject[i]), types.YChild{"ExtensionObject", ipPrefixDetail.ExtensionObject[i]})
    }
    ipPrefixDetail.EntityData.Leafs = types.NewOrderedMap()
    ipPrefixDetail.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipPrefixDetail.Prefix})
    ipPrefixDetail.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipPrefixDetail.PrefixLength})
    ipPrefixDetail.EntityData.Leafs.Append("protocol-type-fib-entry", types.YLeaf{"ProtocolTypeFibEntry", ipPrefixDetail.ProtocolTypeFibEntry})
    ipPrefixDetail.EntityData.Leafs.Append("platform-hardware", types.YLeaf{"PlatformHardware", ipPrefixDetail.PlatformHardware})
    ipPrefixDetail.EntityData.Leafs.Append("number-of-referances-to-path-list", types.YLeaf{"NumberOfReferancesToPathList", ipPrefixDetail.NumberOfReferancesToPathList})
    ipPrefixDetail.EntityData.Leafs.Append("path-list-flags", types.YLeaf{"PathListFlags", ipPrefixDetail.PathListFlags})
    ipPrefixDetail.EntityData.Leafs.Append("path-list-source", types.YLeaf{"PathListSource", ipPrefixDetail.PathListSource})
    ipPrefixDetail.EntityData.Leafs.Append("number-of-referances-to-ldi", types.YLeaf{"NumberOfReferancesToLdi", ipPrefixDetail.NumberOfReferancesToLdi})
    ipPrefixDetail.EntityData.Leafs.Append("ldi-flags", types.YLeaf{"LdiFlags", ipPrefixDetail.LdiFlags})
    ipPrefixDetail.EntityData.Leafs.Append("flags-external-ldi", types.YLeaf{"FlagsExternalLdi", ipPrefixDetail.FlagsExternalLdi})
    ipPrefixDetail.EntityData.Leafs.Append("pointer-external-ldi", types.YLeaf{"PointerExternalLdi", ipPrefixDetail.PointerExternalLdi})
    ipPrefixDetail.EntityData.Leafs.Append("exact-path-interface-handle", types.YLeaf{"ExactPathInterfaceHandle", ipPrefixDetail.ExactPathInterfaceHandle})
    ipPrefixDetail.EntityData.Leafs.Append("exact-path-gre-interface-handle", types.YLeaf{"ExactPathGreInterfaceHandle", ipPrefixDetail.ExactPathGreInterfaceHandle})
    ipPrefixDetail.EntityData.Leafs.Append("exact-route-gre-phys-ifh-avail", types.YLeaf{"ExactRouteGrePhysIfhAvail", ipPrefixDetail.ExactRouteGrePhysIfhAvail})
    ipPrefixDetail.EntityData.Leafs.Append("exact-route-result", types.YLeaf{"ExactRouteResult", ipPrefixDetail.ExactRouteResult})
    ipPrefixDetail.EntityData.Leafs.Append("prefix-is-static-or-connected", types.YLeaf{"PrefixIsStaticOrConnected", ipPrefixDetail.PrefixIsStaticOrConnected})
    ipPrefixDetail.EntityData.Leafs.Append("packet-should-recieve", types.YLeaf{"PacketShouldRecieve", ipPrefixDetail.PacketShouldRecieve})
    ipPrefixDetail.EntityData.Leafs.Append("prefix-connected", types.YLeaf{"PrefixConnected", ipPrefixDetail.PrefixConnected})
    ipPrefixDetail.EntityData.Leafs.Append("prefix-for-adjancency", types.YLeaf{"PrefixForAdjancency", ipPrefixDetail.PrefixForAdjancency})
    ipPrefixDetail.EntityData.Leafs.Append("prefix-for-pic-next-hop", types.YLeaf{"PrefixForPicNextHop", ipPrefixDetail.PrefixForPicNextHop})
    ipPrefixDetail.EntityData.Leafs.Append("purgable-after-purge-interval", types.YLeaf{"PurgableAfterPurgeInterval", ipPrefixDetail.PurgableAfterPurgeInterval})
    ipPrefixDetail.EntityData.Leafs.Append("broadcast-recive-flag", types.YLeaf{"BroadcastReciveFlag", ipPrefixDetail.BroadcastReciveFlag})
    ipPrefixDetail.EntityData.Leafs.Append("broadcast-forward-flag", types.YLeaf{"BroadcastForwardFlag", ipPrefixDetail.BroadcastForwardFlag})
    ipPrefixDetail.EntityData.Leafs.Append("zero-by-zero-route-as-default", types.YLeaf{"ZeroByZeroRouteAsDefault", ipPrefixDetail.ZeroByZeroRouteAsDefault})
    ipPrefixDetail.EntityData.Leafs.Append("external-switch-triggered", types.YLeaf{"ExternalSwitchTriggered", ipPrefixDetail.ExternalSwitchTriggered})
    ipPrefixDetail.EntityData.Leafs.Append("route-attribute-flag", types.YLeaf{"RouteAttributeFlag", ipPrefixDetail.RouteAttributeFlag})
    ipPrefixDetail.EntityData.Leafs.Append("dummy-real-zero-route", types.YLeaf{"DummyRealZeroRoute", ipPrefixDetail.DummyRealZeroRoute})
    ipPrefixDetail.EntityData.Leafs.Append("ldi-lw-flag", types.YLeaf{"LdiLwFlag", ipPrefixDetail.LdiLwFlag})
    ipPrefixDetail.EntityData.Leafs.Append("ref-counter-of-ldi-lw-ldi", types.YLeaf{"RefCounterOfLdiLwLdi", ipPrefixDetail.RefCounterOfLdiLwLdi})
    ipPrefixDetail.EntityData.Leafs.Append("type-of-ldi-lw-ldi", types.YLeaf{"TypeOfLdiLwLdi", ipPrefixDetail.TypeOfLdiLwLdi})
    ipPrefixDetail.EntityData.Leafs.Append("lspa-flags", types.YLeaf{"LspaFlags", ipPrefixDetail.LspaFlags})
    ipPrefixDetail.EntityData.Leafs.Append("version-of-route", types.YLeaf{"VersionOfRoute", ipPrefixDetail.VersionOfRoute})
    ipPrefixDetail.EntityData.Leafs.Append("fib-route-download-priority", types.YLeaf{"FibRouteDownloadPriority", ipPrefixDetail.FibRouteDownloadPriority})
    ipPrefixDetail.EntityData.Leafs.Append("time-of-last-update-in-msec", types.YLeaf{"TimeOfLastUpdateInMsec", ipPrefixDetail.TimeOfLastUpdateInMsec})
    ipPrefixDetail.EntityData.Leafs.Append("l2-subscriber-route", types.YLeaf{"L2SubscriberRoute", ipPrefixDetail.L2SubscriberRoute})
    ipPrefixDetail.EntityData.Leafs.Append("l2-subscriber-xconnect-id", types.YLeaf{"L2SubscriberXconnectId", ipPrefixDetail.L2SubscriberXconnectId})
    ipPrefixDetail.EntityData.Leafs.Append("l2-subscriber-flags", types.YLeaf{"L2SubscriberFlags", ipPrefixDetail.L2SubscriberFlags})
    ipPrefixDetail.EntityData.Leafs.Append("l2-subscriber-ip-protocol", types.YLeaf{"L2SubscriberIpProtocol", ipPrefixDetail.L2SubscriberIpProtocol})
    ipPrefixDetail.EntityData.Leafs.Append("l2tpv3-cookie-length-bits", types.YLeaf{"L2tpv3CookieLengthBits", ipPrefixDetail.L2tpv3CookieLengthBits})
    ipPrefixDetail.EntityData.Leafs.Append("route-for-external-reach-linecard-flag", types.YLeaf{"RouteForExternalReachLinecardFlag", ipPrefixDetail.RouteForExternalReachLinecardFlag})
    ipPrefixDetail.EntityData.Leafs.Append("route-is-sr-flag", types.YLeaf{"RouteIsSrFlag", ipPrefixDetail.RouteIsSrFlag})
    ipPrefixDetail.EntityData.Leafs.Append("route-is-srv6-transit", types.YLeaf{"RouteIsSrv6Transit", ipPrefixDetail.RouteIsSrv6Transit})
    ipPrefixDetail.EntityData.Leafs.Append("route-is-srv6-end", types.YLeaf{"RouteIsSrv6End", ipPrefixDetail.RouteIsSrv6End})
    ipPrefixDetail.EntityData.Leafs.Append("srv6-operation-type", types.YLeaf{"Srv6OperationType", ipPrefixDetail.Srv6OperationType})

    ipPrefixDetail.EntityData.YListKeys = []string {}

    return &(ipPrefixDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation
// Detailed FIB entry information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB entry version number. The type is interface{} with range:
    // 0..4294967295.
    FibEntryVersion interface{}

    // Per Prefix Accounting. The type is interface{} with range: 0..255.
    PerPrefixAccounting interface{}

    // Load sharing type. The type is FibLoadshareShow.
    LoadSharingType interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    FibEntryAdjacencyType interface{}

    // FIB Protocol type. The type is interface{} with range: 0..4294967295.
    FibProtocolType interface{}

    // AFI FIB protocol type. The type is interface{} with range: 0..4294967295.
    AfiFibProtocolType interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    AibL3Address interface{}

    // ADJ ADDR LEN. The type is interface{} with range: 0..4294967295.
    AdjacencyAddressLength interface{}

    // ADJ IFH. The type is interface{} with range: 0..4294967295.
    AdjacencyInterface interface{}

    // FIB Special NHINFO Type. The type is interface{} with range: 0..4294967295.
    FibSpecialNhInformationType interface{}

    // FIB entry adj address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    FibEntryAdjacencyAddress interface{}

    // FIB entry adjacency interface. The type is interface{} with range:
    // 0..4294967295.
    FibEntryAdjacencyInterface interface{}

    // Packets through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughFibEntry interface{}

    // Bytes through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughFibEntry interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    DetailedPrefixLength interface{}

    // Prefix protocol. The type is interface{} with range: 0..4294967295.
    PrefixProtocol interface{}

    // Precedence for packets to this entry. The type is interface{} with range:
    // 0..255.
    PrecedenceForpackets interface{}

    // Traffic index for packets to this entry. The type is interface{} with
    // range: 0..255.
    TrafficIndexForPackets interface{}

    // Switch function compontent ID. The type is interface{} with range:
    // 0..4294967295.
    SwitchCompontentId interface{}

    // Fast adjacency flag. The type is bool.
    FastAdjacencyFlag interface{}

    // Illegal fast adjacency flag. The type is bool.
    IllegalFastAdjacencyFlag interface{}

    // Remote adjacency flag. The type is bool.
    RemoteAdjacencyFlag interface{}

    // BGP attribute id. The type is interface{} with range: 0..4294967295.
    BgpAttributeId interface{}

    // BGP local attribute id. The type is interface{} with range: 0..4294967295.
    BgpLocalAttributeId interface{}

    // BGP attribute origin as. The type is interface{} with range: 0..4294967295.
    BgpAttributeOriginAs interface{}

    // BGP attribute next hop as. The type is interface{} with range:
    // 0..4294967295.
    BgpAttributeNextHopAs interface{}

    // As path string. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathString interface{}

    // extcom st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtcomString interface{}

    // com st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ComString interface{}

    // extended community. The type is interface{} with range: 0..4294967295.
    ExtendedCommunity interface{}

    // qos group. The type is interface{} with range: 0..4294967295.
    QosGroup interface{}

    // mpls fec. The type is interface{} with range: 0..4294967295.
    MplsFec interface{}

    // qppb QOS group and IP precedence. The type is interface{} with range:
    // 0..4294967295.
    QppbQosGroupAndIpPrecedence interface{}

    // PBR flow-tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // SPP forwarding class ID. The type is interface{} with range: 0..255.
    ForwardClass interface{}

    // The time of last update for PL in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    PlTimeOfLastUpdateInMsec interface{}

    // The time of last update for LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LdiTimeOfLastUpdateInMsec interface{}

    // The time of last update for LW-LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LwldiTimeOfLastUpdateInMsec interface{}

    // The type of time-stamp on PL. The type is interface{} with range:
    // 0..4294967295.
    PlTimeStampType interface{}

    // Detailed Loadshare info.
    LoadshareInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetEntityData() *types.CommonEntityData {
    detailFibEntryInformation.EntityData.YFilter = detailFibEntryInformation.YFilter
    detailFibEntryInformation.EntityData.YangName = "detail-fib-entry-information"
    detailFibEntryInformation.EntityData.BundleName = "cisco_ios_xr"
    detailFibEntryInformation.EntityData.ParentYangName = "ip-prefix-detail"
    detailFibEntryInformation.EntityData.SegmentPath = "detail-fib-entry-information"
    detailFibEntryInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailFibEntryInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailFibEntryInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailFibEntryInformation.EntityData.Children = types.NewOrderedMap()
    detailFibEntryInformation.EntityData.Children.Append("loadshare-information", types.YChild{"LoadshareInformation", &detailFibEntryInformation.LoadshareInformation})
    detailFibEntryInformation.EntityData.Leafs = types.NewOrderedMap()
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-version", types.YLeaf{"FibEntryVersion", detailFibEntryInformation.FibEntryVersion})
    detailFibEntryInformation.EntityData.Leafs.Append("per-prefix-accounting", types.YLeaf{"PerPrefixAccounting", detailFibEntryInformation.PerPrefixAccounting})
    detailFibEntryInformation.EntityData.Leafs.Append("load-sharing-type", types.YLeaf{"LoadSharingType", detailFibEntryInformation.LoadSharingType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-type", types.YLeaf{"FibEntryAdjacencyType", detailFibEntryInformation.FibEntryAdjacencyType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-protocol-type", types.YLeaf{"FibProtocolType", detailFibEntryInformation.FibProtocolType})
    detailFibEntryInformation.EntityData.Leafs.Append("afi-fib-protocol-type", types.YLeaf{"AfiFibProtocolType", detailFibEntryInformation.AfiFibProtocolType})
    detailFibEntryInformation.EntityData.Leafs.Append("aib-l3-address", types.YLeaf{"AibL3Address", detailFibEntryInformation.AibL3Address})
    detailFibEntryInformation.EntityData.Leafs.Append("adjacency-address-length", types.YLeaf{"AdjacencyAddressLength", detailFibEntryInformation.AdjacencyAddressLength})
    detailFibEntryInformation.EntityData.Leafs.Append("adjacency-interface", types.YLeaf{"AdjacencyInterface", detailFibEntryInformation.AdjacencyInterface})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-special-nh-information-type", types.YLeaf{"FibSpecialNhInformationType", detailFibEntryInformation.FibSpecialNhInformationType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-address", types.YLeaf{"FibEntryAdjacencyAddress", detailFibEntryInformation.FibEntryAdjacencyAddress})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-interface", types.YLeaf{"FibEntryAdjacencyInterface", detailFibEntryInformation.FibEntryAdjacencyInterface})
    detailFibEntryInformation.EntityData.Leafs.Append("packets-through-fib-entry", types.YLeaf{"PacketsThroughFibEntry", detailFibEntryInformation.PacketsThroughFibEntry})
    detailFibEntryInformation.EntityData.Leafs.Append("bytes-through-fib-entry", types.YLeaf{"BytesThroughFibEntry", detailFibEntryInformation.BytesThroughFibEntry})
    detailFibEntryInformation.EntityData.Leafs.Append("detailed-prefix-length", types.YLeaf{"DetailedPrefixLength", detailFibEntryInformation.DetailedPrefixLength})
    detailFibEntryInformation.EntityData.Leafs.Append("prefix-protocol", types.YLeaf{"PrefixProtocol", detailFibEntryInformation.PrefixProtocol})
    detailFibEntryInformation.EntityData.Leafs.Append("precedence-forpackets", types.YLeaf{"PrecedenceForpackets", detailFibEntryInformation.PrecedenceForpackets})
    detailFibEntryInformation.EntityData.Leafs.Append("traffic-index-for-packets", types.YLeaf{"TrafficIndexForPackets", detailFibEntryInformation.TrafficIndexForPackets})
    detailFibEntryInformation.EntityData.Leafs.Append("switch-compontent-id", types.YLeaf{"SwitchCompontentId", detailFibEntryInformation.SwitchCompontentId})
    detailFibEntryInformation.EntityData.Leafs.Append("fast-adjacency-flag", types.YLeaf{"FastAdjacencyFlag", detailFibEntryInformation.FastAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("illegal-fast-adjacency-flag", types.YLeaf{"IllegalFastAdjacencyFlag", detailFibEntryInformation.IllegalFastAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("remote-adjacency-flag", types.YLeaf{"RemoteAdjacencyFlag", detailFibEntryInformation.RemoteAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-id", types.YLeaf{"BgpAttributeId", detailFibEntryInformation.BgpAttributeId})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-local-attribute-id", types.YLeaf{"BgpLocalAttributeId", detailFibEntryInformation.BgpLocalAttributeId})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-origin-as", types.YLeaf{"BgpAttributeOriginAs", detailFibEntryInformation.BgpAttributeOriginAs})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-next-hop-as", types.YLeaf{"BgpAttributeNextHopAs", detailFibEntryInformation.BgpAttributeNextHopAs})
    detailFibEntryInformation.EntityData.Leafs.Append("path-string", types.YLeaf{"PathString", detailFibEntryInformation.PathString})
    detailFibEntryInformation.EntityData.Leafs.Append("extcom-string", types.YLeaf{"ExtcomString", detailFibEntryInformation.ExtcomString})
    detailFibEntryInformation.EntityData.Leafs.Append("com-string", types.YLeaf{"ComString", detailFibEntryInformation.ComString})
    detailFibEntryInformation.EntityData.Leafs.Append("extended-community", types.YLeaf{"ExtendedCommunity", detailFibEntryInformation.ExtendedCommunity})
    detailFibEntryInformation.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", detailFibEntryInformation.QosGroup})
    detailFibEntryInformation.EntityData.Leafs.Append("mpls-fec", types.YLeaf{"MplsFec", detailFibEntryInformation.MplsFec})
    detailFibEntryInformation.EntityData.Leafs.Append("qppb-qos-group-and-ip-precedence", types.YLeaf{"QppbQosGroupAndIpPrecedence", detailFibEntryInformation.QppbQosGroupAndIpPrecedence})
    detailFibEntryInformation.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", detailFibEntryInformation.FlowTag})
    detailFibEntryInformation.EntityData.Leafs.Append("forward-class", types.YLeaf{"ForwardClass", detailFibEntryInformation.ForwardClass})
    detailFibEntryInformation.EntityData.Leafs.Append("pl-time-of-last-update-in-msec", types.YLeaf{"PlTimeOfLastUpdateInMsec", detailFibEntryInformation.PlTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("ldi-time-of-last-update-in-msec", types.YLeaf{"LdiTimeOfLastUpdateInMsec", detailFibEntryInformation.LdiTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("lwldi-time-of-last-update-in-msec", types.YLeaf{"LwldiTimeOfLastUpdateInMsec", detailFibEntryInformation.LwldiTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("pl-time-stamp-type", types.YLeaf{"PlTimeStampType", detailFibEntryInformation.PlTimeStampType})

    detailFibEntryInformation.EntityData.YListKeys = []string {}

    return &(detailFibEntryInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation
// Detailed Loadshare info
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughLoadInformation interface{}

    // Bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughLoadInformation interface{}

    // Total packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalPacketsThroughLoadInformation interface{}

    // Total bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TotalBytesThroughLoadInformation interface{}

    // Prefix of the owner. The type is interface{} with range: 0..4294967295.
    PrefixOfOwner interface{}

    // Mask length of the owner. The type is interface{} with range:
    // 0..4294967295.
    MaskLengthOfOwner interface{}

    // Loadinfo reference count. The type is interface{} with range: 0..65535.
    LoadInformationReferenceCount interface{}

    // Per destination load sharing flag. The type is bool.
    PerDestLoadSharingFlag interface{}

    // Loadinfo owner deleted flag. The type is bool.
    LoadInformationOwnerDeletedFlag interface{}

    // Loadinfo sanity flag. The type is bool.
    LoadinfoSanityFlag interface{}

    // Owner flag. The type is bool.
    IsOwner interface{}

    // Loadinfo internal data.
    LoadInformtionInternalData Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetEntityData() *types.CommonEntityData {
    loadshareInformation.EntityData.YFilter = loadshareInformation.YFilter
    loadshareInformation.EntityData.YangName = "loadshare-information"
    loadshareInformation.EntityData.BundleName = "cisco_ios_xr"
    loadshareInformation.EntityData.ParentYangName = "detail-fib-entry-information"
    loadshareInformation.EntityData.SegmentPath = "loadshare-information"
    loadshareInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadshareInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadshareInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadshareInformation.EntityData.Children = types.NewOrderedMap()
    loadshareInformation.EntityData.Children.Append("load-informtion-internal-data", types.YChild{"LoadInformtionInternalData", &loadshareInformation.LoadInformtionInternalData})
    loadshareInformation.EntityData.Leafs = types.NewOrderedMap()
    loadshareInformation.EntityData.Leafs.Append("packets-through-load-information", types.YLeaf{"PacketsThroughLoadInformation", loadshareInformation.PacketsThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("bytes-through-load-information", types.YLeaf{"BytesThroughLoadInformation", loadshareInformation.BytesThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("total-packets-through-load-information", types.YLeaf{"TotalPacketsThroughLoadInformation", loadshareInformation.TotalPacketsThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("total-bytes-through-load-information", types.YLeaf{"TotalBytesThroughLoadInformation", loadshareInformation.TotalBytesThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("prefix-of-owner", types.YLeaf{"PrefixOfOwner", loadshareInformation.PrefixOfOwner})
    loadshareInformation.EntityData.Leafs.Append("mask-length-of-owner", types.YLeaf{"MaskLengthOfOwner", loadshareInformation.MaskLengthOfOwner})
    loadshareInformation.EntityData.Leafs.Append("load-information-reference-count", types.YLeaf{"LoadInformationReferenceCount", loadshareInformation.LoadInformationReferenceCount})
    loadshareInformation.EntityData.Leafs.Append("per-dest-load-sharing-flag", types.YLeaf{"PerDestLoadSharingFlag", loadshareInformation.PerDestLoadSharingFlag})
    loadshareInformation.EntityData.Leafs.Append("load-information-owner-deleted-flag", types.YLeaf{"LoadInformationOwnerDeletedFlag", loadshareInformation.LoadInformationOwnerDeletedFlag})
    loadshareInformation.EntityData.Leafs.Append("loadinfo-sanity-flag", types.YLeaf{"LoadinfoSanityFlag", loadshareInformation.LoadinfoSanityFlag})
    loadshareInformation.EntityData.Leafs.Append("is-owner", types.YLeaf{"IsOwner", loadshareInformation.IsOwner})

    loadshareInformation.EntityData.YListKeys = []string {}

    return &(loadshareInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
// Loadinfo internal data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // level of ldis. The type is interface{} with range: 0..255.
    LevelOfldis interface{}

    // no. of ldis. The type is interface{} with range: 0..255.
    NumberOfLdis interface{}

    // Maximum index of the arrays. The type is interface{} with range:
    // 0..4294967295.
    MaximumIndexArrays interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathIndices interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathLdiNumbers interface{}

    // Maximum slots. The type is interface{} with range: 0..4294967295.
    MaximumSlots interface{}

    // Normalized weights. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NormalizedWeights interface{}

    // Tunnel class value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TunnelClassValue interface{}

    // PBTS info valid flag. The type is bool.
    IsPbtsInfoValid interface{}

    // PBTS class offset. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassOffset interface{}

    // PBTS class num paths. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassNumPaths interface{}

    // PBTS class falls back to class. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsFallbackMappedClass interface{}

    // Round Robin Disable. The type is bool.
    RoundRobinDisable interface{}

    // Number of LDI next hop buckets. The type is interface{} with range: 0..255.
    LdiNextHopBuckets interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardwareInformation interface{}

    // Sanity flag. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag.
    SanityFlag []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag

    // Interface handle. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle.
    InterfaceHandle []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle

    // Weights of paths. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath.
    WeightsOfPath []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath

    // Adjacency address. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress.
    AdjacencyAddress []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress

    // Does PBTS class fall back to drop or any class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped.
    PbtsClassIsFallbackMapped []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped

    // PBTS class falls back to drop. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop.
    PbtsFallbackToDrop []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop

    // Tunnel is forward class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass.
    TunnelIsForwardClass []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetEntityData() *types.CommonEntityData {
    loadInformtionInternalData.EntityData.YFilter = loadInformtionInternalData.YFilter
    loadInformtionInternalData.EntityData.YangName = "load-informtion-internal-data"
    loadInformtionInternalData.EntityData.BundleName = "cisco_ios_xr"
    loadInformtionInternalData.EntityData.ParentYangName = "loadshare-information"
    loadInformtionInternalData.EntityData.SegmentPath = "load-informtion-internal-data"
    loadInformtionInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadInformtionInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadInformtionInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadInformtionInternalData.EntityData.Children = types.NewOrderedMap()
    loadInformtionInternalData.EntityData.Children.Append("sanity-flag", types.YChild{"SanityFlag", nil})
    for i := range loadInformtionInternalData.SanityFlag {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.SanityFlag[i]), types.YChild{"SanityFlag", loadInformtionInternalData.SanityFlag[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("interface-handle", types.YChild{"InterfaceHandle", nil})
    for i := range loadInformtionInternalData.InterfaceHandle {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.InterfaceHandle[i]), types.YChild{"InterfaceHandle", loadInformtionInternalData.InterfaceHandle[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("weights-of-path", types.YChild{"WeightsOfPath", nil})
    for i := range loadInformtionInternalData.WeightsOfPath {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.WeightsOfPath[i]), types.YChild{"WeightsOfPath", loadInformtionInternalData.WeightsOfPath[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("adjacency-address", types.YChild{"AdjacencyAddress", nil})
    for i := range loadInformtionInternalData.AdjacencyAddress {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.AdjacencyAddress[i]), types.YChild{"AdjacencyAddress", loadInformtionInternalData.AdjacencyAddress[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("pbts-class-is-fallback-mapped", types.YChild{"PbtsClassIsFallbackMapped", nil})
    for i := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.PbtsClassIsFallbackMapped[i]), types.YChild{"PbtsClassIsFallbackMapped", loadInformtionInternalData.PbtsClassIsFallbackMapped[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("pbts-fallback-to-drop", types.YChild{"PbtsFallbackToDrop", nil})
    for i := range loadInformtionInternalData.PbtsFallbackToDrop {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.PbtsFallbackToDrop[i]), types.YChild{"PbtsFallbackToDrop", loadInformtionInternalData.PbtsFallbackToDrop[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("tunnel-is-forward-class", types.YChild{"TunnelIsForwardClass", nil})
    for i := range loadInformtionInternalData.TunnelIsForwardClass {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.TunnelIsForwardClass[i]), types.YChild{"TunnelIsForwardClass", loadInformtionInternalData.TunnelIsForwardClass[i]})
    }
    loadInformtionInternalData.EntityData.Leafs = types.NewOrderedMap()
    loadInformtionInternalData.EntityData.Leafs.Append("level-ofldis", types.YLeaf{"LevelOfldis", loadInformtionInternalData.LevelOfldis})
    loadInformtionInternalData.EntityData.Leafs.Append("number-of-ldis", types.YLeaf{"NumberOfLdis", loadInformtionInternalData.NumberOfLdis})
    loadInformtionInternalData.EntityData.Leafs.Append("maximum-index-arrays", types.YLeaf{"MaximumIndexArrays", loadInformtionInternalData.MaximumIndexArrays})
    loadInformtionInternalData.EntityData.Leafs.Append("path-indices", types.YLeaf{"PathIndices", loadInformtionInternalData.PathIndices})
    loadInformtionInternalData.EntityData.Leafs.Append("path-ldi-numbers", types.YLeaf{"PathLdiNumbers", loadInformtionInternalData.PathLdiNumbers})
    loadInformtionInternalData.EntityData.Leafs.Append("maximum-slots", types.YLeaf{"MaximumSlots", loadInformtionInternalData.MaximumSlots})
    loadInformtionInternalData.EntityData.Leafs.Append("normalized-weights", types.YLeaf{"NormalizedWeights", loadInformtionInternalData.NormalizedWeights})
    loadInformtionInternalData.EntityData.Leafs.Append("tunnel-class-value", types.YLeaf{"TunnelClassValue", loadInformtionInternalData.TunnelClassValue})
    loadInformtionInternalData.EntityData.Leafs.Append("is-pbts-info-valid", types.YLeaf{"IsPbtsInfoValid", loadInformtionInternalData.IsPbtsInfoValid})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-class-offset", types.YLeaf{"PbtsClassOffset", loadInformtionInternalData.PbtsClassOffset})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-class-num-paths", types.YLeaf{"PbtsClassNumPaths", loadInformtionInternalData.PbtsClassNumPaths})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-fallback-mapped-class", types.YLeaf{"PbtsFallbackMappedClass", loadInformtionInternalData.PbtsFallbackMappedClass})
    loadInformtionInternalData.EntityData.Leafs.Append("round-robin-disable", types.YLeaf{"RoundRobinDisable", loadInformtionInternalData.RoundRobinDisable})
    loadInformtionInternalData.EntityData.Leafs.Append("ldi-next-hop-buckets", types.YLeaf{"LdiNextHopBuckets", loadInformtionInternalData.LdiNextHopBuckets})
    loadInformtionInternalData.EntityData.Leafs.Append("platform-hardware-information", types.YLeaf{"PlatformHardwareInformation", loadInformtionInternalData.PlatformHardwareInformation})

    loadInformtionInternalData.EntityData.YListKeys = []string {}

    return &(loadInformtionInternalData.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag
// Sanity flag
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is bool.
    Entry interface{}
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetEntityData() *types.CommonEntityData {
    sanityFlag.EntityData.YFilter = sanityFlag.YFilter
    sanityFlag.EntityData.YangName = "sanity-flag"
    sanityFlag.EntityData.BundleName = "cisco_ios_xr"
    sanityFlag.EntityData.ParentYangName = "load-informtion-internal-data"
    sanityFlag.EntityData.SegmentPath = "sanity-flag"
    sanityFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sanityFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sanityFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sanityFlag.EntityData.Children = types.NewOrderedMap()
    sanityFlag.EntityData.Leafs = types.NewOrderedMap()
    sanityFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sanityFlag.Entry})

    sanityFlag.EntityData.YListKeys = []string {}

    return &(sanityFlag.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle
// Interface handle
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-zA-Z0-9./-]+.
    Entry interface{}
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetEntityData() *types.CommonEntityData {
    interfaceHandle.EntityData.YFilter = interfaceHandle.YFilter
    interfaceHandle.EntityData.YangName = "interface-handle"
    interfaceHandle.EntityData.BundleName = "cisco_ios_xr"
    interfaceHandle.EntityData.ParentYangName = "load-informtion-internal-data"
    interfaceHandle.EntityData.SegmentPath = "interface-handle"
    interfaceHandle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceHandle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceHandle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceHandle.EntityData.Children = types.NewOrderedMap()
    interfaceHandle.EntityData.Leafs = types.NewOrderedMap()
    interfaceHandle.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceHandle.Entry})

    interfaceHandle.EntityData.YListKeys = []string {}

    return &(interfaceHandle.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath
// Weights of paths
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetEntityData() *types.CommonEntityData {
    weightsOfPath.EntityData.YFilter = weightsOfPath.YFilter
    weightsOfPath.EntityData.YangName = "weights-of-path"
    weightsOfPath.EntityData.BundleName = "cisco_ios_xr"
    weightsOfPath.EntityData.ParentYangName = "load-informtion-internal-data"
    weightsOfPath.EntityData.SegmentPath = "weights-of-path"
    weightsOfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    weightsOfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    weightsOfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    weightsOfPath.EntityData.Children = types.NewOrderedMap()
    weightsOfPath.EntityData.Leafs = types.NewOrderedMap()
    weightsOfPath.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", weightsOfPath.Entry})

    weightsOfPath.EntityData.YListKeys = []string {}

    return &(weightsOfPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress
// Adjacency address
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // address. The type is string with length: 0..60.
    Address interface{}
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetEntityData() *types.CommonEntityData {
    adjacencyAddress.EntityData.YFilter = adjacencyAddress.YFilter
    adjacencyAddress.EntityData.YangName = "adjacency-address"
    adjacencyAddress.EntityData.BundleName = "cisco_ios_xr"
    adjacencyAddress.EntityData.ParentYangName = "load-informtion-internal-data"
    adjacencyAddress.EntityData.SegmentPath = "adjacency-address"
    adjacencyAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyAddress.EntityData.Children = types.NewOrderedMap()
    adjacencyAddress.EntityData.Leafs = types.NewOrderedMap()
    adjacencyAddress.EntityData.Leafs.Append("address", types.YLeaf{"Address", adjacencyAddress.Address})

    adjacencyAddress.EntityData.YListKeys = []string {}

    return &(adjacencyAddress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped
// Does PBTS class fall back to drop or any class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetEntityData() *types.CommonEntityData {
    pbtsClassIsFallbackMapped.EntityData.YFilter = pbtsClassIsFallbackMapped.YFilter
    pbtsClassIsFallbackMapped.EntityData.YangName = "pbts-class-is-fallback-mapped"
    pbtsClassIsFallbackMapped.EntityData.BundleName = "cisco_ios_xr"
    pbtsClassIsFallbackMapped.EntityData.ParentYangName = "load-informtion-internal-data"
    pbtsClassIsFallbackMapped.EntityData.SegmentPath = "pbts-class-is-fallback-mapped"
    pbtsClassIsFallbackMapped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbtsClassIsFallbackMapped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbtsClassIsFallbackMapped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbtsClassIsFallbackMapped.EntityData.Children = types.NewOrderedMap()
    pbtsClassIsFallbackMapped.EntityData.Leafs = types.NewOrderedMap()
    pbtsClassIsFallbackMapped.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", pbtsClassIsFallbackMapped.Entry})

    pbtsClassIsFallbackMapped.EntityData.YListKeys = []string {}

    return &(pbtsClassIsFallbackMapped.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop
// PBTS class falls back to drop
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetEntityData() *types.CommonEntityData {
    pbtsFallbackToDrop.EntityData.YFilter = pbtsFallbackToDrop.YFilter
    pbtsFallbackToDrop.EntityData.YangName = "pbts-fallback-to-drop"
    pbtsFallbackToDrop.EntityData.BundleName = "cisco_ios_xr"
    pbtsFallbackToDrop.EntityData.ParentYangName = "load-informtion-internal-data"
    pbtsFallbackToDrop.EntityData.SegmentPath = "pbts-fallback-to-drop"
    pbtsFallbackToDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbtsFallbackToDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbtsFallbackToDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbtsFallbackToDrop.EntityData.Children = types.NewOrderedMap()
    pbtsFallbackToDrop.EntityData.Leafs = types.NewOrderedMap()
    pbtsFallbackToDrop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", pbtsFallbackToDrop.Entry})

    pbtsFallbackToDrop.EntityData.YListKeys = []string {}

    return &(pbtsFallbackToDrop.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
// Tunnel is forward class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetEntityData() *types.CommonEntityData {
    tunnelIsForwardClass.EntityData.YFilter = tunnelIsForwardClass.YFilter
    tunnelIsForwardClass.EntityData.YangName = "tunnel-is-forward-class"
    tunnelIsForwardClass.EntityData.BundleName = "cisco_ios_xr"
    tunnelIsForwardClass.EntityData.ParentYangName = "load-informtion-internal-data"
    tunnelIsForwardClass.EntityData.SegmentPath = "tunnel-is-forward-class"
    tunnelIsForwardClass.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelIsForwardClass.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelIsForwardClass.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelIsForwardClass.EntityData.Children = types.NewOrderedMap()
    tunnelIsForwardClass.EntityData.Leafs = types.NewOrderedMap()
    tunnelIsForwardClass.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tunnelIsForwardClass.Entry})

    tunnelIsForwardClass.EntityData.YListKeys = []string {}

    return &(tunnelIsForwardClass.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath
// FIB entry path details
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // fib sh tbl path. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath.
    FibShTblPath []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetEntityData() *types.CommonEntityData {
    fibEntryPath.EntityData.YFilter = fibEntryPath.YFilter
    fibEntryPath.EntityData.YangName = "fib-entry-path"
    fibEntryPath.EntityData.BundleName = "cisco_ios_xr"
    fibEntryPath.EntityData.ParentYangName = "ip-prefix-detail"
    fibEntryPath.EntityData.SegmentPath = "fib-entry-path"
    fibEntryPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibEntryPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibEntryPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibEntryPath.EntityData.Children = types.NewOrderedMap()
    fibEntryPath.EntityData.Children.Append("fib-sh-tbl-path", types.YChild{"FibShTblPath", nil})
    for i := range fibEntryPath.FibShTblPath {
        fibEntryPath.EntityData.Children.Append(types.GetSegmentPath(fibEntryPath.FibShTblPath[i]), types.YChild{"FibShTblPath", fibEntryPath.FibShTblPath[i]})
    }
    fibEntryPath.EntityData.Leafs = types.NewOrderedMap()

    fibEntryPath.EntityData.YListKeys = []string {}

    return &(fibEntryPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath
// fib sh tbl path
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    BriefInterfaceHandle interface{}

    // Next hop prefix. The type is string with length: 0..52.
    BriefNextHopPrefix interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    ViaLabelToRecurse interface{}

    // P-node address. The type is string with length: 0..52.
    BriefPnodeAddress interface{}

    // Q-node address. The type is string with length: 0..52.
    BriefQnodeAddress interface{}

    // LFA protection type. The type is FibUpdatePathLfaProtection.
    BriefLfaProtectionType interface{}

    // Resolved path. The type is bool.
    ResolvedPath interface{}

    // Recursive path. The type is bool.
    RecursivePath interface{}

    // Packets received on this path. The type is bool.
    PacketsReceivedPath interface{}

    // Attached path. The type is bool.
    AttachedPath interface{}

    // Backup path. The type is bool.
    BackupPath interface{}

    // Best external path. The type is bool.
    BestExternalPath interface{}

    // Is protection ignored. The type is bool.
    ProtectIgnore interface{}

    // Is this the path used for DLB. The type is bool.
    PathDlb interface{}

    // Path flags. The type is interface{} with range: 0..4294967295.
    PathFlags interface{}

    // Path Info flags. The type is interface{} with range: 0..65535.
    PathInfoFlags interface{}

    // Path index. The type is interface{} with range: 0..255.
    PathIndex interface{}

    // Backup path index. The type is interface{} with range: 0..255.
    BackupIndex interface{}

    // Next Hop Index. The type is interface{} with range: 0..4294967295.
    NextHopIndex interface{}

    // Parent Interface Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceHandle interface{}

    // recursion via /N constraint. The type is interface{} with range: 0..255.
    RecursionviaLen interface{}

    // More detail about this path entry.
    MoreDetailAboutPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath

    // mpls info for this path entry.
    MplsInformationForPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath

    // SRv6 info for this path entry.
    Srv6InformationForPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_Srv6InformationForPath
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetEntityData() *types.CommonEntityData {
    fibShTblPath.EntityData.YFilter = fibShTblPath.YFilter
    fibShTblPath.EntityData.YangName = "fib-sh-tbl-path"
    fibShTblPath.EntityData.BundleName = "cisco_ios_xr"
    fibShTblPath.EntityData.ParentYangName = "fib-entry-path"
    fibShTblPath.EntityData.SegmentPath = "fib-sh-tbl-path"
    fibShTblPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibShTblPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibShTblPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibShTblPath.EntityData.Children = types.NewOrderedMap()
    fibShTblPath.EntityData.Children.Append("more-detail-about-path", types.YChild{"MoreDetailAboutPath", &fibShTblPath.MoreDetailAboutPath})
    fibShTblPath.EntityData.Children.Append("mpls-information-for-path", types.YChild{"MplsInformationForPath", &fibShTblPath.MplsInformationForPath})
    fibShTblPath.EntityData.Children.Append("srv6-information-for-path", types.YChild{"Srv6InformationForPath", &fibShTblPath.Srv6InformationForPath})
    fibShTblPath.EntityData.Leafs = types.NewOrderedMap()
    fibShTblPath.EntityData.Leafs.Append("hardware-information", types.YLeaf{"HardwareInformation", fibShTblPath.HardwareInformation})
    fibShTblPath.EntityData.Leafs.Append("brief-interface-handle", types.YLeaf{"BriefInterfaceHandle", fibShTblPath.BriefInterfaceHandle})
    fibShTblPath.EntityData.Leafs.Append("brief-next-hop-prefix", types.YLeaf{"BriefNextHopPrefix", fibShTblPath.BriefNextHopPrefix})
    fibShTblPath.EntityData.Leafs.Append("via-label-to-recurse", types.YLeaf{"ViaLabelToRecurse", fibShTblPath.ViaLabelToRecurse})
    fibShTblPath.EntityData.Leafs.Append("brief-pnode-address", types.YLeaf{"BriefPnodeAddress", fibShTblPath.BriefPnodeAddress})
    fibShTblPath.EntityData.Leafs.Append("brief-qnode-address", types.YLeaf{"BriefQnodeAddress", fibShTblPath.BriefQnodeAddress})
    fibShTblPath.EntityData.Leafs.Append("brief-lfa-protection-type", types.YLeaf{"BriefLfaProtectionType", fibShTblPath.BriefLfaProtectionType})
    fibShTblPath.EntityData.Leafs.Append("resolved-path", types.YLeaf{"ResolvedPath", fibShTblPath.ResolvedPath})
    fibShTblPath.EntityData.Leafs.Append("recursive-path", types.YLeaf{"RecursivePath", fibShTblPath.RecursivePath})
    fibShTblPath.EntityData.Leafs.Append("packets-received-path", types.YLeaf{"PacketsReceivedPath", fibShTblPath.PacketsReceivedPath})
    fibShTblPath.EntityData.Leafs.Append("attached-path", types.YLeaf{"AttachedPath", fibShTblPath.AttachedPath})
    fibShTblPath.EntityData.Leafs.Append("backup-path", types.YLeaf{"BackupPath", fibShTblPath.BackupPath})
    fibShTblPath.EntityData.Leafs.Append("best-external-path", types.YLeaf{"BestExternalPath", fibShTblPath.BestExternalPath})
    fibShTblPath.EntityData.Leafs.Append("protect-ignore", types.YLeaf{"ProtectIgnore", fibShTblPath.ProtectIgnore})
    fibShTblPath.EntityData.Leafs.Append("path-dlb", types.YLeaf{"PathDlb", fibShTblPath.PathDlb})
    fibShTblPath.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", fibShTblPath.PathFlags})
    fibShTblPath.EntityData.Leafs.Append("path-info-flags", types.YLeaf{"PathInfoFlags", fibShTblPath.PathInfoFlags})
    fibShTblPath.EntityData.Leafs.Append("path-index", types.YLeaf{"PathIndex", fibShTblPath.PathIndex})
    fibShTblPath.EntityData.Leafs.Append("backup-index", types.YLeaf{"BackupIndex", fibShTblPath.BackupIndex})
    fibShTblPath.EntityData.Leafs.Append("next-hop-index", types.YLeaf{"NextHopIndex", fibShTblPath.NextHopIndex})
    fibShTblPath.EntityData.Leafs.Append("parent-interface-handle", types.YLeaf{"ParentInterfaceHandle", fibShTblPath.ParentInterfaceHandle})
    fibShTblPath.EntityData.Leafs.Append("recursionvia-len", types.YLeaf{"RecursionviaLen", fibShTblPath.RecursionviaLen})

    fibShTblPath.EntityData.YListKeys = []string {}

    return &(fibShTblPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath
// More detail about this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address to recurse to. The type is string with length: 0..52.
    IpAddressToRecurse interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    LabelToRecurse interface{}

    // Next hop prefix. The type is string with length: 0..52.
    DetailNextHopPrefix interface{}

    // Next hop mask length. The type is interface{} with range: 0..255.
    NextHopMaskLength interface{}

    // Interface associated with this path. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceAssociatedPath interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // Next hop VRF. The type is string with length: 0..33.
    NextHopVrf interface{}

    // Tunnel endpoint id. The type is interface{} with range: 0..4294967295.
    TunnleEndpointId interface{}

    // LISP RLOC ID. The type is interface{} with range: 0..4294967295.
    Lisprlocid interface{}

    // No. of dependents for this path. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependenciesThisPath interface{}

    // Round robin reset value. The type is interface{} with range: 0..255.
    RobinResetValue interface{}

    // Is recursion object a leaf?. The type is bool.
    RecursePrefixObject interface{}

    // Next prefix recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion interface{}

    // Next prefix length. The type is interface{} with range: 0..255.
    NextPrefixLength interface{}

    // Recursion has two leaves (e.g. implicit-null path). The type is bool.
    RecursePrefixObject2 interface{}

    // Next prefix2 recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion2 interface{}

    // Next prefix2 length. The type is interface{} with range: 0..255.
    NextPrefixLength2 interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    DetailFibAdjacencyType interface{}

    // Current path flag. The type is bool.
    CurrentPathFlag interface{}

    // Recursive path information is available. The type is bool.
    RecursivePathInformation interface{}

    // Path is an external adjacency. The type is bool.
    ExternalAdjacency interface{}

    // FIB Nhinfo type. The type is FibNeh.
    FibPathNhInformationType interface{}

    // FIB Nhinfo type special. The type is FibNehSpecial.
    FibPathNhInformationTypeSpecial interface{}

    // Weight of the path. The type is interface{} with range: 0..4294967295.
    WeightOfPath interface{}

    // Tunnel class of the path. The type is interface{} with range: 0..255.
    TunnelClass interface{}

    // Tunnel is forward class. The type is bool.
    TunnelIsForwardClass interface{}

    // IP Encap. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap.
    SpdIpencap []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetEntityData() *types.CommonEntityData {
    moreDetailAboutPath.EntityData.YFilter = moreDetailAboutPath.YFilter
    moreDetailAboutPath.EntityData.YangName = "more-detail-about-path"
    moreDetailAboutPath.EntityData.BundleName = "cisco_ios_xr"
    moreDetailAboutPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    moreDetailAboutPath.EntityData.SegmentPath = "more-detail-about-path"
    moreDetailAboutPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moreDetailAboutPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moreDetailAboutPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moreDetailAboutPath.EntityData.Children = types.NewOrderedMap()
    moreDetailAboutPath.EntityData.Children.Append("spd-ipencap", types.YChild{"SpdIpencap", nil})
    for i := range moreDetailAboutPath.SpdIpencap {
        moreDetailAboutPath.EntityData.Children.Append(types.GetSegmentPath(moreDetailAboutPath.SpdIpencap[i]), types.YChild{"SpdIpencap", moreDetailAboutPath.SpdIpencap[i]})
    }
    moreDetailAboutPath.EntityData.Leafs = types.NewOrderedMap()
    moreDetailAboutPath.EntityData.Leafs.Append("ip-address-to-recurse", types.YLeaf{"IpAddressToRecurse", moreDetailAboutPath.IpAddressToRecurse})
    moreDetailAboutPath.EntityData.Leafs.Append("label-to-recurse", types.YLeaf{"LabelToRecurse", moreDetailAboutPath.LabelToRecurse})
    moreDetailAboutPath.EntityData.Leafs.Append("detail-next-hop-prefix", types.YLeaf{"DetailNextHopPrefix", moreDetailAboutPath.DetailNextHopPrefix})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-mask-length", types.YLeaf{"NextHopMaskLength", moreDetailAboutPath.NextHopMaskLength})
    moreDetailAboutPath.EntityData.Leafs.Append("interface-associated-path", types.YLeaf{"InterfaceAssociatedPath", moreDetailAboutPath.InterfaceAssociatedPath})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-interface", types.YLeaf{"NextHopInterface", moreDetailAboutPath.NextHopInterface})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-vrf", types.YLeaf{"NextHopVrf", moreDetailAboutPath.NextHopVrf})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnle-endpoint-id", types.YLeaf{"TunnleEndpointId", moreDetailAboutPath.TunnleEndpointId})
    moreDetailAboutPath.EntityData.Leafs.Append("lisprlocid", types.YLeaf{"Lisprlocid", moreDetailAboutPath.Lisprlocid})
    moreDetailAboutPath.EntityData.Leafs.Append("number-of-dependencies-this-path", types.YLeaf{"NumberOfDependenciesThisPath", moreDetailAboutPath.NumberOfDependenciesThisPath})
    moreDetailAboutPath.EntityData.Leafs.Append("robin-reset-value", types.YLeaf{"RobinResetValue", moreDetailAboutPath.RobinResetValue})
    moreDetailAboutPath.EntityData.Leafs.Append("recurse-prefix-object", types.YLeaf{"RecursePrefixObject", moreDetailAboutPath.RecursePrefixObject})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-recursion", types.YLeaf{"NextPrefixRecursion", moreDetailAboutPath.NextPrefixRecursion})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-length", types.YLeaf{"NextPrefixLength", moreDetailAboutPath.NextPrefixLength})
    moreDetailAboutPath.EntityData.Leafs.Append("recurse-prefix-object2", types.YLeaf{"RecursePrefixObject2", moreDetailAboutPath.RecursePrefixObject2})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-recursion2", types.YLeaf{"NextPrefixRecursion2", moreDetailAboutPath.NextPrefixRecursion2})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-length2", types.YLeaf{"NextPrefixLength2", moreDetailAboutPath.NextPrefixLength2})
    moreDetailAboutPath.EntityData.Leafs.Append("detail-fib-adjacency-type", types.YLeaf{"DetailFibAdjacencyType", moreDetailAboutPath.DetailFibAdjacencyType})
    moreDetailAboutPath.EntityData.Leafs.Append("current-path-flag", types.YLeaf{"CurrentPathFlag", moreDetailAboutPath.CurrentPathFlag})
    moreDetailAboutPath.EntityData.Leafs.Append("recursive-path-information", types.YLeaf{"RecursivePathInformation", moreDetailAboutPath.RecursivePathInformation})
    moreDetailAboutPath.EntityData.Leafs.Append("external-adjacency", types.YLeaf{"ExternalAdjacency", moreDetailAboutPath.ExternalAdjacency})
    moreDetailAboutPath.EntityData.Leafs.Append("fib-path-nh-information-type", types.YLeaf{"FibPathNhInformationType", moreDetailAboutPath.FibPathNhInformationType})
    moreDetailAboutPath.EntityData.Leafs.Append("fib-path-nh-information-type-special", types.YLeaf{"FibPathNhInformationTypeSpecial", moreDetailAboutPath.FibPathNhInformationTypeSpecial})
    moreDetailAboutPath.EntityData.Leafs.Append("weight-of-path", types.YLeaf{"WeightOfPath", moreDetailAboutPath.WeightOfPath})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", moreDetailAboutPath.TunnelClass})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnel-is-forward-class", types.YLeaf{"TunnelIsForwardClass", moreDetailAboutPath.TunnelIsForwardClass})

    moreDetailAboutPath.EntityData.YListKeys = []string {}

    return &(moreDetailAboutPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
// IP Encap
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Header Count. The type is interface{} with range: 0..255.
    IpEncapHdrCount interface{}

    // IPEncap Object Locks. The type is interface{} with range: 0..4294967295.
    IpEncapLocks interface{}

    // Transport Table. The type is interface{} with range: 0..4294967295.
    IpEncapTransportTbl interface{}

    // Transport VRF name. The type is string.
    IpeTransportVrfName interface{}

    // Transport AF. The type is interface{} with range: 0..4294967295.
    IpEncapTransportAf interface{}

    // Payload AF. The type is interface{} with range: 0..4294967295.
    IpEncapPayloadAf interface{}

    // Payload MTU. The type is interface{} with range: 0..65535.
    IpEncapPayloadMtu interface{}

    // Pointer to parent. The type is interface{} with range: 0..4294967295.
    IpEncapParent interface{}

    // Parent type enumeration. The type is interface{} with range: 0..4294967295.
    IpEncapParentType interface{}

    // Headers. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr.
    IpEncapHdr []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetEntityData() *types.CommonEntityData {
    spdIpencap.EntityData.YFilter = spdIpencap.YFilter
    spdIpencap.EntityData.YangName = "spd-ipencap"
    spdIpencap.EntityData.BundleName = "cisco_ios_xr"
    spdIpencap.EntityData.ParentYangName = "more-detail-about-path"
    spdIpencap.EntityData.SegmentPath = "spd-ipencap"
    spdIpencap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spdIpencap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spdIpencap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spdIpencap.EntityData.Children = types.NewOrderedMap()
    spdIpencap.EntityData.Children.Append("ip-encap-hdr", types.YChild{"IpEncapHdr", nil})
    for i := range spdIpencap.IpEncapHdr {
        spdIpencap.EntityData.Children.Append(types.GetSegmentPath(spdIpencap.IpEncapHdr[i]), types.YChild{"IpEncapHdr", spdIpencap.IpEncapHdr[i]})
    }
    spdIpencap.EntityData.Leafs = types.NewOrderedMap()
    spdIpencap.EntityData.Leafs.Append("ip-encap-hdr-count", types.YLeaf{"IpEncapHdrCount", spdIpencap.IpEncapHdrCount})
    spdIpencap.EntityData.Leafs.Append("ip-encap-locks", types.YLeaf{"IpEncapLocks", spdIpencap.IpEncapLocks})
    spdIpencap.EntityData.Leafs.Append("ip-encap-transport-tbl", types.YLeaf{"IpEncapTransportTbl", spdIpencap.IpEncapTransportTbl})
    spdIpencap.EntityData.Leafs.Append("ipe-transport-vrf-name", types.YLeaf{"IpeTransportVrfName", spdIpencap.IpeTransportVrfName})
    spdIpencap.EntityData.Leafs.Append("ip-encap-transport-af", types.YLeaf{"IpEncapTransportAf", spdIpencap.IpEncapTransportAf})
    spdIpencap.EntityData.Leafs.Append("ip-encap-payload-af", types.YLeaf{"IpEncapPayloadAf", spdIpencap.IpEncapPayloadAf})
    spdIpencap.EntityData.Leafs.Append("ip-encap-payload-mtu", types.YLeaf{"IpEncapPayloadMtu", spdIpencap.IpEncapPayloadMtu})
    spdIpencap.EntityData.Leafs.Append("ip-encap-parent", types.YLeaf{"IpEncapParent", spdIpencap.IpEncapParent})
    spdIpencap.EntityData.Leafs.Append("ip-encap-parent-type", types.YLeaf{"IpEncapParentType", spdIpencap.IpEncapParentType})

    spdIpencap.EntityData.YListKeys = []string {}

    return &(spdIpencap.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
// Headers
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Header Type. The type is FibShIpencapHdr.
    IpEncapHdrType interface{}

    // Static Header. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    IpEncapHdrp interface{}

    // Dynamic Header Fields. The type is interface{} with range: 0..4294967295.
    IpEncapHdrDyn interface{}
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetEntityData() *types.CommonEntityData {
    ipEncapHdr.EntityData.YFilter = ipEncapHdr.YFilter
    ipEncapHdr.EntityData.YangName = "ip-encap-hdr"
    ipEncapHdr.EntityData.BundleName = "cisco_ios_xr"
    ipEncapHdr.EntityData.ParentYangName = "spd-ipencap"
    ipEncapHdr.EntityData.SegmentPath = "ip-encap-hdr"
    ipEncapHdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipEncapHdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipEncapHdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipEncapHdr.EntityData.Children = types.NewOrderedMap()
    ipEncapHdr.EntityData.Leafs = types.NewOrderedMap()
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdr-type", types.YLeaf{"IpEncapHdrType", ipEncapHdr.IpEncapHdrType})
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdrp", types.YLeaf{"IpEncapHdrp", ipEncapHdr.IpEncapHdrp})
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdr-dyn", types.YLeaf{"IpEncapHdrDyn", ipEncapHdr.IpEncapHdrDyn})

    ipEncapHdr.EntityData.YListKeys = []string {}

    return &(ipEncapHdr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath
// mpls info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LocalLable. The type is interface{} with range: 0..4294967295.
    LocalLable interface{}

    // RecursiveFwdChain. The type is bool.
    RecursiveFwdChain interface{}

    // NumberOfIGPPaths. The type is interface{} with range: 0..4294967295.
    NumberOfIgpPaths interface{}

    // RemoteBackupPath. The type is bool.
    RemoteBackup interface{}

    // Recursive Label(s). The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack.
    RecursiveLblStack []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack

    // igp label stack array. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray.
    IgpLabelStackArray []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetEntityData() *types.CommonEntityData {
    mplsInformationForPath.EntityData.YFilter = mplsInformationForPath.YFilter
    mplsInformationForPath.EntityData.YangName = "mpls-information-for-path"
    mplsInformationForPath.EntityData.BundleName = "cisco_ios_xr"
    mplsInformationForPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    mplsInformationForPath.EntityData.SegmentPath = "mpls-information-for-path"
    mplsInformationForPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsInformationForPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsInformationForPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsInformationForPath.EntityData.Children = types.NewOrderedMap()
    mplsInformationForPath.EntityData.Children.Append("recursive-lbl-stack", types.YChild{"RecursiveLblStack", nil})
    for i := range mplsInformationForPath.RecursiveLblStack {
        mplsInformationForPath.EntityData.Children.Append(types.GetSegmentPath(mplsInformationForPath.RecursiveLblStack[i]), types.YChild{"RecursiveLblStack", mplsInformationForPath.RecursiveLblStack[i]})
    }
    mplsInformationForPath.EntityData.Children.Append("igp-label-stack-array", types.YChild{"IgpLabelStackArray", nil})
    for i := range mplsInformationForPath.IgpLabelStackArray {
        mplsInformationForPath.EntityData.Children.Append(types.GetSegmentPath(mplsInformationForPath.IgpLabelStackArray[i]), types.YChild{"IgpLabelStackArray", mplsInformationForPath.IgpLabelStackArray[i]})
    }
    mplsInformationForPath.EntityData.Leafs = types.NewOrderedMap()
    mplsInformationForPath.EntityData.Leafs.Append("local-lable", types.YLeaf{"LocalLable", mplsInformationForPath.LocalLable})
    mplsInformationForPath.EntityData.Leafs.Append("recursive-fwd-chain", types.YLeaf{"RecursiveFwdChain", mplsInformationForPath.RecursiveFwdChain})
    mplsInformationForPath.EntityData.Leafs.Append("number-of-igp-paths", types.YLeaf{"NumberOfIgpPaths", mplsInformationForPath.NumberOfIgpPaths})
    mplsInformationForPath.EntityData.Leafs.Append("remote-backup", types.YLeaf{"RemoteBackup", mplsInformationForPath.RemoteBackup})

    mplsInformationForPath.EntityData.YListKeys = []string {}

    return &(mplsInformationForPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack
// Recursive Label(s)
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetEntityData() *types.CommonEntityData {
    recursiveLblStack.EntityData.YFilter = recursiveLblStack.YFilter
    recursiveLblStack.EntityData.YangName = "recursive-lbl-stack"
    recursiveLblStack.EntityData.BundleName = "cisco_ios_xr"
    recursiveLblStack.EntityData.ParentYangName = "mpls-information-for-path"
    recursiveLblStack.EntityData.SegmentPath = "recursive-lbl-stack"
    recursiveLblStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recursiveLblStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recursiveLblStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recursiveLblStack.EntityData.Children = types.NewOrderedMap()
    recursiveLblStack.EntityData.Leafs = types.NewOrderedMap()
    recursiveLblStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", recursiveLblStack.Entry})

    recursiveLblStack.EntityData.YListKeys = []string {}

    return &(recursiveLblStack.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
// igp label stack array
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NumberOfLabels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}

    // OutInterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // NHAddress. The type is string with length: 0..52.
    NhAddress interface{}

    // lstack. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack.
    Lstack []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetEntityData() *types.CommonEntityData {
    igpLabelStackArray.EntityData.YFilter = igpLabelStackArray.YFilter
    igpLabelStackArray.EntityData.YangName = "igp-label-stack-array"
    igpLabelStackArray.EntityData.BundleName = "cisco_ios_xr"
    igpLabelStackArray.EntityData.ParentYangName = "mpls-information-for-path"
    igpLabelStackArray.EntityData.SegmentPath = "igp-label-stack-array"
    igpLabelStackArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igpLabelStackArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igpLabelStackArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igpLabelStackArray.EntityData.Children = types.NewOrderedMap()
    igpLabelStackArray.EntityData.Children.Append("lstack", types.YChild{"Lstack", nil})
    for i := range igpLabelStackArray.Lstack {
        igpLabelStackArray.EntityData.Children.Append(types.GetSegmentPath(igpLabelStackArray.Lstack[i]), types.YChild{"Lstack", igpLabelStackArray.Lstack[i]})
    }
    igpLabelStackArray.EntityData.Leafs = types.NewOrderedMap()
    igpLabelStackArray.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", igpLabelStackArray.NumberOfLabels})
    igpLabelStackArray.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", igpLabelStackArray.OutInterface})
    igpLabelStackArray.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", igpLabelStackArray.NhAddress})

    igpLabelStackArray.EntityData.YListKeys = []string {}

    return &(igpLabelStackArray.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
// lstack
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetEntityData() *types.CommonEntityData {
    lstack.EntityData.YFilter = lstack.YFilter
    lstack.EntityData.YangName = "lstack"
    lstack.EntityData.BundleName = "cisco_ios_xr"
    lstack.EntityData.ParentYangName = "igp-label-stack-array"
    lstack.EntityData.SegmentPath = "lstack"
    lstack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lstack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lstack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lstack.EntityData.Children = types.NewOrderedMap()
    lstack.EntityData.Leafs = types.NewOrderedMap()
    lstack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lstack.Entry})

    lstack.EntityData.YListKeys = []string {}

    return &(lstack.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_Srv6InformationForPath
// SRv6 info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_Srv6InformationForPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SRv6 SID list. The type is string.
    Srv6SidList interface{}
}

func (srv6InformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_Srv6InformationForPath) GetEntityData() *types.CommonEntityData {
    srv6InformationForPath.EntityData.YFilter = srv6InformationForPath.YFilter
    srv6InformationForPath.EntityData.YangName = "srv6-information-for-path"
    srv6InformationForPath.EntityData.BundleName = "cisco_ios_xr"
    srv6InformationForPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    srv6InformationForPath.EntityData.SegmentPath = "srv6-information-for-path"
    srv6InformationForPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srv6InformationForPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srv6InformationForPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srv6InformationForPath.EntityData.Children = types.NewOrderedMap()
    srv6InformationForPath.EntityData.Leafs = types.NewOrderedMap()
    srv6InformationForPath.EntityData.Leafs.Append("srv6-sid-list", types.YLeaf{"Srv6SidList", srv6InformationForPath.Srv6SidList})

    srv6InformationForPath.EntityData.YListKeys = []string {}

    return &(srv6InformationForPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject
// Leaf Extension Object List
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibShTblFibExtBag.
    Type interface{}

    // sfecd le.
    SfecdLe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetEntityData() *types.CommonEntityData {
    extensionObject.EntityData.YFilter = extensionObject.YFilter
    extensionObject.EntityData.YangName = "extension-object"
    extensionObject.EntityData.BundleName = "cisco_ios_xr"
    extensionObject.EntityData.ParentYangName = "ip-prefix-detail"
    extensionObject.EntityData.SegmentPath = "extension-object"
    extensionObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extensionObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extensionObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extensionObject.EntityData.Children = types.NewOrderedMap()
    extensionObject.EntityData.Children.Append("sfecd-le", types.YChild{"SfecdLe", &extensionObject.SfecdLe})
    extensionObject.EntityData.Leafs = types.NewOrderedMap()
    extensionObject.EntityData.Leafs.Append("type", types.YLeaf{"Type", extensionObject.Type})

    extensionObject.EntityData.YListKeys = []string {}

    return &(extensionObject.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe
// sfecd le
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Context Label Exist. The type is bool.
    ContextLabelFlag interface{}

    // Context Label. The type is interface{} with range: 0..4294967295.
    ContextLabel interface{}
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetEntityData() *types.CommonEntityData {
    sfecdLe.EntityData.YFilter = sfecdLe.YFilter
    sfecdLe.EntityData.YangName = "sfecd-le"
    sfecdLe.EntityData.BundleName = "cisco_ios_xr"
    sfecdLe.EntityData.ParentYangName = "extension-object"
    sfecdLe.EntityData.SegmentPath = "sfecd-le"
    sfecdLe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfecdLe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfecdLe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfecdLe.EntityData.Children = types.NewOrderedMap()
    sfecdLe.EntityData.Leafs = types.NewOrderedMap()
    sfecdLe.EntityData.Leafs.Append("context-label-flag", types.YLeaf{"ContextLabelFlag", sfecdLe.ContextLabelFlag})
    sfecdLe.EntityData.Leafs.Append("context-label", types.YLeaf{"ContextLabel", sfecdLe.ContextLabel})

    sfecdLe.EntityData.YListKeys = []string {}

    return &(sfecdLe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local (non-remote) nhinfo.
    NhInfoLocalDetails Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails

    // Special nhinfo.
    NhInfoSpecialDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail

    // Detailed Remote NHInfo table.
    NhInfoRemoteDetails Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetEntityData() *types.CommonEntityData {
    nhInfoDetail.EntityData.YFilter = nhInfoDetail.YFilter
    nhInfoDetail.EntityData.YangName = "nh-info-detail"
    nhInfoDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoDetail.EntityData.ParentYangName = "vrf"
    nhInfoDetail.EntityData.SegmentPath = "nh-info-detail"
    nhInfoDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoDetail.EntityData.Children.Append("nh-info-local-details", types.YChild{"NhInfoLocalDetails", &nhInfoDetail.NhInfoLocalDetails})
    nhInfoDetail.EntityData.Children.Append("nh-info-special-detail", types.YChild{"NhInfoSpecialDetail", &nhInfoDetail.NhInfoSpecialDetail})
    nhInfoDetail.EntityData.Children.Append("nh-info-remote-details", types.YChild{"NhInfoRemoteDetails", &nhInfoDetail.NhInfoRemoteDetails})
    nhInfoDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoDetail.EntityData.YListKeys = []string {}

    return &(nhInfoDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail.
    NhInfoLocalDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetEntityData() *types.CommonEntityData {
    nhInfoLocalDetails.EntityData.YFilter = nhInfoLocalDetails.YFilter
    nhInfoLocalDetails.EntityData.YangName = "nh-info-local-details"
    nhInfoLocalDetails.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalDetails.EntityData.ParentYangName = "nh-info-detail"
    nhInfoLocalDetails.EntityData.SegmentPath = "nh-info-local-details"
    nhInfoLocalDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalDetails.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalDetails.EntityData.Children.Append("nh-info-local-detail", types.YChild{"NhInfoLocalDetail", nil})
    for i := range nhInfoLocalDetails.NhInfoLocalDetail {
        nhInfoLocalDetails.EntityData.Children.Append(types.GetSegmentPath(nhInfoLocalDetails.NhInfoLocalDetail[i]), types.YChild{"NhInfoLocalDetail", nhInfoLocalDetails.NhInfoLocalDetail[i]})
    }
    nhInfoLocalDetails.EntityData.Leafs = types.NewOrderedMap()

    nhInfoLocalDetails.EntityData.YListKeys = []string {}

    return &(nhInfoLocalDetails.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail
// Detail NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetEntityData() *types.CommonEntityData {
    nhInfoLocalDetail.EntityData.YFilter = nhInfoLocalDetail.YFilter
    nhInfoLocalDetail.EntityData.YangName = "nh-info-local-detail"
    nhInfoLocalDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalDetail.EntityData.ParentYangName = "nh-info-local-details"
    nhInfoLocalDetail.EntityData.SegmentPath = "nh-info-local-detail"
    nhInfoLocalDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalDetail.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoLocalDetail.SiPwhe})
    nhInfoLocalDetail.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoLocalDetail.NhInfoExtension})
    nhInfoLocalDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoLocalDetail.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoLocalDetail.NhInterfaceName})
    nhInfoLocalDetail.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoLocalDetail.NhAddress})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoLocalDetail.SiLinkProto})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoLocalDetail.SiNhinfo})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoLocalDetail.SiNhtype})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoLocalDetail.SiIfh})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoLocalDetail.SiPfiInterfaceType})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoLocalDetail.SiAdjPtr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoLocalDetail.SiAdjPresent})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoLocalDetail.SiSpecialType})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoLocalDetail.SiRefcount})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoLocalDetail.SiFlags})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoLocalDetail.SiAdjIf})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoLocalDetail.SiExtPfx})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoLocalDetail.SiExtPfxLen})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoLocalDetail.SiExtPfxProto})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoLocalDetail.SiAdjAddress})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoLocalDetail.SiAdjAddrlen})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoLocalDetail.SiAdjAddrProto})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoLocalDetail.SiAdjRwLen})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoLocalDetail.SiAdjRw})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoLocalDetail.SiDepNhinfoType})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoLocalDetail.SiDepNhinfo})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoLocalDetail.SiDepNhinfoIfh})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoLocalDetail.SiBkupFrr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoLocalDetail.SiProtectFrr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoLocalDetail.SiBkupNhinfo})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoLocalDetail.SiBkupIfh})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoLocalDetail.SiBkupAddr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoLocalDetail.SiBkupAddrlen})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoLocalDetail.SiBkupAddrProto})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoLocalDetail.SiFrrActive})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoLocalDetail.SiAttrIsExtMgd})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoLocalDetail.SiAttrIsIncomp})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoLocalDetail.SiAttrIsTunnel})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoLocalDetail.SiAttrIsTunnelSrte})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoLocalDetail.SiAttrIsGreTunnel})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoLocalDetail.SiGreTi})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoLocalDetail.SiGreTiFlags})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoLocalDetail.SiGreTiRefcnt})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoLocalDetail.SiGreTosPropagate})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoLocalDetail.SiHardware})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoLocalDetail.SiNhinfoPtr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoLocalDetail.SiFnbIdbPtr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoLocalDetail.SiAncIfh})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoLocalDetail.SiGreTiResolvingLeafp})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoLocalDetail.SiGreDestAddr})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoLocalDetail.SiNhid})
    nhInfoLocalDetail.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoLocalDetail.SiUpdTs})

    nhInfoLocalDetail.EntityData.YListKeys = []string {}

    return &(nhInfoLocalDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-local-detail"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-local-detail"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail
// Special nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail special-punt NHInfo entry.
    NhInfoSpecialPuntDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail

    // Detail special-drop NHInfo entry.
    NhInfoSpecialDropDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail

    // Detail special-null NHInfo entry.
    NhInfoSpecialNullDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail

    // Detail special-discard NHInfo entry.
    NhInfoSpecialDiscardDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDetail.EntityData.YFilter = nhInfoSpecialDetail.YFilter
    nhInfoSpecialDetail.EntityData.YangName = "nh-info-special-detail"
    nhInfoSpecialDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDetail.EntityData.ParentYangName = "nh-info-detail"
    nhInfoSpecialDetail.EntityData.SegmentPath = "nh-info-special-detail"
    nhInfoSpecialDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDetail.EntityData.Children.Append("nh-info-special-punt-detail", types.YChild{"NhInfoSpecialPuntDetail", &nhInfoSpecialDetail.NhInfoSpecialPuntDetail})
    nhInfoSpecialDetail.EntityData.Children.Append("nh-info-special-drop-detail", types.YChild{"NhInfoSpecialDropDetail", &nhInfoSpecialDetail.NhInfoSpecialDropDetail})
    nhInfoSpecialDetail.EntityData.Children.Append("nh-info-special-null-detail", types.YChild{"NhInfoSpecialNullDetail", &nhInfoSpecialDetail.NhInfoSpecialNullDetail})
    nhInfoSpecialDetail.EntityData.Children.Append("nh-info-special-discard-detail", types.YChild{"NhInfoSpecialDiscardDetail", &nhInfoSpecialDetail.NhInfoSpecialDiscardDetail})
    nhInfoSpecialDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoSpecialDetail.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail
// Detail special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialPuntDetail.EntityData.YFilter = nhInfoSpecialPuntDetail.YFilter
    nhInfoSpecialPuntDetail.EntityData.YangName = "nh-info-special-punt-detail"
    nhInfoSpecialPuntDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialPuntDetail.EntityData.ParentYangName = "nh-info-special-detail"
    nhInfoSpecialPuntDetail.EntityData.SegmentPath = "nh-info-special-punt-detail"
    nhInfoSpecialPuntDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialPuntDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialPuntDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialPuntDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialPuntDetail.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialPuntDetail.SiPwhe})
    nhInfoSpecialPuntDetail.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialPuntDetail.NhInfoExtension})
    nhInfoSpecialPuntDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialPuntDetail.SiLinkProto})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialPuntDetail.SiNhinfo})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialPuntDetail.SiNhtype})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialPuntDetail.SiIfh})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialPuntDetail.SiPfiInterfaceType})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialPuntDetail.SiAdjPtr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialPuntDetail.SiAdjPresent})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialPuntDetail.SiSpecialType})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialPuntDetail.SiRefcount})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialPuntDetail.SiFlags})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialPuntDetail.SiAdjIf})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialPuntDetail.SiExtPfx})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialPuntDetail.SiExtPfxLen})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialPuntDetail.SiExtPfxProto})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialPuntDetail.SiAdjAddress})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialPuntDetail.SiAdjAddrlen})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialPuntDetail.SiAdjAddrProto})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialPuntDetail.SiAdjRwLen})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialPuntDetail.SiAdjRw})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialPuntDetail.SiDepNhinfoType})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialPuntDetail.SiDepNhinfo})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialPuntDetail.SiDepNhinfoIfh})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialPuntDetail.SiBkupFrr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialPuntDetail.SiProtectFrr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialPuntDetail.SiBkupNhinfo})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialPuntDetail.SiBkupIfh})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialPuntDetail.SiBkupAddr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialPuntDetail.SiBkupAddrlen})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialPuntDetail.SiBkupAddrProto})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialPuntDetail.SiFrrActive})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialPuntDetail.SiAttrIsExtMgd})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialPuntDetail.SiAttrIsIncomp})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialPuntDetail.SiAttrIsTunnel})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialPuntDetail.SiAttrIsTunnelSrte})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialPuntDetail.SiAttrIsGreTunnel})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialPuntDetail.SiGreTi})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialPuntDetail.SiGreTiFlags})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialPuntDetail.SiGreTiRefcnt})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialPuntDetail.SiGreTosPropagate})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialPuntDetail.SiHardware})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialPuntDetail.SiNhinfoPtr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialPuntDetail.SiFnbIdbPtr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialPuntDetail.SiAncIfh})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialPuntDetail.SiGreTiResolvingLeafp})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialPuntDetail.SiGreDestAddr})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialPuntDetail.SiNhid})
    nhInfoSpecialPuntDetail.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialPuntDetail.SiUpdTs})

    nhInfoSpecialPuntDetail.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialPuntDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-punt-detail"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-punt-detail"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail
// Detail special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDropDetail.EntityData.YFilter = nhInfoSpecialDropDetail.YFilter
    nhInfoSpecialDropDetail.EntityData.YangName = "nh-info-special-drop-detail"
    nhInfoSpecialDropDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDropDetail.EntityData.ParentYangName = "nh-info-special-detail"
    nhInfoSpecialDropDetail.EntityData.SegmentPath = "nh-info-special-drop-detail"
    nhInfoSpecialDropDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDropDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDropDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDropDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDropDetail.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDropDetail.SiPwhe})
    nhInfoSpecialDropDetail.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDropDetail.NhInfoExtension})
    nhInfoSpecialDropDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDropDetail.SiLinkProto})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDropDetail.SiNhinfo})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDropDetail.SiNhtype})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDropDetail.SiIfh})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDropDetail.SiPfiInterfaceType})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDropDetail.SiAdjPtr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDropDetail.SiAdjPresent})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDropDetail.SiSpecialType})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDropDetail.SiRefcount})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDropDetail.SiFlags})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDropDetail.SiAdjIf})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDropDetail.SiExtPfx})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDropDetail.SiExtPfxLen})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDropDetail.SiExtPfxProto})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDropDetail.SiAdjAddress})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDropDetail.SiAdjAddrlen})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDropDetail.SiAdjAddrProto})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDropDetail.SiAdjRwLen})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDropDetail.SiAdjRw})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDropDetail.SiDepNhinfoType})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDropDetail.SiDepNhinfo})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDropDetail.SiDepNhinfoIfh})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDropDetail.SiBkupFrr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDropDetail.SiProtectFrr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDropDetail.SiBkupNhinfo})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDropDetail.SiBkupIfh})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDropDetail.SiBkupAddr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDropDetail.SiBkupAddrlen})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDropDetail.SiBkupAddrProto})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDropDetail.SiFrrActive})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDropDetail.SiAttrIsExtMgd})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDropDetail.SiAttrIsIncomp})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDropDetail.SiAttrIsTunnel})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDropDetail.SiAttrIsTunnelSrte})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDropDetail.SiAttrIsGreTunnel})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDropDetail.SiGreTi})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDropDetail.SiGreTiFlags})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDropDetail.SiGreTiRefcnt})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDropDetail.SiGreTosPropagate})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDropDetail.SiHardware})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDropDetail.SiNhinfoPtr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDropDetail.SiFnbIdbPtr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDropDetail.SiAncIfh})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDropDetail.SiGreTiResolvingLeafp})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDropDetail.SiGreDestAddr})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDropDetail.SiNhid})
    nhInfoSpecialDropDetail.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDropDetail.SiUpdTs})

    nhInfoSpecialDropDetail.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDropDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-drop-detail"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-drop-detail"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail
// Detail special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialNullDetail.EntityData.YFilter = nhInfoSpecialNullDetail.YFilter
    nhInfoSpecialNullDetail.EntityData.YangName = "nh-info-special-null-detail"
    nhInfoSpecialNullDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialNullDetail.EntityData.ParentYangName = "nh-info-special-detail"
    nhInfoSpecialNullDetail.EntityData.SegmentPath = "nh-info-special-null-detail"
    nhInfoSpecialNullDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialNullDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialNullDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialNullDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialNullDetail.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialNullDetail.SiPwhe})
    nhInfoSpecialNullDetail.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialNullDetail.NhInfoExtension})
    nhInfoSpecialNullDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialNullDetail.SiLinkProto})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialNullDetail.SiNhinfo})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialNullDetail.SiNhtype})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialNullDetail.SiIfh})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialNullDetail.SiPfiInterfaceType})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialNullDetail.SiAdjPtr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialNullDetail.SiAdjPresent})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialNullDetail.SiSpecialType})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialNullDetail.SiRefcount})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialNullDetail.SiFlags})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialNullDetail.SiAdjIf})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialNullDetail.SiExtPfx})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialNullDetail.SiExtPfxLen})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialNullDetail.SiExtPfxProto})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialNullDetail.SiAdjAddress})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialNullDetail.SiAdjAddrlen})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialNullDetail.SiAdjAddrProto})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialNullDetail.SiAdjRwLen})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialNullDetail.SiAdjRw})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialNullDetail.SiDepNhinfoType})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialNullDetail.SiDepNhinfo})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialNullDetail.SiDepNhinfoIfh})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialNullDetail.SiBkupFrr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialNullDetail.SiProtectFrr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialNullDetail.SiBkupNhinfo})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialNullDetail.SiBkupIfh})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialNullDetail.SiBkupAddr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialNullDetail.SiBkupAddrlen})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialNullDetail.SiBkupAddrProto})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialNullDetail.SiFrrActive})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialNullDetail.SiAttrIsExtMgd})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialNullDetail.SiAttrIsIncomp})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialNullDetail.SiAttrIsTunnel})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialNullDetail.SiAttrIsTunnelSrte})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialNullDetail.SiAttrIsGreTunnel})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialNullDetail.SiGreTi})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialNullDetail.SiGreTiFlags})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialNullDetail.SiGreTiRefcnt})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialNullDetail.SiGreTosPropagate})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialNullDetail.SiHardware})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialNullDetail.SiNhinfoPtr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialNullDetail.SiFnbIdbPtr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialNullDetail.SiAncIfh})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialNullDetail.SiGreTiResolvingLeafp})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialNullDetail.SiGreDestAddr})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialNullDetail.SiNhid})
    nhInfoSpecialNullDetail.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialNullDetail.SiUpdTs})

    nhInfoSpecialNullDetail.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialNullDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-null-detail"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-null-detail"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail
// Detail special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDiscardDetail.EntityData.YFilter = nhInfoSpecialDiscardDetail.YFilter
    nhInfoSpecialDiscardDetail.EntityData.YangName = "nh-info-special-discard-detail"
    nhInfoSpecialDiscardDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDiscardDetail.EntityData.ParentYangName = "nh-info-special-detail"
    nhInfoSpecialDiscardDetail.EntityData.SegmentPath = "nh-info-special-discard-detail"
    nhInfoSpecialDiscardDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDiscardDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDiscardDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDiscardDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDiscardDetail.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDiscardDetail.SiPwhe})
    nhInfoSpecialDiscardDetail.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDiscardDetail.NhInfoExtension})
    nhInfoSpecialDiscardDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDiscardDetail.SiLinkProto})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDiscardDetail.SiNhinfo})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDiscardDetail.SiNhtype})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDiscardDetail.SiIfh})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDiscardDetail.SiPfiInterfaceType})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDiscardDetail.SiAdjPtr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDiscardDetail.SiAdjPresent})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDiscardDetail.SiSpecialType})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDiscardDetail.SiRefcount})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDiscardDetail.SiFlags})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDiscardDetail.SiAdjIf})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDiscardDetail.SiExtPfx})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDiscardDetail.SiExtPfxLen})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDiscardDetail.SiExtPfxProto})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDiscardDetail.SiAdjAddress})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDiscardDetail.SiAdjAddrlen})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDiscardDetail.SiAdjAddrProto})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDiscardDetail.SiAdjRwLen})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDiscardDetail.SiAdjRw})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDiscardDetail.SiDepNhinfoType})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDiscardDetail.SiDepNhinfo})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDiscardDetail.SiDepNhinfoIfh})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDiscardDetail.SiBkupFrr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDiscardDetail.SiProtectFrr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDiscardDetail.SiBkupNhinfo})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDiscardDetail.SiBkupIfh})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDiscardDetail.SiBkupAddr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDiscardDetail.SiBkupAddrlen})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDiscardDetail.SiBkupAddrProto})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDiscardDetail.SiFrrActive})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDiscardDetail.SiAttrIsExtMgd})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDiscardDetail.SiAttrIsIncomp})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDiscardDetail.SiAttrIsTunnel})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDiscardDetail.SiAttrIsTunnelSrte})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDiscardDetail.SiAttrIsGreTunnel})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDiscardDetail.SiGreTi})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDiscardDetail.SiGreTiFlags})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDiscardDetail.SiGreTiRefcnt})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDiscardDetail.SiGreTosPropagate})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDiscardDetail.SiHardware})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDiscardDetail.SiNhinfoPtr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDiscardDetail.SiFnbIdbPtr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDiscardDetail.SiAncIfh})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDiscardDetail.SiGreTiResolvingLeafp})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDiscardDetail.SiGreDestAddr})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDiscardDetail.SiNhid})
    nhInfoSpecialDiscardDetail.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDiscardDetail.SiUpdTs})

    nhInfoSpecialDiscardDetail.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDiscardDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-discard-detail"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-discard-detail"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails
// Detailed Remote NHInfo table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed remote NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail.
    NhInfoRemoteDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteDetails.EntityData.YFilter = nhInfoRemoteDetails.YFilter
    nhInfoRemoteDetails.EntityData.YangName = "nh-info-remote-details"
    nhInfoRemoteDetails.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteDetails.EntityData.ParentYangName = "nh-info-detail"
    nhInfoRemoteDetails.EntityData.SegmentPath = "nh-info-remote-details"
    nhInfoRemoteDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteDetails.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteDetails.EntityData.Children.Append("nh-info-remote-detail", types.YChild{"NhInfoRemoteDetail", nil})
    for i := range nhInfoRemoteDetails.NhInfoRemoteDetail {
        nhInfoRemoteDetails.EntityData.Children.Append(types.GetSegmentPath(nhInfoRemoteDetails.NhInfoRemoteDetail[i]), types.YChild{"NhInfoRemoteDetail", nhInfoRemoteDetails.NhInfoRemoteDetail[i]})
    }
    nhInfoRemoteDetails.EntityData.Leafs = types.NewOrderedMap()

    nhInfoRemoteDetails.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteDetails.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail
// Detailed remote NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteDetail.EntityData.YFilter = nhInfoRemoteDetail.YFilter
    nhInfoRemoteDetail.EntityData.YangName = "nh-info-remote-detail"
    nhInfoRemoteDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteDetail.EntityData.ParentYangName = "nh-info-remote-details"
    nhInfoRemoteDetail.EntityData.SegmentPath = "nh-info-remote-detail"
    nhInfoRemoteDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteDetail.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoRemoteDetail.SiPwhe})
    nhInfoRemoteDetail.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoRemoteDetail.NhInfoExtension})
    nhInfoRemoteDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoRemoteDetail.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoRemoteDetail.NhInterfaceName})
    nhInfoRemoteDetail.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoRemoteDetail.NhAddress})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoRemoteDetail.SiLinkProto})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoRemoteDetail.SiNhinfo})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoRemoteDetail.SiNhtype})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoRemoteDetail.SiIfh})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoRemoteDetail.SiPfiInterfaceType})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoRemoteDetail.SiAdjPtr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoRemoteDetail.SiAdjPresent})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoRemoteDetail.SiSpecialType})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoRemoteDetail.SiRefcount})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoRemoteDetail.SiFlags})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoRemoteDetail.SiAdjIf})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoRemoteDetail.SiExtPfx})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoRemoteDetail.SiExtPfxLen})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoRemoteDetail.SiExtPfxProto})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoRemoteDetail.SiAdjAddress})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoRemoteDetail.SiAdjAddrlen})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoRemoteDetail.SiAdjAddrProto})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoRemoteDetail.SiAdjRwLen})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoRemoteDetail.SiAdjRw})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoRemoteDetail.SiDepNhinfoType})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoRemoteDetail.SiDepNhinfo})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoRemoteDetail.SiDepNhinfoIfh})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoRemoteDetail.SiBkupFrr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoRemoteDetail.SiProtectFrr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoRemoteDetail.SiBkupNhinfo})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoRemoteDetail.SiBkupIfh})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoRemoteDetail.SiBkupAddr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoRemoteDetail.SiBkupAddrlen})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoRemoteDetail.SiBkupAddrProto})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoRemoteDetail.SiFrrActive})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoRemoteDetail.SiAttrIsExtMgd})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoRemoteDetail.SiAttrIsIncomp})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoRemoteDetail.SiAttrIsTunnel})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoRemoteDetail.SiAttrIsTunnelSrte})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoRemoteDetail.SiAttrIsGreTunnel})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoRemoteDetail.SiGreTi})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoRemoteDetail.SiGreTiFlags})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoRemoteDetail.SiGreTiRefcnt})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoRemoteDetail.SiGreTosPropagate})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoRemoteDetail.SiHardware})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoRemoteDetail.SiNhinfoPtr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoRemoteDetail.SiFnbIdbPtr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoRemoteDetail.SiAncIfh})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoRemoteDetail.SiGreTiResolvingLeafp})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoRemoteDetail.SiGreDestAddr})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoRemoteDetail.SiNhid})
    nhInfoRemoteDetail.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoRemoteDetail.SiUpdTs})

    nhInfoRemoteDetail.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-remote-detail"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-remote-detail"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary
// Operational data for FIB Tablee
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The router-id. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Prefix interface{}

    // Table Id. The type is interface{} with range: 0..4294967295.
    SsTblId interface{}

    // Table Id Ptr. The type is interface{} with range: 0..4294967295.
    SsTblIdPtr interface{}

    // Virtual routing forwarding instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrfId interface{}

    // Virtual router instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrId interface{}

    // LBA configuration state. The type is SsLbaState.
    LoadBalancing interface{}

    // Number of forwarding elements linked to the table. The type is interface{}
    // with range: 0..4294967295.
    ForwardingElements interface{}

    // Number of routes. The type is interface{} with range: 0..4294967295.
    Routes interface{}

    // Number of inplace modifications. The type is interface{} with range:
    // 0..4294967295.
    PrefixInPlaceModifications interface{}

    // Number of deleted stale leafs. The type is interface{} with range:
    // 0..4294967295.
    StalePrefixDeletes interface{}

    // Count of load sharing elements. The type is interface{} with range:
    // 0..4294967295.
    LoadSharingElements interface{}

    // Count of load sharing references. The type is interface{} with range:
    // 0..18446744073709551615.
    LoadSharingReferences interface{}

    // Total memory used by load sharing elements. The type is interface{} with
    // range: 0..4294967295.
    TotalLoadShareElementBytes interface{}

    // Total memory used by leaves. The type is interface{} with range:
    // 0..4294967295.
    LeavesUsedBytes interface{}

    // Number of reresolved entries. The type is interface{} with range:
    // 0..4294967295.
    ReresolveEntries interface{}

    // Number of old unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    OldUnresolveEntries interface{}

    // Number of new unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    NewUnresolveEntries interface{}

    // Number of total unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    UnresolveEntries interface{}

    // Number of routes dropped by CEF. The type is interface{} with range:
    // 0..4294967295.
    CefRouteDrops interface{}

    // the number of routes dropped due to version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    CefVersionMismatchRouteDrops interface{}

    // Number of entries in the route delete cache. The type is interface{} with
    // range: 0..4294967295.
    DeleteCacheNumEntries interface{}

    // Number of entries present on addition. The type is interface{} with range:
    // 0..4294967295.
    ExistingLeavesRevisions interface{}

    // Default prefix. The type is interface{} with range: 0..4294967295.
    FibDefaultPrefix interface{}

    // Default prefix mask length. The type is interface{} with range:
    // 0..4294967295.
    FibDefaultPrefixMaskLength interface{}

    // Number of NHINFOS. The type is interface{} with range: 0..4294967295.
    NextHops interface{}

    // Number of incomplete NHINFOS. The type is interface{} with range:
    // 0..4294967295.
    IncompleteNextHops interface{}

    // IP CEF resolution timer in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ResolutionTimer interface{}

    // IP CEF slow processing time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    SlowProcessTimer interface{}

    // IP CEF max resolution time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaxResolutionTimer interface{}

    // Number of prefixes with imposition LDI. The type is interface{} with range:
    // 0..4294967295.
    ImpositionPrefixes interface{}

    // Number of prefixes with extended path-list. The type is interface{} with
    // range: 0..4294967295.
    ExtendedPrefixes interface{}

    // Number of routes updates with recycled label handled. The type is
    // interface{} with range: 0..4294967295.
    CeflBlRecycledRoutes interface{}

    // pd backwalks on LDI modify with backup path. The type is interface{} with
    // range: 0..4294967295.
    LdiBackwalks interface{}

    // Number of routes with FRR protection. The type is interface{} with range:
    // 0..4294967295.
    SsProtRouteCount interface{}

    // Number of lisp eid prefixes associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispEidPrefixes interface{}

    // Number of lisp eid prefixes eligible for forwarding. The type is
    // interface{} with range: 0..4294967295.
    LispEidValidPrefixes interface{}

    // Number of lisp rloc objects associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispRlocObjects interface{}

    // Number of SRv6 transit routes. The type is interface{} with range:
    // 0..4294967295.
    NumberRoutesSrv6Transit interface{}

    // Number of SRv6 end routes. The type is interface{} with range:
    // 0..4294967295.
    NumberRoutesSrv6End interface{}

    // VXLAN local Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    SsVxlanLtepIfh interface{}

    // Number of dropped pathlists. The type is interface{} with range:
    // 0..4294967295.
    SsDropPlCount interface{}

    // Exclusive load sharing element.
    ExclusiveLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement

    // Shared load sharing element.
    SharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement

    // Cross-table shared load sharing element.
    CrossSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement

    // Label-shared load sharing element.
    LabelSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement

    // Distribution of prefix mask lengths.
    PrefixMasklenDistribution Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("exclusive-load-sharing-element", types.YChild{"ExclusiveLoadSharingElement", &summary.ExclusiveLoadSharingElement})
    summary.EntityData.Children.Append("shared-load-sharing-element", types.YChild{"SharedLoadSharingElement", &summary.SharedLoadSharingElement})
    summary.EntityData.Children.Append("cross-shared-load-sharing-element", types.YChild{"CrossSharedLoadSharingElement", &summary.CrossSharedLoadSharingElement})
    summary.EntityData.Children.Append("label-shared-load-sharing-element", types.YChild{"LabelSharedLoadSharingElement", &summary.LabelSharedLoadSharingElement})
    summary.EntityData.Children.Append("prefix-masklen-distribution", types.YChild{"PrefixMasklenDistribution", &summary.PrefixMasklenDistribution})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summary.Prefix})
    summary.EntityData.Leafs.Append("ss-tbl-id", types.YLeaf{"SsTblId", summary.SsTblId})
    summary.EntityData.Leafs.Append("ss-tbl-id-ptr", types.YLeaf{"SsTblIdPtr", summary.SsTblIdPtr})
    summary.EntityData.Leafs.Append("ss-vrf-id", types.YLeaf{"SsVrfId", summary.SsVrfId})
    summary.EntityData.Leafs.Append("ss-vr-id", types.YLeaf{"SsVrId", summary.SsVrId})
    summary.EntityData.Leafs.Append("load-balancing", types.YLeaf{"LoadBalancing", summary.LoadBalancing})
    summary.EntityData.Leafs.Append("forwarding-elements", types.YLeaf{"ForwardingElements", summary.ForwardingElements})
    summary.EntityData.Leafs.Append("routes", types.YLeaf{"Routes", summary.Routes})
    summary.EntityData.Leafs.Append("prefix-in-place-modifications", types.YLeaf{"PrefixInPlaceModifications", summary.PrefixInPlaceModifications})
    summary.EntityData.Leafs.Append("stale-prefix-deletes", types.YLeaf{"StalePrefixDeletes", summary.StalePrefixDeletes})
    summary.EntityData.Leafs.Append("load-sharing-elements", types.YLeaf{"LoadSharingElements", summary.LoadSharingElements})
    summary.EntityData.Leafs.Append("load-sharing-references", types.YLeaf{"LoadSharingReferences", summary.LoadSharingReferences})
    summary.EntityData.Leafs.Append("total-load-share-element-bytes", types.YLeaf{"TotalLoadShareElementBytes", summary.TotalLoadShareElementBytes})
    summary.EntityData.Leafs.Append("leaves-used-bytes", types.YLeaf{"LeavesUsedBytes", summary.LeavesUsedBytes})
    summary.EntityData.Leafs.Append("reresolve-entries", types.YLeaf{"ReresolveEntries", summary.ReresolveEntries})
    summary.EntityData.Leafs.Append("old-unresolve-entries", types.YLeaf{"OldUnresolveEntries", summary.OldUnresolveEntries})
    summary.EntityData.Leafs.Append("new-unresolve-entries", types.YLeaf{"NewUnresolveEntries", summary.NewUnresolveEntries})
    summary.EntityData.Leafs.Append("unresolve-entries", types.YLeaf{"UnresolveEntries", summary.UnresolveEntries})
    summary.EntityData.Leafs.Append("cef-route-drops", types.YLeaf{"CefRouteDrops", summary.CefRouteDrops})
    summary.EntityData.Leafs.Append("cef-version-mismatch-route-drops", types.YLeaf{"CefVersionMismatchRouteDrops", summary.CefVersionMismatchRouteDrops})
    summary.EntityData.Leafs.Append("delete-cache-num-entries", types.YLeaf{"DeleteCacheNumEntries", summary.DeleteCacheNumEntries})
    summary.EntityData.Leafs.Append("existing-leaves-revisions", types.YLeaf{"ExistingLeavesRevisions", summary.ExistingLeavesRevisions})
    summary.EntityData.Leafs.Append("fib-default-prefix", types.YLeaf{"FibDefaultPrefix", summary.FibDefaultPrefix})
    summary.EntityData.Leafs.Append("fib-default-prefix-mask-length", types.YLeaf{"FibDefaultPrefixMaskLength", summary.FibDefaultPrefixMaskLength})
    summary.EntityData.Leafs.Append("next-hops", types.YLeaf{"NextHops", summary.NextHops})
    summary.EntityData.Leafs.Append("incomplete-next-hops", types.YLeaf{"IncompleteNextHops", summary.IncompleteNextHops})
    summary.EntityData.Leafs.Append("resolution-timer", types.YLeaf{"ResolutionTimer", summary.ResolutionTimer})
    summary.EntityData.Leafs.Append("slow-process-timer", types.YLeaf{"SlowProcessTimer", summary.SlowProcessTimer})
    summary.EntityData.Leafs.Append("max-resolution-timer", types.YLeaf{"MaxResolutionTimer", summary.MaxResolutionTimer})
    summary.EntityData.Leafs.Append("imposition-prefixes", types.YLeaf{"ImpositionPrefixes", summary.ImpositionPrefixes})
    summary.EntityData.Leafs.Append("extended-prefixes", types.YLeaf{"ExtendedPrefixes", summary.ExtendedPrefixes})
    summary.EntityData.Leafs.Append("cefl-bl-recycled-routes", types.YLeaf{"CeflBlRecycledRoutes", summary.CeflBlRecycledRoutes})
    summary.EntityData.Leafs.Append("ldi-backwalks", types.YLeaf{"LdiBackwalks", summary.LdiBackwalks})
    summary.EntityData.Leafs.Append("ss-prot-route-count", types.YLeaf{"SsProtRouteCount", summary.SsProtRouteCount})
    summary.EntityData.Leafs.Append("lisp-eid-prefixes", types.YLeaf{"LispEidPrefixes", summary.LispEidPrefixes})
    summary.EntityData.Leafs.Append("lisp-eid-valid-prefixes", types.YLeaf{"LispEidValidPrefixes", summary.LispEidValidPrefixes})
    summary.EntityData.Leafs.Append("lisp-rloc-objects", types.YLeaf{"LispRlocObjects", summary.LispRlocObjects})
    summary.EntityData.Leafs.Append("number-routes-srv6-transit", types.YLeaf{"NumberRoutesSrv6Transit", summary.NumberRoutesSrv6Transit})
    summary.EntityData.Leafs.Append("number-routes-srv6-end", types.YLeaf{"NumberRoutesSrv6End", summary.NumberRoutesSrv6End})
    summary.EntityData.Leafs.Append("ss-vxlan-ltep-ifh", types.YLeaf{"SsVxlanLtepIfh", summary.SsVxlanLtepIfh})
    summary.EntityData.Leafs.Append("ss-drop-pl-count", types.YLeaf{"SsDropPlCount", summary.SsDropPlCount})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement
// Exclusive load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetEntityData() *types.CommonEntityData {
    exclusiveLoadSharingElement.EntityData.YFilter = exclusiveLoadSharingElement.YFilter
    exclusiveLoadSharingElement.EntityData.YangName = "exclusive-load-sharing-element"
    exclusiveLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    exclusiveLoadSharingElement.EntityData.ParentYangName = "summary"
    exclusiveLoadSharingElement.EntityData.SegmentPath = "exclusive-load-sharing-element"
    exclusiveLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exclusiveLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exclusiveLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exclusiveLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    exclusiveLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", exclusiveLoadSharingElement.TotalLoadSharingElementBytes})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", exclusiveLoadSharingElement.TotalLoadSharingElementReferences})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", exclusiveLoadSharingElement.TotalPathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", exclusiveLoadSharingElement.RecursivePathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", exclusiveLoadSharingElement.PlatformSharedPathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", exclusiveLoadSharingElement.RetryPathListElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", exclusiveLoadSharingElement.TotalLoadInfoElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", exclusiveLoadSharingElement.RecursiveLoadInfoElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", exclusiveLoadSharingElement.PlatformSharedLoadInfoElements})
    exclusiveLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", exclusiveLoadSharingElement.XplLoadInfoElements})

    exclusiveLoadSharingElement.EntityData.YListKeys = []string {}

    return &(exclusiveLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement
// Shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetEntityData() *types.CommonEntityData {
    sharedLoadSharingElement.EntityData.YFilter = sharedLoadSharingElement.YFilter
    sharedLoadSharingElement.EntityData.YangName = "shared-load-sharing-element"
    sharedLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    sharedLoadSharingElement.EntityData.ParentYangName = "summary"
    sharedLoadSharingElement.EntityData.SegmentPath = "shared-load-sharing-element"
    sharedLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sharedLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sharedLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sharedLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    sharedLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    sharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", sharedLoadSharingElement.TotalLoadSharingElementBytes})
    sharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", sharedLoadSharingElement.TotalLoadSharingElementReferences})
    sharedLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", sharedLoadSharingElement.TotalPathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", sharedLoadSharingElement.RecursivePathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", sharedLoadSharingElement.PlatformSharedPathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", sharedLoadSharingElement.RetryPathListElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", sharedLoadSharingElement.TotalLoadInfoElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", sharedLoadSharingElement.RecursiveLoadInfoElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", sharedLoadSharingElement.PlatformSharedLoadInfoElements})
    sharedLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", sharedLoadSharingElement.XplLoadInfoElements})

    sharedLoadSharingElement.EntityData.YListKeys = []string {}

    return &(sharedLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement
// Cross-table shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetEntityData() *types.CommonEntityData {
    crossSharedLoadSharingElement.EntityData.YFilter = crossSharedLoadSharingElement.YFilter
    crossSharedLoadSharingElement.EntityData.YangName = "cross-shared-load-sharing-element"
    crossSharedLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    crossSharedLoadSharingElement.EntityData.ParentYangName = "summary"
    crossSharedLoadSharingElement.EntityData.SegmentPath = "cross-shared-load-sharing-element"
    crossSharedLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    crossSharedLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    crossSharedLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    crossSharedLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    crossSharedLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", crossSharedLoadSharingElement.TotalLoadSharingElementBytes})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", crossSharedLoadSharingElement.TotalLoadSharingElementReferences})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", crossSharedLoadSharingElement.TotalPathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", crossSharedLoadSharingElement.RecursivePathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", crossSharedLoadSharingElement.PlatformSharedPathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", crossSharedLoadSharingElement.RetryPathListElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", crossSharedLoadSharingElement.TotalLoadInfoElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", crossSharedLoadSharingElement.RecursiveLoadInfoElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", crossSharedLoadSharingElement.PlatformSharedLoadInfoElements})
    crossSharedLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", crossSharedLoadSharingElement.XplLoadInfoElements})

    crossSharedLoadSharingElement.EntityData.YListKeys = []string {}

    return &(crossSharedLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement
// Label-shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetEntityData() *types.CommonEntityData {
    labelSharedLoadSharingElement.EntityData.YFilter = labelSharedLoadSharingElement.YFilter
    labelSharedLoadSharingElement.EntityData.YangName = "label-shared-load-sharing-element"
    labelSharedLoadSharingElement.EntityData.BundleName = "cisco_ios_xr"
    labelSharedLoadSharingElement.EntityData.ParentYangName = "summary"
    labelSharedLoadSharingElement.EntityData.SegmentPath = "label-shared-load-sharing-element"
    labelSharedLoadSharingElement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSharedLoadSharingElement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSharedLoadSharingElement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSharedLoadSharingElement.EntityData.Children = types.NewOrderedMap()
    labelSharedLoadSharingElement.EntityData.Leafs = types.NewOrderedMap()
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-bytes", types.YLeaf{"TotalLoadSharingElementBytes", labelSharedLoadSharingElement.TotalLoadSharingElementBytes})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-load-sharing-element-references", types.YLeaf{"TotalLoadSharingElementReferences", labelSharedLoadSharingElement.TotalLoadSharingElementReferences})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-path-list-elements", types.YLeaf{"TotalPathListElements", labelSharedLoadSharingElement.TotalPathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("recursive-path-list-elements", types.YLeaf{"RecursivePathListElements", labelSharedLoadSharingElement.RecursivePathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-path-list-elements", types.YLeaf{"PlatformSharedPathListElements", labelSharedLoadSharingElement.PlatformSharedPathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("retry-path-list-elements", types.YLeaf{"RetryPathListElements", labelSharedLoadSharingElement.RetryPathListElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("total-load-info-elements", types.YLeaf{"TotalLoadInfoElements", labelSharedLoadSharingElement.TotalLoadInfoElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("recursive-load-info-elements", types.YLeaf{"RecursiveLoadInfoElements", labelSharedLoadSharingElement.RecursiveLoadInfoElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("platform-shared-load-info-elements", types.YLeaf{"PlatformSharedLoadInfoElements", labelSharedLoadSharingElement.PlatformSharedLoadInfoElements})
    labelSharedLoadSharingElement.EntityData.Leafs.Append("xpl-load-info-elements", types.YLeaf{"XplLoadInfoElements", labelSharedLoadSharingElement.XplLoadInfoElements})

    labelSharedLoadSharingElement.EntityData.YListKeys = []string {}

    return &(labelSharedLoadSharingElement.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution
// Distribution of prefix mask lengths
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Masklength counts for unicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe.
    UnicastPrefixe []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe

    // Masklength counts for broadcast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe.
    BroadcastPrefixe []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe

    // Masklength counts for multicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix.
    MulticastPrefix []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetEntityData() *types.CommonEntityData {
    prefixMasklenDistribution.EntityData.YFilter = prefixMasklenDistribution.YFilter
    prefixMasklenDistribution.EntityData.YangName = "prefix-masklen-distribution"
    prefixMasklenDistribution.EntityData.BundleName = "cisco_ios_xr"
    prefixMasklenDistribution.EntityData.ParentYangName = "summary"
    prefixMasklenDistribution.EntityData.SegmentPath = "prefix-masklen-distribution"
    prefixMasklenDistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixMasklenDistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixMasklenDistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixMasklenDistribution.EntityData.Children = types.NewOrderedMap()
    prefixMasklenDistribution.EntityData.Children.Append("unicast-prefixe", types.YChild{"UnicastPrefixe", nil})
    for i := range prefixMasklenDistribution.UnicastPrefixe {
        prefixMasklenDistribution.EntityData.Children.Append(types.GetSegmentPath(prefixMasklenDistribution.UnicastPrefixe[i]), types.YChild{"UnicastPrefixe", prefixMasklenDistribution.UnicastPrefixe[i]})
    }
    prefixMasklenDistribution.EntityData.Children.Append("broadcast-prefixe", types.YChild{"BroadcastPrefixe", nil})
    for i := range prefixMasklenDistribution.BroadcastPrefixe {
        prefixMasklenDistribution.EntityData.Children.Append(types.GetSegmentPath(prefixMasklenDistribution.BroadcastPrefixe[i]), types.YChild{"BroadcastPrefixe", prefixMasklenDistribution.BroadcastPrefixe[i]})
    }
    prefixMasklenDistribution.EntityData.Children.Append("multicast-prefix", types.YChild{"MulticastPrefix", nil})
    for i := range prefixMasklenDistribution.MulticastPrefix {
        prefixMasklenDistribution.EntityData.Children.Append(types.GetSegmentPath(prefixMasklenDistribution.MulticastPrefix[i]), types.YChild{"MulticastPrefix", prefixMasklenDistribution.MulticastPrefix[i]})
    }
    prefixMasklenDistribution.EntityData.Leafs = types.NewOrderedMap()

    prefixMasklenDistribution.EntityData.YListKeys = []string {}

    return &(prefixMasklenDistribution.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe
// Masklength counts for unicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetEntityData() *types.CommonEntityData {
    unicastPrefixe.EntityData.YFilter = unicastPrefixe.YFilter
    unicastPrefixe.EntityData.YangName = "unicast-prefixe"
    unicastPrefixe.EntityData.BundleName = "cisco_ios_xr"
    unicastPrefixe.EntityData.ParentYangName = "prefix-masklen-distribution"
    unicastPrefixe.EntityData.SegmentPath = "unicast-prefixe"
    unicastPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unicastPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unicastPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unicastPrefixe.EntityData.Children = types.NewOrderedMap()
    unicastPrefixe.EntityData.Leafs = types.NewOrderedMap()
    unicastPrefixe.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", unicastPrefixe.MaskLength})
    unicastPrefixe.EntityData.Leafs.Append("number-of-prefixes", types.YLeaf{"NumberOfPrefixes", unicastPrefixe.NumberOfPrefixes})

    unicastPrefixe.EntityData.YListKeys = []string {}

    return &(unicastPrefixe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe
// Masklength counts for broadcast prefixes
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetEntityData() *types.CommonEntityData {
    broadcastPrefixe.EntityData.YFilter = broadcastPrefixe.YFilter
    broadcastPrefixe.EntityData.YangName = "broadcast-prefixe"
    broadcastPrefixe.EntityData.BundleName = "cisco_ios_xr"
    broadcastPrefixe.EntityData.ParentYangName = "prefix-masklen-distribution"
    broadcastPrefixe.EntityData.SegmentPath = "broadcast-prefixe"
    broadcastPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    broadcastPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    broadcastPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    broadcastPrefixe.EntityData.Children = types.NewOrderedMap()
    broadcastPrefixe.EntityData.Leafs = types.NewOrderedMap()
    broadcastPrefixe.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", broadcastPrefixe.MaskLength})
    broadcastPrefixe.EntityData.Leafs.Append("number-of-prefixes", types.YLeaf{"NumberOfPrefixes", broadcastPrefixe.NumberOfPrefixes})

    broadcastPrefixe.EntityData.YListKeys = []string {}

    return &(broadcastPrefixe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix
// Masklength counts for multicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetEntityData() *types.CommonEntityData {
    multicastPrefix.EntityData.YFilter = multicastPrefix.YFilter
    multicastPrefix.EntityData.YangName = "multicast-prefix"
    multicastPrefix.EntityData.BundleName = "cisco_ios_xr"
    multicastPrefix.EntityData.ParentYangName = "prefix-masklen-distribution"
    multicastPrefix.EntityData.SegmentPath = "multicast-prefix"
    multicastPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPrefix.EntityData.Children = types.NewOrderedMap()
    multicastPrefix.EntityData.Leafs = types.NewOrderedMap()
    multicastPrefix.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", multicastPrefix.MaskLength})
    multicastPrefix.EntityData.Leafs.Append("number-of-prefixes", types.YLeaf{"NumberOfPrefixes", multicastPrefix.NumberOfPrefixes})

    multicastPrefix.EntityData.YListKeys = []string {}

    return &(multicastPrefix.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos
// Table of InterfaceInfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify link type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo.
    InterfaceInfo []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetEntityData() *types.CommonEntityData {
    interfaceInfos.EntityData.YFilter = interfaceInfos.YFilter
    interfaceInfos.EntityData.YangName = "interface-infos"
    interfaceInfos.EntityData.BundleName = "cisco_ios_xr"
    interfaceInfos.EntityData.ParentYangName = "vrf"
    interfaceInfos.EntityData.SegmentPath = "interface-infos"
    interfaceInfos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceInfos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceInfos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceInfos.EntityData.Children = types.NewOrderedMap()
    interfaceInfos.EntityData.Children.Append("interface-info", types.YChild{"InterfaceInfo", nil})
    for i := range interfaceInfos.InterfaceInfo {
        interfaceInfos.EntityData.Children.Append(types.GetSegmentPath(interfaceInfos.InterfaceInfo[i]), types.YChild{"InterfaceInfo", interfaceInfos.InterfaceInfo[i]})
    }
    interfaceInfos.EntityData.Leafs = types.NewOrderedMap()

    interfaceInfos.EntityData.YListKeys = []string {}

    return &(interfaceInfos.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo
// Specify link type
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Link type. The type is FibLink.
    LinkType interface{}

    // Table of interfaces.
    Interfaces Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetEntityData() *types.CommonEntityData {
    interfaceInfo.EntityData.YFilter = interfaceInfo.YFilter
    interfaceInfo.EntityData.YangName = "interface-info"
    interfaceInfo.EntityData.BundleName = "cisco_ios_xr"
    interfaceInfo.EntityData.ParentYangName = "interface-infos"
    interfaceInfo.EntityData.SegmentPath = "interface-info" + types.AddKeyToken(interfaceInfo.LinkType, "link-type")
    interfaceInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceInfo.EntityData.Children = types.NewOrderedMap()
    interfaceInfo.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaceInfo.Interfaces})
    interfaceInfo.EntityData.Leafs = types.NewOrderedMap()
    interfaceInfo.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", interfaceInfo.LinkType})

    interfaceInfo.EntityData.YListKeys = []string {"LinkType"}

    return &(interfaceInfo.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces
// Table of interfaces
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify Interface name. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface.
    Interface []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interface-info"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface
// Specify Interface name
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    PerInterface interface{}

    // FIB Interface type. The type is interface{} with range: 0..4294967295.
    FibInterfaceType interface{}

    // Pointer to fibidb. The type is interface{} with range: 0..4294967295.
    FibIdPointer interface{}

    // Flags on fibidb. The type is interface{} with range: 0..4294967295.
    FibIdFlags interface{}

    // Pointer to fibidb extension. The type is interface{} with range:
    // 0..4294967295.
    FibIdExtensionPointer interface{}

    // Flags on fibidb extension. The type is interface{} with range:
    // 0..4294967295.
    FibIdExtensionFlags interface{}

    // Number of dependent nhinfo's. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependentNextHopInformation interface{}

    // Vrf local cef info ptr. The type is interface{} with range: 0..4294967295.
    VrfLocalCefInformationPointer interface{}

    // Reference count. The type is interface{} with range: 0..65535.
    ReferenceCount interface{}

    // Time last modified. The type is interface{} with range: 0..4294967295.
    LastModifiedTime interface{}

    // Last Oper. The type is FibidbOper.
    LastOperation interface{}

    // Is the protocol configured?. The type is bool.
    ProtocolEnabled interface{}

    // Reference count for the protocol. The type is interface{} with range:
    // 0..4294967295.
    ReferanceCountForProtocol interface{}

    // Number of input packets. The type is interface{} with range:
    // 0..18446744073709551615.
    NumberOfInputPackets interface{}

    // Number of input bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    NumberOfInputBytes interface{}

    // Number of output packets. The type is interface{} with range:
    // 0..18446744073709551615.
    NumberOfOutputPackets interface{}

    // Number of output bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    NumberOfOutputBytes interface{}

    // Interface up flag. The type is bool.
    InterfaceUpFlag interface{}

    // Per packet loadbalancing flag. The type is bool.
    PerPacketLoadBalancingFlag interface{}

    // P2P interface flag. The type is bool.
    P2pInterfaceFlag interface{}

    // Loopback interface flag. The type is bool.
    LoopbackInterfaceFlag interface{}

    // Null interface flag. The type is bool.
    NullInterfaceFlag interface{}

    // Tunnel interface flag. The type is bool.
    TunnelInterfaceFlag interface{}

    // GRE Tunnel interface flag. The type is bool.
    GreTunnelInterfaceFlag interface{}

    // Punt packets from FIB switching flag. The type is bool.
    PuntPacketsFromFibSwitchingFlag interface{}

    // Drop packets while FIB switching flag. The type is bool.
    DropPacketsWhileFibSwitchingFlag interface{}

    // Punt packets from linecard flag. The type is bool.
    PuntPacketsFromLinecardFlag interface{}

    // Pimary local v4 address for the interface. The type is string with length:
    // 0..52.
    PrimaryIpv4Address interface{}

    // Pimary local v6 address for the interface. The type is string with length:
    // 0..52.
    PrimaryIpv6Address interface{}

    // Detailed FIB interface information.
    DetailFibIntInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation

    // Internal Information.
    SiInternal Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("detail-fib-int-information", types.YChild{"DetailFibIntInformation", &self.DetailFibIntInformation})
    self.EntityData.Children.Append("si-internal", types.YChild{"SiInternal", &self.SiInternal})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("per-interface", types.YLeaf{"PerInterface", self.PerInterface})
    self.EntityData.Leafs.Append("fib-interface-type", types.YLeaf{"FibInterfaceType", self.FibInterfaceType})
    self.EntityData.Leafs.Append("fib-id-pointer", types.YLeaf{"FibIdPointer", self.FibIdPointer})
    self.EntityData.Leafs.Append("fib-id-flags", types.YLeaf{"FibIdFlags", self.FibIdFlags})
    self.EntityData.Leafs.Append("fib-id-extension-pointer", types.YLeaf{"FibIdExtensionPointer", self.FibIdExtensionPointer})
    self.EntityData.Leafs.Append("fib-id-extension-flags", types.YLeaf{"FibIdExtensionFlags", self.FibIdExtensionFlags})
    self.EntityData.Leafs.Append("number-of-dependent-next-hop-information", types.YLeaf{"NumberOfDependentNextHopInformation", self.NumberOfDependentNextHopInformation})
    self.EntityData.Leafs.Append("vrf-local-cef-information-pointer", types.YLeaf{"VrfLocalCefInformationPointer", self.VrfLocalCefInformationPointer})
    self.EntityData.Leafs.Append("reference-count", types.YLeaf{"ReferenceCount", self.ReferenceCount})
    self.EntityData.Leafs.Append("last-modified-time", types.YLeaf{"LastModifiedTime", self.LastModifiedTime})
    self.EntityData.Leafs.Append("last-operation", types.YLeaf{"LastOperation", self.LastOperation})
    self.EntityData.Leafs.Append("protocol-enabled", types.YLeaf{"ProtocolEnabled", self.ProtocolEnabled})
    self.EntityData.Leafs.Append("referance-count-for-protocol", types.YLeaf{"ReferanceCountForProtocol", self.ReferanceCountForProtocol})
    self.EntityData.Leafs.Append("number-of-input-packets", types.YLeaf{"NumberOfInputPackets", self.NumberOfInputPackets})
    self.EntityData.Leafs.Append("number-of-input-bytes", types.YLeaf{"NumberOfInputBytes", self.NumberOfInputBytes})
    self.EntityData.Leafs.Append("number-of-output-packets", types.YLeaf{"NumberOfOutputPackets", self.NumberOfOutputPackets})
    self.EntityData.Leafs.Append("number-of-output-bytes", types.YLeaf{"NumberOfOutputBytes", self.NumberOfOutputBytes})
    self.EntityData.Leafs.Append("interface-up-flag", types.YLeaf{"InterfaceUpFlag", self.InterfaceUpFlag})
    self.EntityData.Leafs.Append("per-packet-load-balancing-flag", types.YLeaf{"PerPacketLoadBalancingFlag", self.PerPacketLoadBalancingFlag})
    self.EntityData.Leafs.Append("p2p-interface-flag", types.YLeaf{"P2pInterfaceFlag", self.P2pInterfaceFlag})
    self.EntityData.Leafs.Append("loopback-interface-flag", types.YLeaf{"LoopbackInterfaceFlag", self.LoopbackInterfaceFlag})
    self.EntityData.Leafs.Append("null-interface-flag", types.YLeaf{"NullInterfaceFlag", self.NullInterfaceFlag})
    self.EntityData.Leafs.Append("tunnel-interface-flag", types.YLeaf{"TunnelInterfaceFlag", self.TunnelInterfaceFlag})
    self.EntityData.Leafs.Append("gre-tunnel-interface-flag", types.YLeaf{"GreTunnelInterfaceFlag", self.GreTunnelInterfaceFlag})
    self.EntityData.Leafs.Append("punt-packets-from-fib-switching-flag", types.YLeaf{"PuntPacketsFromFibSwitchingFlag", self.PuntPacketsFromFibSwitchingFlag})
    self.EntityData.Leafs.Append("drop-packets-while-fib-switching-flag", types.YLeaf{"DropPacketsWhileFibSwitchingFlag", self.DropPacketsWhileFibSwitchingFlag})
    self.EntityData.Leafs.Append("punt-packets-from-linecard-flag", types.YLeaf{"PuntPacketsFromLinecardFlag", self.PuntPacketsFromLinecardFlag})
    self.EntityData.Leafs.Append("primary-ipv4-address", types.YLeaf{"PrimaryIpv4Address", self.PrimaryIpv4Address})
    self.EntityData.Leafs.Append("primary-ipv6-address", types.YLeaf{"PrimaryIpv6Address", self.PrimaryIpv6Address})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation
// Detailed FIB interface information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Protocol MTU. The type is interface{} with range: 0..65535.
    InterfaceMtu interface{}

    // Forwarding enabled/disabled flag. The type is bool.
    ForwardingFlag interface{}

    // RPF configured flag. The type is bool.
    RpfConfiguredFlag interface{}

    // RPF mode. The type is FibRpfMode.
    RpfMode interface{}

    // Allow default route with RPF. The type is bool.
    DefaultRouteWithRpf interface{}

    // Allow selfping with RPF. The type is bool.
    SelfPingWithRpf interface{}

    // BGP PA configured flag. The type is bool.
    BgpPaInputConfiguredFlag interface{}

    // src BGP PA configured flag. The type is bool.
    SourceBgpPaInputConfiguredFlag interface{}

    // dst BGP PA configured flag. The type is bool.
    DestinationBgpPaInputConfiguredFlag interface{}

    // BGP PA configured flag. The type is bool.
    BgpPaOutputConfiguredFlag interface{}

    // src BGP PA configured flag. The type is bool.
    SourceBgpPaOutputConfiguredFlag interface{}

    // dst BGP PA configured flag. The type is bool.
    DestinationBgpPaOutputConfiguredFlag interface{}

    // ICMP  configured flag. The type is interface{} with range: 0..4294967295.
    IcmpFlag interface{}

    // Drop packets with multiple-label-stack if set. The type is bool.
    MultiLabelDropFlag interface{}
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetEntityData() *types.CommonEntityData {
    detailFibIntInformation.EntityData.YFilter = detailFibIntInformation.YFilter
    detailFibIntInformation.EntityData.YangName = "detail-fib-int-information"
    detailFibIntInformation.EntityData.BundleName = "cisco_ios_xr"
    detailFibIntInformation.EntityData.ParentYangName = "interface"
    detailFibIntInformation.EntityData.SegmentPath = "detail-fib-int-information"
    detailFibIntInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailFibIntInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailFibIntInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailFibIntInformation.EntityData.Children = types.NewOrderedMap()
    detailFibIntInformation.EntityData.Leafs = types.NewOrderedMap()
    detailFibIntInformation.EntityData.Leafs.Append("interface-mtu", types.YLeaf{"InterfaceMtu", detailFibIntInformation.InterfaceMtu})
    detailFibIntInformation.EntityData.Leafs.Append("forwarding-flag", types.YLeaf{"ForwardingFlag", detailFibIntInformation.ForwardingFlag})
    detailFibIntInformation.EntityData.Leafs.Append("rpf-configured-flag", types.YLeaf{"RpfConfiguredFlag", detailFibIntInformation.RpfConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("rpf-mode", types.YLeaf{"RpfMode", detailFibIntInformation.RpfMode})
    detailFibIntInformation.EntityData.Leafs.Append("default-route-with-rpf", types.YLeaf{"DefaultRouteWithRpf", detailFibIntInformation.DefaultRouteWithRpf})
    detailFibIntInformation.EntityData.Leafs.Append("self-ping-with-rpf", types.YLeaf{"SelfPingWithRpf", detailFibIntInformation.SelfPingWithRpf})
    detailFibIntInformation.EntityData.Leafs.Append("bgp-pa-input-configured-flag", types.YLeaf{"BgpPaInputConfiguredFlag", detailFibIntInformation.BgpPaInputConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("source-bgp-pa-input-configured-flag", types.YLeaf{"SourceBgpPaInputConfiguredFlag", detailFibIntInformation.SourceBgpPaInputConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("destination-bgp-pa-input-configured-flag", types.YLeaf{"DestinationBgpPaInputConfiguredFlag", detailFibIntInformation.DestinationBgpPaInputConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("bgp-pa-output-configured-flag", types.YLeaf{"BgpPaOutputConfiguredFlag", detailFibIntInformation.BgpPaOutputConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("source-bgp-pa-output-configured-flag", types.YLeaf{"SourceBgpPaOutputConfiguredFlag", detailFibIntInformation.SourceBgpPaOutputConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("destination-bgp-pa-output-configured-flag", types.YLeaf{"DestinationBgpPaOutputConfiguredFlag", detailFibIntInformation.DestinationBgpPaOutputConfiguredFlag})
    detailFibIntInformation.EntityData.Leafs.Append("icmp-flag", types.YLeaf{"IcmpFlag", detailFibIntInformation.IcmpFlag})
    detailFibIntInformation.EntityData.Leafs.Append("multi-label-drop-flag", types.YLeaf{"MultiLabelDropFlag", detailFibIntInformation.MultiLabelDropFlag})

    detailFibIntInformation.EntityData.YListKeys = []string {}

    return &(detailFibIntInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal
// Internal Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event History for IDB.
    FibIdbHist Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist

    // Event History for Srtehead.
    FibSrteHeadHist Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetEntityData() *types.CommonEntityData {
    siInternal.EntityData.YFilter = siInternal.YFilter
    siInternal.EntityData.YangName = "si-internal"
    siInternal.EntityData.BundleName = "cisco_ios_xr"
    siInternal.EntityData.ParentYangName = "interface"
    siInternal.EntityData.SegmentPath = "si-internal"
    siInternal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siInternal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siInternal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siInternal.EntityData.Children = types.NewOrderedMap()
    siInternal.EntityData.Children.Append("fib-idb-hist", types.YChild{"FibIdbHist", &siInternal.FibIdbHist})
    siInternal.EntityData.Children.Append("fib-srte-head-hist", types.YChild{"FibSrteHeadHist", &siInternal.FibSrteHeadHist})
    siInternal.EntityData.Leafs = types.NewOrderedMap()

    siInternal.EntityData.YListKeys = []string {}

    return &(siInternal.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist
// Event History for IDB
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Class name string. The type is string.
    EvtClassName interface{}

    // Array of event entries. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry.
    EvtEntry []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetEntityData() *types.CommonEntityData {
    fibIdbHist.EntityData.YFilter = fibIdbHist.YFilter
    fibIdbHist.EntityData.YangName = "fib-idb-hist"
    fibIdbHist.EntityData.BundleName = "cisco_ios_xr"
    fibIdbHist.EntityData.ParentYangName = "si-internal"
    fibIdbHist.EntityData.SegmentPath = "fib-idb-hist"
    fibIdbHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibIdbHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibIdbHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibIdbHist.EntityData.Children = types.NewOrderedMap()
    fibIdbHist.EntityData.Children.Append("evt-entry", types.YChild{"EvtEntry", nil})
    for i := range fibIdbHist.EvtEntry {
        fibIdbHist.EntityData.Children.Append(types.GetSegmentPath(fibIdbHist.EvtEntry[i]), types.YChild{"EvtEntry", fibIdbHist.EvtEntry[i]})
    }
    fibIdbHist.EntityData.Leafs = types.NewOrderedMap()
    fibIdbHist.EntityData.Leafs.Append("evt-class-name", types.YLeaf{"EvtClassName", fibIdbHist.EvtClassName})

    fibIdbHist.EntityData.YListKeys = []string {}

    return &(fibIdbHist.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry
// Array of event entries
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The timestamp of the event. The type is string.
    EvtTimestamp interface{}

    // Event name. The type is string.
    EvtName interface{}

    // Event type. The type is interface{} with range: 0..255.
    EvtType interface{}

    // Multiple instance flag. The type is bool.
    EvtMany interface{}

    // Sticky flag. The type is bool.
    EvtSticky interface{}

    // Optional data. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData.
    EvtData []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetEntityData() *types.CommonEntityData {
    evtEntry.EntityData.YFilter = evtEntry.YFilter
    evtEntry.EntityData.YangName = "evt-entry"
    evtEntry.EntityData.BundleName = "cisco_ios_xr"
    evtEntry.EntityData.ParentYangName = "fib-idb-hist"
    evtEntry.EntityData.SegmentPath = "evt-entry"
    evtEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evtEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evtEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evtEntry.EntityData.Children = types.NewOrderedMap()
    evtEntry.EntityData.Children.Append("evt-data", types.YChild{"EvtData", nil})
    for i := range evtEntry.EvtData {
        evtEntry.EntityData.Children.Append(types.GetSegmentPath(evtEntry.EvtData[i]), types.YChild{"EvtData", evtEntry.EvtData[i]})
    }
    evtEntry.EntityData.Leafs = types.NewOrderedMap()
    evtEntry.EntityData.Leafs.Append("evt-timestamp", types.YLeaf{"EvtTimestamp", evtEntry.EvtTimestamp})
    evtEntry.EntityData.Leafs.Append("evt-name", types.YLeaf{"EvtName", evtEntry.EvtName})
    evtEntry.EntityData.Leafs.Append("evt-type", types.YLeaf{"EvtType", evtEntry.EvtType})
    evtEntry.EntityData.Leafs.Append("evt-many", types.YLeaf{"EvtMany", evtEntry.EvtMany})
    evtEntry.EntityData.Leafs.Append("evt-sticky", types.YLeaf{"EvtSticky", evtEntry.EvtSticky})

    evtEntry.EntityData.YListKeys = []string {}

    return &(evtEntry.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData
// Optional data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetEntityData() *types.CommonEntityData {
    evtData.EntityData.YFilter = evtData.YFilter
    evtData.EntityData.YangName = "evt-data"
    evtData.EntityData.BundleName = "cisco_ios_xr"
    evtData.EntityData.ParentYangName = "evt-entry"
    evtData.EntityData.SegmentPath = "evt-data"
    evtData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evtData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evtData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evtData.EntityData.Children = types.NewOrderedMap()
    evtData.EntityData.Leafs = types.NewOrderedMap()
    evtData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", evtData.Entry})

    evtData.EntityData.YListKeys = []string {}

    return &(evtData.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist
// Event History for Srtehead
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Class name string. The type is string.
    EvtClassName interface{}

    // Array of event entries. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry.
    EvtEntry []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetEntityData() *types.CommonEntityData {
    fibSrteHeadHist.EntityData.YFilter = fibSrteHeadHist.YFilter
    fibSrteHeadHist.EntityData.YangName = "fib-srte-head-hist"
    fibSrteHeadHist.EntityData.BundleName = "cisco_ios_xr"
    fibSrteHeadHist.EntityData.ParentYangName = "si-internal"
    fibSrteHeadHist.EntityData.SegmentPath = "fib-srte-head-hist"
    fibSrteHeadHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibSrteHeadHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibSrteHeadHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibSrteHeadHist.EntityData.Children = types.NewOrderedMap()
    fibSrteHeadHist.EntityData.Children.Append("evt-entry", types.YChild{"EvtEntry", nil})
    for i := range fibSrteHeadHist.EvtEntry {
        fibSrteHeadHist.EntityData.Children.Append(types.GetSegmentPath(fibSrteHeadHist.EvtEntry[i]), types.YChild{"EvtEntry", fibSrteHeadHist.EvtEntry[i]})
    }
    fibSrteHeadHist.EntityData.Leafs = types.NewOrderedMap()
    fibSrteHeadHist.EntityData.Leafs.Append("evt-class-name", types.YLeaf{"EvtClassName", fibSrteHeadHist.EvtClassName})

    fibSrteHeadHist.EntityData.YListKeys = []string {}

    return &(fibSrteHeadHist.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry
// Array of event entries
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The timestamp of the event. The type is string.
    EvtTimestamp interface{}

    // Event name. The type is string.
    EvtName interface{}

    // Event type. The type is interface{} with range: 0..255.
    EvtType interface{}

    // Multiple instance flag. The type is bool.
    EvtMany interface{}

    // Sticky flag. The type is bool.
    EvtSticky interface{}

    // Optional data. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData.
    EvtData []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetEntityData() *types.CommonEntityData {
    evtEntry.EntityData.YFilter = evtEntry.YFilter
    evtEntry.EntityData.YangName = "evt-entry"
    evtEntry.EntityData.BundleName = "cisco_ios_xr"
    evtEntry.EntityData.ParentYangName = "fib-srte-head-hist"
    evtEntry.EntityData.SegmentPath = "evt-entry"
    evtEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evtEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evtEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evtEntry.EntityData.Children = types.NewOrderedMap()
    evtEntry.EntityData.Children.Append("evt-data", types.YChild{"EvtData", nil})
    for i := range evtEntry.EvtData {
        evtEntry.EntityData.Children.Append(types.GetSegmentPath(evtEntry.EvtData[i]), types.YChild{"EvtData", evtEntry.EvtData[i]})
    }
    evtEntry.EntityData.Leafs = types.NewOrderedMap()
    evtEntry.EntityData.Leafs.Append("evt-timestamp", types.YLeaf{"EvtTimestamp", evtEntry.EvtTimestamp})
    evtEntry.EntityData.Leafs.Append("evt-name", types.YLeaf{"EvtName", evtEntry.EvtName})
    evtEntry.EntityData.Leafs.Append("evt-type", types.YLeaf{"EvtType", evtEntry.EvtType})
    evtEntry.EntityData.Leafs.Append("evt-many", types.YLeaf{"EvtMany", evtEntry.EvtMany})
    evtEntry.EntityData.Leafs.Append("evt-sticky", types.YLeaf{"EvtSticky", evtEntry.EvtSticky})

    evtEntry.EntityData.YListKeys = []string {}

    return &(evtEntry.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData
// Optional data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetEntityData() *types.CommonEntityData {
    evtData.EntityData.YFilter = evtData.YFilter
    evtData.EntityData.YangName = "evt-data"
    evtData.EntityData.BundleName = "cisco_ios_xr"
    evtData.EntityData.ParentYangName = "evt-entry"
    evtData.EntityData.SegmentPath = "evt-data"
    evtData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evtData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evtData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evtData.EntityData.Children = types.NewOrderedMap()
    evtData.EntityData.Leafs = types.NewOrderedMap()
    evtData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", evtData.Entry})

    evtData.EntityData.YListKeys = []string {}

    return &(evtData.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs
// IP FIB prefix brief table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP FIB prefix brief table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief.
    IpPrefixBrief []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetEntityData() *types.CommonEntityData {
    ipPrefixBriefs.EntityData.YFilter = ipPrefixBriefs.YFilter
    ipPrefixBriefs.EntityData.YangName = "ip-prefix-briefs"
    ipPrefixBriefs.EntityData.BundleName = "cisco_ios_xr"
    ipPrefixBriefs.EntityData.ParentYangName = "vrf"
    ipPrefixBriefs.EntityData.SegmentPath = "ip-prefix-briefs"
    ipPrefixBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipPrefixBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipPrefixBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipPrefixBriefs.EntityData.Children = types.NewOrderedMap()
    ipPrefixBriefs.EntityData.Children.Append("ip-prefix-brief", types.YChild{"IpPrefixBrief", nil})
    for i := range ipPrefixBriefs.IpPrefixBrief {
        ipPrefixBriefs.EntityData.Children.Append(types.GetSegmentPath(ipPrefixBriefs.IpPrefixBrief[i]), types.YChild{"IpPrefixBrief", ipPrefixBriefs.IpPrefixBrief[i]})
    }
    ipPrefixBriefs.EntityData.Leafs = types.NewOrderedMap()

    ipPrefixBriefs.EntityData.YListKeys = []string {}

    return &(ipPrefixBriefs.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief
// IP FIB prefix brief table entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination IP address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IP prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Proto type for this entry. The type is interface{} with range:
    // 0..4294967295.
    ProtocolTypeFibEntry interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardware interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToPathList interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // The pathlist source. The type is interface{} with range: 0..4294967295.
    PathListSource interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToLdi interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The flags of ext assocaited with LDI . The type is interface{} with range:
    // 0..4294967295.
    FlagsExternalLdi interface{}

    // The pointer to the ext assocaited with LDI. The type is interface{} with
    // range: 0..4294967295.
    PointerExternalLdi interface{}

    // exact-path interface handle. The type is interface{} with range:
    // 0..4294967295.
    ExactPathInterfaceHandle interface{}

    // exact-path GRE physical interface handle. The type is interface{} with
    // range: 0..4294967295.
    ExactPathGreInterfaceHandle interface{}

    // exact-route GRE phy ifh available. The type is bool.
    ExactRouteGrePhysIfhAvail interface{}

    // exact-route result. The type is bool.
    ExactRouteResult interface{}

    // Prefix is static or connected. The type is bool.
    PrefixIsStaticOrConnected interface{}

    // Packet should always be received. The type is bool.
    PacketShouldRecieve interface{}

    // Prefix is connected. The type is bool.
    PrefixConnected interface{}

    // Prefix is for an adjacency. The type is bool.
    PrefixForAdjancency interface{}

    // Prefix is for a PIC nexthop. The type is bool.
    PrefixForPicNextHop interface{}

    // Purgable after the purge interval. The type is bool.
    PurgableAfterPurgeInterval interface{}

    // Broadcast receive flag. The type is bool.
    BroadcastReciveFlag interface{}

    // Broadcast forward flag. The type is bool.
    BroadcastForwardFlag interface{}

    // 0/0 route added as default route. The type is bool.
    ZeroByZeroRouteAsDefault interface{}

    // External switch function triggered. The type is bool.
    ExternalSwitchTriggered interface{}

    // Route attributes summary flag. The type is bool.
    RouteAttributeFlag interface{}

    // Dummy real zero route. The type is bool.
    DummyRealZeroRoute interface{}

    // The LDI LW flags. The type is interface{} with range: 0..4294967295.
    LdiLwFlag interface{}

    // The refcounter of LDI LW LDI. The type is interface{} with range:
    // 0..4294967295.
    RefCounterOfLdiLwLdi interface{}

    // The type of LDI LW LDI. The type is interface{} with range: 0..4294967295.
    TypeOfLdiLwLdi interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    VersionOfRoute interface{}

    // Priority at which the route was downloaded. The type is interface{} with
    // range: 0..4294967295.
    FibRouteDownloadPriority interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}

    // Is L2 Subscriber route. The type is bool.
    L2SubscriberRoute interface{}

    // XConnect-id associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberXconnectId interface{}

    // Flags associated with L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2SubscriberFlags interface{}

    // IP protocol associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberIpProtocol interface{}

    // L2TPv3 cookie length for L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2tpv3CookieLengthBits interface{}

    // Route destined for Line Card that support External Reach only. The type is
    // bool.
    RouteForExternalReachLinecardFlag interface{}

    // Route is a MPLS Segment-Routing prefix. The type is bool.
    RouteIsSrFlag interface{}

    // This route is SRv6 Transit function. The type is bool.
    RouteIsSrv6Transit interface{}

    // This route is SRv6 End function. The type is bool.
    RouteIsSrv6End interface{}

    // SRv6 Operation Type. The type is string.
    Srv6OperationType interface{}

    // Detailed FIB entry information.
    DetailFibEntryInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation

    // FIB entry path details.
    FibEntryPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath

    // Leaf Extension Object List. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject.
    ExtensionObject []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetEntityData() *types.CommonEntityData {
    ipPrefixBrief.EntityData.YFilter = ipPrefixBrief.YFilter
    ipPrefixBrief.EntityData.YangName = "ip-prefix-brief"
    ipPrefixBrief.EntityData.BundleName = "cisco_ios_xr"
    ipPrefixBrief.EntityData.ParentYangName = "ip-prefix-briefs"
    ipPrefixBrief.EntityData.SegmentPath = "ip-prefix-brief"
    ipPrefixBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipPrefixBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipPrefixBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipPrefixBrief.EntityData.Children = types.NewOrderedMap()
    ipPrefixBrief.EntityData.Children.Append("detail-fib-entry-information", types.YChild{"DetailFibEntryInformation", &ipPrefixBrief.DetailFibEntryInformation})
    ipPrefixBrief.EntityData.Children.Append("fib-entry-path", types.YChild{"FibEntryPath", &ipPrefixBrief.FibEntryPath})
    ipPrefixBrief.EntityData.Children.Append("extension-object", types.YChild{"ExtensionObject", nil})
    for i := range ipPrefixBrief.ExtensionObject {
        ipPrefixBrief.EntityData.Children.Append(types.GetSegmentPath(ipPrefixBrief.ExtensionObject[i]), types.YChild{"ExtensionObject", ipPrefixBrief.ExtensionObject[i]})
    }
    ipPrefixBrief.EntityData.Leafs = types.NewOrderedMap()
    ipPrefixBrief.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipPrefixBrief.Prefix})
    ipPrefixBrief.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipPrefixBrief.PrefixLength})
    ipPrefixBrief.EntityData.Leafs.Append("protocol-type-fib-entry", types.YLeaf{"ProtocolTypeFibEntry", ipPrefixBrief.ProtocolTypeFibEntry})
    ipPrefixBrief.EntityData.Leafs.Append("platform-hardware", types.YLeaf{"PlatformHardware", ipPrefixBrief.PlatformHardware})
    ipPrefixBrief.EntityData.Leafs.Append("number-of-referances-to-path-list", types.YLeaf{"NumberOfReferancesToPathList", ipPrefixBrief.NumberOfReferancesToPathList})
    ipPrefixBrief.EntityData.Leafs.Append("path-list-flags", types.YLeaf{"PathListFlags", ipPrefixBrief.PathListFlags})
    ipPrefixBrief.EntityData.Leafs.Append("path-list-source", types.YLeaf{"PathListSource", ipPrefixBrief.PathListSource})
    ipPrefixBrief.EntityData.Leafs.Append("number-of-referances-to-ldi", types.YLeaf{"NumberOfReferancesToLdi", ipPrefixBrief.NumberOfReferancesToLdi})
    ipPrefixBrief.EntityData.Leafs.Append("ldi-flags", types.YLeaf{"LdiFlags", ipPrefixBrief.LdiFlags})
    ipPrefixBrief.EntityData.Leafs.Append("flags-external-ldi", types.YLeaf{"FlagsExternalLdi", ipPrefixBrief.FlagsExternalLdi})
    ipPrefixBrief.EntityData.Leafs.Append("pointer-external-ldi", types.YLeaf{"PointerExternalLdi", ipPrefixBrief.PointerExternalLdi})
    ipPrefixBrief.EntityData.Leafs.Append("exact-path-interface-handle", types.YLeaf{"ExactPathInterfaceHandle", ipPrefixBrief.ExactPathInterfaceHandle})
    ipPrefixBrief.EntityData.Leafs.Append("exact-path-gre-interface-handle", types.YLeaf{"ExactPathGreInterfaceHandle", ipPrefixBrief.ExactPathGreInterfaceHandle})
    ipPrefixBrief.EntityData.Leafs.Append("exact-route-gre-phys-ifh-avail", types.YLeaf{"ExactRouteGrePhysIfhAvail", ipPrefixBrief.ExactRouteGrePhysIfhAvail})
    ipPrefixBrief.EntityData.Leafs.Append("exact-route-result", types.YLeaf{"ExactRouteResult", ipPrefixBrief.ExactRouteResult})
    ipPrefixBrief.EntityData.Leafs.Append("prefix-is-static-or-connected", types.YLeaf{"PrefixIsStaticOrConnected", ipPrefixBrief.PrefixIsStaticOrConnected})
    ipPrefixBrief.EntityData.Leafs.Append("packet-should-recieve", types.YLeaf{"PacketShouldRecieve", ipPrefixBrief.PacketShouldRecieve})
    ipPrefixBrief.EntityData.Leafs.Append("prefix-connected", types.YLeaf{"PrefixConnected", ipPrefixBrief.PrefixConnected})
    ipPrefixBrief.EntityData.Leafs.Append("prefix-for-adjancency", types.YLeaf{"PrefixForAdjancency", ipPrefixBrief.PrefixForAdjancency})
    ipPrefixBrief.EntityData.Leafs.Append("prefix-for-pic-next-hop", types.YLeaf{"PrefixForPicNextHop", ipPrefixBrief.PrefixForPicNextHop})
    ipPrefixBrief.EntityData.Leafs.Append("purgable-after-purge-interval", types.YLeaf{"PurgableAfterPurgeInterval", ipPrefixBrief.PurgableAfterPurgeInterval})
    ipPrefixBrief.EntityData.Leafs.Append("broadcast-recive-flag", types.YLeaf{"BroadcastReciveFlag", ipPrefixBrief.BroadcastReciveFlag})
    ipPrefixBrief.EntityData.Leafs.Append("broadcast-forward-flag", types.YLeaf{"BroadcastForwardFlag", ipPrefixBrief.BroadcastForwardFlag})
    ipPrefixBrief.EntityData.Leafs.Append("zero-by-zero-route-as-default", types.YLeaf{"ZeroByZeroRouteAsDefault", ipPrefixBrief.ZeroByZeroRouteAsDefault})
    ipPrefixBrief.EntityData.Leafs.Append("external-switch-triggered", types.YLeaf{"ExternalSwitchTriggered", ipPrefixBrief.ExternalSwitchTriggered})
    ipPrefixBrief.EntityData.Leafs.Append("route-attribute-flag", types.YLeaf{"RouteAttributeFlag", ipPrefixBrief.RouteAttributeFlag})
    ipPrefixBrief.EntityData.Leafs.Append("dummy-real-zero-route", types.YLeaf{"DummyRealZeroRoute", ipPrefixBrief.DummyRealZeroRoute})
    ipPrefixBrief.EntityData.Leafs.Append("ldi-lw-flag", types.YLeaf{"LdiLwFlag", ipPrefixBrief.LdiLwFlag})
    ipPrefixBrief.EntityData.Leafs.Append("ref-counter-of-ldi-lw-ldi", types.YLeaf{"RefCounterOfLdiLwLdi", ipPrefixBrief.RefCounterOfLdiLwLdi})
    ipPrefixBrief.EntityData.Leafs.Append("type-of-ldi-lw-ldi", types.YLeaf{"TypeOfLdiLwLdi", ipPrefixBrief.TypeOfLdiLwLdi})
    ipPrefixBrief.EntityData.Leafs.Append("lspa-flags", types.YLeaf{"LspaFlags", ipPrefixBrief.LspaFlags})
    ipPrefixBrief.EntityData.Leafs.Append("version-of-route", types.YLeaf{"VersionOfRoute", ipPrefixBrief.VersionOfRoute})
    ipPrefixBrief.EntityData.Leafs.Append("fib-route-download-priority", types.YLeaf{"FibRouteDownloadPriority", ipPrefixBrief.FibRouteDownloadPriority})
    ipPrefixBrief.EntityData.Leafs.Append("time-of-last-update-in-msec", types.YLeaf{"TimeOfLastUpdateInMsec", ipPrefixBrief.TimeOfLastUpdateInMsec})
    ipPrefixBrief.EntityData.Leafs.Append("l2-subscriber-route", types.YLeaf{"L2SubscriberRoute", ipPrefixBrief.L2SubscriberRoute})
    ipPrefixBrief.EntityData.Leafs.Append("l2-subscriber-xconnect-id", types.YLeaf{"L2SubscriberXconnectId", ipPrefixBrief.L2SubscriberXconnectId})
    ipPrefixBrief.EntityData.Leafs.Append("l2-subscriber-flags", types.YLeaf{"L2SubscriberFlags", ipPrefixBrief.L2SubscriberFlags})
    ipPrefixBrief.EntityData.Leafs.Append("l2-subscriber-ip-protocol", types.YLeaf{"L2SubscriberIpProtocol", ipPrefixBrief.L2SubscriberIpProtocol})
    ipPrefixBrief.EntityData.Leafs.Append("l2tpv3-cookie-length-bits", types.YLeaf{"L2tpv3CookieLengthBits", ipPrefixBrief.L2tpv3CookieLengthBits})
    ipPrefixBrief.EntityData.Leafs.Append("route-for-external-reach-linecard-flag", types.YLeaf{"RouteForExternalReachLinecardFlag", ipPrefixBrief.RouteForExternalReachLinecardFlag})
    ipPrefixBrief.EntityData.Leafs.Append("route-is-sr-flag", types.YLeaf{"RouteIsSrFlag", ipPrefixBrief.RouteIsSrFlag})
    ipPrefixBrief.EntityData.Leafs.Append("route-is-srv6-transit", types.YLeaf{"RouteIsSrv6Transit", ipPrefixBrief.RouteIsSrv6Transit})
    ipPrefixBrief.EntityData.Leafs.Append("route-is-srv6-end", types.YLeaf{"RouteIsSrv6End", ipPrefixBrief.RouteIsSrv6End})
    ipPrefixBrief.EntityData.Leafs.Append("srv6-operation-type", types.YLeaf{"Srv6OperationType", ipPrefixBrief.Srv6OperationType})

    ipPrefixBrief.EntityData.YListKeys = []string {}

    return &(ipPrefixBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation
// Detailed FIB entry information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB entry version number. The type is interface{} with range:
    // 0..4294967295.
    FibEntryVersion interface{}

    // Per Prefix Accounting. The type is interface{} with range: 0..255.
    PerPrefixAccounting interface{}

    // Load sharing type. The type is FibLoadshareShow.
    LoadSharingType interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    FibEntryAdjacencyType interface{}

    // FIB Protocol type. The type is interface{} with range: 0..4294967295.
    FibProtocolType interface{}

    // AFI FIB protocol type. The type is interface{} with range: 0..4294967295.
    AfiFibProtocolType interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    AibL3Address interface{}

    // ADJ ADDR LEN. The type is interface{} with range: 0..4294967295.
    AdjacencyAddressLength interface{}

    // ADJ IFH. The type is interface{} with range: 0..4294967295.
    AdjacencyInterface interface{}

    // FIB Special NHINFO Type. The type is interface{} with range: 0..4294967295.
    FibSpecialNhInformationType interface{}

    // FIB entry adj address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    FibEntryAdjacencyAddress interface{}

    // FIB entry adjacency interface. The type is interface{} with range:
    // 0..4294967295.
    FibEntryAdjacencyInterface interface{}

    // Packets through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughFibEntry interface{}

    // Bytes through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughFibEntry interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    DetailedPrefixLength interface{}

    // Prefix protocol. The type is interface{} with range: 0..4294967295.
    PrefixProtocol interface{}

    // Precedence for packets to this entry. The type is interface{} with range:
    // 0..255.
    PrecedenceForpackets interface{}

    // Traffic index for packets to this entry. The type is interface{} with
    // range: 0..255.
    TrafficIndexForPackets interface{}

    // Switch function compontent ID. The type is interface{} with range:
    // 0..4294967295.
    SwitchCompontentId interface{}

    // Fast adjacency flag. The type is bool.
    FastAdjacencyFlag interface{}

    // Illegal fast adjacency flag. The type is bool.
    IllegalFastAdjacencyFlag interface{}

    // Remote adjacency flag. The type is bool.
    RemoteAdjacencyFlag interface{}

    // BGP attribute id. The type is interface{} with range: 0..4294967295.
    BgpAttributeId interface{}

    // BGP local attribute id. The type is interface{} with range: 0..4294967295.
    BgpLocalAttributeId interface{}

    // BGP attribute origin as. The type is interface{} with range: 0..4294967295.
    BgpAttributeOriginAs interface{}

    // BGP attribute next hop as. The type is interface{} with range:
    // 0..4294967295.
    BgpAttributeNextHopAs interface{}

    // As path string. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathString interface{}

    // extcom st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtcomString interface{}

    // com st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ComString interface{}

    // extended community. The type is interface{} with range: 0..4294967295.
    ExtendedCommunity interface{}

    // qos group. The type is interface{} with range: 0..4294967295.
    QosGroup interface{}

    // mpls fec. The type is interface{} with range: 0..4294967295.
    MplsFec interface{}

    // qppb QOS group and IP precedence. The type is interface{} with range:
    // 0..4294967295.
    QppbQosGroupAndIpPrecedence interface{}

    // PBR flow-tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // SPP forwarding class ID. The type is interface{} with range: 0..255.
    ForwardClass interface{}

    // The time of last update for PL in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    PlTimeOfLastUpdateInMsec interface{}

    // The time of last update for LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LdiTimeOfLastUpdateInMsec interface{}

    // The time of last update for LW-LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LwldiTimeOfLastUpdateInMsec interface{}

    // The type of time-stamp on PL. The type is interface{} with range:
    // 0..4294967295.
    PlTimeStampType interface{}

    // Detailed Loadshare info.
    LoadshareInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetEntityData() *types.CommonEntityData {
    detailFibEntryInformation.EntityData.YFilter = detailFibEntryInformation.YFilter
    detailFibEntryInformation.EntityData.YangName = "detail-fib-entry-information"
    detailFibEntryInformation.EntityData.BundleName = "cisco_ios_xr"
    detailFibEntryInformation.EntityData.ParentYangName = "ip-prefix-brief"
    detailFibEntryInformation.EntityData.SegmentPath = "detail-fib-entry-information"
    detailFibEntryInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailFibEntryInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailFibEntryInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailFibEntryInformation.EntityData.Children = types.NewOrderedMap()
    detailFibEntryInformation.EntityData.Children.Append("loadshare-information", types.YChild{"LoadshareInformation", &detailFibEntryInformation.LoadshareInformation})
    detailFibEntryInformation.EntityData.Leafs = types.NewOrderedMap()
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-version", types.YLeaf{"FibEntryVersion", detailFibEntryInformation.FibEntryVersion})
    detailFibEntryInformation.EntityData.Leafs.Append("per-prefix-accounting", types.YLeaf{"PerPrefixAccounting", detailFibEntryInformation.PerPrefixAccounting})
    detailFibEntryInformation.EntityData.Leafs.Append("load-sharing-type", types.YLeaf{"LoadSharingType", detailFibEntryInformation.LoadSharingType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-type", types.YLeaf{"FibEntryAdjacencyType", detailFibEntryInformation.FibEntryAdjacencyType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-protocol-type", types.YLeaf{"FibProtocolType", detailFibEntryInformation.FibProtocolType})
    detailFibEntryInformation.EntityData.Leafs.Append("afi-fib-protocol-type", types.YLeaf{"AfiFibProtocolType", detailFibEntryInformation.AfiFibProtocolType})
    detailFibEntryInformation.EntityData.Leafs.Append("aib-l3-address", types.YLeaf{"AibL3Address", detailFibEntryInformation.AibL3Address})
    detailFibEntryInformation.EntityData.Leafs.Append("adjacency-address-length", types.YLeaf{"AdjacencyAddressLength", detailFibEntryInformation.AdjacencyAddressLength})
    detailFibEntryInformation.EntityData.Leafs.Append("adjacency-interface", types.YLeaf{"AdjacencyInterface", detailFibEntryInformation.AdjacencyInterface})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-special-nh-information-type", types.YLeaf{"FibSpecialNhInformationType", detailFibEntryInformation.FibSpecialNhInformationType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-address", types.YLeaf{"FibEntryAdjacencyAddress", detailFibEntryInformation.FibEntryAdjacencyAddress})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-interface", types.YLeaf{"FibEntryAdjacencyInterface", detailFibEntryInformation.FibEntryAdjacencyInterface})
    detailFibEntryInformation.EntityData.Leafs.Append("packets-through-fib-entry", types.YLeaf{"PacketsThroughFibEntry", detailFibEntryInformation.PacketsThroughFibEntry})
    detailFibEntryInformation.EntityData.Leafs.Append("bytes-through-fib-entry", types.YLeaf{"BytesThroughFibEntry", detailFibEntryInformation.BytesThroughFibEntry})
    detailFibEntryInformation.EntityData.Leafs.Append("detailed-prefix-length", types.YLeaf{"DetailedPrefixLength", detailFibEntryInformation.DetailedPrefixLength})
    detailFibEntryInformation.EntityData.Leafs.Append("prefix-protocol", types.YLeaf{"PrefixProtocol", detailFibEntryInformation.PrefixProtocol})
    detailFibEntryInformation.EntityData.Leafs.Append("precedence-forpackets", types.YLeaf{"PrecedenceForpackets", detailFibEntryInformation.PrecedenceForpackets})
    detailFibEntryInformation.EntityData.Leafs.Append("traffic-index-for-packets", types.YLeaf{"TrafficIndexForPackets", detailFibEntryInformation.TrafficIndexForPackets})
    detailFibEntryInformation.EntityData.Leafs.Append("switch-compontent-id", types.YLeaf{"SwitchCompontentId", detailFibEntryInformation.SwitchCompontentId})
    detailFibEntryInformation.EntityData.Leafs.Append("fast-adjacency-flag", types.YLeaf{"FastAdjacencyFlag", detailFibEntryInformation.FastAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("illegal-fast-adjacency-flag", types.YLeaf{"IllegalFastAdjacencyFlag", detailFibEntryInformation.IllegalFastAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("remote-adjacency-flag", types.YLeaf{"RemoteAdjacencyFlag", detailFibEntryInformation.RemoteAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-id", types.YLeaf{"BgpAttributeId", detailFibEntryInformation.BgpAttributeId})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-local-attribute-id", types.YLeaf{"BgpLocalAttributeId", detailFibEntryInformation.BgpLocalAttributeId})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-origin-as", types.YLeaf{"BgpAttributeOriginAs", detailFibEntryInformation.BgpAttributeOriginAs})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-next-hop-as", types.YLeaf{"BgpAttributeNextHopAs", detailFibEntryInformation.BgpAttributeNextHopAs})
    detailFibEntryInformation.EntityData.Leafs.Append("path-string", types.YLeaf{"PathString", detailFibEntryInformation.PathString})
    detailFibEntryInformation.EntityData.Leafs.Append("extcom-string", types.YLeaf{"ExtcomString", detailFibEntryInformation.ExtcomString})
    detailFibEntryInformation.EntityData.Leafs.Append("com-string", types.YLeaf{"ComString", detailFibEntryInformation.ComString})
    detailFibEntryInformation.EntityData.Leafs.Append("extended-community", types.YLeaf{"ExtendedCommunity", detailFibEntryInformation.ExtendedCommunity})
    detailFibEntryInformation.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", detailFibEntryInformation.QosGroup})
    detailFibEntryInformation.EntityData.Leafs.Append("mpls-fec", types.YLeaf{"MplsFec", detailFibEntryInformation.MplsFec})
    detailFibEntryInformation.EntityData.Leafs.Append("qppb-qos-group-and-ip-precedence", types.YLeaf{"QppbQosGroupAndIpPrecedence", detailFibEntryInformation.QppbQosGroupAndIpPrecedence})
    detailFibEntryInformation.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", detailFibEntryInformation.FlowTag})
    detailFibEntryInformation.EntityData.Leafs.Append("forward-class", types.YLeaf{"ForwardClass", detailFibEntryInformation.ForwardClass})
    detailFibEntryInformation.EntityData.Leafs.Append("pl-time-of-last-update-in-msec", types.YLeaf{"PlTimeOfLastUpdateInMsec", detailFibEntryInformation.PlTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("ldi-time-of-last-update-in-msec", types.YLeaf{"LdiTimeOfLastUpdateInMsec", detailFibEntryInformation.LdiTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("lwldi-time-of-last-update-in-msec", types.YLeaf{"LwldiTimeOfLastUpdateInMsec", detailFibEntryInformation.LwldiTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("pl-time-stamp-type", types.YLeaf{"PlTimeStampType", detailFibEntryInformation.PlTimeStampType})

    detailFibEntryInformation.EntityData.YListKeys = []string {}

    return &(detailFibEntryInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation
// Detailed Loadshare info
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughLoadInformation interface{}

    // Bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughLoadInformation interface{}

    // Total packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalPacketsThroughLoadInformation interface{}

    // Total bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TotalBytesThroughLoadInformation interface{}

    // Prefix of the owner. The type is interface{} with range: 0..4294967295.
    PrefixOfOwner interface{}

    // Mask length of the owner. The type is interface{} with range:
    // 0..4294967295.
    MaskLengthOfOwner interface{}

    // Loadinfo reference count. The type is interface{} with range: 0..65535.
    LoadInformationReferenceCount interface{}

    // Per destination load sharing flag. The type is bool.
    PerDestLoadSharingFlag interface{}

    // Loadinfo owner deleted flag. The type is bool.
    LoadInformationOwnerDeletedFlag interface{}

    // Loadinfo sanity flag. The type is bool.
    LoadinfoSanityFlag interface{}

    // Owner flag. The type is bool.
    IsOwner interface{}

    // Loadinfo internal data.
    LoadInformtionInternalData Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetEntityData() *types.CommonEntityData {
    loadshareInformation.EntityData.YFilter = loadshareInformation.YFilter
    loadshareInformation.EntityData.YangName = "loadshare-information"
    loadshareInformation.EntityData.BundleName = "cisco_ios_xr"
    loadshareInformation.EntityData.ParentYangName = "detail-fib-entry-information"
    loadshareInformation.EntityData.SegmentPath = "loadshare-information"
    loadshareInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadshareInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadshareInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadshareInformation.EntityData.Children = types.NewOrderedMap()
    loadshareInformation.EntityData.Children.Append("load-informtion-internal-data", types.YChild{"LoadInformtionInternalData", &loadshareInformation.LoadInformtionInternalData})
    loadshareInformation.EntityData.Leafs = types.NewOrderedMap()
    loadshareInformation.EntityData.Leafs.Append("packets-through-load-information", types.YLeaf{"PacketsThroughLoadInformation", loadshareInformation.PacketsThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("bytes-through-load-information", types.YLeaf{"BytesThroughLoadInformation", loadshareInformation.BytesThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("total-packets-through-load-information", types.YLeaf{"TotalPacketsThroughLoadInformation", loadshareInformation.TotalPacketsThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("total-bytes-through-load-information", types.YLeaf{"TotalBytesThroughLoadInformation", loadshareInformation.TotalBytesThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("prefix-of-owner", types.YLeaf{"PrefixOfOwner", loadshareInformation.PrefixOfOwner})
    loadshareInformation.EntityData.Leafs.Append("mask-length-of-owner", types.YLeaf{"MaskLengthOfOwner", loadshareInformation.MaskLengthOfOwner})
    loadshareInformation.EntityData.Leafs.Append("load-information-reference-count", types.YLeaf{"LoadInformationReferenceCount", loadshareInformation.LoadInformationReferenceCount})
    loadshareInformation.EntityData.Leafs.Append("per-dest-load-sharing-flag", types.YLeaf{"PerDestLoadSharingFlag", loadshareInformation.PerDestLoadSharingFlag})
    loadshareInformation.EntityData.Leafs.Append("load-information-owner-deleted-flag", types.YLeaf{"LoadInformationOwnerDeletedFlag", loadshareInformation.LoadInformationOwnerDeletedFlag})
    loadshareInformation.EntityData.Leafs.Append("loadinfo-sanity-flag", types.YLeaf{"LoadinfoSanityFlag", loadshareInformation.LoadinfoSanityFlag})
    loadshareInformation.EntityData.Leafs.Append("is-owner", types.YLeaf{"IsOwner", loadshareInformation.IsOwner})

    loadshareInformation.EntityData.YListKeys = []string {}

    return &(loadshareInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
// Loadinfo internal data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // level of ldis. The type is interface{} with range: 0..255.
    LevelOfldis interface{}

    // no. of ldis. The type is interface{} with range: 0..255.
    NumberOfLdis interface{}

    // Maximum index of the arrays. The type is interface{} with range:
    // 0..4294967295.
    MaximumIndexArrays interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathIndices interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathLdiNumbers interface{}

    // Maximum slots. The type is interface{} with range: 0..4294967295.
    MaximumSlots interface{}

    // Normalized weights. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NormalizedWeights interface{}

    // Tunnel class value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TunnelClassValue interface{}

    // PBTS info valid flag. The type is bool.
    IsPbtsInfoValid interface{}

    // PBTS class offset. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassOffset interface{}

    // PBTS class num paths. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassNumPaths interface{}

    // PBTS class falls back to class. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsFallbackMappedClass interface{}

    // Round Robin Disable. The type is bool.
    RoundRobinDisable interface{}

    // Number of LDI next hop buckets. The type is interface{} with range: 0..255.
    LdiNextHopBuckets interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardwareInformation interface{}

    // Sanity flag. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag.
    SanityFlag []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag

    // Interface handle. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle.
    InterfaceHandle []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle

    // Weights of paths. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath.
    WeightsOfPath []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath

    // Adjacency address. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress.
    AdjacencyAddress []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress

    // Does PBTS class fall back to drop or any class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped.
    PbtsClassIsFallbackMapped []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped

    // PBTS class falls back to drop. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop.
    PbtsFallbackToDrop []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop

    // Tunnel is forward class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass.
    TunnelIsForwardClass []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetEntityData() *types.CommonEntityData {
    loadInformtionInternalData.EntityData.YFilter = loadInformtionInternalData.YFilter
    loadInformtionInternalData.EntityData.YangName = "load-informtion-internal-data"
    loadInformtionInternalData.EntityData.BundleName = "cisco_ios_xr"
    loadInformtionInternalData.EntityData.ParentYangName = "loadshare-information"
    loadInformtionInternalData.EntityData.SegmentPath = "load-informtion-internal-data"
    loadInformtionInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadInformtionInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadInformtionInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadInformtionInternalData.EntityData.Children = types.NewOrderedMap()
    loadInformtionInternalData.EntityData.Children.Append("sanity-flag", types.YChild{"SanityFlag", nil})
    for i := range loadInformtionInternalData.SanityFlag {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.SanityFlag[i]), types.YChild{"SanityFlag", loadInformtionInternalData.SanityFlag[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("interface-handle", types.YChild{"InterfaceHandle", nil})
    for i := range loadInformtionInternalData.InterfaceHandle {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.InterfaceHandle[i]), types.YChild{"InterfaceHandle", loadInformtionInternalData.InterfaceHandle[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("weights-of-path", types.YChild{"WeightsOfPath", nil})
    for i := range loadInformtionInternalData.WeightsOfPath {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.WeightsOfPath[i]), types.YChild{"WeightsOfPath", loadInformtionInternalData.WeightsOfPath[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("adjacency-address", types.YChild{"AdjacencyAddress", nil})
    for i := range loadInformtionInternalData.AdjacencyAddress {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.AdjacencyAddress[i]), types.YChild{"AdjacencyAddress", loadInformtionInternalData.AdjacencyAddress[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("pbts-class-is-fallback-mapped", types.YChild{"PbtsClassIsFallbackMapped", nil})
    for i := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.PbtsClassIsFallbackMapped[i]), types.YChild{"PbtsClassIsFallbackMapped", loadInformtionInternalData.PbtsClassIsFallbackMapped[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("pbts-fallback-to-drop", types.YChild{"PbtsFallbackToDrop", nil})
    for i := range loadInformtionInternalData.PbtsFallbackToDrop {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.PbtsFallbackToDrop[i]), types.YChild{"PbtsFallbackToDrop", loadInformtionInternalData.PbtsFallbackToDrop[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("tunnel-is-forward-class", types.YChild{"TunnelIsForwardClass", nil})
    for i := range loadInformtionInternalData.TunnelIsForwardClass {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.TunnelIsForwardClass[i]), types.YChild{"TunnelIsForwardClass", loadInformtionInternalData.TunnelIsForwardClass[i]})
    }
    loadInformtionInternalData.EntityData.Leafs = types.NewOrderedMap()
    loadInformtionInternalData.EntityData.Leafs.Append("level-ofldis", types.YLeaf{"LevelOfldis", loadInformtionInternalData.LevelOfldis})
    loadInformtionInternalData.EntityData.Leafs.Append("number-of-ldis", types.YLeaf{"NumberOfLdis", loadInformtionInternalData.NumberOfLdis})
    loadInformtionInternalData.EntityData.Leafs.Append("maximum-index-arrays", types.YLeaf{"MaximumIndexArrays", loadInformtionInternalData.MaximumIndexArrays})
    loadInformtionInternalData.EntityData.Leafs.Append("path-indices", types.YLeaf{"PathIndices", loadInformtionInternalData.PathIndices})
    loadInformtionInternalData.EntityData.Leafs.Append("path-ldi-numbers", types.YLeaf{"PathLdiNumbers", loadInformtionInternalData.PathLdiNumbers})
    loadInformtionInternalData.EntityData.Leafs.Append("maximum-slots", types.YLeaf{"MaximumSlots", loadInformtionInternalData.MaximumSlots})
    loadInformtionInternalData.EntityData.Leafs.Append("normalized-weights", types.YLeaf{"NormalizedWeights", loadInformtionInternalData.NormalizedWeights})
    loadInformtionInternalData.EntityData.Leafs.Append("tunnel-class-value", types.YLeaf{"TunnelClassValue", loadInformtionInternalData.TunnelClassValue})
    loadInformtionInternalData.EntityData.Leafs.Append("is-pbts-info-valid", types.YLeaf{"IsPbtsInfoValid", loadInformtionInternalData.IsPbtsInfoValid})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-class-offset", types.YLeaf{"PbtsClassOffset", loadInformtionInternalData.PbtsClassOffset})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-class-num-paths", types.YLeaf{"PbtsClassNumPaths", loadInformtionInternalData.PbtsClassNumPaths})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-fallback-mapped-class", types.YLeaf{"PbtsFallbackMappedClass", loadInformtionInternalData.PbtsFallbackMappedClass})
    loadInformtionInternalData.EntityData.Leafs.Append("round-robin-disable", types.YLeaf{"RoundRobinDisable", loadInformtionInternalData.RoundRobinDisable})
    loadInformtionInternalData.EntityData.Leafs.Append("ldi-next-hop-buckets", types.YLeaf{"LdiNextHopBuckets", loadInformtionInternalData.LdiNextHopBuckets})
    loadInformtionInternalData.EntityData.Leafs.Append("platform-hardware-information", types.YLeaf{"PlatformHardwareInformation", loadInformtionInternalData.PlatformHardwareInformation})

    loadInformtionInternalData.EntityData.YListKeys = []string {}

    return &(loadInformtionInternalData.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag
// Sanity flag
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is bool.
    Entry interface{}
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetEntityData() *types.CommonEntityData {
    sanityFlag.EntityData.YFilter = sanityFlag.YFilter
    sanityFlag.EntityData.YangName = "sanity-flag"
    sanityFlag.EntityData.BundleName = "cisco_ios_xr"
    sanityFlag.EntityData.ParentYangName = "load-informtion-internal-data"
    sanityFlag.EntityData.SegmentPath = "sanity-flag"
    sanityFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sanityFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sanityFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sanityFlag.EntityData.Children = types.NewOrderedMap()
    sanityFlag.EntityData.Leafs = types.NewOrderedMap()
    sanityFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sanityFlag.Entry})

    sanityFlag.EntityData.YListKeys = []string {}

    return &(sanityFlag.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle
// Interface handle
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-zA-Z0-9./-]+.
    Entry interface{}
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetEntityData() *types.CommonEntityData {
    interfaceHandle.EntityData.YFilter = interfaceHandle.YFilter
    interfaceHandle.EntityData.YangName = "interface-handle"
    interfaceHandle.EntityData.BundleName = "cisco_ios_xr"
    interfaceHandle.EntityData.ParentYangName = "load-informtion-internal-data"
    interfaceHandle.EntityData.SegmentPath = "interface-handle"
    interfaceHandle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceHandle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceHandle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceHandle.EntityData.Children = types.NewOrderedMap()
    interfaceHandle.EntityData.Leafs = types.NewOrderedMap()
    interfaceHandle.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceHandle.Entry})

    interfaceHandle.EntityData.YListKeys = []string {}

    return &(interfaceHandle.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath
// Weights of paths
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetEntityData() *types.CommonEntityData {
    weightsOfPath.EntityData.YFilter = weightsOfPath.YFilter
    weightsOfPath.EntityData.YangName = "weights-of-path"
    weightsOfPath.EntityData.BundleName = "cisco_ios_xr"
    weightsOfPath.EntityData.ParentYangName = "load-informtion-internal-data"
    weightsOfPath.EntityData.SegmentPath = "weights-of-path"
    weightsOfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    weightsOfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    weightsOfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    weightsOfPath.EntityData.Children = types.NewOrderedMap()
    weightsOfPath.EntityData.Leafs = types.NewOrderedMap()
    weightsOfPath.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", weightsOfPath.Entry})

    weightsOfPath.EntityData.YListKeys = []string {}

    return &(weightsOfPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress
// Adjacency address
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // address. The type is string with length: 0..60.
    Address interface{}
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetEntityData() *types.CommonEntityData {
    adjacencyAddress.EntityData.YFilter = adjacencyAddress.YFilter
    adjacencyAddress.EntityData.YangName = "adjacency-address"
    adjacencyAddress.EntityData.BundleName = "cisco_ios_xr"
    adjacencyAddress.EntityData.ParentYangName = "load-informtion-internal-data"
    adjacencyAddress.EntityData.SegmentPath = "adjacency-address"
    adjacencyAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyAddress.EntityData.Children = types.NewOrderedMap()
    adjacencyAddress.EntityData.Leafs = types.NewOrderedMap()
    adjacencyAddress.EntityData.Leafs.Append("address", types.YLeaf{"Address", adjacencyAddress.Address})

    adjacencyAddress.EntityData.YListKeys = []string {}

    return &(adjacencyAddress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped
// Does PBTS class fall back to drop or any class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetEntityData() *types.CommonEntityData {
    pbtsClassIsFallbackMapped.EntityData.YFilter = pbtsClassIsFallbackMapped.YFilter
    pbtsClassIsFallbackMapped.EntityData.YangName = "pbts-class-is-fallback-mapped"
    pbtsClassIsFallbackMapped.EntityData.BundleName = "cisco_ios_xr"
    pbtsClassIsFallbackMapped.EntityData.ParentYangName = "load-informtion-internal-data"
    pbtsClassIsFallbackMapped.EntityData.SegmentPath = "pbts-class-is-fallback-mapped"
    pbtsClassIsFallbackMapped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbtsClassIsFallbackMapped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbtsClassIsFallbackMapped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbtsClassIsFallbackMapped.EntityData.Children = types.NewOrderedMap()
    pbtsClassIsFallbackMapped.EntityData.Leafs = types.NewOrderedMap()
    pbtsClassIsFallbackMapped.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", pbtsClassIsFallbackMapped.Entry})

    pbtsClassIsFallbackMapped.EntityData.YListKeys = []string {}

    return &(pbtsClassIsFallbackMapped.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop
// PBTS class falls back to drop
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetEntityData() *types.CommonEntityData {
    pbtsFallbackToDrop.EntityData.YFilter = pbtsFallbackToDrop.YFilter
    pbtsFallbackToDrop.EntityData.YangName = "pbts-fallback-to-drop"
    pbtsFallbackToDrop.EntityData.BundleName = "cisco_ios_xr"
    pbtsFallbackToDrop.EntityData.ParentYangName = "load-informtion-internal-data"
    pbtsFallbackToDrop.EntityData.SegmentPath = "pbts-fallback-to-drop"
    pbtsFallbackToDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbtsFallbackToDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbtsFallbackToDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbtsFallbackToDrop.EntityData.Children = types.NewOrderedMap()
    pbtsFallbackToDrop.EntityData.Leafs = types.NewOrderedMap()
    pbtsFallbackToDrop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", pbtsFallbackToDrop.Entry})

    pbtsFallbackToDrop.EntityData.YListKeys = []string {}

    return &(pbtsFallbackToDrop.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
// Tunnel is forward class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetEntityData() *types.CommonEntityData {
    tunnelIsForwardClass.EntityData.YFilter = tunnelIsForwardClass.YFilter
    tunnelIsForwardClass.EntityData.YangName = "tunnel-is-forward-class"
    tunnelIsForwardClass.EntityData.BundleName = "cisco_ios_xr"
    tunnelIsForwardClass.EntityData.ParentYangName = "load-informtion-internal-data"
    tunnelIsForwardClass.EntityData.SegmentPath = "tunnel-is-forward-class"
    tunnelIsForwardClass.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelIsForwardClass.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelIsForwardClass.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelIsForwardClass.EntityData.Children = types.NewOrderedMap()
    tunnelIsForwardClass.EntityData.Leafs = types.NewOrderedMap()
    tunnelIsForwardClass.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tunnelIsForwardClass.Entry})

    tunnelIsForwardClass.EntityData.YListKeys = []string {}

    return &(tunnelIsForwardClass.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath
// FIB entry path details
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // fib sh tbl path. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath.
    FibShTblPath []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetEntityData() *types.CommonEntityData {
    fibEntryPath.EntityData.YFilter = fibEntryPath.YFilter
    fibEntryPath.EntityData.YangName = "fib-entry-path"
    fibEntryPath.EntityData.BundleName = "cisco_ios_xr"
    fibEntryPath.EntityData.ParentYangName = "ip-prefix-brief"
    fibEntryPath.EntityData.SegmentPath = "fib-entry-path"
    fibEntryPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibEntryPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibEntryPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibEntryPath.EntityData.Children = types.NewOrderedMap()
    fibEntryPath.EntityData.Children.Append("fib-sh-tbl-path", types.YChild{"FibShTblPath", nil})
    for i := range fibEntryPath.FibShTblPath {
        fibEntryPath.EntityData.Children.Append(types.GetSegmentPath(fibEntryPath.FibShTblPath[i]), types.YChild{"FibShTblPath", fibEntryPath.FibShTblPath[i]})
    }
    fibEntryPath.EntityData.Leafs = types.NewOrderedMap()

    fibEntryPath.EntityData.YListKeys = []string {}

    return &(fibEntryPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath
// fib sh tbl path
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    BriefInterfaceHandle interface{}

    // Next hop prefix. The type is string with length: 0..52.
    BriefNextHopPrefix interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    ViaLabelToRecurse interface{}

    // P-node address. The type is string with length: 0..52.
    BriefPnodeAddress interface{}

    // Q-node address. The type is string with length: 0..52.
    BriefQnodeAddress interface{}

    // LFA protection type. The type is FibUpdatePathLfaProtection.
    BriefLfaProtectionType interface{}

    // Resolved path. The type is bool.
    ResolvedPath interface{}

    // Recursive path. The type is bool.
    RecursivePath interface{}

    // Packets received on this path. The type is bool.
    PacketsReceivedPath interface{}

    // Attached path. The type is bool.
    AttachedPath interface{}

    // Backup path. The type is bool.
    BackupPath interface{}

    // Best external path. The type is bool.
    BestExternalPath interface{}

    // Is protection ignored. The type is bool.
    ProtectIgnore interface{}

    // Is this the path used for DLB. The type is bool.
    PathDlb interface{}

    // Path flags. The type is interface{} with range: 0..4294967295.
    PathFlags interface{}

    // Path Info flags. The type is interface{} with range: 0..65535.
    PathInfoFlags interface{}

    // Path index. The type is interface{} with range: 0..255.
    PathIndex interface{}

    // Backup path index. The type is interface{} with range: 0..255.
    BackupIndex interface{}

    // Next Hop Index. The type is interface{} with range: 0..4294967295.
    NextHopIndex interface{}

    // Parent Interface Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceHandle interface{}

    // recursion via /N constraint. The type is interface{} with range: 0..255.
    RecursionviaLen interface{}

    // More detail about this path entry.
    MoreDetailAboutPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath

    // mpls info for this path entry.
    MplsInformationForPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath

    // SRv6 info for this path entry.
    Srv6InformationForPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_Srv6InformationForPath
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetEntityData() *types.CommonEntityData {
    fibShTblPath.EntityData.YFilter = fibShTblPath.YFilter
    fibShTblPath.EntityData.YangName = "fib-sh-tbl-path"
    fibShTblPath.EntityData.BundleName = "cisco_ios_xr"
    fibShTblPath.EntityData.ParentYangName = "fib-entry-path"
    fibShTblPath.EntityData.SegmentPath = "fib-sh-tbl-path"
    fibShTblPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibShTblPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibShTblPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibShTblPath.EntityData.Children = types.NewOrderedMap()
    fibShTblPath.EntityData.Children.Append("more-detail-about-path", types.YChild{"MoreDetailAboutPath", &fibShTblPath.MoreDetailAboutPath})
    fibShTblPath.EntityData.Children.Append("mpls-information-for-path", types.YChild{"MplsInformationForPath", &fibShTblPath.MplsInformationForPath})
    fibShTblPath.EntityData.Children.Append("srv6-information-for-path", types.YChild{"Srv6InformationForPath", &fibShTblPath.Srv6InformationForPath})
    fibShTblPath.EntityData.Leafs = types.NewOrderedMap()
    fibShTblPath.EntityData.Leafs.Append("hardware-information", types.YLeaf{"HardwareInformation", fibShTblPath.HardwareInformation})
    fibShTblPath.EntityData.Leafs.Append("brief-interface-handle", types.YLeaf{"BriefInterfaceHandle", fibShTblPath.BriefInterfaceHandle})
    fibShTblPath.EntityData.Leafs.Append("brief-next-hop-prefix", types.YLeaf{"BriefNextHopPrefix", fibShTblPath.BriefNextHopPrefix})
    fibShTblPath.EntityData.Leafs.Append("via-label-to-recurse", types.YLeaf{"ViaLabelToRecurse", fibShTblPath.ViaLabelToRecurse})
    fibShTblPath.EntityData.Leafs.Append("brief-pnode-address", types.YLeaf{"BriefPnodeAddress", fibShTblPath.BriefPnodeAddress})
    fibShTblPath.EntityData.Leafs.Append("brief-qnode-address", types.YLeaf{"BriefQnodeAddress", fibShTblPath.BriefQnodeAddress})
    fibShTblPath.EntityData.Leafs.Append("brief-lfa-protection-type", types.YLeaf{"BriefLfaProtectionType", fibShTblPath.BriefLfaProtectionType})
    fibShTblPath.EntityData.Leafs.Append("resolved-path", types.YLeaf{"ResolvedPath", fibShTblPath.ResolvedPath})
    fibShTblPath.EntityData.Leafs.Append("recursive-path", types.YLeaf{"RecursivePath", fibShTblPath.RecursivePath})
    fibShTblPath.EntityData.Leafs.Append("packets-received-path", types.YLeaf{"PacketsReceivedPath", fibShTblPath.PacketsReceivedPath})
    fibShTblPath.EntityData.Leafs.Append("attached-path", types.YLeaf{"AttachedPath", fibShTblPath.AttachedPath})
    fibShTblPath.EntityData.Leafs.Append("backup-path", types.YLeaf{"BackupPath", fibShTblPath.BackupPath})
    fibShTblPath.EntityData.Leafs.Append("best-external-path", types.YLeaf{"BestExternalPath", fibShTblPath.BestExternalPath})
    fibShTblPath.EntityData.Leafs.Append("protect-ignore", types.YLeaf{"ProtectIgnore", fibShTblPath.ProtectIgnore})
    fibShTblPath.EntityData.Leafs.Append("path-dlb", types.YLeaf{"PathDlb", fibShTblPath.PathDlb})
    fibShTblPath.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", fibShTblPath.PathFlags})
    fibShTblPath.EntityData.Leafs.Append("path-info-flags", types.YLeaf{"PathInfoFlags", fibShTblPath.PathInfoFlags})
    fibShTblPath.EntityData.Leafs.Append("path-index", types.YLeaf{"PathIndex", fibShTblPath.PathIndex})
    fibShTblPath.EntityData.Leafs.Append("backup-index", types.YLeaf{"BackupIndex", fibShTblPath.BackupIndex})
    fibShTblPath.EntityData.Leafs.Append("next-hop-index", types.YLeaf{"NextHopIndex", fibShTblPath.NextHopIndex})
    fibShTblPath.EntityData.Leafs.Append("parent-interface-handle", types.YLeaf{"ParentInterfaceHandle", fibShTblPath.ParentInterfaceHandle})
    fibShTblPath.EntityData.Leafs.Append("recursionvia-len", types.YLeaf{"RecursionviaLen", fibShTblPath.RecursionviaLen})

    fibShTblPath.EntityData.YListKeys = []string {}

    return &(fibShTblPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath
// More detail about this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address to recurse to. The type is string with length: 0..52.
    IpAddressToRecurse interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    LabelToRecurse interface{}

    // Next hop prefix. The type is string with length: 0..52.
    DetailNextHopPrefix interface{}

    // Next hop mask length. The type is interface{} with range: 0..255.
    NextHopMaskLength interface{}

    // Interface associated with this path. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceAssociatedPath interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // Next hop VRF. The type is string with length: 0..33.
    NextHopVrf interface{}

    // Tunnel endpoint id. The type is interface{} with range: 0..4294967295.
    TunnleEndpointId interface{}

    // LISP RLOC ID. The type is interface{} with range: 0..4294967295.
    Lisprlocid interface{}

    // No. of dependents for this path. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependenciesThisPath interface{}

    // Round robin reset value. The type is interface{} with range: 0..255.
    RobinResetValue interface{}

    // Is recursion object a leaf?. The type is bool.
    RecursePrefixObject interface{}

    // Next prefix recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion interface{}

    // Next prefix length. The type is interface{} with range: 0..255.
    NextPrefixLength interface{}

    // Recursion has two leaves (e.g. implicit-null path). The type is bool.
    RecursePrefixObject2 interface{}

    // Next prefix2 recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion2 interface{}

    // Next prefix2 length. The type is interface{} with range: 0..255.
    NextPrefixLength2 interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    DetailFibAdjacencyType interface{}

    // Current path flag. The type is bool.
    CurrentPathFlag interface{}

    // Recursive path information is available. The type is bool.
    RecursivePathInformation interface{}

    // Path is an external adjacency. The type is bool.
    ExternalAdjacency interface{}

    // FIB Nhinfo type. The type is FibNeh.
    FibPathNhInformationType interface{}

    // FIB Nhinfo type special. The type is FibNehSpecial.
    FibPathNhInformationTypeSpecial interface{}

    // Weight of the path. The type is interface{} with range: 0..4294967295.
    WeightOfPath interface{}

    // Tunnel class of the path. The type is interface{} with range: 0..255.
    TunnelClass interface{}

    // Tunnel is forward class. The type is bool.
    TunnelIsForwardClass interface{}

    // IP Encap. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap.
    SpdIpencap []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetEntityData() *types.CommonEntityData {
    moreDetailAboutPath.EntityData.YFilter = moreDetailAboutPath.YFilter
    moreDetailAboutPath.EntityData.YangName = "more-detail-about-path"
    moreDetailAboutPath.EntityData.BundleName = "cisco_ios_xr"
    moreDetailAboutPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    moreDetailAboutPath.EntityData.SegmentPath = "more-detail-about-path"
    moreDetailAboutPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moreDetailAboutPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moreDetailAboutPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moreDetailAboutPath.EntityData.Children = types.NewOrderedMap()
    moreDetailAboutPath.EntityData.Children.Append("spd-ipencap", types.YChild{"SpdIpencap", nil})
    for i := range moreDetailAboutPath.SpdIpencap {
        moreDetailAboutPath.EntityData.Children.Append(types.GetSegmentPath(moreDetailAboutPath.SpdIpencap[i]), types.YChild{"SpdIpencap", moreDetailAboutPath.SpdIpencap[i]})
    }
    moreDetailAboutPath.EntityData.Leafs = types.NewOrderedMap()
    moreDetailAboutPath.EntityData.Leafs.Append("ip-address-to-recurse", types.YLeaf{"IpAddressToRecurse", moreDetailAboutPath.IpAddressToRecurse})
    moreDetailAboutPath.EntityData.Leafs.Append("label-to-recurse", types.YLeaf{"LabelToRecurse", moreDetailAboutPath.LabelToRecurse})
    moreDetailAboutPath.EntityData.Leafs.Append("detail-next-hop-prefix", types.YLeaf{"DetailNextHopPrefix", moreDetailAboutPath.DetailNextHopPrefix})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-mask-length", types.YLeaf{"NextHopMaskLength", moreDetailAboutPath.NextHopMaskLength})
    moreDetailAboutPath.EntityData.Leafs.Append("interface-associated-path", types.YLeaf{"InterfaceAssociatedPath", moreDetailAboutPath.InterfaceAssociatedPath})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-interface", types.YLeaf{"NextHopInterface", moreDetailAboutPath.NextHopInterface})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-vrf", types.YLeaf{"NextHopVrf", moreDetailAboutPath.NextHopVrf})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnle-endpoint-id", types.YLeaf{"TunnleEndpointId", moreDetailAboutPath.TunnleEndpointId})
    moreDetailAboutPath.EntityData.Leafs.Append("lisprlocid", types.YLeaf{"Lisprlocid", moreDetailAboutPath.Lisprlocid})
    moreDetailAboutPath.EntityData.Leafs.Append("number-of-dependencies-this-path", types.YLeaf{"NumberOfDependenciesThisPath", moreDetailAboutPath.NumberOfDependenciesThisPath})
    moreDetailAboutPath.EntityData.Leafs.Append("robin-reset-value", types.YLeaf{"RobinResetValue", moreDetailAboutPath.RobinResetValue})
    moreDetailAboutPath.EntityData.Leafs.Append("recurse-prefix-object", types.YLeaf{"RecursePrefixObject", moreDetailAboutPath.RecursePrefixObject})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-recursion", types.YLeaf{"NextPrefixRecursion", moreDetailAboutPath.NextPrefixRecursion})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-length", types.YLeaf{"NextPrefixLength", moreDetailAboutPath.NextPrefixLength})
    moreDetailAboutPath.EntityData.Leafs.Append("recurse-prefix-object2", types.YLeaf{"RecursePrefixObject2", moreDetailAboutPath.RecursePrefixObject2})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-recursion2", types.YLeaf{"NextPrefixRecursion2", moreDetailAboutPath.NextPrefixRecursion2})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-length2", types.YLeaf{"NextPrefixLength2", moreDetailAboutPath.NextPrefixLength2})
    moreDetailAboutPath.EntityData.Leafs.Append("detail-fib-adjacency-type", types.YLeaf{"DetailFibAdjacencyType", moreDetailAboutPath.DetailFibAdjacencyType})
    moreDetailAboutPath.EntityData.Leafs.Append("current-path-flag", types.YLeaf{"CurrentPathFlag", moreDetailAboutPath.CurrentPathFlag})
    moreDetailAboutPath.EntityData.Leafs.Append("recursive-path-information", types.YLeaf{"RecursivePathInformation", moreDetailAboutPath.RecursivePathInformation})
    moreDetailAboutPath.EntityData.Leafs.Append("external-adjacency", types.YLeaf{"ExternalAdjacency", moreDetailAboutPath.ExternalAdjacency})
    moreDetailAboutPath.EntityData.Leafs.Append("fib-path-nh-information-type", types.YLeaf{"FibPathNhInformationType", moreDetailAboutPath.FibPathNhInformationType})
    moreDetailAboutPath.EntityData.Leafs.Append("fib-path-nh-information-type-special", types.YLeaf{"FibPathNhInformationTypeSpecial", moreDetailAboutPath.FibPathNhInformationTypeSpecial})
    moreDetailAboutPath.EntityData.Leafs.Append("weight-of-path", types.YLeaf{"WeightOfPath", moreDetailAboutPath.WeightOfPath})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", moreDetailAboutPath.TunnelClass})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnel-is-forward-class", types.YLeaf{"TunnelIsForwardClass", moreDetailAboutPath.TunnelIsForwardClass})

    moreDetailAboutPath.EntityData.YListKeys = []string {}

    return &(moreDetailAboutPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
// IP Encap
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Header Count. The type is interface{} with range: 0..255.
    IpEncapHdrCount interface{}

    // IPEncap Object Locks. The type is interface{} with range: 0..4294967295.
    IpEncapLocks interface{}

    // Transport Table. The type is interface{} with range: 0..4294967295.
    IpEncapTransportTbl interface{}

    // Transport VRF name. The type is string.
    IpeTransportVrfName interface{}

    // Transport AF. The type is interface{} with range: 0..4294967295.
    IpEncapTransportAf interface{}

    // Payload AF. The type is interface{} with range: 0..4294967295.
    IpEncapPayloadAf interface{}

    // Payload MTU. The type is interface{} with range: 0..65535.
    IpEncapPayloadMtu interface{}

    // Pointer to parent. The type is interface{} with range: 0..4294967295.
    IpEncapParent interface{}

    // Parent type enumeration. The type is interface{} with range: 0..4294967295.
    IpEncapParentType interface{}

    // Headers. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr.
    IpEncapHdr []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetEntityData() *types.CommonEntityData {
    spdIpencap.EntityData.YFilter = spdIpencap.YFilter
    spdIpencap.EntityData.YangName = "spd-ipencap"
    spdIpencap.EntityData.BundleName = "cisco_ios_xr"
    spdIpencap.EntityData.ParentYangName = "more-detail-about-path"
    spdIpencap.EntityData.SegmentPath = "spd-ipencap"
    spdIpencap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spdIpencap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spdIpencap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spdIpencap.EntityData.Children = types.NewOrderedMap()
    spdIpencap.EntityData.Children.Append("ip-encap-hdr", types.YChild{"IpEncapHdr", nil})
    for i := range spdIpencap.IpEncapHdr {
        spdIpencap.EntityData.Children.Append(types.GetSegmentPath(spdIpencap.IpEncapHdr[i]), types.YChild{"IpEncapHdr", spdIpencap.IpEncapHdr[i]})
    }
    spdIpencap.EntityData.Leafs = types.NewOrderedMap()
    spdIpencap.EntityData.Leafs.Append("ip-encap-hdr-count", types.YLeaf{"IpEncapHdrCount", spdIpencap.IpEncapHdrCount})
    spdIpencap.EntityData.Leafs.Append("ip-encap-locks", types.YLeaf{"IpEncapLocks", spdIpencap.IpEncapLocks})
    spdIpencap.EntityData.Leafs.Append("ip-encap-transport-tbl", types.YLeaf{"IpEncapTransportTbl", spdIpencap.IpEncapTransportTbl})
    spdIpencap.EntityData.Leafs.Append("ipe-transport-vrf-name", types.YLeaf{"IpeTransportVrfName", spdIpencap.IpeTransportVrfName})
    spdIpencap.EntityData.Leafs.Append("ip-encap-transport-af", types.YLeaf{"IpEncapTransportAf", spdIpencap.IpEncapTransportAf})
    spdIpencap.EntityData.Leafs.Append("ip-encap-payload-af", types.YLeaf{"IpEncapPayloadAf", spdIpencap.IpEncapPayloadAf})
    spdIpencap.EntityData.Leafs.Append("ip-encap-payload-mtu", types.YLeaf{"IpEncapPayloadMtu", spdIpencap.IpEncapPayloadMtu})
    spdIpencap.EntityData.Leafs.Append("ip-encap-parent", types.YLeaf{"IpEncapParent", spdIpencap.IpEncapParent})
    spdIpencap.EntityData.Leafs.Append("ip-encap-parent-type", types.YLeaf{"IpEncapParentType", spdIpencap.IpEncapParentType})

    spdIpencap.EntityData.YListKeys = []string {}

    return &(spdIpencap.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
// Headers
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Header Type. The type is FibShIpencapHdr.
    IpEncapHdrType interface{}

    // Static Header. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    IpEncapHdrp interface{}

    // Dynamic Header Fields. The type is interface{} with range: 0..4294967295.
    IpEncapHdrDyn interface{}
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetEntityData() *types.CommonEntityData {
    ipEncapHdr.EntityData.YFilter = ipEncapHdr.YFilter
    ipEncapHdr.EntityData.YangName = "ip-encap-hdr"
    ipEncapHdr.EntityData.BundleName = "cisco_ios_xr"
    ipEncapHdr.EntityData.ParentYangName = "spd-ipencap"
    ipEncapHdr.EntityData.SegmentPath = "ip-encap-hdr"
    ipEncapHdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipEncapHdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipEncapHdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipEncapHdr.EntityData.Children = types.NewOrderedMap()
    ipEncapHdr.EntityData.Leafs = types.NewOrderedMap()
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdr-type", types.YLeaf{"IpEncapHdrType", ipEncapHdr.IpEncapHdrType})
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdrp", types.YLeaf{"IpEncapHdrp", ipEncapHdr.IpEncapHdrp})
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdr-dyn", types.YLeaf{"IpEncapHdrDyn", ipEncapHdr.IpEncapHdrDyn})

    ipEncapHdr.EntityData.YListKeys = []string {}

    return &(ipEncapHdr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath
// mpls info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LocalLable. The type is interface{} with range: 0..4294967295.
    LocalLable interface{}

    // RecursiveFwdChain. The type is bool.
    RecursiveFwdChain interface{}

    // NumberOfIGPPaths. The type is interface{} with range: 0..4294967295.
    NumberOfIgpPaths interface{}

    // RemoteBackupPath. The type is bool.
    RemoteBackup interface{}

    // Recursive Label(s). The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack.
    RecursiveLblStack []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack

    // igp label stack array. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray.
    IgpLabelStackArray []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetEntityData() *types.CommonEntityData {
    mplsInformationForPath.EntityData.YFilter = mplsInformationForPath.YFilter
    mplsInformationForPath.EntityData.YangName = "mpls-information-for-path"
    mplsInformationForPath.EntityData.BundleName = "cisco_ios_xr"
    mplsInformationForPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    mplsInformationForPath.EntityData.SegmentPath = "mpls-information-for-path"
    mplsInformationForPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsInformationForPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsInformationForPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsInformationForPath.EntityData.Children = types.NewOrderedMap()
    mplsInformationForPath.EntityData.Children.Append("recursive-lbl-stack", types.YChild{"RecursiveLblStack", nil})
    for i := range mplsInformationForPath.RecursiveLblStack {
        mplsInformationForPath.EntityData.Children.Append(types.GetSegmentPath(mplsInformationForPath.RecursiveLblStack[i]), types.YChild{"RecursiveLblStack", mplsInformationForPath.RecursiveLblStack[i]})
    }
    mplsInformationForPath.EntityData.Children.Append("igp-label-stack-array", types.YChild{"IgpLabelStackArray", nil})
    for i := range mplsInformationForPath.IgpLabelStackArray {
        mplsInformationForPath.EntityData.Children.Append(types.GetSegmentPath(mplsInformationForPath.IgpLabelStackArray[i]), types.YChild{"IgpLabelStackArray", mplsInformationForPath.IgpLabelStackArray[i]})
    }
    mplsInformationForPath.EntityData.Leafs = types.NewOrderedMap()
    mplsInformationForPath.EntityData.Leafs.Append("local-lable", types.YLeaf{"LocalLable", mplsInformationForPath.LocalLable})
    mplsInformationForPath.EntityData.Leafs.Append("recursive-fwd-chain", types.YLeaf{"RecursiveFwdChain", mplsInformationForPath.RecursiveFwdChain})
    mplsInformationForPath.EntityData.Leafs.Append("number-of-igp-paths", types.YLeaf{"NumberOfIgpPaths", mplsInformationForPath.NumberOfIgpPaths})
    mplsInformationForPath.EntityData.Leafs.Append("remote-backup", types.YLeaf{"RemoteBackup", mplsInformationForPath.RemoteBackup})

    mplsInformationForPath.EntityData.YListKeys = []string {}

    return &(mplsInformationForPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack
// Recursive Label(s)
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetEntityData() *types.CommonEntityData {
    recursiveLblStack.EntityData.YFilter = recursiveLblStack.YFilter
    recursiveLblStack.EntityData.YangName = "recursive-lbl-stack"
    recursiveLblStack.EntityData.BundleName = "cisco_ios_xr"
    recursiveLblStack.EntityData.ParentYangName = "mpls-information-for-path"
    recursiveLblStack.EntityData.SegmentPath = "recursive-lbl-stack"
    recursiveLblStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recursiveLblStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recursiveLblStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recursiveLblStack.EntityData.Children = types.NewOrderedMap()
    recursiveLblStack.EntityData.Leafs = types.NewOrderedMap()
    recursiveLblStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", recursiveLblStack.Entry})

    recursiveLblStack.EntityData.YListKeys = []string {}

    return &(recursiveLblStack.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
// igp label stack array
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NumberOfLabels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}

    // OutInterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // NHAddress. The type is string with length: 0..52.
    NhAddress interface{}

    // lstack. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack.
    Lstack []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetEntityData() *types.CommonEntityData {
    igpLabelStackArray.EntityData.YFilter = igpLabelStackArray.YFilter
    igpLabelStackArray.EntityData.YangName = "igp-label-stack-array"
    igpLabelStackArray.EntityData.BundleName = "cisco_ios_xr"
    igpLabelStackArray.EntityData.ParentYangName = "mpls-information-for-path"
    igpLabelStackArray.EntityData.SegmentPath = "igp-label-stack-array"
    igpLabelStackArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igpLabelStackArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igpLabelStackArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igpLabelStackArray.EntityData.Children = types.NewOrderedMap()
    igpLabelStackArray.EntityData.Children.Append("lstack", types.YChild{"Lstack", nil})
    for i := range igpLabelStackArray.Lstack {
        igpLabelStackArray.EntityData.Children.Append(types.GetSegmentPath(igpLabelStackArray.Lstack[i]), types.YChild{"Lstack", igpLabelStackArray.Lstack[i]})
    }
    igpLabelStackArray.EntityData.Leafs = types.NewOrderedMap()
    igpLabelStackArray.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", igpLabelStackArray.NumberOfLabels})
    igpLabelStackArray.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", igpLabelStackArray.OutInterface})
    igpLabelStackArray.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", igpLabelStackArray.NhAddress})

    igpLabelStackArray.EntityData.YListKeys = []string {}

    return &(igpLabelStackArray.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
// lstack
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetEntityData() *types.CommonEntityData {
    lstack.EntityData.YFilter = lstack.YFilter
    lstack.EntityData.YangName = "lstack"
    lstack.EntityData.BundleName = "cisco_ios_xr"
    lstack.EntityData.ParentYangName = "igp-label-stack-array"
    lstack.EntityData.SegmentPath = "lstack"
    lstack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lstack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lstack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lstack.EntityData.Children = types.NewOrderedMap()
    lstack.EntityData.Leafs = types.NewOrderedMap()
    lstack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lstack.Entry})

    lstack.EntityData.YListKeys = []string {}

    return &(lstack.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_Srv6InformationForPath
// SRv6 info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_Srv6InformationForPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SRv6 SID list. The type is string.
    Srv6SidList interface{}
}

func (srv6InformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_Srv6InformationForPath) GetEntityData() *types.CommonEntityData {
    srv6InformationForPath.EntityData.YFilter = srv6InformationForPath.YFilter
    srv6InformationForPath.EntityData.YangName = "srv6-information-for-path"
    srv6InformationForPath.EntityData.BundleName = "cisco_ios_xr"
    srv6InformationForPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    srv6InformationForPath.EntityData.SegmentPath = "srv6-information-for-path"
    srv6InformationForPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srv6InformationForPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srv6InformationForPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srv6InformationForPath.EntityData.Children = types.NewOrderedMap()
    srv6InformationForPath.EntityData.Leafs = types.NewOrderedMap()
    srv6InformationForPath.EntityData.Leafs.Append("srv6-sid-list", types.YLeaf{"Srv6SidList", srv6InformationForPath.Srv6SidList})

    srv6InformationForPath.EntityData.YListKeys = []string {}

    return &(srv6InformationForPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject
// Leaf Extension Object List
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibShTblFibExtBag.
    Type interface{}

    // sfecd le.
    SfecdLe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetEntityData() *types.CommonEntityData {
    extensionObject.EntityData.YFilter = extensionObject.YFilter
    extensionObject.EntityData.YangName = "extension-object"
    extensionObject.EntityData.BundleName = "cisco_ios_xr"
    extensionObject.EntityData.ParentYangName = "ip-prefix-brief"
    extensionObject.EntityData.SegmentPath = "extension-object"
    extensionObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extensionObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extensionObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extensionObject.EntityData.Children = types.NewOrderedMap()
    extensionObject.EntityData.Children.Append("sfecd-le", types.YChild{"SfecdLe", &extensionObject.SfecdLe})
    extensionObject.EntityData.Leafs = types.NewOrderedMap()
    extensionObject.EntityData.Leafs.Append("type", types.YLeaf{"Type", extensionObject.Type})

    extensionObject.EntityData.YListKeys = []string {}

    return &(extensionObject.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe
// sfecd le
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Context Label Exist. The type is bool.
    ContextLabelFlag interface{}

    // Context Label. The type is interface{} with range: 0..4294967295.
    ContextLabel interface{}
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetEntityData() *types.CommonEntityData {
    sfecdLe.EntityData.YFilter = sfecdLe.YFilter
    sfecdLe.EntityData.YangName = "sfecd-le"
    sfecdLe.EntityData.BundleName = "cisco_ios_xr"
    sfecdLe.EntityData.ParentYangName = "extension-object"
    sfecdLe.EntityData.SegmentPath = "sfecd-le"
    sfecdLe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfecdLe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfecdLe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfecdLe.EntityData.Children = types.NewOrderedMap()
    sfecdLe.EntityData.Leafs = types.NewOrderedMap()
    sfecdLe.EntityData.Leafs.Append("context-label-flag", types.YLeaf{"ContextLabelFlag", sfecdLe.ContextLabelFlag})
    sfecdLe.EntityData.Leafs.Append("context-label", types.YLeaf{"ContextLabel", sfecdLe.ContextLabel})

    sfecdLe.EntityData.YListKeys = []string {}

    return &(sfecdLe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed hardware ingress info for remote NHInfo table.
    NhInfoRemoteDetailHardwareIngresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses

    // Local (non-remote) nhinfo.
    NhInfoLocalDetailHardwareIngresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses

    // Special nhinfo.
    NhInfoSpecialDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoDetailHardwareIngress.EntityData.YFilter = nhInfoDetailHardwareIngress.YFilter
    nhInfoDetailHardwareIngress.EntityData.YangName = "nh-info-detail-hardware-ingress"
    nhInfoDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoDetailHardwareIngress.EntityData.ParentYangName = "vrf"
    nhInfoDetailHardwareIngress.EntityData.SegmentPath = "nh-info-detail-hardware-ingress"
    nhInfoDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoDetailHardwareIngress.EntityData.Children.Append("nh-info-remote-detail-hardware-ingresses", types.YChild{"NhInfoRemoteDetailHardwareIngresses", &nhInfoDetailHardwareIngress.NhInfoRemoteDetailHardwareIngresses})
    nhInfoDetailHardwareIngress.EntityData.Children.Append("nh-info-local-detail-hardware-ingresses", types.YChild{"NhInfoLocalDetailHardwareIngresses", &nhInfoDetailHardwareIngress.NhInfoLocalDetailHardwareIngresses})
    nhInfoDetailHardwareIngress.EntityData.Children.Append("nh-info-special-detail-hardware-ingress", types.YChild{"NhInfoSpecialDetailHardwareIngress", &nhInfoDetailHardwareIngress.NhInfoSpecialDetailHardwareIngress})
    nhInfoDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()

    nhInfoDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses
// Detailed hardware ingress info for remote
// NHInfo table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware ingress info for remote NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress.
    NhInfoRemoteDetailHardwareIngress []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteDetailHardwareIngresses.EntityData.YFilter = nhInfoRemoteDetailHardwareIngresses.YFilter
    nhInfoRemoteDetailHardwareIngresses.EntityData.YangName = "nh-info-remote-detail-hardware-ingresses"
    nhInfoRemoteDetailHardwareIngresses.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteDetailHardwareIngresses.EntityData.ParentYangName = "nh-info-detail-hardware-ingress"
    nhInfoRemoteDetailHardwareIngresses.EntityData.SegmentPath = "nh-info-remote-detail-hardware-ingresses"
    nhInfoRemoteDetailHardwareIngresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteDetailHardwareIngresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteDetailHardwareIngresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteDetailHardwareIngresses.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteDetailHardwareIngresses.EntityData.Children.Append("nh-info-remote-detail-hardware-ingress", types.YChild{"NhInfoRemoteDetailHardwareIngress", nil})
    for i := range nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress {
        nhInfoRemoteDetailHardwareIngresses.EntityData.Children.Append(types.GetSegmentPath(nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress[i]), types.YChild{"NhInfoRemoteDetailHardwareIngress", nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress[i]})
    }
    nhInfoRemoteDetailHardwareIngresses.EntityData.Leafs = types.NewOrderedMap()

    nhInfoRemoteDetailHardwareIngresses.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteDetailHardwareIngresses.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress
// Detail hardware ingress info for remote
// NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteDetailHardwareIngress.EntityData.YFilter = nhInfoRemoteDetailHardwareIngress.YFilter
    nhInfoRemoteDetailHardwareIngress.EntityData.YangName = "nh-info-remote-detail-hardware-ingress"
    nhInfoRemoteDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteDetailHardwareIngress.EntityData.ParentYangName = "nh-info-remote-detail-hardware-ingresses"
    nhInfoRemoteDetailHardwareIngress.EntityData.SegmentPath = "nh-info-remote-detail-hardware-ingress"
    nhInfoRemoteDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteDetailHardwareIngress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoRemoteDetailHardwareIngress.SiPwhe})
    nhInfoRemoteDetailHardwareIngress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoRemoteDetailHardwareIngress.NhInfoExtension})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoRemoteDetailHardwareIngress.NhInterfaceName})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoRemoteDetailHardwareIngress.NhAddress})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoRemoteDetailHardwareIngress.SiLinkProto})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoRemoteDetailHardwareIngress.SiNhinfo})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoRemoteDetailHardwareIngress.SiNhtype})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoRemoteDetailHardwareIngress.SiIfh})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoRemoteDetailHardwareIngress.SiPfiInterfaceType})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoRemoteDetailHardwareIngress.SiAdjPtr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoRemoteDetailHardwareIngress.SiAdjPresent})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoRemoteDetailHardwareIngress.SiSpecialType})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoRemoteDetailHardwareIngress.SiRefcount})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoRemoteDetailHardwareIngress.SiFlags})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoRemoteDetailHardwareIngress.SiAdjIf})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoRemoteDetailHardwareIngress.SiExtPfx})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoRemoteDetailHardwareIngress.SiExtPfxLen})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoRemoteDetailHardwareIngress.SiExtPfxProto})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoRemoteDetailHardwareIngress.SiAdjAddress})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoRemoteDetailHardwareIngress.SiAdjAddrlen})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoRemoteDetailHardwareIngress.SiAdjAddrProto})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoRemoteDetailHardwareIngress.SiAdjRwLen})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoRemoteDetailHardwareIngress.SiAdjRw})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoRemoteDetailHardwareIngress.SiDepNhinfoType})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoRemoteDetailHardwareIngress.SiDepNhinfo})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoRemoteDetailHardwareIngress.SiDepNhinfoIfh})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoRemoteDetailHardwareIngress.SiBkupFrr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoRemoteDetailHardwareIngress.SiProtectFrr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoRemoteDetailHardwareIngress.SiBkupNhinfo})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoRemoteDetailHardwareIngress.SiBkupIfh})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoRemoteDetailHardwareIngress.SiBkupAddr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoRemoteDetailHardwareIngress.SiBkupAddrlen})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoRemoteDetailHardwareIngress.SiBkupAddrProto})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoRemoteDetailHardwareIngress.SiFrrActive})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoRemoteDetailHardwareIngress.SiAttrIsExtMgd})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoRemoteDetailHardwareIngress.SiAttrIsIncomp})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoRemoteDetailHardwareIngress.SiAttrIsTunnel})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoRemoteDetailHardwareIngress.SiAttrIsTunnelSrte})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoRemoteDetailHardwareIngress.SiAttrIsGreTunnel})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoRemoteDetailHardwareIngress.SiGreTi})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoRemoteDetailHardwareIngress.SiGreTiFlags})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoRemoteDetailHardwareIngress.SiGreTiRefcnt})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoRemoteDetailHardwareIngress.SiGreTosPropagate})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoRemoteDetailHardwareIngress.SiHardware})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoRemoteDetailHardwareIngress.SiNhinfoPtr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoRemoteDetailHardwareIngress.SiFnbIdbPtr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoRemoteDetailHardwareIngress.SiAncIfh})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoRemoteDetailHardwareIngress.SiGreTiResolvingLeafp})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoRemoteDetailHardwareIngress.SiGreDestAddr})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoRemoteDetailHardwareIngress.SiNhid})
    nhInfoRemoteDetailHardwareIngress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoRemoteDetailHardwareIngress.SiUpdTs})

    nhInfoRemoteDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-remote-detail-hardware-ingress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-remote-detail-hardware-ingress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware ingress NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress.
    NhInfoLocalDetailHardwareIngress []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetEntityData() *types.CommonEntityData {
    nhInfoLocalDetailHardwareIngresses.EntityData.YFilter = nhInfoLocalDetailHardwareIngresses.YFilter
    nhInfoLocalDetailHardwareIngresses.EntityData.YangName = "nh-info-local-detail-hardware-ingresses"
    nhInfoLocalDetailHardwareIngresses.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalDetailHardwareIngresses.EntityData.ParentYangName = "nh-info-detail-hardware-ingress"
    nhInfoLocalDetailHardwareIngresses.EntityData.SegmentPath = "nh-info-local-detail-hardware-ingresses"
    nhInfoLocalDetailHardwareIngresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalDetailHardwareIngresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalDetailHardwareIngresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalDetailHardwareIngresses.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalDetailHardwareIngresses.EntityData.Children.Append("nh-info-local-detail-hardware-ingress", types.YChild{"NhInfoLocalDetailHardwareIngress", nil})
    for i := range nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress {
        nhInfoLocalDetailHardwareIngresses.EntityData.Children.Append(types.GetSegmentPath(nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress[i]), types.YChild{"NhInfoLocalDetailHardwareIngress", nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress[i]})
    }
    nhInfoLocalDetailHardwareIngresses.EntityData.Leafs = types.NewOrderedMap()

    nhInfoLocalDetailHardwareIngresses.EntityData.YListKeys = []string {}

    return &(nhInfoLocalDetailHardwareIngresses.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress
// Detail hardware ingress NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoLocalDetailHardwareIngress.EntityData.YFilter = nhInfoLocalDetailHardwareIngress.YFilter
    nhInfoLocalDetailHardwareIngress.EntityData.YangName = "nh-info-local-detail-hardware-ingress"
    nhInfoLocalDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalDetailHardwareIngress.EntityData.ParentYangName = "nh-info-local-detail-hardware-ingresses"
    nhInfoLocalDetailHardwareIngress.EntityData.SegmentPath = "nh-info-local-detail-hardware-ingress"
    nhInfoLocalDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalDetailHardwareIngress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoLocalDetailHardwareIngress.SiPwhe})
    nhInfoLocalDetailHardwareIngress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoLocalDetailHardwareIngress.NhInfoExtension})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoLocalDetailHardwareIngress.NhInterfaceName})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoLocalDetailHardwareIngress.NhAddress})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoLocalDetailHardwareIngress.SiLinkProto})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoLocalDetailHardwareIngress.SiNhinfo})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoLocalDetailHardwareIngress.SiNhtype})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoLocalDetailHardwareIngress.SiIfh})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoLocalDetailHardwareIngress.SiPfiInterfaceType})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoLocalDetailHardwareIngress.SiAdjPtr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoLocalDetailHardwareIngress.SiAdjPresent})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoLocalDetailHardwareIngress.SiSpecialType})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoLocalDetailHardwareIngress.SiRefcount})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoLocalDetailHardwareIngress.SiFlags})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoLocalDetailHardwareIngress.SiAdjIf})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoLocalDetailHardwareIngress.SiExtPfx})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoLocalDetailHardwareIngress.SiExtPfxLen})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoLocalDetailHardwareIngress.SiExtPfxProto})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoLocalDetailHardwareIngress.SiAdjAddress})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoLocalDetailHardwareIngress.SiAdjAddrlen})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoLocalDetailHardwareIngress.SiAdjAddrProto})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoLocalDetailHardwareIngress.SiAdjRwLen})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoLocalDetailHardwareIngress.SiAdjRw})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoLocalDetailHardwareIngress.SiDepNhinfoType})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoLocalDetailHardwareIngress.SiDepNhinfo})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoLocalDetailHardwareIngress.SiDepNhinfoIfh})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoLocalDetailHardwareIngress.SiBkupFrr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoLocalDetailHardwareIngress.SiProtectFrr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoLocalDetailHardwareIngress.SiBkupNhinfo})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoLocalDetailHardwareIngress.SiBkupIfh})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoLocalDetailHardwareIngress.SiBkupAddr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoLocalDetailHardwareIngress.SiBkupAddrlen})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoLocalDetailHardwareIngress.SiBkupAddrProto})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoLocalDetailHardwareIngress.SiFrrActive})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoLocalDetailHardwareIngress.SiAttrIsExtMgd})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoLocalDetailHardwareIngress.SiAttrIsIncomp})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoLocalDetailHardwareIngress.SiAttrIsTunnel})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoLocalDetailHardwareIngress.SiAttrIsTunnelSrte})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoLocalDetailHardwareIngress.SiAttrIsGreTunnel})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoLocalDetailHardwareIngress.SiGreTi})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoLocalDetailHardwareIngress.SiGreTiFlags})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoLocalDetailHardwareIngress.SiGreTiRefcnt})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoLocalDetailHardwareIngress.SiGreTosPropagate})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoLocalDetailHardwareIngress.SiHardware})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoLocalDetailHardwareIngress.SiNhinfoPtr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoLocalDetailHardwareIngress.SiFnbIdbPtr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoLocalDetailHardwareIngress.SiAncIfh})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoLocalDetailHardwareIngress.SiGreTiResolvingLeafp})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoLocalDetailHardwareIngress.SiGreDestAddr})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoLocalDetailHardwareIngress.SiNhid})
    nhInfoLocalDetailHardwareIngress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoLocalDetailHardwareIngress.SiUpdTs})

    nhInfoLocalDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoLocalDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-local-detail-hardware-ingress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-local-detail-hardware-ingress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress
// Special nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail hardware ingress info for special-punt NHInfo entry.
    NhInfoSpecialPuntDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress

    // Detail hardware ingress info for special-null NHInfo entry.
    NhInfoSpecialNullDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress

    // Detail hardware ingress info for special-drop NHInfo entry.
    NhInfoSpecialDropDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress

    // Detail hardware ingress info for special-discard NHInfo entry.
    NhInfoSpecialDiscardDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDetailHardwareIngress.EntityData.YFilter = nhInfoSpecialDetailHardwareIngress.YFilter
    nhInfoSpecialDetailHardwareIngress.EntityData.YangName = "nh-info-special-detail-hardware-ingress"
    nhInfoSpecialDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDetailHardwareIngress.EntityData.ParentYangName = "nh-info-detail-hardware-ingress"
    nhInfoSpecialDetailHardwareIngress.EntityData.SegmentPath = "nh-info-special-detail-hardware-ingress"
    nhInfoSpecialDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDetailHardwareIngress.EntityData.Children.Append("nh-info-special-punt-detail-hardware-ingress", types.YChild{"NhInfoSpecialPuntDetailHardwareIngress", &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialPuntDetailHardwareIngress})
    nhInfoSpecialDetailHardwareIngress.EntityData.Children.Append("nh-info-special-null-detail-hardware-ingress", types.YChild{"NhInfoSpecialNullDetailHardwareIngress", &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialNullDetailHardwareIngress})
    nhInfoSpecialDetailHardwareIngress.EntityData.Children.Append("nh-info-special-drop-detail-hardware-ingress", types.YChild{"NhInfoSpecialDropDetailHardwareIngress", &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialDropDetailHardwareIngress})
    nhInfoSpecialDetailHardwareIngress.EntityData.Children.Append("nh-info-special-discard-detail-hardware-ingress", types.YChild{"NhInfoSpecialDiscardDetailHardwareIngress", &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialDiscardDetailHardwareIngress})
    nhInfoSpecialDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()

    nhInfoSpecialDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress
// Detail hardware ingress info for
// special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.YFilter = nhInfoSpecialPuntDetailHardwareIngress.YFilter
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.YangName = "nh-info-special-punt-detail-hardware-ingress"
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.ParentYangName = "nh-info-special-detail-hardware-ingress"
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.SegmentPath = "nh-info-special-punt-detail-hardware-ingress"
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialPuntDetailHardwareIngress.SiPwhe})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialPuntDetailHardwareIngress.NhInfoExtension})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialPuntDetailHardwareIngress.SiLinkProto})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialPuntDetailHardwareIngress.SiNhinfo})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialPuntDetailHardwareIngress.SiNhtype})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialPuntDetailHardwareIngress.SiIfh})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialPuntDetailHardwareIngress.SiPfiInterfaceType})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialPuntDetailHardwareIngress.SiAdjPtr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialPuntDetailHardwareIngress.SiAdjPresent})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialPuntDetailHardwareIngress.SiSpecialType})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialPuntDetailHardwareIngress.SiRefcount})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialPuntDetailHardwareIngress.SiFlags})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialPuntDetailHardwareIngress.SiAdjIf})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialPuntDetailHardwareIngress.SiExtPfx})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialPuntDetailHardwareIngress.SiExtPfxLen})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialPuntDetailHardwareIngress.SiExtPfxProto})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialPuntDetailHardwareIngress.SiAdjAddress})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialPuntDetailHardwareIngress.SiAdjAddrlen})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialPuntDetailHardwareIngress.SiAdjAddrProto})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialPuntDetailHardwareIngress.SiAdjRwLen})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialPuntDetailHardwareIngress.SiAdjRw})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialPuntDetailHardwareIngress.SiDepNhinfoType})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialPuntDetailHardwareIngress.SiDepNhinfo})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialPuntDetailHardwareIngress.SiDepNhinfoIfh})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialPuntDetailHardwareIngress.SiBkupFrr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialPuntDetailHardwareIngress.SiProtectFrr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialPuntDetailHardwareIngress.SiBkupNhinfo})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialPuntDetailHardwareIngress.SiBkupIfh})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialPuntDetailHardwareIngress.SiBkupAddr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialPuntDetailHardwareIngress.SiBkupAddrlen})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialPuntDetailHardwareIngress.SiBkupAddrProto})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialPuntDetailHardwareIngress.SiFrrActive})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsExtMgd})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsIncomp})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsTunnel})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsTunnelSrte})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsGreTunnel})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialPuntDetailHardwareIngress.SiGreTi})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialPuntDetailHardwareIngress.SiGreTiFlags})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialPuntDetailHardwareIngress.SiGreTiRefcnt})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialPuntDetailHardwareIngress.SiGreTosPropagate})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialPuntDetailHardwareIngress.SiHardware})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialPuntDetailHardwareIngress.SiNhinfoPtr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialPuntDetailHardwareIngress.SiFnbIdbPtr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialPuntDetailHardwareIngress.SiAncIfh})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialPuntDetailHardwareIngress.SiGreTiResolvingLeafp})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialPuntDetailHardwareIngress.SiGreDestAddr})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialPuntDetailHardwareIngress.SiNhid})
    nhInfoSpecialPuntDetailHardwareIngress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialPuntDetailHardwareIngress.SiUpdTs})

    nhInfoSpecialPuntDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialPuntDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-punt-detail-hardware-ingress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-punt-detail-hardware-ingress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress
// Detail hardware ingress info for
// special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialNullDetailHardwareIngress.EntityData.YFilter = nhInfoSpecialNullDetailHardwareIngress.YFilter
    nhInfoSpecialNullDetailHardwareIngress.EntityData.YangName = "nh-info-special-null-detail-hardware-ingress"
    nhInfoSpecialNullDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialNullDetailHardwareIngress.EntityData.ParentYangName = "nh-info-special-detail-hardware-ingress"
    nhInfoSpecialNullDetailHardwareIngress.EntityData.SegmentPath = "nh-info-special-null-detail-hardware-ingress"
    nhInfoSpecialNullDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialNullDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialNullDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialNullDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialNullDetailHardwareIngress.SiPwhe})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialNullDetailHardwareIngress.NhInfoExtension})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialNullDetailHardwareIngress.SiLinkProto})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialNullDetailHardwareIngress.SiNhinfo})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialNullDetailHardwareIngress.SiNhtype})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialNullDetailHardwareIngress.SiIfh})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialNullDetailHardwareIngress.SiPfiInterfaceType})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialNullDetailHardwareIngress.SiAdjPtr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialNullDetailHardwareIngress.SiAdjPresent})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialNullDetailHardwareIngress.SiSpecialType})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialNullDetailHardwareIngress.SiRefcount})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialNullDetailHardwareIngress.SiFlags})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialNullDetailHardwareIngress.SiAdjIf})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialNullDetailHardwareIngress.SiExtPfx})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialNullDetailHardwareIngress.SiExtPfxLen})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialNullDetailHardwareIngress.SiExtPfxProto})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialNullDetailHardwareIngress.SiAdjAddress})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialNullDetailHardwareIngress.SiAdjAddrlen})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialNullDetailHardwareIngress.SiAdjAddrProto})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialNullDetailHardwareIngress.SiAdjRwLen})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialNullDetailHardwareIngress.SiAdjRw})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialNullDetailHardwareIngress.SiDepNhinfoType})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialNullDetailHardwareIngress.SiDepNhinfo})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialNullDetailHardwareIngress.SiDepNhinfoIfh})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialNullDetailHardwareIngress.SiBkupFrr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialNullDetailHardwareIngress.SiProtectFrr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialNullDetailHardwareIngress.SiBkupNhinfo})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialNullDetailHardwareIngress.SiBkupIfh})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialNullDetailHardwareIngress.SiBkupAddr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialNullDetailHardwareIngress.SiBkupAddrlen})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialNullDetailHardwareIngress.SiBkupAddrProto})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialNullDetailHardwareIngress.SiFrrActive})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialNullDetailHardwareIngress.SiAttrIsExtMgd})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialNullDetailHardwareIngress.SiAttrIsIncomp})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialNullDetailHardwareIngress.SiAttrIsTunnel})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialNullDetailHardwareIngress.SiAttrIsTunnelSrte})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialNullDetailHardwareIngress.SiAttrIsGreTunnel})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialNullDetailHardwareIngress.SiGreTi})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialNullDetailHardwareIngress.SiGreTiFlags})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialNullDetailHardwareIngress.SiGreTiRefcnt})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialNullDetailHardwareIngress.SiGreTosPropagate})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialNullDetailHardwareIngress.SiHardware})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialNullDetailHardwareIngress.SiNhinfoPtr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialNullDetailHardwareIngress.SiFnbIdbPtr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialNullDetailHardwareIngress.SiAncIfh})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialNullDetailHardwareIngress.SiGreTiResolvingLeafp})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialNullDetailHardwareIngress.SiGreDestAddr})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialNullDetailHardwareIngress.SiNhid})
    nhInfoSpecialNullDetailHardwareIngress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialNullDetailHardwareIngress.SiUpdTs})

    nhInfoSpecialNullDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialNullDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-null-detail-hardware-ingress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-null-detail-hardware-ingress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress
// Detail hardware ingress info for
// special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDropDetailHardwareIngress.EntityData.YFilter = nhInfoSpecialDropDetailHardwareIngress.YFilter
    nhInfoSpecialDropDetailHardwareIngress.EntityData.YangName = "nh-info-special-drop-detail-hardware-ingress"
    nhInfoSpecialDropDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDropDetailHardwareIngress.EntityData.ParentYangName = "nh-info-special-detail-hardware-ingress"
    nhInfoSpecialDropDetailHardwareIngress.EntityData.SegmentPath = "nh-info-special-drop-detail-hardware-ingress"
    nhInfoSpecialDropDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDropDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDropDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDropDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDropDetailHardwareIngress.SiPwhe})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDropDetailHardwareIngress.NhInfoExtension})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDropDetailHardwareIngress.SiLinkProto})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDropDetailHardwareIngress.SiNhinfo})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDropDetailHardwareIngress.SiNhtype})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDropDetailHardwareIngress.SiIfh})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDropDetailHardwareIngress.SiPfiInterfaceType})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDropDetailHardwareIngress.SiAdjPtr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDropDetailHardwareIngress.SiAdjPresent})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDropDetailHardwareIngress.SiSpecialType})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDropDetailHardwareIngress.SiRefcount})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDropDetailHardwareIngress.SiFlags})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDropDetailHardwareIngress.SiAdjIf})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDropDetailHardwareIngress.SiExtPfx})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDropDetailHardwareIngress.SiExtPfxLen})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDropDetailHardwareIngress.SiExtPfxProto})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDropDetailHardwareIngress.SiAdjAddress})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDropDetailHardwareIngress.SiAdjAddrlen})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDropDetailHardwareIngress.SiAdjAddrProto})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDropDetailHardwareIngress.SiAdjRwLen})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDropDetailHardwareIngress.SiAdjRw})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDropDetailHardwareIngress.SiDepNhinfoType})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDropDetailHardwareIngress.SiDepNhinfo})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDropDetailHardwareIngress.SiDepNhinfoIfh})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDropDetailHardwareIngress.SiBkupFrr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDropDetailHardwareIngress.SiProtectFrr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDropDetailHardwareIngress.SiBkupNhinfo})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDropDetailHardwareIngress.SiBkupIfh})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDropDetailHardwareIngress.SiBkupAddr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDropDetailHardwareIngress.SiBkupAddrlen})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDropDetailHardwareIngress.SiBkupAddrProto})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDropDetailHardwareIngress.SiFrrActive})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDropDetailHardwareIngress.SiAttrIsExtMgd})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDropDetailHardwareIngress.SiAttrIsIncomp})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDropDetailHardwareIngress.SiAttrIsTunnel})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDropDetailHardwareIngress.SiAttrIsTunnelSrte})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDropDetailHardwareIngress.SiAttrIsGreTunnel})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDropDetailHardwareIngress.SiGreTi})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDropDetailHardwareIngress.SiGreTiFlags})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDropDetailHardwareIngress.SiGreTiRefcnt})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDropDetailHardwareIngress.SiGreTosPropagate})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDropDetailHardwareIngress.SiHardware})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDropDetailHardwareIngress.SiNhinfoPtr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDropDetailHardwareIngress.SiFnbIdbPtr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDropDetailHardwareIngress.SiAncIfh})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDropDetailHardwareIngress.SiGreTiResolvingLeafp})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDropDetailHardwareIngress.SiGreDestAddr})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDropDetailHardwareIngress.SiNhid})
    nhInfoSpecialDropDetailHardwareIngress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDropDetailHardwareIngress.SiUpdTs})

    nhInfoSpecialDropDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDropDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-drop-detail-hardware-ingress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-drop-detail-hardware-ingress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress
// Detail hardware ingress info for
// special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.YFilter = nhInfoSpecialDiscardDetailHardwareIngress.YFilter
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.YangName = "nh-info-special-discard-detail-hardware-ingress"
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.ParentYangName = "nh-info-special-detail-hardware-ingress"
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.SegmentPath = "nh-info-special-discard-detail-hardware-ingress"
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDiscardDetailHardwareIngress.SiPwhe})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDiscardDetailHardwareIngress.NhInfoExtension})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDiscardDetailHardwareIngress.SiLinkProto})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDiscardDetailHardwareIngress.SiNhinfo})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDiscardDetailHardwareIngress.SiNhtype})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDiscardDetailHardwareIngress.SiIfh})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDiscardDetailHardwareIngress.SiPfiInterfaceType})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjPtr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjPresent})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDiscardDetailHardwareIngress.SiSpecialType})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDiscardDetailHardwareIngress.SiRefcount})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDiscardDetailHardwareIngress.SiFlags})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjIf})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDiscardDetailHardwareIngress.SiExtPfx})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDiscardDetailHardwareIngress.SiExtPfxLen})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDiscardDetailHardwareIngress.SiExtPfxProto})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjAddress})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjAddrlen})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjAddrProto})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjRwLen})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDiscardDetailHardwareIngress.SiAdjRw})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDiscardDetailHardwareIngress.SiDepNhinfoType})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDiscardDetailHardwareIngress.SiDepNhinfo})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDiscardDetailHardwareIngress.SiDepNhinfoIfh})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDiscardDetailHardwareIngress.SiBkupFrr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDiscardDetailHardwareIngress.SiProtectFrr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDiscardDetailHardwareIngress.SiBkupNhinfo})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDiscardDetailHardwareIngress.SiBkupIfh})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDiscardDetailHardwareIngress.SiBkupAddr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDiscardDetailHardwareIngress.SiBkupAddrlen})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDiscardDetailHardwareIngress.SiBkupAddrProto})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDiscardDetailHardwareIngress.SiFrrActive})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsExtMgd})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsIncomp})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsTunnel})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsTunnelSrte})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsGreTunnel})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDiscardDetailHardwareIngress.SiGreTi})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDiscardDetailHardwareIngress.SiGreTiFlags})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDiscardDetailHardwareIngress.SiGreTiRefcnt})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDiscardDetailHardwareIngress.SiGreTosPropagate})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDiscardDetailHardwareIngress.SiHardware})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDiscardDetailHardwareIngress.SiNhinfoPtr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDiscardDetailHardwareIngress.SiFnbIdbPtr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDiscardDetailHardwareIngress.SiAncIfh})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDiscardDetailHardwareIngress.SiGreTiResolvingLeafp})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDiscardDetailHardwareIngress.SiGreDestAddr})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDiscardDetailHardwareIngress.SiNhid})
    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDiscardDetailHardwareIngress.SiUpdTs})

    nhInfoSpecialDiscardDetailHardwareIngress.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDiscardDetailHardwareIngress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-discard-detail-hardware-ingress"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-discard-detail-hardware-ingress"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Special nhinfo.
    NhInfoSpecialBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief

    // remote nhinfo.
    NhInfoRemoteBriefs Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs

    // Local (non-remote) nhinfo.
    NhInfoLocalBriefs Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetEntityData() *types.CommonEntityData {
    nhInfoBrief.EntityData.YFilter = nhInfoBrief.YFilter
    nhInfoBrief.EntityData.YangName = "nh-info-brief"
    nhInfoBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoBrief.EntityData.ParentYangName = "vrf"
    nhInfoBrief.EntityData.SegmentPath = "nh-info-brief"
    nhInfoBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoBrief.EntityData.Children.Append("nh-info-special-brief", types.YChild{"NhInfoSpecialBrief", &nhInfoBrief.NhInfoSpecialBrief})
    nhInfoBrief.EntityData.Children.Append("nh-info-remote-briefs", types.YChild{"NhInfoRemoteBriefs", &nhInfoBrief.NhInfoRemoteBriefs})
    nhInfoBrief.EntityData.Children.Append("nh-info-local-briefs", types.YChild{"NhInfoLocalBriefs", &nhInfoBrief.NhInfoLocalBriefs})
    nhInfoBrief.EntityData.Leafs = types.NewOrderedMap()

    nhInfoBrief.EntityData.YListKeys = []string {}

    return &(nhInfoBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief
// Special nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief special-discard NHInfo entry.
    NhInfoSpecialDiscardBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief

    // Brief special-null NHInfo entry.
    NhInfoSpecialNullBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief

    // Brief special-punt NHInfo entry.
    NhInfoSpecialPuntBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief

    // Brief special-drop NHInfo entry.
    NhInfoSpecialDropBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialBrief.EntityData.YFilter = nhInfoSpecialBrief.YFilter
    nhInfoSpecialBrief.EntityData.YangName = "nh-info-special-brief"
    nhInfoSpecialBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialBrief.EntityData.ParentYangName = "nh-info-brief"
    nhInfoSpecialBrief.EntityData.SegmentPath = "nh-info-special-brief"
    nhInfoSpecialBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialBrief.EntityData.Children.Append("nh-info-special-discard-brief", types.YChild{"NhInfoSpecialDiscardBrief", &nhInfoSpecialBrief.NhInfoSpecialDiscardBrief})
    nhInfoSpecialBrief.EntityData.Children.Append("nh-info-special-null-brief", types.YChild{"NhInfoSpecialNullBrief", &nhInfoSpecialBrief.NhInfoSpecialNullBrief})
    nhInfoSpecialBrief.EntityData.Children.Append("nh-info-special-punt-brief", types.YChild{"NhInfoSpecialPuntBrief", &nhInfoSpecialBrief.NhInfoSpecialPuntBrief})
    nhInfoSpecialBrief.EntityData.Children.Append("nh-info-special-drop-brief", types.YChild{"NhInfoSpecialDropBrief", &nhInfoSpecialBrief.NhInfoSpecialDropBrief})
    nhInfoSpecialBrief.EntityData.Leafs = types.NewOrderedMap()

    nhInfoSpecialBrief.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief
// Brief special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDiscardBrief.EntityData.YFilter = nhInfoSpecialDiscardBrief.YFilter
    nhInfoSpecialDiscardBrief.EntityData.YangName = "nh-info-special-discard-brief"
    nhInfoSpecialDiscardBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDiscardBrief.EntityData.ParentYangName = "nh-info-special-brief"
    nhInfoSpecialDiscardBrief.EntityData.SegmentPath = "nh-info-special-discard-brief"
    nhInfoSpecialDiscardBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDiscardBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDiscardBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDiscardBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDiscardBrief.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDiscardBrief.SiPwhe})
    nhInfoSpecialDiscardBrief.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDiscardBrief.NhInfoExtension})
    nhInfoSpecialDiscardBrief.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDiscardBrief.SiLinkProto})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDiscardBrief.SiNhinfo})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDiscardBrief.SiNhtype})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDiscardBrief.SiIfh})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDiscardBrief.SiPfiInterfaceType})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDiscardBrief.SiAdjPtr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDiscardBrief.SiAdjPresent})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDiscardBrief.SiSpecialType})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDiscardBrief.SiRefcount})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDiscardBrief.SiFlags})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDiscardBrief.SiAdjIf})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDiscardBrief.SiExtPfx})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDiscardBrief.SiExtPfxLen})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDiscardBrief.SiExtPfxProto})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDiscardBrief.SiAdjAddress})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDiscardBrief.SiAdjAddrlen})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDiscardBrief.SiAdjAddrProto})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDiscardBrief.SiAdjRwLen})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDiscardBrief.SiAdjRw})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDiscardBrief.SiDepNhinfoType})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDiscardBrief.SiDepNhinfo})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDiscardBrief.SiDepNhinfoIfh})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDiscardBrief.SiBkupFrr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDiscardBrief.SiProtectFrr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDiscardBrief.SiBkupNhinfo})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDiscardBrief.SiBkupIfh})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDiscardBrief.SiBkupAddr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDiscardBrief.SiBkupAddrlen})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDiscardBrief.SiBkupAddrProto})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDiscardBrief.SiFrrActive})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDiscardBrief.SiAttrIsExtMgd})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDiscardBrief.SiAttrIsIncomp})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDiscardBrief.SiAttrIsTunnel})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDiscardBrief.SiAttrIsTunnelSrte})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDiscardBrief.SiAttrIsGreTunnel})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDiscardBrief.SiGreTi})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDiscardBrief.SiGreTiFlags})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDiscardBrief.SiGreTiRefcnt})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDiscardBrief.SiGreTosPropagate})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDiscardBrief.SiHardware})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDiscardBrief.SiNhinfoPtr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDiscardBrief.SiFnbIdbPtr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDiscardBrief.SiAncIfh})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDiscardBrief.SiGreTiResolvingLeafp})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDiscardBrief.SiGreDestAddr})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDiscardBrief.SiNhid})
    nhInfoSpecialDiscardBrief.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDiscardBrief.SiUpdTs})

    nhInfoSpecialDiscardBrief.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDiscardBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-discard-brief"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-discard-brief"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief
// Brief special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialNullBrief.EntityData.YFilter = nhInfoSpecialNullBrief.YFilter
    nhInfoSpecialNullBrief.EntityData.YangName = "nh-info-special-null-brief"
    nhInfoSpecialNullBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialNullBrief.EntityData.ParentYangName = "nh-info-special-brief"
    nhInfoSpecialNullBrief.EntityData.SegmentPath = "nh-info-special-null-brief"
    nhInfoSpecialNullBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialNullBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialNullBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialNullBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialNullBrief.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialNullBrief.SiPwhe})
    nhInfoSpecialNullBrief.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialNullBrief.NhInfoExtension})
    nhInfoSpecialNullBrief.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialNullBrief.SiLinkProto})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialNullBrief.SiNhinfo})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialNullBrief.SiNhtype})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialNullBrief.SiIfh})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialNullBrief.SiPfiInterfaceType})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialNullBrief.SiAdjPtr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialNullBrief.SiAdjPresent})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialNullBrief.SiSpecialType})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialNullBrief.SiRefcount})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialNullBrief.SiFlags})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialNullBrief.SiAdjIf})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialNullBrief.SiExtPfx})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialNullBrief.SiExtPfxLen})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialNullBrief.SiExtPfxProto})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialNullBrief.SiAdjAddress})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialNullBrief.SiAdjAddrlen})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialNullBrief.SiAdjAddrProto})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialNullBrief.SiAdjRwLen})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialNullBrief.SiAdjRw})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialNullBrief.SiDepNhinfoType})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialNullBrief.SiDepNhinfo})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialNullBrief.SiDepNhinfoIfh})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialNullBrief.SiBkupFrr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialNullBrief.SiProtectFrr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialNullBrief.SiBkupNhinfo})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialNullBrief.SiBkupIfh})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialNullBrief.SiBkupAddr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialNullBrief.SiBkupAddrlen})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialNullBrief.SiBkupAddrProto})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialNullBrief.SiFrrActive})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialNullBrief.SiAttrIsExtMgd})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialNullBrief.SiAttrIsIncomp})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialNullBrief.SiAttrIsTunnel})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialNullBrief.SiAttrIsTunnelSrte})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialNullBrief.SiAttrIsGreTunnel})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialNullBrief.SiGreTi})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialNullBrief.SiGreTiFlags})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialNullBrief.SiGreTiRefcnt})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialNullBrief.SiGreTosPropagate})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialNullBrief.SiHardware})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialNullBrief.SiNhinfoPtr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialNullBrief.SiFnbIdbPtr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialNullBrief.SiAncIfh})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialNullBrief.SiGreTiResolvingLeafp})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialNullBrief.SiGreDestAddr})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialNullBrief.SiNhid})
    nhInfoSpecialNullBrief.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialNullBrief.SiUpdTs})

    nhInfoSpecialNullBrief.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialNullBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-null-brief"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-null-brief"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief
// Brief special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialPuntBrief.EntityData.YFilter = nhInfoSpecialPuntBrief.YFilter
    nhInfoSpecialPuntBrief.EntityData.YangName = "nh-info-special-punt-brief"
    nhInfoSpecialPuntBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialPuntBrief.EntityData.ParentYangName = "nh-info-special-brief"
    nhInfoSpecialPuntBrief.EntityData.SegmentPath = "nh-info-special-punt-brief"
    nhInfoSpecialPuntBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialPuntBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialPuntBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialPuntBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialPuntBrief.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialPuntBrief.SiPwhe})
    nhInfoSpecialPuntBrief.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialPuntBrief.NhInfoExtension})
    nhInfoSpecialPuntBrief.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialPuntBrief.SiLinkProto})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialPuntBrief.SiNhinfo})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialPuntBrief.SiNhtype})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialPuntBrief.SiIfh})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialPuntBrief.SiPfiInterfaceType})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialPuntBrief.SiAdjPtr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialPuntBrief.SiAdjPresent})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialPuntBrief.SiSpecialType})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialPuntBrief.SiRefcount})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialPuntBrief.SiFlags})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialPuntBrief.SiAdjIf})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialPuntBrief.SiExtPfx})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialPuntBrief.SiExtPfxLen})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialPuntBrief.SiExtPfxProto})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialPuntBrief.SiAdjAddress})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialPuntBrief.SiAdjAddrlen})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialPuntBrief.SiAdjAddrProto})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialPuntBrief.SiAdjRwLen})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialPuntBrief.SiAdjRw})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialPuntBrief.SiDepNhinfoType})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialPuntBrief.SiDepNhinfo})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialPuntBrief.SiDepNhinfoIfh})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialPuntBrief.SiBkupFrr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialPuntBrief.SiProtectFrr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialPuntBrief.SiBkupNhinfo})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialPuntBrief.SiBkupIfh})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialPuntBrief.SiBkupAddr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialPuntBrief.SiBkupAddrlen})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialPuntBrief.SiBkupAddrProto})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialPuntBrief.SiFrrActive})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialPuntBrief.SiAttrIsExtMgd})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialPuntBrief.SiAttrIsIncomp})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialPuntBrief.SiAttrIsTunnel})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialPuntBrief.SiAttrIsTunnelSrte})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialPuntBrief.SiAttrIsGreTunnel})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialPuntBrief.SiGreTi})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialPuntBrief.SiGreTiFlags})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialPuntBrief.SiGreTiRefcnt})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialPuntBrief.SiGreTosPropagate})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialPuntBrief.SiHardware})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialPuntBrief.SiNhinfoPtr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialPuntBrief.SiFnbIdbPtr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialPuntBrief.SiAncIfh})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialPuntBrief.SiGreTiResolvingLeafp})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialPuntBrief.SiGreDestAddr})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialPuntBrief.SiNhid})
    nhInfoSpecialPuntBrief.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialPuntBrief.SiUpdTs})

    nhInfoSpecialPuntBrief.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialPuntBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-punt-brief"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-punt-brief"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief
// Brief special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetEntityData() *types.CommonEntityData {
    nhInfoSpecialDropBrief.EntityData.YFilter = nhInfoSpecialDropBrief.YFilter
    nhInfoSpecialDropBrief.EntityData.YangName = "nh-info-special-drop-brief"
    nhInfoSpecialDropBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoSpecialDropBrief.EntityData.ParentYangName = "nh-info-special-brief"
    nhInfoSpecialDropBrief.EntityData.SegmentPath = "nh-info-special-drop-brief"
    nhInfoSpecialDropBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoSpecialDropBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoSpecialDropBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoSpecialDropBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoSpecialDropBrief.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoSpecialDropBrief.SiPwhe})
    nhInfoSpecialDropBrief.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoSpecialDropBrief.NhInfoExtension})
    nhInfoSpecialDropBrief.EntityData.Leafs = types.NewOrderedMap()
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoSpecialDropBrief.SiLinkProto})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoSpecialDropBrief.SiNhinfo})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoSpecialDropBrief.SiNhtype})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoSpecialDropBrief.SiIfh})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoSpecialDropBrief.SiPfiInterfaceType})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoSpecialDropBrief.SiAdjPtr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoSpecialDropBrief.SiAdjPresent})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoSpecialDropBrief.SiSpecialType})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoSpecialDropBrief.SiRefcount})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoSpecialDropBrief.SiFlags})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoSpecialDropBrief.SiAdjIf})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoSpecialDropBrief.SiExtPfx})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoSpecialDropBrief.SiExtPfxLen})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoSpecialDropBrief.SiExtPfxProto})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoSpecialDropBrief.SiAdjAddress})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoSpecialDropBrief.SiAdjAddrlen})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoSpecialDropBrief.SiAdjAddrProto})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoSpecialDropBrief.SiAdjRwLen})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoSpecialDropBrief.SiAdjRw})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoSpecialDropBrief.SiDepNhinfoType})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoSpecialDropBrief.SiDepNhinfo})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoSpecialDropBrief.SiDepNhinfoIfh})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoSpecialDropBrief.SiBkupFrr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoSpecialDropBrief.SiProtectFrr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoSpecialDropBrief.SiBkupNhinfo})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoSpecialDropBrief.SiBkupIfh})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoSpecialDropBrief.SiBkupAddr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoSpecialDropBrief.SiBkupAddrlen})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoSpecialDropBrief.SiBkupAddrProto})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoSpecialDropBrief.SiFrrActive})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoSpecialDropBrief.SiAttrIsExtMgd})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoSpecialDropBrief.SiAttrIsIncomp})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoSpecialDropBrief.SiAttrIsTunnel})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoSpecialDropBrief.SiAttrIsTunnelSrte})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoSpecialDropBrief.SiAttrIsGreTunnel})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoSpecialDropBrief.SiGreTi})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoSpecialDropBrief.SiGreTiFlags})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoSpecialDropBrief.SiGreTiRefcnt})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoSpecialDropBrief.SiGreTosPropagate})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoSpecialDropBrief.SiHardware})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoSpecialDropBrief.SiNhinfoPtr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoSpecialDropBrief.SiFnbIdbPtr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoSpecialDropBrief.SiAncIfh})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoSpecialDropBrief.SiGreTiResolvingLeafp})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoSpecialDropBrief.SiGreDestAddr})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoSpecialDropBrief.SiNhid})
    nhInfoSpecialDropBrief.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoSpecialDropBrief.SiUpdTs})

    nhInfoSpecialDropBrief.EntityData.YListKeys = []string {}

    return &(nhInfoSpecialDropBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-special-drop-brief"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-special-drop-brief"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs
// remote nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief remote NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief.
    NhInfoRemoteBrief []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteBriefs.EntityData.YFilter = nhInfoRemoteBriefs.YFilter
    nhInfoRemoteBriefs.EntityData.YangName = "nh-info-remote-briefs"
    nhInfoRemoteBriefs.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteBriefs.EntityData.ParentYangName = "nh-info-brief"
    nhInfoRemoteBriefs.EntityData.SegmentPath = "nh-info-remote-briefs"
    nhInfoRemoteBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteBriefs.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteBriefs.EntityData.Children.Append("nh-info-remote-brief", types.YChild{"NhInfoRemoteBrief", nil})
    for i := range nhInfoRemoteBriefs.NhInfoRemoteBrief {
        nhInfoRemoteBriefs.EntityData.Children.Append(types.GetSegmentPath(nhInfoRemoteBriefs.NhInfoRemoteBrief[i]), types.YChild{"NhInfoRemoteBrief", nhInfoRemoteBriefs.NhInfoRemoteBrief[i]})
    }
    nhInfoRemoteBriefs.EntityData.Leafs = types.NewOrderedMap()

    nhInfoRemoteBriefs.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteBriefs.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief
// Brief remote NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetEntityData() *types.CommonEntityData {
    nhInfoRemoteBrief.EntityData.YFilter = nhInfoRemoteBrief.YFilter
    nhInfoRemoteBrief.EntityData.YangName = "nh-info-remote-brief"
    nhInfoRemoteBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoRemoteBrief.EntityData.ParentYangName = "nh-info-remote-briefs"
    nhInfoRemoteBrief.EntityData.SegmentPath = "nh-info-remote-brief"
    nhInfoRemoteBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoRemoteBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoRemoteBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoRemoteBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoRemoteBrief.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoRemoteBrief.SiPwhe})
    nhInfoRemoteBrief.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoRemoteBrief.NhInfoExtension})
    nhInfoRemoteBrief.EntityData.Leafs = types.NewOrderedMap()
    nhInfoRemoteBrief.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoRemoteBrief.NhInterfaceName})
    nhInfoRemoteBrief.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoRemoteBrief.NhAddress})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoRemoteBrief.SiLinkProto})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoRemoteBrief.SiNhinfo})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoRemoteBrief.SiNhtype})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoRemoteBrief.SiIfh})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoRemoteBrief.SiPfiInterfaceType})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoRemoteBrief.SiAdjPtr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoRemoteBrief.SiAdjPresent})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoRemoteBrief.SiSpecialType})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoRemoteBrief.SiRefcount})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoRemoteBrief.SiFlags})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoRemoteBrief.SiAdjIf})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoRemoteBrief.SiExtPfx})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoRemoteBrief.SiExtPfxLen})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoRemoteBrief.SiExtPfxProto})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoRemoteBrief.SiAdjAddress})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoRemoteBrief.SiAdjAddrlen})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoRemoteBrief.SiAdjAddrProto})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoRemoteBrief.SiAdjRwLen})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoRemoteBrief.SiAdjRw})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoRemoteBrief.SiDepNhinfoType})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoRemoteBrief.SiDepNhinfo})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoRemoteBrief.SiDepNhinfoIfh})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoRemoteBrief.SiBkupFrr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoRemoteBrief.SiProtectFrr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoRemoteBrief.SiBkupNhinfo})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoRemoteBrief.SiBkupIfh})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoRemoteBrief.SiBkupAddr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoRemoteBrief.SiBkupAddrlen})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoRemoteBrief.SiBkupAddrProto})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoRemoteBrief.SiFrrActive})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoRemoteBrief.SiAttrIsExtMgd})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoRemoteBrief.SiAttrIsIncomp})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoRemoteBrief.SiAttrIsTunnel})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoRemoteBrief.SiAttrIsTunnelSrte})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoRemoteBrief.SiAttrIsGreTunnel})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoRemoteBrief.SiGreTi})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoRemoteBrief.SiGreTiFlags})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoRemoteBrief.SiGreTiRefcnt})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoRemoteBrief.SiGreTosPropagate})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoRemoteBrief.SiHardware})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoRemoteBrief.SiNhinfoPtr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoRemoteBrief.SiFnbIdbPtr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoRemoteBrief.SiAncIfh})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoRemoteBrief.SiGreTiResolvingLeafp})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoRemoteBrief.SiGreDestAddr})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoRemoteBrief.SiNhid})
    nhInfoRemoteBrief.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoRemoteBrief.SiUpdTs})

    nhInfoRemoteBrief.EntityData.YListKeys = []string {}

    return &(nhInfoRemoteBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-remote-brief"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-remote-brief"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief.
    NhInfoLocalBrief []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetEntityData() *types.CommonEntityData {
    nhInfoLocalBriefs.EntityData.YFilter = nhInfoLocalBriefs.YFilter
    nhInfoLocalBriefs.EntityData.YangName = "nh-info-local-briefs"
    nhInfoLocalBriefs.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalBriefs.EntityData.ParentYangName = "nh-info-brief"
    nhInfoLocalBriefs.EntityData.SegmentPath = "nh-info-local-briefs"
    nhInfoLocalBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalBriefs.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalBriefs.EntityData.Children.Append("nh-info-local-brief", types.YChild{"NhInfoLocalBrief", nil})
    for i := range nhInfoLocalBriefs.NhInfoLocalBrief {
        nhInfoLocalBriefs.EntityData.Children.Append(types.GetSegmentPath(nhInfoLocalBriefs.NhInfoLocalBrief[i]), types.YChild{"NhInfoLocalBrief", nhInfoLocalBriefs.NhInfoLocalBrief[i]})
    }
    nhInfoLocalBriefs.EntityData.Leafs = types.NewOrderedMap()

    nhInfoLocalBriefs.EntityData.YListKeys = []string {}

    return &(nhInfoLocalBriefs.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief
// Brief NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetEntityData() *types.CommonEntityData {
    nhInfoLocalBrief.EntityData.YFilter = nhInfoLocalBrief.YFilter
    nhInfoLocalBrief.EntityData.YangName = "nh-info-local-brief"
    nhInfoLocalBrief.EntityData.BundleName = "cisco_ios_xr"
    nhInfoLocalBrief.EntityData.ParentYangName = "nh-info-local-briefs"
    nhInfoLocalBrief.EntityData.SegmentPath = "nh-info-local-brief"
    nhInfoLocalBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoLocalBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoLocalBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoLocalBrief.EntityData.Children = types.NewOrderedMap()
    nhInfoLocalBrief.EntityData.Children.Append("si-pwhe", types.YChild{"SiPwhe", &nhInfoLocalBrief.SiPwhe})
    nhInfoLocalBrief.EntityData.Children.Append("nh-info-extension", types.YChild{"NhInfoExtension", &nhInfoLocalBrief.NhInfoExtension})
    nhInfoLocalBrief.EntityData.Leafs = types.NewOrderedMap()
    nhInfoLocalBrief.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhInfoLocalBrief.NhInterfaceName})
    nhInfoLocalBrief.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhInfoLocalBrief.NhAddress})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-link-proto", types.YLeaf{"SiLinkProto", nhInfoLocalBrief.SiLinkProto})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-nhinfo", types.YLeaf{"SiNhinfo", nhInfoLocalBrief.SiNhinfo})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-nhtype", types.YLeaf{"SiNhtype", nhInfoLocalBrief.SiNhtype})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-ifh", types.YLeaf{"SiIfh", nhInfoLocalBrief.SiIfh})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-pfi-interface-type", types.YLeaf{"SiPfiInterfaceType", nhInfoLocalBrief.SiPfiInterfaceType})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-ptr", types.YLeaf{"SiAdjPtr", nhInfoLocalBrief.SiAdjPtr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-present", types.YLeaf{"SiAdjPresent", nhInfoLocalBrief.SiAdjPresent})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-special-type", types.YLeaf{"SiSpecialType", nhInfoLocalBrief.SiSpecialType})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-refcount", types.YLeaf{"SiRefcount", nhInfoLocalBrief.SiRefcount})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-flags", types.YLeaf{"SiFlags", nhInfoLocalBrief.SiFlags})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-if", types.YLeaf{"SiAdjIf", nhInfoLocalBrief.SiAdjIf})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-ext-pfx", types.YLeaf{"SiExtPfx", nhInfoLocalBrief.SiExtPfx})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-ext-pfx-len", types.YLeaf{"SiExtPfxLen", nhInfoLocalBrief.SiExtPfxLen})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-ext-pfx-proto", types.YLeaf{"SiExtPfxProto", nhInfoLocalBrief.SiExtPfxProto})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-address", types.YLeaf{"SiAdjAddress", nhInfoLocalBrief.SiAdjAddress})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-addrlen", types.YLeaf{"SiAdjAddrlen", nhInfoLocalBrief.SiAdjAddrlen})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-addr-proto", types.YLeaf{"SiAdjAddrProto", nhInfoLocalBrief.SiAdjAddrProto})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-rw-len", types.YLeaf{"SiAdjRwLen", nhInfoLocalBrief.SiAdjRwLen})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-adj-rw", types.YLeaf{"SiAdjRw", nhInfoLocalBrief.SiAdjRw})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-dep-nhinfo-type", types.YLeaf{"SiDepNhinfoType", nhInfoLocalBrief.SiDepNhinfoType})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-dep-nhinfo", types.YLeaf{"SiDepNhinfo", nhInfoLocalBrief.SiDepNhinfo})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-dep-nhinfo-ifh", types.YLeaf{"SiDepNhinfoIfh", nhInfoLocalBrief.SiDepNhinfoIfh})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-bkup-frr", types.YLeaf{"SiBkupFrr", nhInfoLocalBrief.SiBkupFrr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-protect-frr", types.YLeaf{"SiProtectFrr", nhInfoLocalBrief.SiProtectFrr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-bkup-nhinfo", types.YLeaf{"SiBkupNhinfo", nhInfoLocalBrief.SiBkupNhinfo})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-bkup-ifh", types.YLeaf{"SiBkupIfh", nhInfoLocalBrief.SiBkupIfh})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-bkup-addr", types.YLeaf{"SiBkupAddr", nhInfoLocalBrief.SiBkupAddr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-bkup-addrlen", types.YLeaf{"SiBkupAddrlen", nhInfoLocalBrief.SiBkupAddrlen})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-bkup-addr-proto", types.YLeaf{"SiBkupAddrProto", nhInfoLocalBrief.SiBkupAddrProto})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-frr-active", types.YLeaf{"SiFrrActive", nhInfoLocalBrief.SiFrrActive})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-attr-is-ext-mgd", types.YLeaf{"SiAttrIsExtMgd", nhInfoLocalBrief.SiAttrIsExtMgd})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-attr-is-incomp", types.YLeaf{"SiAttrIsIncomp", nhInfoLocalBrief.SiAttrIsIncomp})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-attr-is-tunnel", types.YLeaf{"SiAttrIsTunnel", nhInfoLocalBrief.SiAttrIsTunnel})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-attr-is-tunnel-srte", types.YLeaf{"SiAttrIsTunnelSrte", nhInfoLocalBrief.SiAttrIsTunnelSrte})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-attr-is-gre-tunnel", types.YLeaf{"SiAttrIsGreTunnel", nhInfoLocalBrief.SiAttrIsGreTunnel})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-gre-ti", types.YLeaf{"SiGreTi", nhInfoLocalBrief.SiGreTi})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-gre-ti-flags", types.YLeaf{"SiGreTiFlags", nhInfoLocalBrief.SiGreTiFlags})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-gre-ti-refcnt", types.YLeaf{"SiGreTiRefcnt", nhInfoLocalBrief.SiGreTiRefcnt})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-gre-tos-propagate", types.YLeaf{"SiGreTosPropagate", nhInfoLocalBrief.SiGreTosPropagate})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-hardware", types.YLeaf{"SiHardware", nhInfoLocalBrief.SiHardware})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-nhinfo-ptr", types.YLeaf{"SiNhinfoPtr", nhInfoLocalBrief.SiNhinfoPtr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-fnb-idb-ptr", types.YLeaf{"SiFnbIdbPtr", nhInfoLocalBrief.SiFnbIdbPtr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-anc-ifh", types.YLeaf{"SiAncIfh", nhInfoLocalBrief.SiAncIfh})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-gre-ti-resolving-leafp", types.YLeaf{"SiGreTiResolvingLeafp", nhInfoLocalBrief.SiGreTiResolvingLeafp})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-gre-dest-addr", types.YLeaf{"SiGreDestAddr", nhInfoLocalBrief.SiGreDestAddr})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-nhid", types.YLeaf{"SiNhid", nhInfoLocalBrief.SiNhid})
    nhInfoLocalBrief.EntityData.Leafs.Append("si-upd-ts", types.YLeaf{"SiUpdTs", nhInfoLocalBrief.SiUpdTs})

    nhInfoLocalBrief.EntityData.YListKeys = []string {}

    return &(nhInfoLocalBrief.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1qVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetEntityData() *types.CommonEntityData {
    siPwhe.EntityData.YFilter = siPwhe.YFilter
    siPwhe.EntityData.YangName = "si-pwhe"
    siPwhe.EntityData.BundleName = "cisco_ios_xr"
    siPwhe.EntityData.ParentYangName = "nh-info-local-brief"
    siPwhe.EntityData.SegmentPath = "si-pwhe"
    siPwhe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siPwhe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siPwhe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siPwhe.EntityData.Children = types.NewOrderedMap()
    siPwhe.EntityData.Leafs = types.NewOrderedMap()
    siPwhe.EntityData.Leafs.Append("pwhe-adjacency-client-data", types.YLeaf{"PwheAdjacencyClientData", siPwhe.PwheAdjacencyClientData})
    siPwhe.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", siPwhe.Vctype})
    siPwhe.EntityData.Leafs.Append("vc-internal-label", types.YLeaf{"VcInternalLabel", siPwhe.VcInternalLabel})
    siPwhe.EntityData.Leafs.Append("cw-enabled", types.YLeaf{"CwEnabled", siPwhe.CwEnabled})
    siPwhe.EntityData.Leafs.Append("l2-overhead-bytes", types.YLeaf{"L2OverheadBytes", siPwhe.L2OverheadBytes})
    siPwhe.EntityData.Leafs.Append("dot1q-vlan-tag", types.YLeaf{"Dot1qVlanTag", siPwhe.Dot1qVlanTag})

    siPwhe.EntityData.YListKeys = []string {}

    return &(siPwhe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []*Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetEntityData() *types.CommonEntityData {
    nhInfoExtension.EntityData.YFilter = nhInfoExtension.YFilter
    nhInfoExtension.EntityData.YangName = "nh-info-extension"
    nhInfoExtension.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtension.EntityData.ParentYangName = "nh-info-local-brief"
    nhInfoExtension.EntityData.SegmentPath = "nh-info-extension"
    nhInfoExtension.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtension.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtension.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtension.EntityData.Children = types.NewOrderedMap()
    nhInfoExtension.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", nil})
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        nhInfoExtension.EntityData.Children.Append(types.GetSegmentPath(nhInfoExtension.NhInfoExtensionDetail[i]), types.YChild{"NhInfoExtensionDetail", nhInfoExtension.NhInfoExtensionDetail[i]})
    }
    nhInfoExtension.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtension.EntityData.YListKeys = []string {}

    return &(nhInfoExtension.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-base", types.YChild{"NhInfoExtensionBase", &nhInfoExtensionDetail.NhInfoExtensionBase})
    nhInfoExtensionDetail.EntityData.Children.Append("nh-info-extension-detail", types.YChild{"NhInfoExtensionDetail", &nhInfoExtensionDetail.NhInfoExtensionDetail})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionBase.EntityData.YFilter = nhInfoExtensionBase.YFilter
    nhInfoExtensionBase.EntityData.YangName = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionBase.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionBase.EntityData.SegmentPath = "nh-info-extension-base"
    nhInfoExtensionBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionBase.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Children.Append("object-base", types.YChild{"ObjectBase", &nhInfoExtensionBase.ObjectBase})
    nhInfoExtensionBase.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionBase.EntityData.Leafs.Append("parent-object-pointer", types.YLeaf{"ParentObjectPointer", nhInfoExtensionBase.ParentObjectPointer})
    nhInfoExtensionBase.EntityData.Leafs.Append("back-object-pointer", types.YLeaf{"BackObjectPointer", nhInfoExtensionBase.BackObjectPointer})

    nhInfoExtensionBase.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetEntityData() *types.CommonEntityData {
    objectBase.EntityData.YFilter = objectBase.YFilter
    objectBase.EntityData.YangName = "object-base"
    objectBase.EntityData.BundleName = "cisco_ios_xr"
    objectBase.EntityData.ParentYangName = "nh-info-extension-base"
    objectBase.EntityData.SegmentPath = "object-base"
    objectBase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    objectBase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    objectBase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    objectBase.EntityData.Children = types.NewOrderedMap()
    objectBase.EntityData.Leafs = types.NewOrderedMap()
    objectBase.EntityData.Leafs.Append("object-reference-count", types.YLeaf{"ObjectReferenceCount", objectBase.ObjectReferenceCount})
    objectBase.EntityData.Leafs.Append("object-flags", types.YLeaf{"ObjectFlags", objectBase.ObjectFlags})
    objectBase.EntityData.Leafs.Append("object-type", types.YLeaf{"ObjectType", objectBase.ObjectType})
    objectBase.EntityData.Leafs.Append("object-time-stamp", types.YLeaf{"ObjectTimeStamp", objectBase.ObjectTimeStamp})
    objectBase.EntityData.Leafs.Append("object-pointer", types.YLeaf{"ObjectPointer", objectBase.ObjectPointer})

    objectBase.EntityData.YListKeys = []string {}

    return &(objectBase.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetEntityData() *types.CommonEntityData {
    nhInfoExtensionDetail.EntityData.YFilter = nhInfoExtensionDetail.YFilter
    nhInfoExtensionDetail.EntityData.YangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.BundleName = "cisco_ios_xr"
    nhInfoExtensionDetail.EntityData.ParentYangName = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.SegmentPath = "nh-info-extension-detail"
    nhInfoExtensionDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhInfoExtensionDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhInfoExtensionDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhInfoExtensionDetail.EntityData.Children = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Children.Append("snecd-nhr", types.YChild{"SnecdNhr", &nhInfoExtensionDetail.SnecdNhr})
    nhInfoExtensionDetail.EntityData.Leafs = types.NewOrderedMap()
    nhInfoExtensionDetail.EntityData.Leafs.Append("type", types.YLeaf{"Type", nhInfoExtensionDetail.Type})

    nhInfoExtensionDetail.EntityData.YListKeys = []string {}

    return &(nhInfoExtensionDetail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetEntityData() *types.CommonEntityData {
    snecdNhr.EntityData.YFilter = snecdNhr.YFilter
    snecdNhr.EntityData.YangName = "snecd-nhr"
    snecdNhr.EntityData.BundleName = "cisco_ios_xr"
    snecdNhr.EntityData.ParentYangName = "nh-info-extension-detail"
    snecdNhr.EntityData.SegmentPath = "snecd-nhr"
    snecdNhr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snecdNhr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snecdNhr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snecdNhr.EntityData.Children = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs = types.NewOrderedMap()
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-type", types.YLeaf{"NhInfoReplicatedType", snecdNhr.NhInfoReplicatedType})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-nh-id", types.YLeaf{"NhInfoReplicatedNhId", snecdNhr.NhInfoReplicatedNhId})
    snecdNhr.EntityData.Leafs.Append("nh-info-replicated-interface", types.YLeaf{"NhInfoReplicatedInterface", snecdNhr.NhInfoReplicatedInterface})

    snecdNhr.EntityData.YListKeys = []string {}

    return &(snecdNhr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes
// Exact Route Table
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exact route for the given source and destination addresses. The type is
    // slice of Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute.
    ExactRoute []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetEntityData() *types.CommonEntityData {
    exactRoutes.EntityData.YFilter = exactRoutes.YFilter
    exactRoutes.EntityData.YangName = "exact-routes"
    exactRoutes.EntityData.BundleName = "cisco_ios_xr"
    exactRoutes.EntityData.ParentYangName = "protocol"
    exactRoutes.EntityData.SegmentPath = "exact-routes"
    exactRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exactRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exactRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exactRoutes.EntityData.Children = types.NewOrderedMap()
    exactRoutes.EntityData.Children.Append("exact-route", types.YChild{"ExactRoute", nil})
    for i := range exactRoutes.ExactRoute {
        exactRoutes.EntityData.Children.Append(types.GetSegmentPath(exactRoutes.ExactRoute[i]), types.YChild{"ExactRoute", exactRoutes.ExactRoute[i]})
    }
    exactRoutes.EntityData.Leafs = types.NewOrderedMap()

    exactRoutes.EntityData.YListKeys = []string {}

    return &(exactRoutes.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute
// Exact route for the given source and
// destination addresses
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol Name. The type is FibProtocol.
    ProtocolName interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Source address. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Source interface{}

    // Destination address. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Destination interface{}

    // Proto type for this entry. The type is interface{} with range:
    // 0..4294967295.
    ProtocolTypeFibEntry interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardware interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToPathList interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // The pathlist source. The type is interface{} with range: 0..4294967295.
    PathListSource interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToLdi interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The flags of ext assocaited with LDI . The type is interface{} with range:
    // 0..4294967295.
    FlagsExternalLdi interface{}

    // The pointer to the ext assocaited with LDI. The type is interface{} with
    // range: 0..4294967295.
    PointerExternalLdi interface{}

    // exact-path interface handle. The type is interface{} with range:
    // 0..4294967295.
    ExactPathInterfaceHandle interface{}

    // exact-path GRE physical interface handle. The type is interface{} with
    // range: 0..4294967295.
    ExactPathGreInterfaceHandle interface{}

    // exact-route GRE phy ifh available. The type is bool.
    ExactRouteGrePhysIfhAvail interface{}

    // exact-route result. The type is bool.
    ExactRouteResult interface{}

    // Prefix is static or connected. The type is bool.
    PrefixIsStaticOrConnected interface{}

    // Packet should always be received. The type is bool.
    PacketShouldRecieve interface{}

    // Prefix is connected. The type is bool.
    PrefixConnected interface{}

    // Prefix is for an adjacency. The type is bool.
    PrefixForAdjancency interface{}

    // Prefix is for a PIC nexthop. The type is bool.
    PrefixForPicNextHop interface{}

    // Purgable after the purge interval. The type is bool.
    PurgableAfterPurgeInterval interface{}

    // Broadcast receive flag. The type is bool.
    BroadcastReciveFlag interface{}

    // Broadcast forward flag. The type is bool.
    BroadcastForwardFlag interface{}

    // 0/0 route added as default route. The type is bool.
    ZeroByZeroRouteAsDefault interface{}

    // External switch function triggered. The type is bool.
    ExternalSwitchTriggered interface{}

    // Route attributes summary flag. The type is bool.
    RouteAttributeFlag interface{}

    // Dummy real zero route. The type is bool.
    DummyRealZeroRoute interface{}

    // The LDI LW flags. The type is interface{} with range: 0..4294967295.
    LdiLwFlag interface{}

    // The refcounter of LDI LW LDI. The type is interface{} with range:
    // 0..4294967295.
    RefCounterOfLdiLwLdi interface{}

    // The type of LDI LW LDI. The type is interface{} with range: 0..4294967295.
    TypeOfLdiLwLdi interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    VersionOfRoute interface{}

    // Priority at which the route was downloaded. The type is interface{} with
    // range: 0..4294967295.
    FibRouteDownloadPriority interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}

    // Is L2 Subscriber route. The type is bool.
    L2SubscriberRoute interface{}

    // XConnect-id associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberXconnectId interface{}

    // Flags associated with L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2SubscriberFlags interface{}

    // IP protocol associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberIpProtocol interface{}

    // L2TPv3 cookie length for L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2tpv3CookieLengthBits interface{}

    // Route destined for Line Card that support External Reach only. The type is
    // bool.
    RouteForExternalReachLinecardFlag interface{}

    // Route is a MPLS Segment-Routing prefix. The type is bool.
    RouteIsSrFlag interface{}

    // This route is SRv6 Transit function. The type is bool.
    RouteIsSrv6Transit interface{}

    // This route is SRv6 End function. The type is bool.
    RouteIsSrv6End interface{}

    // SRv6 Operation Type. The type is string.
    Srv6OperationType interface{}

    // Detailed FIB entry information.
    DetailFibEntryInformation Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation

    // FIB entry path details.
    FibEntryPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath

    // Leaf Extension Object List. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject.
    ExtensionObject []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetEntityData() *types.CommonEntityData {
    exactRoute.EntityData.YFilter = exactRoute.YFilter
    exactRoute.EntityData.YangName = "exact-route"
    exactRoute.EntityData.BundleName = "cisco_ios_xr"
    exactRoute.EntityData.ParentYangName = "exact-routes"
    exactRoute.EntityData.SegmentPath = "exact-route"
    exactRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exactRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exactRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exactRoute.EntityData.Children = types.NewOrderedMap()
    exactRoute.EntityData.Children.Append("detail-fib-entry-information", types.YChild{"DetailFibEntryInformation", &exactRoute.DetailFibEntryInformation})
    exactRoute.EntityData.Children.Append("fib-entry-path", types.YChild{"FibEntryPath", &exactRoute.FibEntryPath})
    exactRoute.EntityData.Children.Append("extension-object", types.YChild{"ExtensionObject", nil})
    for i := range exactRoute.ExtensionObject {
        exactRoute.EntityData.Children.Append(types.GetSegmentPath(exactRoute.ExtensionObject[i]), types.YChild{"ExtensionObject", exactRoute.ExtensionObject[i]})
    }
    exactRoute.EntityData.Leafs = types.NewOrderedMap()
    exactRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", exactRoute.ProtocolName})
    exactRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", exactRoute.VrfName})
    exactRoute.EntityData.Leafs.Append("source", types.YLeaf{"Source", exactRoute.Source})
    exactRoute.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", exactRoute.Destination})
    exactRoute.EntityData.Leafs.Append("protocol-type-fib-entry", types.YLeaf{"ProtocolTypeFibEntry", exactRoute.ProtocolTypeFibEntry})
    exactRoute.EntityData.Leafs.Append("platform-hardware", types.YLeaf{"PlatformHardware", exactRoute.PlatformHardware})
    exactRoute.EntityData.Leafs.Append("number-of-referances-to-path-list", types.YLeaf{"NumberOfReferancesToPathList", exactRoute.NumberOfReferancesToPathList})
    exactRoute.EntityData.Leafs.Append("path-list-flags", types.YLeaf{"PathListFlags", exactRoute.PathListFlags})
    exactRoute.EntityData.Leafs.Append("path-list-source", types.YLeaf{"PathListSource", exactRoute.PathListSource})
    exactRoute.EntityData.Leafs.Append("number-of-referances-to-ldi", types.YLeaf{"NumberOfReferancesToLdi", exactRoute.NumberOfReferancesToLdi})
    exactRoute.EntityData.Leafs.Append("ldi-flags", types.YLeaf{"LdiFlags", exactRoute.LdiFlags})
    exactRoute.EntityData.Leafs.Append("flags-external-ldi", types.YLeaf{"FlagsExternalLdi", exactRoute.FlagsExternalLdi})
    exactRoute.EntityData.Leafs.Append("pointer-external-ldi", types.YLeaf{"PointerExternalLdi", exactRoute.PointerExternalLdi})
    exactRoute.EntityData.Leafs.Append("exact-path-interface-handle", types.YLeaf{"ExactPathInterfaceHandle", exactRoute.ExactPathInterfaceHandle})
    exactRoute.EntityData.Leafs.Append("exact-path-gre-interface-handle", types.YLeaf{"ExactPathGreInterfaceHandle", exactRoute.ExactPathGreInterfaceHandle})
    exactRoute.EntityData.Leafs.Append("exact-route-gre-phys-ifh-avail", types.YLeaf{"ExactRouteGrePhysIfhAvail", exactRoute.ExactRouteGrePhysIfhAvail})
    exactRoute.EntityData.Leafs.Append("exact-route-result", types.YLeaf{"ExactRouteResult", exactRoute.ExactRouteResult})
    exactRoute.EntityData.Leafs.Append("prefix-is-static-or-connected", types.YLeaf{"PrefixIsStaticOrConnected", exactRoute.PrefixIsStaticOrConnected})
    exactRoute.EntityData.Leafs.Append("packet-should-recieve", types.YLeaf{"PacketShouldRecieve", exactRoute.PacketShouldRecieve})
    exactRoute.EntityData.Leafs.Append("prefix-connected", types.YLeaf{"PrefixConnected", exactRoute.PrefixConnected})
    exactRoute.EntityData.Leafs.Append("prefix-for-adjancency", types.YLeaf{"PrefixForAdjancency", exactRoute.PrefixForAdjancency})
    exactRoute.EntityData.Leafs.Append("prefix-for-pic-next-hop", types.YLeaf{"PrefixForPicNextHop", exactRoute.PrefixForPicNextHop})
    exactRoute.EntityData.Leafs.Append("purgable-after-purge-interval", types.YLeaf{"PurgableAfterPurgeInterval", exactRoute.PurgableAfterPurgeInterval})
    exactRoute.EntityData.Leafs.Append("broadcast-recive-flag", types.YLeaf{"BroadcastReciveFlag", exactRoute.BroadcastReciveFlag})
    exactRoute.EntityData.Leafs.Append("broadcast-forward-flag", types.YLeaf{"BroadcastForwardFlag", exactRoute.BroadcastForwardFlag})
    exactRoute.EntityData.Leafs.Append("zero-by-zero-route-as-default", types.YLeaf{"ZeroByZeroRouteAsDefault", exactRoute.ZeroByZeroRouteAsDefault})
    exactRoute.EntityData.Leafs.Append("external-switch-triggered", types.YLeaf{"ExternalSwitchTriggered", exactRoute.ExternalSwitchTriggered})
    exactRoute.EntityData.Leafs.Append("route-attribute-flag", types.YLeaf{"RouteAttributeFlag", exactRoute.RouteAttributeFlag})
    exactRoute.EntityData.Leafs.Append("dummy-real-zero-route", types.YLeaf{"DummyRealZeroRoute", exactRoute.DummyRealZeroRoute})
    exactRoute.EntityData.Leafs.Append("ldi-lw-flag", types.YLeaf{"LdiLwFlag", exactRoute.LdiLwFlag})
    exactRoute.EntityData.Leafs.Append("ref-counter-of-ldi-lw-ldi", types.YLeaf{"RefCounterOfLdiLwLdi", exactRoute.RefCounterOfLdiLwLdi})
    exactRoute.EntityData.Leafs.Append("type-of-ldi-lw-ldi", types.YLeaf{"TypeOfLdiLwLdi", exactRoute.TypeOfLdiLwLdi})
    exactRoute.EntityData.Leafs.Append("lspa-flags", types.YLeaf{"LspaFlags", exactRoute.LspaFlags})
    exactRoute.EntityData.Leafs.Append("version-of-route", types.YLeaf{"VersionOfRoute", exactRoute.VersionOfRoute})
    exactRoute.EntityData.Leafs.Append("fib-route-download-priority", types.YLeaf{"FibRouteDownloadPriority", exactRoute.FibRouteDownloadPriority})
    exactRoute.EntityData.Leafs.Append("time-of-last-update-in-msec", types.YLeaf{"TimeOfLastUpdateInMsec", exactRoute.TimeOfLastUpdateInMsec})
    exactRoute.EntityData.Leafs.Append("l2-subscriber-route", types.YLeaf{"L2SubscriberRoute", exactRoute.L2SubscriberRoute})
    exactRoute.EntityData.Leafs.Append("l2-subscriber-xconnect-id", types.YLeaf{"L2SubscriberXconnectId", exactRoute.L2SubscriberXconnectId})
    exactRoute.EntityData.Leafs.Append("l2-subscriber-flags", types.YLeaf{"L2SubscriberFlags", exactRoute.L2SubscriberFlags})
    exactRoute.EntityData.Leafs.Append("l2-subscriber-ip-protocol", types.YLeaf{"L2SubscriberIpProtocol", exactRoute.L2SubscriberIpProtocol})
    exactRoute.EntityData.Leafs.Append("l2tpv3-cookie-length-bits", types.YLeaf{"L2tpv3CookieLengthBits", exactRoute.L2tpv3CookieLengthBits})
    exactRoute.EntityData.Leafs.Append("route-for-external-reach-linecard-flag", types.YLeaf{"RouteForExternalReachLinecardFlag", exactRoute.RouteForExternalReachLinecardFlag})
    exactRoute.EntityData.Leafs.Append("route-is-sr-flag", types.YLeaf{"RouteIsSrFlag", exactRoute.RouteIsSrFlag})
    exactRoute.EntityData.Leafs.Append("route-is-srv6-transit", types.YLeaf{"RouteIsSrv6Transit", exactRoute.RouteIsSrv6Transit})
    exactRoute.EntityData.Leafs.Append("route-is-srv6-end", types.YLeaf{"RouteIsSrv6End", exactRoute.RouteIsSrv6End})
    exactRoute.EntityData.Leafs.Append("srv6-operation-type", types.YLeaf{"Srv6OperationType", exactRoute.Srv6OperationType})

    exactRoute.EntityData.YListKeys = []string {}

    return &(exactRoute.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation
// Detailed FIB entry information
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB entry version number. The type is interface{} with range:
    // 0..4294967295.
    FibEntryVersion interface{}

    // Per Prefix Accounting. The type is interface{} with range: 0..255.
    PerPrefixAccounting interface{}

    // Load sharing type. The type is FibLoadshareShow.
    LoadSharingType interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    FibEntryAdjacencyType interface{}

    // FIB Protocol type. The type is interface{} with range: 0..4294967295.
    FibProtocolType interface{}

    // AFI FIB protocol type. The type is interface{} with range: 0..4294967295.
    AfiFibProtocolType interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    AibL3Address interface{}

    // ADJ ADDR LEN. The type is interface{} with range: 0..4294967295.
    AdjacencyAddressLength interface{}

    // ADJ IFH. The type is interface{} with range: 0..4294967295.
    AdjacencyInterface interface{}

    // FIB Special NHINFO Type. The type is interface{} with range: 0..4294967295.
    FibSpecialNhInformationType interface{}

    // FIB entry adj address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    FibEntryAdjacencyAddress interface{}

    // FIB entry adjacency interface. The type is interface{} with range:
    // 0..4294967295.
    FibEntryAdjacencyInterface interface{}

    // Packets through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughFibEntry interface{}

    // Bytes through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughFibEntry interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    DetailedPrefixLength interface{}

    // Prefix protocol. The type is interface{} with range: 0..4294967295.
    PrefixProtocol interface{}

    // Precedence for packets to this entry. The type is interface{} with range:
    // 0..255.
    PrecedenceForpackets interface{}

    // Traffic index for packets to this entry. The type is interface{} with
    // range: 0..255.
    TrafficIndexForPackets interface{}

    // Switch function compontent ID. The type is interface{} with range:
    // 0..4294967295.
    SwitchCompontentId interface{}

    // Fast adjacency flag. The type is bool.
    FastAdjacencyFlag interface{}

    // Illegal fast adjacency flag. The type is bool.
    IllegalFastAdjacencyFlag interface{}

    // Remote adjacency flag. The type is bool.
    RemoteAdjacencyFlag interface{}

    // BGP attribute id. The type is interface{} with range: 0..4294967295.
    BgpAttributeId interface{}

    // BGP local attribute id. The type is interface{} with range: 0..4294967295.
    BgpLocalAttributeId interface{}

    // BGP attribute origin as. The type is interface{} with range: 0..4294967295.
    BgpAttributeOriginAs interface{}

    // BGP attribute next hop as. The type is interface{} with range:
    // 0..4294967295.
    BgpAttributeNextHopAs interface{}

    // As path string. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathString interface{}

    // extcom st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtcomString interface{}

    // com st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ComString interface{}

    // extended community. The type is interface{} with range: 0..4294967295.
    ExtendedCommunity interface{}

    // qos group. The type is interface{} with range: 0..4294967295.
    QosGroup interface{}

    // mpls fec. The type is interface{} with range: 0..4294967295.
    MplsFec interface{}

    // qppb QOS group and IP precedence. The type is interface{} with range:
    // 0..4294967295.
    QppbQosGroupAndIpPrecedence interface{}

    // PBR flow-tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // SPP forwarding class ID. The type is interface{} with range: 0..255.
    ForwardClass interface{}

    // The time of last update for PL in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    PlTimeOfLastUpdateInMsec interface{}

    // The time of last update for LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LdiTimeOfLastUpdateInMsec interface{}

    // The time of last update for LW-LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LwldiTimeOfLastUpdateInMsec interface{}

    // The type of time-stamp on PL. The type is interface{} with range:
    // 0..4294967295.
    PlTimeStampType interface{}

    // Detailed Loadshare info.
    LoadshareInformation Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetEntityData() *types.CommonEntityData {
    detailFibEntryInformation.EntityData.YFilter = detailFibEntryInformation.YFilter
    detailFibEntryInformation.EntityData.YangName = "detail-fib-entry-information"
    detailFibEntryInformation.EntityData.BundleName = "cisco_ios_xr"
    detailFibEntryInformation.EntityData.ParentYangName = "exact-route"
    detailFibEntryInformation.EntityData.SegmentPath = "detail-fib-entry-information"
    detailFibEntryInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailFibEntryInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailFibEntryInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailFibEntryInformation.EntityData.Children = types.NewOrderedMap()
    detailFibEntryInformation.EntityData.Children.Append("loadshare-information", types.YChild{"LoadshareInformation", &detailFibEntryInformation.LoadshareInformation})
    detailFibEntryInformation.EntityData.Leafs = types.NewOrderedMap()
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-version", types.YLeaf{"FibEntryVersion", detailFibEntryInformation.FibEntryVersion})
    detailFibEntryInformation.EntityData.Leafs.Append("per-prefix-accounting", types.YLeaf{"PerPrefixAccounting", detailFibEntryInformation.PerPrefixAccounting})
    detailFibEntryInformation.EntityData.Leafs.Append("load-sharing-type", types.YLeaf{"LoadSharingType", detailFibEntryInformation.LoadSharingType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-type", types.YLeaf{"FibEntryAdjacencyType", detailFibEntryInformation.FibEntryAdjacencyType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-protocol-type", types.YLeaf{"FibProtocolType", detailFibEntryInformation.FibProtocolType})
    detailFibEntryInformation.EntityData.Leafs.Append("afi-fib-protocol-type", types.YLeaf{"AfiFibProtocolType", detailFibEntryInformation.AfiFibProtocolType})
    detailFibEntryInformation.EntityData.Leafs.Append("aib-l3-address", types.YLeaf{"AibL3Address", detailFibEntryInformation.AibL3Address})
    detailFibEntryInformation.EntityData.Leafs.Append("adjacency-address-length", types.YLeaf{"AdjacencyAddressLength", detailFibEntryInformation.AdjacencyAddressLength})
    detailFibEntryInformation.EntityData.Leafs.Append("adjacency-interface", types.YLeaf{"AdjacencyInterface", detailFibEntryInformation.AdjacencyInterface})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-special-nh-information-type", types.YLeaf{"FibSpecialNhInformationType", detailFibEntryInformation.FibSpecialNhInformationType})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-address", types.YLeaf{"FibEntryAdjacencyAddress", detailFibEntryInformation.FibEntryAdjacencyAddress})
    detailFibEntryInformation.EntityData.Leafs.Append("fib-entry-adjacency-interface", types.YLeaf{"FibEntryAdjacencyInterface", detailFibEntryInformation.FibEntryAdjacencyInterface})
    detailFibEntryInformation.EntityData.Leafs.Append("packets-through-fib-entry", types.YLeaf{"PacketsThroughFibEntry", detailFibEntryInformation.PacketsThroughFibEntry})
    detailFibEntryInformation.EntityData.Leafs.Append("bytes-through-fib-entry", types.YLeaf{"BytesThroughFibEntry", detailFibEntryInformation.BytesThroughFibEntry})
    detailFibEntryInformation.EntityData.Leafs.Append("detailed-prefix-length", types.YLeaf{"DetailedPrefixLength", detailFibEntryInformation.DetailedPrefixLength})
    detailFibEntryInformation.EntityData.Leafs.Append("prefix-protocol", types.YLeaf{"PrefixProtocol", detailFibEntryInformation.PrefixProtocol})
    detailFibEntryInformation.EntityData.Leafs.Append("precedence-forpackets", types.YLeaf{"PrecedenceForpackets", detailFibEntryInformation.PrecedenceForpackets})
    detailFibEntryInformation.EntityData.Leafs.Append("traffic-index-for-packets", types.YLeaf{"TrafficIndexForPackets", detailFibEntryInformation.TrafficIndexForPackets})
    detailFibEntryInformation.EntityData.Leafs.Append("switch-compontent-id", types.YLeaf{"SwitchCompontentId", detailFibEntryInformation.SwitchCompontentId})
    detailFibEntryInformation.EntityData.Leafs.Append("fast-adjacency-flag", types.YLeaf{"FastAdjacencyFlag", detailFibEntryInformation.FastAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("illegal-fast-adjacency-flag", types.YLeaf{"IllegalFastAdjacencyFlag", detailFibEntryInformation.IllegalFastAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("remote-adjacency-flag", types.YLeaf{"RemoteAdjacencyFlag", detailFibEntryInformation.RemoteAdjacencyFlag})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-id", types.YLeaf{"BgpAttributeId", detailFibEntryInformation.BgpAttributeId})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-local-attribute-id", types.YLeaf{"BgpLocalAttributeId", detailFibEntryInformation.BgpLocalAttributeId})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-origin-as", types.YLeaf{"BgpAttributeOriginAs", detailFibEntryInformation.BgpAttributeOriginAs})
    detailFibEntryInformation.EntityData.Leafs.Append("bgp-attribute-next-hop-as", types.YLeaf{"BgpAttributeNextHopAs", detailFibEntryInformation.BgpAttributeNextHopAs})
    detailFibEntryInformation.EntityData.Leafs.Append("path-string", types.YLeaf{"PathString", detailFibEntryInformation.PathString})
    detailFibEntryInformation.EntityData.Leafs.Append("extcom-string", types.YLeaf{"ExtcomString", detailFibEntryInformation.ExtcomString})
    detailFibEntryInformation.EntityData.Leafs.Append("com-string", types.YLeaf{"ComString", detailFibEntryInformation.ComString})
    detailFibEntryInformation.EntityData.Leafs.Append("extended-community", types.YLeaf{"ExtendedCommunity", detailFibEntryInformation.ExtendedCommunity})
    detailFibEntryInformation.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", detailFibEntryInformation.QosGroup})
    detailFibEntryInformation.EntityData.Leafs.Append("mpls-fec", types.YLeaf{"MplsFec", detailFibEntryInformation.MplsFec})
    detailFibEntryInformation.EntityData.Leafs.Append("qppb-qos-group-and-ip-precedence", types.YLeaf{"QppbQosGroupAndIpPrecedence", detailFibEntryInformation.QppbQosGroupAndIpPrecedence})
    detailFibEntryInformation.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", detailFibEntryInformation.FlowTag})
    detailFibEntryInformation.EntityData.Leafs.Append("forward-class", types.YLeaf{"ForwardClass", detailFibEntryInformation.ForwardClass})
    detailFibEntryInformation.EntityData.Leafs.Append("pl-time-of-last-update-in-msec", types.YLeaf{"PlTimeOfLastUpdateInMsec", detailFibEntryInformation.PlTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("ldi-time-of-last-update-in-msec", types.YLeaf{"LdiTimeOfLastUpdateInMsec", detailFibEntryInformation.LdiTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("lwldi-time-of-last-update-in-msec", types.YLeaf{"LwldiTimeOfLastUpdateInMsec", detailFibEntryInformation.LwldiTimeOfLastUpdateInMsec})
    detailFibEntryInformation.EntityData.Leafs.Append("pl-time-stamp-type", types.YLeaf{"PlTimeStampType", detailFibEntryInformation.PlTimeStampType})

    detailFibEntryInformation.EntityData.YListKeys = []string {}

    return &(detailFibEntryInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation
// Detailed Loadshare info
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughLoadInformation interface{}

    // Bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughLoadInformation interface{}

    // Total packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalPacketsThroughLoadInformation interface{}

    // Total bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TotalBytesThroughLoadInformation interface{}

    // Prefix of the owner. The type is interface{} with range: 0..4294967295.
    PrefixOfOwner interface{}

    // Mask length of the owner. The type is interface{} with range:
    // 0..4294967295.
    MaskLengthOfOwner interface{}

    // Loadinfo reference count. The type is interface{} with range: 0..65535.
    LoadInformationReferenceCount interface{}

    // Per destination load sharing flag. The type is bool.
    PerDestLoadSharingFlag interface{}

    // Loadinfo owner deleted flag. The type is bool.
    LoadInformationOwnerDeletedFlag interface{}

    // Loadinfo sanity flag. The type is bool.
    LoadinfoSanityFlag interface{}

    // Owner flag. The type is bool.
    IsOwner interface{}

    // Loadinfo internal data.
    LoadInformtionInternalData Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetEntityData() *types.CommonEntityData {
    loadshareInformation.EntityData.YFilter = loadshareInformation.YFilter
    loadshareInformation.EntityData.YangName = "loadshare-information"
    loadshareInformation.EntityData.BundleName = "cisco_ios_xr"
    loadshareInformation.EntityData.ParentYangName = "detail-fib-entry-information"
    loadshareInformation.EntityData.SegmentPath = "loadshare-information"
    loadshareInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadshareInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadshareInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadshareInformation.EntityData.Children = types.NewOrderedMap()
    loadshareInformation.EntityData.Children.Append("load-informtion-internal-data", types.YChild{"LoadInformtionInternalData", &loadshareInformation.LoadInformtionInternalData})
    loadshareInformation.EntityData.Leafs = types.NewOrderedMap()
    loadshareInformation.EntityData.Leafs.Append("packets-through-load-information", types.YLeaf{"PacketsThroughLoadInformation", loadshareInformation.PacketsThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("bytes-through-load-information", types.YLeaf{"BytesThroughLoadInformation", loadshareInformation.BytesThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("total-packets-through-load-information", types.YLeaf{"TotalPacketsThroughLoadInformation", loadshareInformation.TotalPacketsThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("total-bytes-through-load-information", types.YLeaf{"TotalBytesThroughLoadInformation", loadshareInformation.TotalBytesThroughLoadInformation})
    loadshareInformation.EntityData.Leafs.Append("prefix-of-owner", types.YLeaf{"PrefixOfOwner", loadshareInformation.PrefixOfOwner})
    loadshareInformation.EntityData.Leafs.Append("mask-length-of-owner", types.YLeaf{"MaskLengthOfOwner", loadshareInformation.MaskLengthOfOwner})
    loadshareInformation.EntityData.Leafs.Append("load-information-reference-count", types.YLeaf{"LoadInformationReferenceCount", loadshareInformation.LoadInformationReferenceCount})
    loadshareInformation.EntityData.Leafs.Append("per-dest-load-sharing-flag", types.YLeaf{"PerDestLoadSharingFlag", loadshareInformation.PerDestLoadSharingFlag})
    loadshareInformation.EntityData.Leafs.Append("load-information-owner-deleted-flag", types.YLeaf{"LoadInformationOwnerDeletedFlag", loadshareInformation.LoadInformationOwnerDeletedFlag})
    loadshareInformation.EntityData.Leafs.Append("loadinfo-sanity-flag", types.YLeaf{"LoadinfoSanityFlag", loadshareInformation.LoadinfoSanityFlag})
    loadshareInformation.EntityData.Leafs.Append("is-owner", types.YLeaf{"IsOwner", loadshareInformation.IsOwner})

    loadshareInformation.EntityData.YListKeys = []string {}

    return &(loadshareInformation.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
// Loadinfo internal data
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // level of ldis. The type is interface{} with range: 0..255.
    LevelOfldis interface{}

    // no. of ldis. The type is interface{} with range: 0..255.
    NumberOfLdis interface{}

    // Maximum index of the arrays. The type is interface{} with range:
    // 0..4294967295.
    MaximumIndexArrays interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathIndices interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathLdiNumbers interface{}

    // Maximum slots. The type is interface{} with range: 0..4294967295.
    MaximumSlots interface{}

    // Normalized weights. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NormalizedWeights interface{}

    // Tunnel class value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TunnelClassValue interface{}

    // PBTS info valid flag. The type is bool.
    IsPbtsInfoValid interface{}

    // PBTS class offset. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassOffset interface{}

    // PBTS class num paths. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassNumPaths interface{}

    // PBTS class falls back to class. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsFallbackMappedClass interface{}

    // Round Robin Disable. The type is bool.
    RoundRobinDisable interface{}

    // Number of LDI next hop buckets. The type is interface{} with range: 0..255.
    LdiNextHopBuckets interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardwareInformation interface{}

    // Sanity flag. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag.
    SanityFlag []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag

    // Interface handle. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle.
    InterfaceHandle []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle

    // Weights of paths. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath.
    WeightsOfPath []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath

    // Adjacency address. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress.
    AdjacencyAddress []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress

    // Does PBTS class fall back to drop or any class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped.
    PbtsClassIsFallbackMapped []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped

    // PBTS class falls back to drop. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop.
    PbtsFallbackToDrop []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop

    // Tunnel is forward class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass.
    TunnelIsForwardClass []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetEntityData() *types.CommonEntityData {
    loadInformtionInternalData.EntityData.YFilter = loadInformtionInternalData.YFilter
    loadInformtionInternalData.EntityData.YangName = "load-informtion-internal-data"
    loadInformtionInternalData.EntityData.BundleName = "cisco_ios_xr"
    loadInformtionInternalData.EntityData.ParentYangName = "loadshare-information"
    loadInformtionInternalData.EntityData.SegmentPath = "load-informtion-internal-data"
    loadInformtionInternalData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadInformtionInternalData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadInformtionInternalData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadInformtionInternalData.EntityData.Children = types.NewOrderedMap()
    loadInformtionInternalData.EntityData.Children.Append("sanity-flag", types.YChild{"SanityFlag", nil})
    for i := range loadInformtionInternalData.SanityFlag {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.SanityFlag[i]), types.YChild{"SanityFlag", loadInformtionInternalData.SanityFlag[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("interface-handle", types.YChild{"InterfaceHandle", nil})
    for i := range loadInformtionInternalData.InterfaceHandle {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.InterfaceHandle[i]), types.YChild{"InterfaceHandle", loadInformtionInternalData.InterfaceHandle[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("weights-of-path", types.YChild{"WeightsOfPath", nil})
    for i := range loadInformtionInternalData.WeightsOfPath {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.WeightsOfPath[i]), types.YChild{"WeightsOfPath", loadInformtionInternalData.WeightsOfPath[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("adjacency-address", types.YChild{"AdjacencyAddress", nil})
    for i := range loadInformtionInternalData.AdjacencyAddress {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.AdjacencyAddress[i]), types.YChild{"AdjacencyAddress", loadInformtionInternalData.AdjacencyAddress[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("pbts-class-is-fallback-mapped", types.YChild{"PbtsClassIsFallbackMapped", nil})
    for i := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.PbtsClassIsFallbackMapped[i]), types.YChild{"PbtsClassIsFallbackMapped", loadInformtionInternalData.PbtsClassIsFallbackMapped[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("pbts-fallback-to-drop", types.YChild{"PbtsFallbackToDrop", nil})
    for i := range loadInformtionInternalData.PbtsFallbackToDrop {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.PbtsFallbackToDrop[i]), types.YChild{"PbtsFallbackToDrop", loadInformtionInternalData.PbtsFallbackToDrop[i]})
    }
    loadInformtionInternalData.EntityData.Children.Append("tunnel-is-forward-class", types.YChild{"TunnelIsForwardClass", nil})
    for i := range loadInformtionInternalData.TunnelIsForwardClass {
        loadInformtionInternalData.EntityData.Children.Append(types.GetSegmentPath(loadInformtionInternalData.TunnelIsForwardClass[i]), types.YChild{"TunnelIsForwardClass", loadInformtionInternalData.TunnelIsForwardClass[i]})
    }
    loadInformtionInternalData.EntityData.Leafs = types.NewOrderedMap()
    loadInformtionInternalData.EntityData.Leafs.Append("level-ofldis", types.YLeaf{"LevelOfldis", loadInformtionInternalData.LevelOfldis})
    loadInformtionInternalData.EntityData.Leafs.Append("number-of-ldis", types.YLeaf{"NumberOfLdis", loadInformtionInternalData.NumberOfLdis})
    loadInformtionInternalData.EntityData.Leafs.Append("maximum-index-arrays", types.YLeaf{"MaximumIndexArrays", loadInformtionInternalData.MaximumIndexArrays})
    loadInformtionInternalData.EntityData.Leafs.Append("path-indices", types.YLeaf{"PathIndices", loadInformtionInternalData.PathIndices})
    loadInformtionInternalData.EntityData.Leafs.Append("path-ldi-numbers", types.YLeaf{"PathLdiNumbers", loadInformtionInternalData.PathLdiNumbers})
    loadInformtionInternalData.EntityData.Leafs.Append("maximum-slots", types.YLeaf{"MaximumSlots", loadInformtionInternalData.MaximumSlots})
    loadInformtionInternalData.EntityData.Leafs.Append("normalized-weights", types.YLeaf{"NormalizedWeights", loadInformtionInternalData.NormalizedWeights})
    loadInformtionInternalData.EntityData.Leafs.Append("tunnel-class-value", types.YLeaf{"TunnelClassValue", loadInformtionInternalData.TunnelClassValue})
    loadInformtionInternalData.EntityData.Leafs.Append("is-pbts-info-valid", types.YLeaf{"IsPbtsInfoValid", loadInformtionInternalData.IsPbtsInfoValid})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-class-offset", types.YLeaf{"PbtsClassOffset", loadInformtionInternalData.PbtsClassOffset})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-class-num-paths", types.YLeaf{"PbtsClassNumPaths", loadInformtionInternalData.PbtsClassNumPaths})
    loadInformtionInternalData.EntityData.Leafs.Append("pbts-fallback-mapped-class", types.YLeaf{"PbtsFallbackMappedClass", loadInformtionInternalData.PbtsFallbackMappedClass})
    loadInformtionInternalData.EntityData.Leafs.Append("round-robin-disable", types.YLeaf{"RoundRobinDisable", loadInformtionInternalData.RoundRobinDisable})
    loadInformtionInternalData.EntityData.Leafs.Append("ldi-next-hop-buckets", types.YLeaf{"LdiNextHopBuckets", loadInformtionInternalData.LdiNextHopBuckets})
    loadInformtionInternalData.EntityData.Leafs.Append("platform-hardware-information", types.YLeaf{"PlatformHardwareInformation", loadInformtionInternalData.PlatformHardwareInformation})

    loadInformtionInternalData.EntityData.YListKeys = []string {}

    return &(loadInformtionInternalData.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag
// Sanity flag
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is bool.
    Entry interface{}
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetEntityData() *types.CommonEntityData {
    sanityFlag.EntityData.YFilter = sanityFlag.YFilter
    sanityFlag.EntityData.YangName = "sanity-flag"
    sanityFlag.EntityData.BundleName = "cisco_ios_xr"
    sanityFlag.EntityData.ParentYangName = "load-informtion-internal-data"
    sanityFlag.EntityData.SegmentPath = "sanity-flag"
    sanityFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sanityFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sanityFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sanityFlag.EntityData.Children = types.NewOrderedMap()
    sanityFlag.EntityData.Leafs = types.NewOrderedMap()
    sanityFlag.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sanityFlag.Entry})

    sanityFlag.EntityData.YListKeys = []string {}

    return &(sanityFlag.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle
// Interface handle
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-zA-Z0-9./-]+.
    Entry interface{}
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetEntityData() *types.CommonEntityData {
    interfaceHandle.EntityData.YFilter = interfaceHandle.YFilter
    interfaceHandle.EntityData.YangName = "interface-handle"
    interfaceHandle.EntityData.BundleName = "cisco_ios_xr"
    interfaceHandle.EntityData.ParentYangName = "load-informtion-internal-data"
    interfaceHandle.EntityData.SegmentPath = "interface-handle"
    interfaceHandle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceHandle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceHandle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceHandle.EntityData.Children = types.NewOrderedMap()
    interfaceHandle.EntityData.Leafs = types.NewOrderedMap()
    interfaceHandle.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceHandle.Entry})

    interfaceHandle.EntityData.YListKeys = []string {}

    return &(interfaceHandle.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath
// Weights of paths
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetEntityData() *types.CommonEntityData {
    weightsOfPath.EntityData.YFilter = weightsOfPath.YFilter
    weightsOfPath.EntityData.YangName = "weights-of-path"
    weightsOfPath.EntityData.BundleName = "cisco_ios_xr"
    weightsOfPath.EntityData.ParentYangName = "load-informtion-internal-data"
    weightsOfPath.EntityData.SegmentPath = "weights-of-path"
    weightsOfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    weightsOfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    weightsOfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    weightsOfPath.EntityData.Children = types.NewOrderedMap()
    weightsOfPath.EntityData.Leafs = types.NewOrderedMap()
    weightsOfPath.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", weightsOfPath.Entry})

    weightsOfPath.EntityData.YListKeys = []string {}

    return &(weightsOfPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress
// Adjacency address
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // address. The type is string with length: 0..60.
    Address interface{}
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetEntityData() *types.CommonEntityData {
    adjacencyAddress.EntityData.YFilter = adjacencyAddress.YFilter
    adjacencyAddress.EntityData.YangName = "adjacency-address"
    adjacencyAddress.EntityData.BundleName = "cisco_ios_xr"
    adjacencyAddress.EntityData.ParentYangName = "load-informtion-internal-data"
    adjacencyAddress.EntityData.SegmentPath = "adjacency-address"
    adjacencyAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyAddress.EntityData.Children = types.NewOrderedMap()
    adjacencyAddress.EntityData.Leafs = types.NewOrderedMap()
    adjacencyAddress.EntityData.Leafs.Append("address", types.YLeaf{"Address", adjacencyAddress.Address})

    adjacencyAddress.EntityData.YListKeys = []string {}

    return &(adjacencyAddress.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped
// Does PBTS class fall back to drop or any class
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetEntityData() *types.CommonEntityData {
    pbtsClassIsFallbackMapped.EntityData.YFilter = pbtsClassIsFallbackMapped.YFilter
    pbtsClassIsFallbackMapped.EntityData.YangName = "pbts-class-is-fallback-mapped"
    pbtsClassIsFallbackMapped.EntityData.BundleName = "cisco_ios_xr"
    pbtsClassIsFallbackMapped.EntityData.ParentYangName = "load-informtion-internal-data"
    pbtsClassIsFallbackMapped.EntityData.SegmentPath = "pbts-class-is-fallback-mapped"
    pbtsClassIsFallbackMapped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbtsClassIsFallbackMapped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbtsClassIsFallbackMapped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbtsClassIsFallbackMapped.EntityData.Children = types.NewOrderedMap()
    pbtsClassIsFallbackMapped.EntityData.Leafs = types.NewOrderedMap()
    pbtsClassIsFallbackMapped.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", pbtsClassIsFallbackMapped.Entry})

    pbtsClassIsFallbackMapped.EntityData.YListKeys = []string {}

    return &(pbtsClassIsFallbackMapped.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop
// PBTS class falls back to drop
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetEntityData() *types.CommonEntityData {
    pbtsFallbackToDrop.EntityData.YFilter = pbtsFallbackToDrop.YFilter
    pbtsFallbackToDrop.EntityData.YangName = "pbts-fallback-to-drop"
    pbtsFallbackToDrop.EntityData.BundleName = "cisco_ios_xr"
    pbtsFallbackToDrop.EntityData.ParentYangName = "load-informtion-internal-data"
    pbtsFallbackToDrop.EntityData.SegmentPath = "pbts-fallback-to-drop"
    pbtsFallbackToDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbtsFallbackToDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbtsFallbackToDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbtsFallbackToDrop.EntityData.Children = types.NewOrderedMap()
    pbtsFallbackToDrop.EntityData.Leafs = types.NewOrderedMap()
    pbtsFallbackToDrop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", pbtsFallbackToDrop.Entry})

    pbtsFallbackToDrop.EntityData.YListKeys = []string {}

    return &(pbtsFallbackToDrop.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
// Tunnel is forward class
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetEntityData() *types.CommonEntityData {
    tunnelIsForwardClass.EntityData.YFilter = tunnelIsForwardClass.YFilter
    tunnelIsForwardClass.EntityData.YangName = "tunnel-is-forward-class"
    tunnelIsForwardClass.EntityData.BundleName = "cisco_ios_xr"
    tunnelIsForwardClass.EntityData.ParentYangName = "load-informtion-internal-data"
    tunnelIsForwardClass.EntityData.SegmentPath = "tunnel-is-forward-class"
    tunnelIsForwardClass.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelIsForwardClass.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelIsForwardClass.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelIsForwardClass.EntityData.Children = types.NewOrderedMap()
    tunnelIsForwardClass.EntityData.Leafs = types.NewOrderedMap()
    tunnelIsForwardClass.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tunnelIsForwardClass.Entry})

    tunnelIsForwardClass.EntityData.YListKeys = []string {}

    return &(tunnelIsForwardClass.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath
// FIB entry path details
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // fib sh tbl path. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath.
    FibShTblPath []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetEntityData() *types.CommonEntityData {
    fibEntryPath.EntityData.YFilter = fibEntryPath.YFilter
    fibEntryPath.EntityData.YangName = "fib-entry-path"
    fibEntryPath.EntityData.BundleName = "cisco_ios_xr"
    fibEntryPath.EntityData.ParentYangName = "exact-route"
    fibEntryPath.EntityData.SegmentPath = "fib-entry-path"
    fibEntryPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibEntryPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibEntryPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibEntryPath.EntityData.Children = types.NewOrderedMap()
    fibEntryPath.EntityData.Children.Append("fib-sh-tbl-path", types.YChild{"FibShTblPath", nil})
    for i := range fibEntryPath.FibShTblPath {
        fibEntryPath.EntityData.Children.Append(types.GetSegmentPath(fibEntryPath.FibShTblPath[i]), types.YChild{"FibShTblPath", fibEntryPath.FibShTblPath[i]})
    }
    fibEntryPath.EntityData.Leafs = types.NewOrderedMap()

    fibEntryPath.EntityData.YListKeys = []string {}

    return &(fibEntryPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath
// fib sh tbl path
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    BriefInterfaceHandle interface{}

    // Next hop prefix. The type is string with length: 0..52.
    BriefNextHopPrefix interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    ViaLabelToRecurse interface{}

    // P-node address. The type is string with length: 0..52.
    BriefPnodeAddress interface{}

    // Q-node address. The type is string with length: 0..52.
    BriefQnodeAddress interface{}

    // LFA protection type. The type is FibUpdatePathLfaProtection.
    BriefLfaProtectionType interface{}

    // Resolved path. The type is bool.
    ResolvedPath interface{}

    // Recursive path. The type is bool.
    RecursivePath interface{}

    // Packets received on this path. The type is bool.
    PacketsReceivedPath interface{}

    // Attached path. The type is bool.
    AttachedPath interface{}

    // Backup path. The type is bool.
    BackupPath interface{}

    // Best external path. The type is bool.
    BestExternalPath interface{}

    // Is protection ignored. The type is bool.
    ProtectIgnore interface{}

    // Is this the path used for DLB. The type is bool.
    PathDlb interface{}

    // Path flags. The type is interface{} with range: 0..4294967295.
    PathFlags interface{}

    // Path Info flags. The type is interface{} with range: 0..65535.
    PathInfoFlags interface{}

    // Path index. The type is interface{} with range: 0..255.
    PathIndex interface{}

    // Backup path index. The type is interface{} with range: 0..255.
    BackupIndex interface{}

    // Next Hop Index. The type is interface{} with range: 0..4294967295.
    NextHopIndex interface{}

    // Parent Interface Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceHandle interface{}

    // recursion via /N constraint. The type is interface{} with range: 0..255.
    RecursionviaLen interface{}

    // More detail about this path entry.
    MoreDetailAboutPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath

    // mpls info for this path entry.
    MplsInformationForPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath

    // SRv6 info for this path entry.
    Srv6InformationForPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_Srv6InformationForPath
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetEntityData() *types.CommonEntityData {
    fibShTblPath.EntityData.YFilter = fibShTblPath.YFilter
    fibShTblPath.EntityData.YangName = "fib-sh-tbl-path"
    fibShTblPath.EntityData.BundleName = "cisco_ios_xr"
    fibShTblPath.EntityData.ParentYangName = "fib-entry-path"
    fibShTblPath.EntityData.SegmentPath = "fib-sh-tbl-path"
    fibShTblPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fibShTblPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fibShTblPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fibShTblPath.EntityData.Children = types.NewOrderedMap()
    fibShTblPath.EntityData.Children.Append("more-detail-about-path", types.YChild{"MoreDetailAboutPath", &fibShTblPath.MoreDetailAboutPath})
    fibShTblPath.EntityData.Children.Append("mpls-information-for-path", types.YChild{"MplsInformationForPath", &fibShTblPath.MplsInformationForPath})
    fibShTblPath.EntityData.Children.Append("srv6-information-for-path", types.YChild{"Srv6InformationForPath", &fibShTblPath.Srv6InformationForPath})
    fibShTblPath.EntityData.Leafs = types.NewOrderedMap()
    fibShTblPath.EntityData.Leafs.Append("hardware-information", types.YLeaf{"HardwareInformation", fibShTblPath.HardwareInformation})
    fibShTblPath.EntityData.Leafs.Append("brief-interface-handle", types.YLeaf{"BriefInterfaceHandle", fibShTblPath.BriefInterfaceHandle})
    fibShTblPath.EntityData.Leafs.Append("brief-next-hop-prefix", types.YLeaf{"BriefNextHopPrefix", fibShTblPath.BriefNextHopPrefix})
    fibShTblPath.EntityData.Leafs.Append("via-label-to-recurse", types.YLeaf{"ViaLabelToRecurse", fibShTblPath.ViaLabelToRecurse})
    fibShTblPath.EntityData.Leafs.Append("brief-pnode-address", types.YLeaf{"BriefPnodeAddress", fibShTblPath.BriefPnodeAddress})
    fibShTblPath.EntityData.Leafs.Append("brief-qnode-address", types.YLeaf{"BriefQnodeAddress", fibShTblPath.BriefQnodeAddress})
    fibShTblPath.EntityData.Leafs.Append("brief-lfa-protection-type", types.YLeaf{"BriefLfaProtectionType", fibShTblPath.BriefLfaProtectionType})
    fibShTblPath.EntityData.Leafs.Append("resolved-path", types.YLeaf{"ResolvedPath", fibShTblPath.ResolvedPath})
    fibShTblPath.EntityData.Leafs.Append("recursive-path", types.YLeaf{"RecursivePath", fibShTblPath.RecursivePath})
    fibShTblPath.EntityData.Leafs.Append("packets-received-path", types.YLeaf{"PacketsReceivedPath", fibShTblPath.PacketsReceivedPath})
    fibShTblPath.EntityData.Leafs.Append("attached-path", types.YLeaf{"AttachedPath", fibShTblPath.AttachedPath})
    fibShTblPath.EntityData.Leafs.Append("backup-path", types.YLeaf{"BackupPath", fibShTblPath.BackupPath})
    fibShTblPath.EntityData.Leafs.Append("best-external-path", types.YLeaf{"BestExternalPath", fibShTblPath.BestExternalPath})
    fibShTblPath.EntityData.Leafs.Append("protect-ignore", types.YLeaf{"ProtectIgnore", fibShTblPath.ProtectIgnore})
    fibShTblPath.EntityData.Leafs.Append("path-dlb", types.YLeaf{"PathDlb", fibShTblPath.PathDlb})
    fibShTblPath.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", fibShTblPath.PathFlags})
    fibShTblPath.EntityData.Leafs.Append("path-info-flags", types.YLeaf{"PathInfoFlags", fibShTblPath.PathInfoFlags})
    fibShTblPath.EntityData.Leafs.Append("path-index", types.YLeaf{"PathIndex", fibShTblPath.PathIndex})
    fibShTblPath.EntityData.Leafs.Append("backup-index", types.YLeaf{"BackupIndex", fibShTblPath.BackupIndex})
    fibShTblPath.EntityData.Leafs.Append("next-hop-index", types.YLeaf{"NextHopIndex", fibShTblPath.NextHopIndex})
    fibShTblPath.EntityData.Leafs.Append("parent-interface-handle", types.YLeaf{"ParentInterfaceHandle", fibShTblPath.ParentInterfaceHandle})
    fibShTblPath.EntityData.Leafs.Append("recursionvia-len", types.YLeaf{"RecursionviaLen", fibShTblPath.RecursionviaLen})

    fibShTblPath.EntityData.YListKeys = []string {}

    return &(fibShTblPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath
// More detail about this path entry
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address to recurse to. The type is string with length: 0..52.
    IpAddressToRecurse interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    LabelToRecurse interface{}

    // Next hop prefix. The type is string with length: 0..52.
    DetailNextHopPrefix interface{}

    // Next hop mask length. The type is interface{} with range: 0..255.
    NextHopMaskLength interface{}

    // Interface associated with this path. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceAssociatedPath interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // Next hop VRF. The type is string with length: 0..33.
    NextHopVrf interface{}

    // Tunnel endpoint id. The type is interface{} with range: 0..4294967295.
    TunnleEndpointId interface{}

    // LISP RLOC ID. The type is interface{} with range: 0..4294967295.
    Lisprlocid interface{}

    // No. of dependents for this path. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependenciesThisPath interface{}

    // Round robin reset value. The type is interface{} with range: 0..255.
    RobinResetValue interface{}

    // Is recursion object a leaf?. The type is bool.
    RecursePrefixObject interface{}

    // Next prefix recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion interface{}

    // Next prefix length. The type is interface{} with range: 0..255.
    NextPrefixLength interface{}

    // Recursion has two leaves (e.g. implicit-null path). The type is bool.
    RecursePrefixObject2 interface{}

    // Next prefix2 recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion2 interface{}

    // Next prefix2 length. The type is interface{} with range: 0..255.
    NextPrefixLength2 interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    DetailFibAdjacencyType interface{}

    // Current path flag. The type is bool.
    CurrentPathFlag interface{}

    // Recursive path information is available. The type is bool.
    RecursivePathInformation interface{}

    // Path is an external adjacency. The type is bool.
    ExternalAdjacency interface{}

    // FIB Nhinfo type. The type is FibNeh.
    FibPathNhInformationType interface{}

    // FIB Nhinfo type special. The type is FibNehSpecial.
    FibPathNhInformationTypeSpecial interface{}

    // Weight of the path. The type is interface{} with range: 0..4294967295.
    WeightOfPath interface{}

    // Tunnel class of the path. The type is interface{} with range: 0..255.
    TunnelClass interface{}

    // Tunnel is forward class. The type is bool.
    TunnelIsForwardClass interface{}

    // IP Encap. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap.
    SpdIpencap []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetEntityData() *types.CommonEntityData {
    moreDetailAboutPath.EntityData.YFilter = moreDetailAboutPath.YFilter
    moreDetailAboutPath.EntityData.YangName = "more-detail-about-path"
    moreDetailAboutPath.EntityData.BundleName = "cisco_ios_xr"
    moreDetailAboutPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    moreDetailAboutPath.EntityData.SegmentPath = "more-detail-about-path"
    moreDetailAboutPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moreDetailAboutPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moreDetailAboutPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moreDetailAboutPath.EntityData.Children = types.NewOrderedMap()
    moreDetailAboutPath.EntityData.Children.Append("spd-ipencap", types.YChild{"SpdIpencap", nil})
    for i := range moreDetailAboutPath.SpdIpencap {
        moreDetailAboutPath.EntityData.Children.Append(types.GetSegmentPath(moreDetailAboutPath.SpdIpencap[i]), types.YChild{"SpdIpencap", moreDetailAboutPath.SpdIpencap[i]})
    }
    moreDetailAboutPath.EntityData.Leafs = types.NewOrderedMap()
    moreDetailAboutPath.EntityData.Leafs.Append("ip-address-to-recurse", types.YLeaf{"IpAddressToRecurse", moreDetailAboutPath.IpAddressToRecurse})
    moreDetailAboutPath.EntityData.Leafs.Append("label-to-recurse", types.YLeaf{"LabelToRecurse", moreDetailAboutPath.LabelToRecurse})
    moreDetailAboutPath.EntityData.Leafs.Append("detail-next-hop-prefix", types.YLeaf{"DetailNextHopPrefix", moreDetailAboutPath.DetailNextHopPrefix})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-mask-length", types.YLeaf{"NextHopMaskLength", moreDetailAboutPath.NextHopMaskLength})
    moreDetailAboutPath.EntityData.Leafs.Append("interface-associated-path", types.YLeaf{"InterfaceAssociatedPath", moreDetailAboutPath.InterfaceAssociatedPath})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-interface", types.YLeaf{"NextHopInterface", moreDetailAboutPath.NextHopInterface})
    moreDetailAboutPath.EntityData.Leafs.Append("next-hop-vrf", types.YLeaf{"NextHopVrf", moreDetailAboutPath.NextHopVrf})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnle-endpoint-id", types.YLeaf{"TunnleEndpointId", moreDetailAboutPath.TunnleEndpointId})
    moreDetailAboutPath.EntityData.Leafs.Append("lisprlocid", types.YLeaf{"Lisprlocid", moreDetailAboutPath.Lisprlocid})
    moreDetailAboutPath.EntityData.Leafs.Append("number-of-dependencies-this-path", types.YLeaf{"NumberOfDependenciesThisPath", moreDetailAboutPath.NumberOfDependenciesThisPath})
    moreDetailAboutPath.EntityData.Leafs.Append("robin-reset-value", types.YLeaf{"RobinResetValue", moreDetailAboutPath.RobinResetValue})
    moreDetailAboutPath.EntityData.Leafs.Append("recurse-prefix-object", types.YLeaf{"RecursePrefixObject", moreDetailAboutPath.RecursePrefixObject})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-recursion", types.YLeaf{"NextPrefixRecursion", moreDetailAboutPath.NextPrefixRecursion})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-length", types.YLeaf{"NextPrefixLength", moreDetailAboutPath.NextPrefixLength})
    moreDetailAboutPath.EntityData.Leafs.Append("recurse-prefix-object2", types.YLeaf{"RecursePrefixObject2", moreDetailAboutPath.RecursePrefixObject2})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-recursion2", types.YLeaf{"NextPrefixRecursion2", moreDetailAboutPath.NextPrefixRecursion2})
    moreDetailAboutPath.EntityData.Leafs.Append("next-prefix-length2", types.YLeaf{"NextPrefixLength2", moreDetailAboutPath.NextPrefixLength2})
    moreDetailAboutPath.EntityData.Leafs.Append("detail-fib-adjacency-type", types.YLeaf{"DetailFibAdjacencyType", moreDetailAboutPath.DetailFibAdjacencyType})
    moreDetailAboutPath.EntityData.Leafs.Append("current-path-flag", types.YLeaf{"CurrentPathFlag", moreDetailAboutPath.CurrentPathFlag})
    moreDetailAboutPath.EntityData.Leafs.Append("recursive-path-information", types.YLeaf{"RecursivePathInformation", moreDetailAboutPath.RecursivePathInformation})
    moreDetailAboutPath.EntityData.Leafs.Append("external-adjacency", types.YLeaf{"ExternalAdjacency", moreDetailAboutPath.ExternalAdjacency})
    moreDetailAboutPath.EntityData.Leafs.Append("fib-path-nh-information-type", types.YLeaf{"FibPathNhInformationType", moreDetailAboutPath.FibPathNhInformationType})
    moreDetailAboutPath.EntityData.Leafs.Append("fib-path-nh-information-type-special", types.YLeaf{"FibPathNhInformationTypeSpecial", moreDetailAboutPath.FibPathNhInformationTypeSpecial})
    moreDetailAboutPath.EntityData.Leafs.Append("weight-of-path", types.YLeaf{"WeightOfPath", moreDetailAboutPath.WeightOfPath})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", moreDetailAboutPath.TunnelClass})
    moreDetailAboutPath.EntityData.Leafs.Append("tunnel-is-forward-class", types.YLeaf{"TunnelIsForwardClass", moreDetailAboutPath.TunnelIsForwardClass})

    moreDetailAboutPath.EntityData.YListKeys = []string {}

    return &(moreDetailAboutPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
// IP Encap
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Header Count. The type is interface{} with range: 0..255.
    IpEncapHdrCount interface{}

    // IPEncap Object Locks. The type is interface{} with range: 0..4294967295.
    IpEncapLocks interface{}

    // Transport Table. The type is interface{} with range: 0..4294967295.
    IpEncapTransportTbl interface{}

    // Transport VRF name. The type is string.
    IpeTransportVrfName interface{}

    // Transport AF. The type is interface{} with range: 0..4294967295.
    IpEncapTransportAf interface{}

    // Payload AF. The type is interface{} with range: 0..4294967295.
    IpEncapPayloadAf interface{}

    // Payload MTU. The type is interface{} with range: 0..65535.
    IpEncapPayloadMtu interface{}

    // Pointer to parent. The type is interface{} with range: 0..4294967295.
    IpEncapParent interface{}

    // Parent type enumeration. The type is interface{} with range: 0..4294967295.
    IpEncapParentType interface{}

    // Headers. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr.
    IpEncapHdr []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetEntityData() *types.CommonEntityData {
    spdIpencap.EntityData.YFilter = spdIpencap.YFilter
    spdIpencap.EntityData.YangName = "spd-ipencap"
    spdIpencap.EntityData.BundleName = "cisco_ios_xr"
    spdIpencap.EntityData.ParentYangName = "more-detail-about-path"
    spdIpencap.EntityData.SegmentPath = "spd-ipencap"
    spdIpencap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spdIpencap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spdIpencap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spdIpencap.EntityData.Children = types.NewOrderedMap()
    spdIpencap.EntityData.Children.Append("ip-encap-hdr", types.YChild{"IpEncapHdr", nil})
    for i := range spdIpencap.IpEncapHdr {
        spdIpencap.EntityData.Children.Append(types.GetSegmentPath(spdIpencap.IpEncapHdr[i]), types.YChild{"IpEncapHdr", spdIpencap.IpEncapHdr[i]})
    }
    spdIpencap.EntityData.Leafs = types.NewOrderedMap()
    spdIpencap.EntityData.Leafs.Append("ip-encap-hdr-count", types.YLeaf{"IpEncapHdrCount", spdIpencap.IpEncapHdrCount})
    spdIpencap.EntityData.Leafs.Append("ip-encap-locks", types.YLeaf{"IpEncapLocks", spdIpencap.IpEncapLocks})
    spdIpencap.EntityData.Leafs.Append("ip-encap-transport-tbl", types.YLeaf{"IpEncapTransportTbl", spdIpencap.IpEncapTransportTbl})
    spdIpencap.EntityData.Leafs.Append("ipe-transport-vrf-name", types.YLeaf{"IpeTransportVrfName", spdIpencap.IpeTransportVrfName})
    spdIpencap.EntityData.Leafs.Append("ip-encap-transport-af", types.YLeaf{"IpEncapTransportAf", spdIpencap.IpEncapTransportAf})
    spdIpencap.EntityData.Leafs.Append("ip-encap-payload-af", types.YLeaf{"IpEncapPayloadAf", spdIpencap.IpEncapPayloadAf})
    spdIpencap.EntityData.Leafs.Append("ip-encap-payload-mtu", types.YLeaf{"IpEncapPayloadMtu", spdIpencap.IpEncapPayloadMtu})
    spdIpencap.EntityData.Leafs.Append("ip-encap-parent", types.YLeaf{"IpEncapParent", spdIpencap.IpEncapParent})
    spdIpencap.EntityData.Leafs.Append("ip-encap-parent-type", types.YLeaf{"IpEncapParentType", spdIpencap.IpEncapParentType})

    spdIpencap.EntityData.YListKeys = []string {}

    return &(spdIpencap.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
// Headers
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Header Type. The type is FibShIpencapHdr.
    IpEncapHdrType interface{}

    // Static Header. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    IpEncapHdrp interface{}

    // Dynamic Header Fields. The type is interface{} with range: 0..4294967295.
    IpEncapHdrDyn interface{}
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetEntityData() *types.CommonEntityData {
    ipEncapHdr.EntityData.YFilter = ipEncapHdr.YFilter
    ipEncapHdr.EntityData.YangName = "ip-encap-hdr"
    ipEncapHdr.EntityData.BundleName = "cisco_ios_xr"
    ipEncapHdr.EntityData.ParentYangName = "spd-ipencap"
    ipEncapHdr.EntityData.SegmentPath = "ip-encap-hdr"
    ipEncapHdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipEncapHdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipEncapHdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipEncapHdr.EntityData.Children = types.NewOrderedMap()
    ipEncapHdr.EntityData.Leafs = types.NewOrderedMap()
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdr-type", types.YLeaf{"IpEncapHdrType", ipEncapHdr.IpEncapHdrType})
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdrp", types.YLeaf{"IpEncapHdrp", ipEncapHdr.IpEncapHdrp})
    ipEncapHdr.EntityData.Leafs.Append("ip-encap-hdr-dyn", types.YLeaf{"IpEncapHdrDyn", ipEncapHdr.IpEncapHdrDyn})

    ipEncapHdr.EntityData.YListKeys = []string {}

    return &(ipEncapHdr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath
// mpls info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LocalLable. The type is interface{} with range: 0..4294967295.
    LocalLable interface{}

    // RecursiveFwdChain. The type is bool.
    RecursiveFwdChain interface{}

    // NumberOfIGPPaths. The type is interface{} with range: 0..4294967295.
    NumberOfIgpPaths interface{}

    // RemoteBackupPath. The type is bool.
    RemoteBackup interface{}

    // Recursive Label(s). The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack.
    RecursiveLblStack []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack

    // igp label stack array. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray.
    IgpLabelStackArray []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetEntityData() *types.CommonEntityData {
    mplsInformationForPath.EntityData.YFilter = mplsInformationForPath.YFilter
    mplsInformationForPath.EntityData.YangName = "mpls-information-for-path"
    mplsInformationForPath.EntityData.BundleName = "cisco_ios_xr"
    mplsInformationForPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    mplsInformationForPath.EntityData.SegmentPath = "mpls-information-for-path"
    mplsInformationForPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsInformationForPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsInformationForPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsInformationForPath.EntityData.Children = types.NewOrderedMap()
    mplsInformationForPath.EntityData.Children.Append("recursive-lbl-stack", types.YChild{"RecursiveLblStack", nil})
    for i := range mplsInformationForPath.RecursiveLblStack {
        mplsInformationForPath.EntityData.Children.Append(types.GetSegmentPath(mplsInformationForPath.RecursiveLblStack[i]), types.YChild{"RecursiveLblStack", mplsInformationForPath.RecursiveLblStack[i]})
    }
    mplsInformationForPath.EntityData.Children.Append("igp-label-stack-array", types.YChild{"IgpLabelStackArray", nil})
    for i := range mplsInformationForPath.IgpLabelStackArray {
        mplsInformationForPath.EntityData.Children.Append(types.GetSegmentPath(mplsInformationForPath.IgpLabelStackArray[i]), types.YChild{"IgpLabelStackArray", mplsInformationForPath.IgpLabelStackArray[i]})
    }
    mplsInformationForPath.EntityData.Leafs = types.NewOrderedMap()
    mplsInformationForPath.EntityData.Leafs.Append("local-lable", types.YLeaf{"LocalLable", mplsInformationForPath.LocalLable})
    mplsInformationForPath.EntityData.Leafs.Append("recursive-fwd-chain", types.YLeaf{"RecursiveFwdChain", mplsInformationForPath.RecursiveFwdChain})
    mplsInformationForPath.EntityData.Leafs.Append("number-of-igp-paths", types.YLeaf{"NumberOfIgpPaths", mplsInformationForPath.NumberOfIgpPaths})
    mplsInformationForPath.EntityData.Leafs.Append("remote-backup", types.YLeaf{"RemoteBackup", mplsInformationForPath.RemoteBackup})

    mplsInformationForPath.EntityData.YListKeys = []string {}

    return &(mplsInformationForPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack
// Recursive Label(s)
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetEntityData() *types.CommonEntityData {
    recursiveLblStack.EntityData.YFilter = recursiveLblStack.YFilter
    recursiveLblStack.EntityData.YangName = "recursive-lbl-stack"
    recursiveLblStack.EntityData.BundleName = "cisco_ios_xr"
    recursiveLblStack.EntityData.ParentYangName = "mpls-information-for-path"
    recursiveLblStack.EntityData.SegmentPath = "recursive-lbl-stack"
    recursiveLblStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recursiveLblStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recursiveLblStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recursiveLblStack.EntityData.Children = types.NewOrderedMap()
    recursiveLblStack.EntityData.Leafs = types.NewOrderedMap()
    recursiveLblStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", recursiveLblStack.Entry})

    recursiveLblStack.EntityData.YListKeys = []string {}

    return &(recursiveLblStack.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
// igp label stack array
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NumberOfLabels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}

    // OutInterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // NHAddress. The type is string with length: 0..52.
    NhAddress interface{}

    // lstack. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack.
    Lstack []*Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetEntityData() *types.CommonEntityData {
    igpLabelStackArray.EntityData.YFilter = igpLabelStackArray.YFilter
    igpLabelStackArray.EntityData.YangName = "igp-label-stack-array"
    igpLabelStackArray.EntityData.BundleName = "cisco_ios_xr"
    igpLabelStackArray.EntityData.ParentYangName = "mpls-information-for-path"
    igpLabelStackArray.EntityData.SegmentPath = "igp-label-stack-array"
    igpLabelStackArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igpLabelStackArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igpLabelStackArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igpLabelStackArray.EntityData.Children = types.NewOrderedMap()
    igpLabelStackArray.EntityData.Children.Append("lstack", types.YChild{"Lstack", nil})
    for i := range igpLabelStackArray.Lstack {
        igpLabelStackArray.EntityData.Children.Append(types.GetSegmentPath(igpLabelStackArray.Lstack[i]), types.YChild{"Lstack", igpLabelStackArray.Lstack[i]})
    }
    igpLabelStackArray.EntityData.Leafs = types.NewOrderedMap()
    igpLabelStackArray.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", igpLabelStackArray.NumberOfLabels})
    igpLabelStackArray.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", igpLabelStackArray.OutInterface})
    igpLabelStackArray.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", igpLabelStackArray.NhAddress})

    igpLabelStackArray.EntityData.YListKeys = []string {}

    return &(igpLabelStackArray.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
// lstack
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetEntityData() *types.CommonEntityData {
    lstack.EntityData.YFilter = lstack.YFilter
    lstack.EntityData.YangName = "lstack"
    lstack.EntityData.BundleName = "cisco_ios_xr"
    lstack.EntityData.ParentYangName = "igp-label-stack-array"
    lstack.EntityData.SegmentPath = "lstack"
    lstack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lstack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lstack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lstack.EntityData.Children = types.NewOrderedMap()
    lstack.EntityData.Leafs = types.NewOrderedMap()
    lstack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lstack.Entry})

    lstack.EntityData.YListKeys = []string {}

    return &(lstack.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_Srv6InformationForPath
// SRv6 info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_Srv6InformationForPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SRv6 SID list. The type is string.
    Srv6SidList interface{}
}

func (srv6InformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_Srv6InformationForPath) GetEntityData() *types.CommonEntityData {
    srv6InformationForPath.EntityData.YFilter = srv6InformationForPath.YFilter
    srv6InformationForPath.EntityData.YangName = "srv6-information-for-path"
    srv6InformationForPath.EntityData.BundleName = "cisco_ios_xr"
    srv6InformationForPath.EntityData.ParentYangName = "fib-sh-tbl-path"
    srv6InformationForPath.EntityData.SegmentPath = "srv6-information-for-path"
    srv6InformationForPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srv6InformationForPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srv6InformationForPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srv6InformationForPath.EntityData.Children = types.NewOrderedMap()
    srv6InformationForPath.EntityData.Leafs = types.NewOrderedMap()
    srv6InformationForPath.EntityData.Leafs.Append("srv6-sid-list", types.YLeaf{"Srv6SidList", srv6InformationForPath.Srv6SidList})

    srv6InformationForPath.EntityData.YListKeys = []string {}

    return &(srv6InformationForPath.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject
// Leaf Extension Object List
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibShTblFibExtBag.
    Type interface{}

    // sfecd le.
    SfecdLe Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetEntityData() *types.CommonEntityData {
    extensionObject.EntityData.YFilter = extensionObject.YFilter
    extensionObject.EntityData.YangName = "extension-object"
    extensionObject.EntityData.BundleName = "cisco_ios_xr"
    extensionObject.EntityData.ParentYangName = "exact-route"
    extensionObject.EntityData.SegmentPath = "extension-object"
    extensionObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extensionObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extensionObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extensionObject.EntityData.Children = types.NewOrderedMap()
    extensionObject.EntityData.Children.Append("sfecd-le", types.YChild{"SfecdLe", &extensionObject.SfecdLe})
    extensionObject.EntityData.Leafs = types.NewOrderedMap()
    extensionObject.EntityData.Leafs.Append("type", types.YLeaf{"Type", extensionObject.Type})

    extensionObject.EntityData.YListKeys = []string {}

    return &(extensionObject.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe
// sfecd le
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Context Label Exist. The type is bool.
    ContextLabelFlag interface{}

    // Context Label. The type is interface{} with range: 0..4294967295.
    ContextLabel interface{}
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetEntityData() *types.CommonEntityData {
    sfecdLe.EntityData.YFilter = sfecdLe.YFilter
    sfecdLe.EntityData.YangName = "sfecd-le"
    sfecdLe.EntityData.BundleName = "cisco_ios_xr"
    sfecdLe.EntityData.ParentYangName = "extension-object"
    sfecdLe.EntityData.SegmentPath = "sfecd-le"
    sfecdLe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfecdLe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfecdLe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfecdLe.EntityData.Children = types.NewOrderedMap()
    sfecdLe.EntityData.Leafs = types.NewOrderedMap()
    sfecdLe.EntityData.Leafs.Append("context-label-flag", types.YLeaf{"ContextLabelFlag", sfecdLe.ContextLabelFlag})
    sfecdLe.EntityData.Leafs.Append("context-label", types.YLeaf{"ContextLabel", sfecdLe.ContextLabel})

    sfecdLe.EntityData.YListKeys = []string {}

    return &(sfecdLe.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_NhIds
// NHIdTable is accessed by two keys;
// {NHIdValue} and/or {NHInterface,NHAddress
type Fib_Nodes_Node_Protocols_Protocol_NhIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NextHopeId table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId.
    NhId []*Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetEntityData() *types.CommonEntityData {
    nhIds.EntityData.YFilter = nhIds.YFilter
    nhIds.EntityData.YangName = "nh-ids"
    nhIds.EntityData.BundleName = "cisco_ios_xr"
    nhIds.EntityData.ParentYangName = "protocol"
    nhIds.EntityData.SegmentPath = "nh-ids"
    nhIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhIds.EntityData.Children = types.NewOrderedMap()
    nhIds.EntityData.Children.Append("nh-id", types.YChild{"NhId", nil})
    for i := range nhIds.NhId {
        nhIds.EntityData.Children.Append(types.GetSegmentPath(nhIds.NhId[i]), types.YChild{"NhId", nhIds.NhId[i]})
    }
    nhIds.EntityData.Leafs = types.NewOrderedMap()

    nhIds.EntityData.YListKeys = []string {}

    return &(nhIds.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId
// NextHopeId table entry
type Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NexthopId Value. The type is interface{} with range: 0..4294967295.
    NhIdValue interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format (e.g., 1 .2.3.4). The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // Next-hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfHandle interface{}

    // Next-hop address. The type is string.
    NhAddressXr interface{}

    // Next-hop address protocol, IPv4/IPv6. The type is interface{} with range:
    // 0..255.
    NhProtocol interface{}

    // Payload linktype. The type is interface{} with range: 0..255.
    NhLinkType interface{}

    // Table-ID entry notified for. The type is interface{} with range:
    // 0..4294967295.
    NhTableId interface{}

    // NHID value. The type is interface{} with range: 0..4294967295.
    NhId interface{}

    // NHID application type. The type is interface{} with range: 0..255.
    NhIdApplication interface{}

    // RIB version. The type is interface{} with range: 0..18446744073709551615.
    Version interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetEntityData() *types.CommonEntityData {
    nhId.EntityData.YFilter = nhId.YFilter
    nhId.EntityData.YangName = "nh-id"
    nhId.EntityData.BundleName = "cisco_ios_xr"
    nhId.EntityData.ParentYangName = "nh-ids"
    nhId.EntityData.SegmentPath = "nh-id"
    nhId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhId.EntityData.Children = types.NewOrderedMap()
    nhId.EntityData.Leafs = types.NewOrderedMap()
    nhId.EntityData.Leafs.Append("nh-id-value", types.YLeaf{"NhIdValue", nhId.NhIdValue})
    nhId.EntityData.Leafs.Append("nh-interface-name", types.YLeaf{"NhInterfaceName", nhId.NhInterfaceName})
    nhId.EntityData.Leafs.Append("nh-address", types.YLeaf{"NhAddress", nhId.NhAddress})
    nhId.EntityData.Leafs.Append("nh-interf-handle", types.YLeaf{"NhInterfHandle", nhId.NhInterfHandle})
    nhId.EntityData.Leafs.Append("nh-address-xr", types.YLeaf{"NhAddressXr", nhId.NhAddressXr})
    nhId.EntityData.Leafs.Append("nh-protocol", types.YLeaf{"NhProtocol", nhId.NhProtocol})
    nhId.EntityData.Leafs.Append("nh-link-type", types.YLeaf{"NhLinkType", nhId.NhLinkType})
    nhId.EntityData.Leafs.Append("nh-table-id", types.YLeaf{"NhTableId", nhId.NhTableId})
    nhId.EntityData.Leafs.Append("nh-id", types.YLeaf{"NhId", nhId.NhId})
    nhId.EntityData.Leafs.Append("nh-id-application", types.YLeaf{"NhIdApplication", nhId.NhIdApplication})
    nhId.EntityData.Leafs.Append("version", types.YLeaf{"Version", nhId.Version})
    nhId.EntityData.Leafs.Append("time-of-last-update-in-msec", types.YLeaf{"TimeOfLastUpdateInMsec", nhId.TimeOfLastUpdateInMsec})

    nhId.EntityData.YListKeys = []string {}

    return &(nhId.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries
// External Client Summary Table
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary of the external clients. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary.
    ExternalClientSummary []*Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetEntityData() *types.CommonEntityData {
    externalClientSummaries.EntityData.YFilter = externalClientSummaries.YFilter
    externalClientSummaries.EntityData.YangName = "external-client-summaries"
    externalClientSummaries.EntityData.BundleName = "cisco_ios_xr"
    externalClientSummaries.EntityData.ParentYangName = "protocol"
    externalClientSummaries.EntityData.SegmentPath = "external-client-summaries"
    externalClientSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalClientSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalClientSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalClientSummaries.EntityData.Children = types.NewOrderedMap()
    externalClientSummaries.EntityData.Children.Append("external-client-summary", types.YChild{"ExternalClientSummary", nil})
    for i := range externalClientSummaries.ExternalClientSummary {
        externalClientSummaries.EntityData.Children.Append(types.GetSegmentPath(externalClientSummaries.ExternalClientSummary[i]), types.YChild{"ExternalClientSummary", externalClientSummaries.ExternalClientSummary[i]})
    }
    externalClientSummaries.EntityData.Leafs = types.NewOrderedMap()

    externalClientSummaries.EntityData.YListKeys = []string {}

    return &(externalClientSummaries.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary
// Summary of the external clients
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ecd Version. The type is interface{} with range: 0..4294967295.
    EcdVer interface{}

    // ID of the client: ECDv1 is component id, ECDv2 is client id. The type is
    // interface{} with range: 0..4294967295.
    Id interface{}

    // External client name. The type is string.
    SesClientName interface{}

    // Registration proto. The type is interface{} with range: 0..4294967295.
    SesFeciFibProto interface{}

    // Number of registrations. The type is interface{} with range: 0..4294967295.
    SesNumRegs interface{}

    // Number of pending notifs. The type is interface{} with range:
    // 0..4294967295.
    SesNumPending interface{}

    // Client pulsed timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SesClientPulsedTime interface{}

    // component-id of the client. The type is interface{} with range:
    // 0..4294967295.
    SesCompId interface{}

    // ECD version. The type is interface{} with range: 0..4294967295.
    SesEcdVersion interface{}

    // ECD pathlist summary.
    SesPlSum Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetEntityData() *types.CommonEntityData {
    externalClientSummary.EntityData.YFilter = externalClientSummary.YFilter
    externalClientSummary.EntityData.YangName = "external-client-summary"
    externalClientSummary.EntityData.BundleName = "cisco_ios_xr"
    externalClientSummary.EntityData.ParentYangName = "external-client-summaries"
    externalClientSummary.EntityData.SegmentPath = "external-client-summary"
    externalClientSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalClientSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalClientSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalClientSummary.EntityData.Children = types.NewOrderedMap()
    externalClientSummary.EntityData.Children.Append("ses-pl-sum", types.YChild{"SesPlSum", &externalClientSummary.SesPlSum})
    externalClientSummary.EntityData.Leafs = types.NewOrderedMap()
    externalClientSummary.EntityData.Leafs.Append("ecd-ver", types.YLeaf{"EcdVer", externalClientSummary.EcdVer})
    externalClientSummary.EntityData.Leafs.Append("id", types.YLeaf{"Id", externalClientSummary.Id})
    externalClientSummary.EntityData.Leafs.Append("ses-client-name", types.YLeaf{"SesClientName", externalClientSummary.SesClientName})
    externalClientSummary.EntityData.Leafs.Append("ses-feci-fib-proto", types.YLeaf{"SesFeciFibProto", externalClientSummary.SesFeciFibProto})
    externalClientSummary.EntityData.Leafs.Append("ses-num-regs", types.YLeaf{"SesNumRegs", externalClientSummary.SesNumRegs})
    externalClientSummary.EntityData.Leafs.Append("ses-num-pending", types.YLeaf{"SesNumPending", externalClientSummary.SesNumPending})
    externalClientSummary.EntityData.Leafs.Append("ses-client-pulsed-time", types.YLeaf{"SesClientPulsedTime", externalClientSummary.SesClientPulsedTime})
    externalClientSummary.EntityData.Leafs.Append("ses-comp-id", types.YLeaf{"SesCompId", externalClientSummary.SesCompId})
    externalClientSummary.EntityData.Leafs.Append("ses-ecd-version", types.YLeaf{"SesEcdVersion", externalClientSummary.SesEcdVersion})

    externalClientSummary.EntityData.YListKeys = []string {}

    return &(externalClientSummary.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum
// ECD pathlist summary
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of ECD pathlists. The type is interface{} with range: 0..4294967295.
    SepNumEcdPathlist interface{}

    // Number of ECD pathlists unresolved. The type is interface{} with range:
    // 0..4294967295.
    SepNumEcdPlUnresolved interface{}

    // Number of ECD pathlists per interest. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest.
    SepNumEcdPlPerInterest []*Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetEntityData() *types.CommonEntityData {
    sesPlSum.EntityData.YFilter = sesPlSum.YFilter
    sesPlSum.EntityData.YangName = "ses-pl-sum"
    sesPlSum.EntityData.BundleName = "cisco_ios_xr"
    sesPlSum.EntityData.ParentYangName = "external-client-summary"
    sesPlSum.EntityData.SegmentPath = "ses-pl-sum"
    sesPlSum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sesPlSum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sesPlSum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sesPlSum.EntityData.Children = types.NewOrderedMap()
    sesPlSum.EntityData.Children.Append("sep-num-ecd-pl-per-interest", types.YChild{"SepNumEcdPlPerInterest", nil})
    for i := range sesPlSum.SepNumEcdPlPerInterest {
        sesPlSum.EntityData.Children.Append(types.GetSegmentPath(sesPlSum.SepNumEcdPlPerInterest[i]), types.YChild{"SepNumEcdPlPerInterest", sesPlSum.SepNumEcdPlPerInterest[i]})
    }
    sesPlSum.EntityData.Leafs = types.NewOrderedMap()
    sesPlSum.EntityData.Leafs.Append("sep-num-ecd-pathlist", types.YLeaf{"SepNumEcdPathlist", sesPlSum.SepNumEcdPathlist})
    sesPlSum.EntityData.Leafs.Append("sep-num-ecd-pl-unresolved", types.YLeaf{"SepNumEcdPlUnresolved", sesPlSum.SepNumEcdPlUnresolved})

    sesPlSum.EntityData.YListKeys = []string {}

    return &(sesPlSum.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest
// Number of ECD pathlists per interest
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetEntityData() *types.CommonEntityData {
    sepNumEcdPlPerInterest.EntityData.YFilter = sepNumEcdPlPerInterest.YFilter
    sepNumEcdPlPerInterest.EntityData.YangName = "sep-num-ecd-pl-per-interest"
    sepNumEcdPlPerInterest.EntityData.BundleName = "cisco_ios_xr"
    sepNumEcdPlPerInterest.EntityData.ParentYangName = "ses-pl-sum"
    sepNumEcdPlPerInterest.EntityData.SegmentPath = "sep-num-ecd-pl-per-interest"
    sepNumEcdPlPerInterest.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sepNumEcdPlPerInterest.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sepNumEcdPlPerInterest.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sepNumEcdPlPerInterest.EntityData.Children = types.NewOrderedMap()
    sepNumEcdPlPerInterest.EntityData.Leafs = types.NewOrderedMap()
    sepNumEcdPlPerInterest.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sepNumEcdPlPerInterest.Entry})

    sepNumEcdPlPerInterest.EntityData.YListKeys = []string {}

    return &(sepNumEcdPlPerInterest.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc
// CEF misc hidden data
type Fib_Nodes_Node_Protocols_Protocol_Misc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // number of pfi ifh create notif. The type is interface{} with range:
    // 0..18446744073709551615.
    MiPfiIfhUpd interface{}

    // number of pfi ifh delete notif. The type is interface{} with range:
    // 0..18446744073709551615.
    MiPfiIfhDel interface{}

    // number of stale ifh removed. The type is interface{} with range:
    // 0..18446744073709551615.
    MiPfiIfhStale interface{}

    // total platform update time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiTotPlatUpdTime interface{}

    // total time spent in gtrie operations. The type is interface{} with range:
    // 0..18446744073709551615.
    MiTotGtrieTime interface{}

    // total download time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiTotDnldTime interface{}

    // clock download time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiClockTime interface{}

    // CPU download time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiCpuTime interface{}

    // Last FIB shared memory reset time stamp. The type is interface{} with
    // range: 0..18446744073709551615.
    MiShmResetTs interface{}

    // Number of idbs that hit ifh recycle. The type is interface{} with range:
    // 0..4294967295.
    MiIdbRecycleCount interface{}

    // Number of idb cleaned up after hitting ifh recycle. The type is interface{}
    // with range: 0..4294967295.
    MiIdbRecycleCleanupCount interface{}

    // Number of management interfaces. The type is interface{} with range:
    // 0..4294967295.
    MiNumMgmtList interface{}

    // mi num virtual ll addresses added. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesAdded interface{}

    // mi num virtual ll addresses deleted. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesDeleted interface{}

    // mi num virtual ll addresses dropped. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesDropped interface{}

    // mi num virtual ll addresses cached. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesCached interface{}

    // cpuless node list init. The type is bool.
    MiCpulessInit interface{}

    // count of cpuless line cards. The type is interface{} with range:
    // 0..4294967295.
    MiCpulessCount interface{}

    // Prefer AIB routes over RIB/LSD operational state. The type is bool.
    MiPreferAibRoutesOverRibOper interface{}

    // Prefer AIB routes over RIB/LSD configured state. The type is bool.
    MiPreferAibRoutesOverRibCfg interface{}

    // XPL loadinfo is enabled. The type is bool.
    MiXplLdiEnabled interface{}

    // FIB ISSU state.
    MiIssuState Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState

    // FIB platform capabilities.
    MiPlatCapabilities Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities

    // Number of recycled idb extensions that failed  cleanup. The type is slice
    // of Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount.
    MiIdbExtCleanupFailedCount []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount

    // Per protocol Failure stats for label RPF. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail.
    MiLrpfStatsFail []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail

    // Per protocol actions stats for label RPF. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct.
    MiLrpfStatsAct []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct

    // Per protocol number of label RPFs. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum.
    MiLrpfNum []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum

    // Number of interfaces having label security  enabled. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum.
    MiIdbLsecEnabledNum []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum

    // number of LISP EID prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid.
    MiNumLispEid []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid

    // number of LISP EID prefixes eligible for  forwarding. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid.
    MiNumLispValidEid []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid

    // list of cpuless line cards. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode.
    MiCpulessNode []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode

    // Per protocol debug stats. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat.
    MiProtoDbgStat []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat

    // the number of counters used for purge counter stats. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr.
    MiIdbPurgeCntr []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr

    // Timestamps of deleted routes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel.
    MiDel []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel

    // FRR statistics. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat.
    MiFrrStat []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetEntityData() *types.CommonEntityData {
    misc.EntityData.YFilter = misc.YFilter
    misc.EntityData.YangName = "misc"
    misc.EntityData.BundleName = "cisco_ios_xr"
    misc.EntityData.ParentYangName = "protocol"
    misc.EntityData.SegmentPath = "misc"
    misc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    misc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    misc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    misc.EntityData.Children = types.NewOrderedMap()
    misc.EntityData.Children.Append("mi-issu-state", types.YChild{"MiIssuState", &misc.MiIssuState})
    misc.EntityData.Children.Append("mi-plat-capabilities", types.YChild{"MiPlatCapabilities", &misc.MiPlatCapabilities})
    misc.EntityData.Children.Append("mi-idb-ext-cleanup-failed-count", types.YChild{"MiIdbExtCleanupFailedCount", nil})
    for i := range misc.MiIdbExtCleanupFailedCount {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiIdbExtCleanupFailedCount[i]), types.YChild{"MiIdbExtCleanupFailedCount", misc.MiIdbExtCleanupFailedCount[i]})
    }
    misc.EntityData.Children.Append("mi-lrpf-stats-fail", types.YChild{"MiLrpfStatsFail", nil})
    for i := range misc.MiLrpfStatsFail {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiLrpfStatsFail[i]), types.YChild{"MiLrpfStatsFail", misc.MiLrpfStatsFail[i]})
    }
    misc.EntityData.Children.Append("mi-lrpf-stats-act", types.YChild{"MiLrpfStatsAct", nil})
    for i := range misc.MiLrpfStatsAct {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiLrpfStatsAct[i]), types.YChild{"MiLrpfStatsAct", misc.MiLrpfStatsAct[i]})
    }
    misc.EntityData.Children.Append("mi-lrpf-num", types.YChild{"MiLrpfNum", nil})
    for i := range misc.MiLrpfNum {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiLrpfNum[i]), types.YChild{"MiLrpfNum", misc.MiLrpfNum[i]})
    }
    misc.EntityData.Children.Append("mi-idb-lsec-enabled-num", types.YChild{"MiIdbLsecEnabledNum", nil})
    for i := range misc.MiIdbLsecEnabledNum {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiIdbLsecEnabledNum[i]), types.YChild{"MiIdbLsecEnabledNum", misc.MiIdbLsecEnabledNum[i]})
    }
    misc.EntityData.Children.Append("mi-num-lisp-eid", types.YChild{"MiNumLispEid", nil})
    for i := range misc.MiNumLispEid {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiNumLispEid[i]), types.YChild{"MiNumLispEid", misc.MiNumLispEid[i]})
    }
    misc.EntityData.Children.Append("mi-num-lisp-valid-eid", types.YChild{"MiNumLispValidEid", nil})
    for i := range misc.MiNumLispValidEid {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiNumLispValidEid[i]), types.YChild{"MiNumLispValidEid", misc.MiNumLispValidEid[i]})
    }
    misc.EntityData.Children.Append("mi-cpuless-node", types.YChild{"MiCpulessNode", nil})
    for i := range misc.MiCpulessNode {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiCpulessNode[i]), types.YChild{"MiCpulessNode", misc.MiCpulessNode[i]})
    }
    misc.EntityData.Children.Append("mi-proto-dbg-stat", types.YChild{"MiProtoDbgStat", nil})
    for i := range misc.MiProtoDbgStat {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiProtoDbgStat[i]), types.YChild{"MiProtoDbgStat", misc.MiProtoDbgStat[i]})
    }
    misc.EntityData.Children.Append("mi-idb-purge-cntr", types.YChild{"MiIdbPurgeCntr", nil})
    for i := range misc.MiIdbPurgeCntr {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiIdbPurgeCntr[i]), types.YChild{"MiIdbPurgeCntr", misc.MiIdbPurgeCntr[i]})
    }
    misc.EntityData.Children.Append("mi-del", types.YChild{"MiDel", nil})
    for i := range misc.MiDel {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiDel[i]), types.YChild{"MiDel", misc.MiDel[i]})
    }
    misc.EntityData.Children.Append("mi-frr-stat", types.YChild{"MiFrrStat", nil})
    for i := range misc.MiFrrStat {
        misc.EntityData.Children.Append(types.GetSegmentPath(misc.MiFrrStat[i]), types.YChild{"MiFrrStat", misc.MiFrrStat[i]})
    }
    misc.EntityData.Leafs = types.NewOrderedMap()
    misc.EntityData.Leafs.Append("mi-pfi-ifh-upd", types.YLeaf{"MiPfiIfhUpd", misc.MiPfiIfhUpd})
    misc.EntityData.Leafs.Append("mi-pfi-ifh-del", types.YLeaf{"MiPfiIfhDel", misc.MiPfiIfhDel})
    misc.EntityData.Leafs.Append("mi-pfi-ifh-stale", types.YLeaf{"MiPfiIfhStale", misc.MiPfiIfhStale})
    misc.EntityData.Leafs.Append("mi-tot-plat-upd-time", types.YLeaf{"MiTotPlatUpdTime", misc.MiTotPlatUpdTime})
    misc.EntityData.Leafs.Append("mi-tot-gtrie-time", types.YLeaf{"MiTotGtrieTime", misc.MiTotGtrieTime})
    misc.EntityData.Leafs.Append("mi-tot-dnld-time", types.YLeaf{"MiTotDnldTime", misc.MiTotDnldTime})
    misc.EntityData.Leafs.Append("mi-clock-time", types.YLeaf{"MiClockTime", misc.MiClockTime})
    misc.EntityData.Leafs.Append("mi-cpu-time", types.YLeaf{"MiCpuTime", misc.MiCpuTime})
    misc.EntityData.Leafs.Append("mi-shm-reset-ts", types.YLeaf{"MiShmResetTs", misc.MiShmResetTs})
    misc.EntityData.Leafs.Append("mi-idb-recycle-count", types.YLeaf{"MiIdbRecycleCount", misc.MiIdbRecycleCount})
    misc.EntityData.Leafs.Append("mi-idb-recycle-cleanup-count", types.YLeaf{"MiIdbRecycleCleanupCount", misc.MiIdbRecycleCleanupCount})
    misc.EntityData.Leafs.Append("mi-num-mgmt-list", types.YLeaf{"MiNumMgmtList", misc.MiNumMgmtList})
    misc.EntityData.Leafs.Append("mi-num-virtual-ll-addresses-added", types.YLeaf{"MiNumVirtualLlAddressesAdded", misc.MiNumVirtualLlAddressesAdded})
    misc.EntityData.Leafs.Append("mi-num-virtual-ll-addresses-deleted", types.YLeaf{"MiNumVirtualLlAddressesDeleted", misc.MiNumVirtualLlAddressesDeleted})
    misc.EntityData.Leafs.Append("mi-num-virtual-ll-addresses-dropped", types.YLeaf{"MiNumVirtualLlAddressesDropped", misc.MiNumVirtualLlAddressesDropped})
    misc.EntityData.Leafs.Append("mi-num-virtual-ll-addresses-cached", types.YLeaf{"MiNumVirtualLlAddressesCached", misc.MiNumVirtualLlAddressesCached})
    misc.EntityData.Leafs.Append("mi-cpuless-init", types.YLeaf{"MiCpulessInit", misc.MiCpulessInit})
    misc.EntityData.Leafs.Append("mi-cpuless-count", types.YLeaf{"MiCpulessCount", misc.MiCpulessCount})
    misc.EntityData.Leafs.Append("mi-prefer-aib-routes-over-rib-oper", types.YLeaf{"MiPreferAibRoutesOverRibOper", misc.MiPreferAibRoutesOverRibOper})
    misc.EntityData.Leafs.Append("mi-prefer-aib-routes-over-rib-cfg", types.YLeaf{"MiPreferAibRoutesOverRibCfg", misc.MiPreferAibRoutesOverRibCfg})
    misc.EntityData.Leafs.Append("mi-xpl-ldi-enabled", types.YLeaf{"MiXplLdiEnabled", misc.MiXplLdiEnabled})

    misc.EntityData.YListKeys = []string {}

    return &(misc.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState
// FIB ISSU state
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IMDR supported. The type is bool.
    ImdrSupport interface{}

    // SLC supported. The type is bool.
    SlcSupport interface{}

    // ISSU restart. The type is bool.
    FisIssuRestart interface{}

    // IMDR End-of-config implicit. The type is bool.
    ImdrEocImplicit interface{}

    // SLC End-of-config implicit. The type is bool.
    SlcEocImplicit interface{}

    // End-of-config received from IMDR timestamp. The type is string with length:
    // 0..33.
    EocReceivedImdrTimeStamp interface{}

    // End-of-config received from SLC timestamp. The type is string with length:
    // 0..33.
    EocReceivedSlcTimeStamp interface{}

    // End-of-download received from IM timestamp. The type is string with length:
    // 0..33.
    EodReceivedImTimeStamp interface{}

    // End-of-download send to IMDR timestamp. The type is string with length:
    // 0..33.
    EodSentImdrTimeStamp interface{}

    // End-of-download send to SLC timestamp. The type is string with length:
    // 0..33.
    EodSentSlcTimeStamp interface{}

    // ISSU error sent to ISSUMGR timetstamp. The type is interface{} with range:
    // 0..18446744073709551615.
    FisIssuErrorTs interface{}

    // IMDR state for the protocols. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState.
    FisProtoState []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetEntityData() *types.CommonEntityData {
    miIssuState.EntityData.YFilter = miIssuState.YFilter
    miIssuState.EntityData.YangName = "mi-issu-state"
    miIssuState.EntityData.BundleName = "cisco_ios_xr"
    miIssuState.EntityData.ParentYangName = "misc"
    miIssuState.EntityData.SegmentPath = "mi-issu-state"
    miIssuState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miIssuState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miIssuState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miIssuState.EntityData.Children = types.NewOrderedMap()
    miIssuState.EntityData.Children.Append("fis-proto-state", types.YChild{"FisProtoState", nil})
    for i := range miIssuState.FisProtoState {
        miIssuState.EntityData.Children.Append(types.GetSegmentPath(miIssuState.FisProtoState[i]), types.YChild{"FisProtoState", miIssuState.FisProtoState[i]})
    }
    miIssuState.EntityData.Leafs = types.NewOrderedMap()
    miIssuState.EntityData.Leafs.Append("imdr-support", types.YLeaf{"ImdrSupport", miIssuState.ImdrSupport})
    miIssuState.EntityData.Leafs.Append("slc-support", types.YLeaf{"SlcSupport", miIssuState.SlcSupport})
    miIssuState.EntityData.Leafs.Append("fis-issu-restart", types.YLeaf{"FisIssuRestart", miIssuState.FisIssuRestart})
    miIssuState.EntityData.Leafs.Append("imdr-eoc-implicit", types.YLeaf{"ImdrEocImplicit", miIssuState.ImdrEocImplicit})
    miIssuState.EntityData.Leafs.Append("slc-eoc-implicit", types.YLeaf{"SlcEocImplicit", miIssuState.SlcEocImplicit})
    miIssuState.EntityData.Leafs.Append("eoc-received-imdr-time-stamp", types.YLeaf{"EocReceivedImdrTimeStamp", miIssuState.EocReceivedImdrTimeStamp})
    miIssuState.EntityData.Leafs.Append("eoc-received-slc-time-stamp", types.YLeaf{"EocReceivedSlcTimeStamp", miIssuState.EocReceivedSlcTimeStamp})
    miIssuState.EntityData.Leafs.Append("eod-received-im-time-stamp", types.YLeaf{"EodReceivedImTimeStamp", miIssuState.EodReceivedImTimeStamp})
    miIssuState.EntityData.Leafs.Append("eod-sent-imdr-time-stamp", types.YLeaf{"EodSentImdrTimeStamp", miIssuState.EodSentImdrTimeStamp})
    miIssuState.EntityData.Leafs.Append("eod-sent-slc-time-stamp", types.YLeaf{"EodSentSlcTimeStamp", miIssuState.EodSentSlcTimeStamp})
    miIssuState.EntityData.Leafs.Append("fis-issu-error-ts", types.YLeaf{"FisIssuErrorTs", miIssuState.FisIssuErrorTs})

    miIssuState.EntityData.YListKeys = []string {}

    return &(miIssuState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState
// IMDR state for the protocols
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol name. The type is string with length: 0..6.
    ProtocolName interface{}

    // AIB EODTimeStamp. The type is string with length: 0..33.
    AibEodTimeStamp interface{}

    // RSI EOD expected/valid. The type is bool.
    RsiEodValid interface{}

    // RSI EOD received timestamp. The type is string with length: 0..33.
    RsiEodTimeStamp interface{}

    // LSD EOD expected/valid. The type is bool.
    LsdEodValid interface{}

    // LSD EOD received timestamp. The type is string with length: 0..33.
    LsdEodTimeStamp interface{}

    // LMRIB EOD expected/valid. The type is bool.
    LmribEodValid interface{}

    // LMRIB EOD received timestamp. The type is string with length: 0..33.
    LmribEodTimeStamp interface{}

    // RIB table info valid. The type is bool.
    RibInfoValid interface{}

    // Number of BCDL tables. The type is interface{} with range: 0..4294967295.
    BcdlTables interface{}

    // Number of tables converged. The type is interface{} with range:
    // 0..4294967295.
    ConvergedTables interface{}

    // All RIB tables converged timestamp. The type is string with length: 0..33.
    RibTablesConvergedTimeStamp interface{}

    // Protocol EOD expected/valid. The type is bool.
    ProtocolEodValid interface{}

    // Protocol EOD sent timestamp. The type is string with length: 0..33.
    ProtocolEodTimeStamp interface{}
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetEntityData() *types.CommonEntityData {
    fisProtoState.EntityData.YFilter = fisProtoState.YFilter
    fisProtoState.EntityData.YangName = "fis-proto-state"
    fisProtoState.EntityData.BundleName = "cisco_ios_xr"
    fisProtoState.EntityData.ParentYangName = "mi-issu-state"
    fisProtoState.EntityData.SegmentPath = "fis-proto-state"
    fisProtoState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fisProtoState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fisProtoState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fisProtoState.EntityData.Children = types.NewOrderedMap()
    fisProtoState.EntityData.Leafs = types.NewOrderedMap()
    fisProtoState.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", fisProtoState.ProtocolName})
    fisProtoState.EntityData.Leafs.Append("aib-eod-time-stamp", types.YLeaf{"AibEodTimeStamp", fisProtoState.AibEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("rsi-eod-valid", types.YLeaf{"RsiEodValid", fisProtoState.RsiEodValid})
    fisProtoState.EntityData.Leafs.Append("rsi-eod-time-stamp", types.YLeaf{"RsiEodTimeStamp", fisProtoState.RsiEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("lsd-eod-valid", types.YLeaf{"LsdEodValid", fisProtoState.LsdEodValid})
    fisProtoState.EntityData.Leafs.Append("lsd-eod-time-stamp", types.YLeaf{"LsdEodTimeStamp", fisProtoState.LsdEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("lmrib-eod-valid", types.YLeaf{"LmribEodValid", fisProtoState.LmribEodValid})
    fisProtoState.EntityData.Leafs.Append("lmrib-eod-time-stamp", types.YLeaf{"LmribEodTimeStamp", fisProtoState.LmribEodTimeStamp})
    fisProtoState.EntityData.Leafs.Append("rib-info-valid", types.YLeaf{"RibInfoValid", fisProtoState.RibInfoValid})
    fisProtoState.EntityData.Leafs.Append("bcdl-tables", types.YLeaf{"BcdlTables", fisProtoState.BcdlTables})
    fisProtoState.EntityData.Leafs.Append("converged-tables", types.YLeaf{"ConvergedTables", fisProtoState.ConvergedTables})
    fisProtoState.EntityData.Leafs.Append("rib-tables-converged-time-stamp", types.YLeaf{"RibTablesConvergedTimeStamp", fisProtoState.RibTablesConvergedTimeStamp})
    fisProtoState.EntityData.Leafs.Append("protocol-eod-valid", types.YLeaf{"ProtocolEodValid", fisProtoState.ProtocolEodValid})
    fisProtoState.EntityData.Leafs.Append("protocol-eod-time-stamp", types.YLeaf{"ProtocolEodTimeStamp", fisProtoState.ProtocolEodTimeStamp})

    fisProtoState.EntityData.YListKeys = []string {}

    return &(fisProtoState.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities
// FIB platform capabilities
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L3 LBL levels. The type is interface{} with range: 0..255.
    FpcNumL3LblLevels interface{}

    // L3 Hash buckets. The type is interface{} with range: 0..255.
    FpcNumL3LblPaths interface{}

    // L3 Recursive Hash buckets. The type is interface{} with range: 0..255.
    FpcNumL3LblRecPaths interface{}

    // L3 Unequal cost hash buckets. The type is interface{} with range: 0..255.
    FpcNumL3UcmpPaths interface{}

    // Forwarding stages. The type is interface{} with range: 0..255.
    FpcNumFwdingStages interface{}

    // Label split. The type is interface{} with range: 0..4294967295.
    FpcLocalLabelSplit interface{}

    // Statistics support. The type is bool.
    FpcStatsSupport interface{}

    // Plat ready cb register. The type is bool.
    FpcPlatfReadyCbWait interface{}

    // Path per tunnel class. The type is interface{} with range: 0..255.
    FpcNumPathsPerPbtsClass interface{}

    // V4 update disable. The type is bool.
    FpcPlatfV4UpdDisable interface{}

    // V6 update disable. The type is bool.
    FpcPlatfV6UpdDisable interface{}

    // LBA tuples. The type is interface{} with range: 0..4294967295.
    FpcLbaTuplesDefault interface{}

    // MRAPS support. The type is bool.
    FpcMrapsSupport interface{}

    // PBTS default class support. The type is bool.
    FpcPbtsDefclassSupport interface{}

    // loadinfo filter support. The type is bool.
    FpcLoadinfoFilterSupport interface{}

    // NHID support. The type is bool.
    FpcNhid interface{}

    // Backwalk dependents is required. The type is bool.
    FpcPlatfTempBackWalkReqd interface{}

    // Link MPLS IPv6 NH support. The type is bool.
    FpcLinkMplsNhinfoInIpv6ThreadSupport interface{}

    // Exclude Deag backup Paths. The type is bool.
    FpcExcludeDeagBkup interface{}

    // Per-destination load-balancing support. The type is bool.
    FpcDlbSupport interface{}

    // Prefix filter level of support. The type is interface{} with range: 0..255.
    FpcPrefixFilterSupport interface{}

    // Slowpath ingress inject required. The type is bool.
    FpcSlowpathIngressInjectReqd interface{}

    // COFO supported. The type is bool.
    FpcCofoSupport interface{}

    // SRv6 supported. The type is bool.
    FpcSrv6Support interface{}

    // IPv4 over IPV6 Collapse LDI support. The type is bool.
    FpcV4v6LdiCollapseSupport interface{}

    // LISP Decap over 4. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4.
    FpcLispDecapOverV4 []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4

    // LISP Decap over 6. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6.
    FpcLispDecapOverV6 []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6

    // LISP UCMP support. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp.
    FpcLispUcmp []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp

    // Fallback VRF support. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable.
    FpcResolveViaTable []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetEntityData() *types.CommonEntityData {
    miPlatCapabilities.EntityData.YFilter = miPlatCapabilities.YFilter
    miPlatCapabilities.EntityData.YangName = "mi-plat-capabilities"
    miPlatCapabilities.EntityData.BundleName = "cisco_ios_xr"
    miPlatCapabilities.EntityData.ParentYangName = "misc"
    miPlatCapabilities.EntityData.SegmentPath = "mi-plat-capabilities"
    miPlatCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miPlatCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miPlatCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miPlatCapabilities.EntityData.Children = types.NewOrderedMap()
    miPlatCapabilities.EntityData.Children.Append("fpc-lisp-decap-over-v4", types.YChild{"FpcLispDecapOverV4", nil})
    for i := range miPlatCapabilities.FpcLispDecapOverV4 {
        miPlatCapabilities.EntityData.Children.Append(types.GetSegmentPath(miPlatCapabilities.FpcLispDecapOverV4[i]), types.YChild{"FpcLispDecapOverV4", miPlatCapabilities.FpcLispDecapOverV4[i]})
    }
    miPlatCapabilities.EntityData.Children.Append("fpc-lisp-decap-over-v6", types.YChild{"FpcLispDecapOverV6", nil})
    for i := range miPlatCapabilities.FpcLispDecapOverV6 {
        miPlatCapabilities.EntityData.Children.Append(types.GetSegmentPath(miPlatCapabilities.FpcLispDecapOverV6[i]), types.YChild{"FpcLispDecapOverV6", miPlatCapabilities.FpcLispDecapOverV6[i]})
    }
    miPlatCapabilities.EntityData.Children.Append("fpc-lisp-ucmp", types.YChild{"FpcLispUcmp", nil})
    for i := range miPlatCapabilities.FpcLispUcmp {
        miPlatCapabilities.EntityData.Children.Append(types.GetSegmentPath(miPlatCapabilities.FpcLispUcmp[i]), types.YChild{"FpcLispUcmp", miPlatCapabilities.FpcLispUcmp[i]})
    }
    miPlatCapabilities.EntityData.Children.Append("fpc-resolve-via-table", types.YChild{"FpcResolveViaTable", nil})
    for i := range miPlatCapabilities.FpcResolveViaTable {
        miPlatCapabilities.EntityData.Children.Append(types.GetSegmentPath(miPlatCapabilities.FpcResolveViaTable[i]), types.YChild{"FpcResolveViaTable", miPlatCapabilities.FpcResolveViaTable[i]})
    }
    miPlatCapabilities.EntityData.Leafs = types.NewOrderedMap()
    miPlatCapabilities.EntityData.Leafs.Append("fpc-num-l3-lbl-levels", types.YLeaf{"FpcNumL3LblLevels", miPlatCapabilities.FpcNumL3LblLevels})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-num-l3-lbl-paths", types.YLeaf{"FpcNumL3LblPaths", miPlatCapabilities.FpcNumL3LblPaths})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-num-l3-lbl-rec-paths", types.YLeaf{"FpcNumL3LblRecPaths", miPlatCapabilities.FpcNumL3LblRecPaths})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-num-l3-ucmp-paths", types.YLeaf{"FpcNumL3UcmpPaths", miPlatCapabilities.FpcNumL3UcmpPaths})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-num-fwding-stages", types.YLeaf{"FpcNumFwdingStages", miPlatCapabilities.FpcNumFwdingStages})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-local-label-split", types.YLeaf{"FpcLocalLabelSplit", miPlatCapabilities.FpcLocalLabelSplit})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-stats-support", types.YLeaf{"FpcStatsSupport", miPlatCapabilities.FpcStatsSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-platf-ready-cb-wait", types.YLeaf{"FpcPlatfReadyCbWait", miPlatCapabilities.FpcPlatfReadyCbWait})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-num-paths-per-pbts-class", types.YLeaf{"FpcNumPathsPerPbtsClass", miPlatCapabilities.FpcNumPathsPerPbtsClass})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-platf-v4-upd-disable", types.YLeaf{"FpcPlatfV4UpdDisable", miPlatCapabilities.FpcPlatfV4UpdDisable})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-platf-v6-upd-disable", types.YLeaf{"FpcPlatfV6UpdDisable", miPlatCapabilities.FpcPlatfV6UpdDisable})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-lba-tuples-default", types.YLeaf{"FpcLbaTuplesDefault", miPlatCapabilities.FpcLbaTuplesDefault})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-mraps-support", types.YLeaf{"FpcMrapsSupport", miPlatCapabilities.FpcMrapsSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-pbts-defclass-support", types.YLeaf{"FpcPbtsDefclassSupport", miPlatCapabilities.FpcPbtsDefclassSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-loadinfo-filter-support", types.YLeaf{"FpcLoadinfoFilterSupport", miPlatCapabilities.FpcLoadinfoFilterSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-nhid", types.YLeaf{"FpcNhid", miPlatCapabilities.FpcNhid})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-platf-temp-back-walk-reqd", types.YLeaf{"FpcPlatfTempBackWalkReqd", miPlatCapabilities.FpcPlatfTempBackWalkReqd})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-link-mpls-nhinfo-in-ipv6-thread-support", types.YLeaf{"FpcLinkMplsNhinfoInIpv6ThreadSupport", miPlatCapabilities.FpcLinkMplsNhinfoInIpv6ThreadSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-exclude-deag-bkup", types.YLeaf{"FpcExcludeDeagBkup", miPlatCapabilities.FpcExcludeDeagBkup})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-dlb-support", types.YLeaf{"FpcDlbSupport", miPlatCapabilities.FpcDlbSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-prefix-filter-support", types.YLeaf{"FpcPrefixFilterSupport", miPlatCapabilities.FpcPrefixFilterSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-slowpath-ingress-inject-reqd", types.YLeaf{"FpcSlowpathIngressInjectReqd", miPlatCapabilities.FpcSlowpathIngressInjectReqd})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-cofo-support", types.YLeaf{"FpcCofoSupport", miPlatCapabilities.FpcCofoSupport})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-srv6-support", types.YLeaf{"FpcSrv6Support", miPlatCapabilities.FpcSrv6Support})
    miPlatCapabilities.EntityData.Leafs.Append("fpc-v4v6-ldi-collapse-support", types.YLeaf{"FpcV4v6LdiCollapseSupport", miPlatCapabilities.FpcV4v6LdiCollapseSupport})

    miPlatCapabilities.EntityData.YListKeys = []string {}

    return &(miPlatCapabilities.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4
// LISP Decap over 4
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetEntityData() *types.CommonEntityData {
    fpcLispDecapOverV4.EntityData.YFilter = fpcLispDecapOverV4.YFilter
    fpcLispDecapOverV4.EntityData.YangName = "fpc-lisp-decap-over-v4"
    fpcLispDecapOverV4.EntityData.BundleName = "cisco_ios_xr"
    fpcLispDecapOverV4.EntityData.ParentYangName = "mi-plat-capabilities"
    fpcLispDecapOverV4.EntityData.SegmentPath = "fpc-lisp-decap-over-v4"
    fpcLispDecapOverV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpcLispDecapOverV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpcLispDecapOverV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpcLispDecapOverV4.EntityData.Children = types.NewOrderedMap()
    fpcLispDecapOverV4.EntityData.Leafs = types.NewOrderedMap()
    fpcLispDecapOverV4.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpcLispDecapOverV4.Entry})

    fpcLispDecapOverV4.EntityData.YListKeys = []string {}

    return &(fpcLispDecapOverV4.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6
// LISP Decap over 6
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetEntityData() *types.CommonEntityData {
    fpcLispDecapOverV6.EntityData.YFilter = fpcLispDecapOverV6.YFilter
    fpcLispDecapOverV6.EntityData.YangName = "fpc-lisp-decap-over-v6"
    fpcLispDecapOverV6.EntityData.BundleName = "cisco_ios_xr"
    fpcLispDecapOverV6.EntityData.ParentYangName = "mi-plat-capabilities"
    fpcLispDecapOverV6.EntityData.SegmentPath = "fpc-lisp-decap-over-v6"
    fpcLispDecapOverV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpcLispDecapOverV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpcLispDecapOverV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpcLispDecapOverV6.EntityData.Children = types.NewOrderedMap()
    fpcLispDecapOverV6.EntityData.Leafs = types.NewOrderedMap()
    fpcLispDecapOverV6.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpcLispDecapOverV6.Entry})

    fpcLispDecapOverV6.EntityData.YListKeys = []string {}

    return &(fpcLispDecapOverV6.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp
// LISP UCMP support
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetEntityData() *types.CommonEntityData {
    fpcLispUcmp.EntityData.YFilter = fpcLispUcmp.YFilter
    fpcLispUcmp.EntityData.YangName = "fpc-lisp-ucmp"
    fpcLispUcmp.EntityData.BundleName = "cisco_ios_xr"
    fpcLispUcmp.EntityData.ParentYangName = "mi-plat-capabilities"
    fpcLispUcmp.EntityData.SegmentPath = "fpc-lisp-ucmp"
    fpcLispUcmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpcLispUcmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpcLispUcmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpcLispUcmp.EntityData.Children = types.NewOrderedMap()
    fpcLispUcmp.EntityData.Leafs = types.NewOrderedMap()
    fpcLispUcmp.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpcLispUcmp.Entry})

    fpcLispUcmp.EntityData.YListKeys = []string {}

    return &(fpcLispUcmp.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable
// Fallback VRF support
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetEntityData() *types.CommonEntityData {
    fpcResolveViaTable.EntityData.YFilter = fpcResolveViaTable.YFilter
    fpcResolveViaTable.EntityData.YangName = "fpc-resolve-via-table"
    fpcResolveViaTable.EntityData.BundleName = "cisco_ios_xr"
    fpcResolveViaTable.EntityData.ParentYangName = "mi-plat-capabilities"
    fpcResolveViaTable.EntityData.SegmentPath = "fpc-resolve-via-table"
    fpcResolveViaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpcResolveViaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpcResolveViaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpcResolveViaTable.EntityData.Children = types.NewOrderedMap()
    fpcResolveViaTable.EntityData.Leafs = types.NewOrderedMap()
    fpcResolveViaTable.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpcResolveViaTable.Entry})

    fpcResolveViaTable.EntityData.YListKeys = []string {}

    return &(fpcResolveViaTable.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount
// Number of recycled idb extensions that failed
// 
// cleanup
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetEntityData() *types.CommonEntityData {
    miIdbExtCleanupFailedCount.EntityData.YFilter = miIdbExtCleanupFailedCount.YFilter
    miIdbExtCleanupFailedCount.EntityData.YangName = "mi-idb-ext-cleanup-failed-count"
    miIdbExtCleanupFailedCount.EntityData.BundleName = "cisco_ios_xr"
    miIdbExtCleanupFailedCount.EntityData.ParentYangName = "misc"
    miIdbExtCleanupFailedCount.EntityData.SegmentPath = "mi-idb-ext-cleanup-failed-count"
    miIdbExtCleanupFailedCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miIdbExtCleanupFailedCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miIdbExtCleanupFailedCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miIdbExtCleanupFailedCount.EntityData.Children = types.NewOrderedMap()
    miIdbExtCleanupFailedCount.EntityData.Leafs = types.NewOrderedMap()
    miIdbExtCleanupFailedCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miIdbExtCleanupFailedCount.Entry})

    miIdbExtCleanupFailedCount.EntityData.YListKeys = []string {}

    return &(miIdbExtCleanupFailedCount.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail
// Per protocol Failure stats for label RPF
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetEntityData() *types.CommonEntityData {
    miLrpfStatsFail.EntityData.YFilter = miLrpfStatsFail.YFilter
    miLrpfStatsFail.EntityData.YangName = "mi-lrpf-stats-fail"
    miLrpfStatsFail.EntityData.BundleName = "cisco_ios_xr"
    miLrpfStatsFail.EntityData.ParentYangName = "misc"
    miLrpfStatsFail.EntityData.SegmentPath = "mi-lrpf-stats-fail"
    miLrpfStatsFail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miLrpfStatsFail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miLrpfStatsFail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miLrpfStatsFail.EntityData.Children = types.NewOrderedMap()
    miLrpfStatsFail.EntityData.Leafs = types.NewOrderedMap()
    miLrpfStatsFail.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miLrpfStatsFail.Entry})

    miLrpfStatsFail.EntityData.YListKeys = []string {}

    return &(miLrpfStatsFail.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct
// Per protocol actions stats for label RPF
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetEntityData() *types.CommonEntityData {
    miLrpfStatsAct.EntityData.YFilter = miLrpfStatsAct.YFilter
    miLrpfStatsAct.EntityData.YangName = "mi-lrpf-stats-act"
    miLrpfStatsAct.EntityData.BundleName = "cisco_ios_xr"
    miLrpfStatsAct.EntityData.ParentYangName = "misc"
    miLrpfStatsAct.EntityData.SegmentPath = "mi-lrpf-stats-act"
    miLrpfStatsAct.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miLrpfStatsAct.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miLrpfStatsAct.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miLrpfStatsAct.EntityData.Children = types.NewOrderedMap()
    miLrpfStatsAct.EntityData.Leafs = types.NewOrderedMap()
    miLrpfStatsAct.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miLrpfStatsAct.Entry})

    miLrpfStatsAct.EntityData.YListKeys = []string {}

    return &(miLrpfStatsAct.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum
// Per protocol number of label RPFs
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetEntityData() *types.CommonEntityData {
    miLrpfNum.EntityData.YFilter = miLrpfNum.YFilter
    miLrpfNum.EntityData.YangName = "mi-lrpf-num"
    miLrpfNum.EntityData.BundleName = "cisco_ios_xr"
    miLrpfNum.EntityData.ParentYangName = "misc"
    miLrpfNum.EntityData.SegmentPath = "mi-lrpf-num"
    miLrpfNum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miLrpfNum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miLrpfNum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miLrpfNum.EntityData.Children = types.NewOrderedMap()
    miLrpfNum.EntityData.Leafs = types.NewOrderedMap()
    miLrpfNum.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miLrpfNum.Entry})

    miLrpfNum.EntityData.YListKeys = []string {}

    return &(miLrpfNum.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum
// Number of interfaces having label security
// 
// enabled
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetEntityData() *types.CommonEntityData {
    miIdbLsecEnabledNum.EntityData.YFilter = miIdbLsecEnabledNum.YFilter
    miIdbLsecEnabledNum.EntityData.YangName = "mi-idb-lsec-enabled-num"
    miIdbLsecEnabledNum.EntityData.BundleName = "cisco_ios_xr"
    miIdbLsecEnabledNum.EntityData.ParentYangName = "misc"
    miIdbLsecEnabledNum.EntityData.SegmentPath = "mi-idb-lsec-enabled-num"
    miIdbLsecEnabledNum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miIdbLsecEnabledNum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miIdbLsecEnabledNum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miIdbLsecEnabledNum.EntityData.Children = types.NewOrderedMap()
    miIdbLsecEnabledNum.EntityData.Leafs = types.NewOrderedMap()
    miIdbLsecEnabledNum.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miIdbLsecEnabledNum.Entry})

    miIdbLsecEnabledNum.EntityData.YListKeys = []string {}

    return &(miIdbLsecEnabledNum.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid
// number of LISP EID prefixes
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetEntityData() *types.CommonEntityData {
    miNumLispEid.EntityData.YFilter = miNumLispEid.YFilter
    miNumLispEid.EntityData.YangName = "mi-num-lisp-eid"
    miNumLispEid.EntityData.BundleName = "cisco_ios_xr"
    miNumLispEid.EntityData.ParentYangName = "misc"
    miNumLispEid.EntityData.SegmentPath = "mi-num-lisp-eid"
    miNumLispEid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miNumLispEid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miNumLispEid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miNumLispEid.EntityData.Children = types.NewOrderedMap()
    miNumLispEid.EntityData.Leafs = types.NewOrderedMap()
    miNumLispEid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miNumLispEid.Entry})

    miNumLispEid.EntityData.YListKeys = []string {}

    return &(miNumLispEid.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid
// number of LISP EID prefixes eligible for
// 
// forwarding
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetEntityData() *types.CommonEntityData {
    miNumLispValidEid.EntityData.YFilter = miNumLispValidEid.YFilter
    miNumLispValidEid.EntityData.YangName = "mi-num-lisp-valid-eid"
    miNumLispValidEid.EntityData.BundleName = "cisco_ios_xr"
    miNumLispValidEid.EntityData.ParentYangName = "misc"
    miNumLispValidEid.EntityData.SegmentPath = "mi-num-lisp-valid-eid"
    miNumLispValidEid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miNumLispValidEid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miNumLispValidEid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miNumLispValidEid.EntityData.Children = types.NewOrderedMap()
    miNumLispValidEid.EntityData.Leafs = types.NewOrderedMap()
    miNumLispValidEid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miNumLispValidEid.Entry})

    miNumLispValidEid.EntityData.YListKeys = []string {}

    return &(miNumLispValidEid.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode
// list of cpuless line cards
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetEntityData() *types.CommonEntityData {
    miCpulessNode.EntityData.YFilter = miCpulessNode.YFilter
    miCpulessNode.EntityData.YangName = "mi-cpuless-node"
    miCpulessNode.EntityData.BundleName = "cisco_ios_xr"
    miCpulessNode.EntityData.ParentYangName = "misc"
    miCpulessNode.EntityData.SegmentPath = "mi-cpuless-node"
    miCpulessNode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miCpulessNode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miCpulessNode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miCpulessNode.EntityData.Children = types.NewOrderedMap()
    miCpulessNode.EntityData.Leafs = types.NewOrderedMap()
    miCpulessNode.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", miCpulessNode.Entry})

    miCpulessNode.EntityData.YListKeys = []string {}

    return &(miCpulessNode.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat
// Per protocol debug stats
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // the number of fib entries in global tbl. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdGbltblEntries interface{}

    // the number of fib entries in global retry tbl. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdGbltblRejEntries interface{}

    // the number of fib entries in vrf tbls. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdVrftblEntries interface{}

    // the number of fib entries in vrf retry tbls. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdVrftblRejEntries interface{}

    // the number of tables in table set. The type is interface{} with range:
    // 0..4294967295.
    FpdNumTbls interface{}

    // the number of bcdl msgs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdBcdlMsgs interface{}

    // the number of route updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteUpd interface{}

    // the number of route deletes. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteDel interface{}

    // the number of routes received. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteRcv interface{}

    // the number of routes dropped. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteDrops interface{}

    // the number of routes handled with recycled label. The type is interface{}
    // with range: 0..18446744073709551615.
    FpdLblRecycled interface{}

    // the number of routes dropped because of version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdVersionMismatchDrops interface{}

    // the number of adjacency updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdAdjUpd interface{}

    // the number of adjacency deletes. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdAdjDel interface{}

    // number of TX adjacency updates from AIB. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdAdjUpdTx interface{}

    // number of TX adjacency updates that found or created NH. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdAdjUpdTxNhFound interface{}

    // number of TX adjacency updates that went to retry. The type is interface{}
    // with range: 0..18446744073709551615.
    FpdAdjUpdTxRetryCreated interface{}

    // number of TX adj retries that found or created NH. The type is interface{}
    // with range: 0..18446744073709551615.
    FpdAdjTxRetryNhFound interface{}

    // number of times TX NH retry objects updated. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdAdjTxRetryObjReinit interface{}

    // number of adj updates dropped because of OOR. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdAdjDrops interface{}

    // number of AIB messages. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdAdjMsg interface{}

    // the number of TE upds received. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdTeRcv interface{}

    // the number of TE upds dropped because of version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdTeVersionMismatchDrops interface{}

    // the number of retry timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdNumRetryTouts interface{}

    // the number of fixup LDIs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiNumFixedup interface{}

    // the number of corrected fixup LDIs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiNumCorrectFixup interface{}

    // the number of PL queued for fixup. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlNumQueuedFixedup interface{}

    // the number of corrected fixup PLs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlNumCorrectFixup interface{}

    // the number PLs added to retry while already in retry. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdPlRetryAddExist interface{}

    // the number of PLs linked to resolving tables for inline res. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdPlInlineResQ interface{}

    // number of pl creates with backu path. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlWithBackupCreateCount interface{}

    // number of pl deletes with backup path. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlWithBackupDelCount interface{}

    // number of PLs marked to include backup path. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdPlBackupEnableCount interface{}

    // number of PLs unmarked to include backup path. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdPlBackupDisableCount interface{}

    // number of PLs visited on fast notification. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdPlFastNfnCount interface{}

    // number of ldi backup path activications. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiBackupActivateCount interface{}

    // ldi mod time for last backup activation. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiLastBackupActivateTime interface{}

    // max ldi mod time for backup activation. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiMaxBackupActivateTime interface{}

    // min ldi mod time for backup activation. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiMinBackupActivateTime interface{}

    // total ldi mod time for backup activation. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiTotalBackupActivateTime interface{}

    // avg ldi mod time for backup activation. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiAvgBackupActivateTime interface{}

    // number of resolution failures because of recursion constraint. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdRecursionConstraintCount interface{}

    // the number of deleted with non-zero refcount. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiNumDelRefcnt interface{}

    // the number of elements in retryq. The type is interface{} with range:
    // 0..4294967295.
    FpdRetryqSize interface{}

    // the number of allocs for this proto. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdNumAllocs interface{}

    // the number of frees for this proto. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdNumFrees interface{}

    // timeout value in msec. The type is interface{} with range: 0..4294967295.
    FpdRetryqTimeout interface{}

    // Scheduler time period in msec. The type is interface{} with range:
    // 0..4294967295.
    FpdRetryqSchedTime interface{}

    // platform update statistics.
    FpdPlatfUpdStats Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats

    // Gtrie timing statistics.
    FpdGtrieTiming Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming

    // Number of global routes from                      each route source. The
    // type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry.
    FpdGbltblSrcEntry []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry

    // Number of vrf routes from                         each route source. The
    // type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry.
    FpdVrftblSrcEntry []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry

    // the number of retries of each type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry.
    FpdNumRetry []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetEntityData() *types.CommonEntityData {
    miProtoDbgStat.EntityData.YFilter = miProtoDbgStat.YFilter
    miProtoDbgStat.EntityData.YangName = "mi-proto-dbg-stat"
    miProtoDbgStat.EntityData.BundleName = "cisco_ios_xr"
    miProtoDbgStat.EntityData.ParentYangName = "misc"
    miProtoDbgStat.EntityData.SegmentPath = "mi-proto-dbg-stat"
    miProtoDbgStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miProtoDbgStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miProtoDbgStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miProtoDbgStat.EntityData.Children = types.NewOrderedMap()
    miProtoDbgStat.EntityData.Children.Append("fpd-platf-upd-stats", types.YChild{"FpdPlatfUpdStats", &miProtoDbgStat.FpdPlatfUpdStats})
    miProtoDbgStat.EntityData.Children.Append("fpd-gtrie-timing", types.YChild{"FpdGtrieTiming", &miProtoDbgStat.FpdGtrieTiming})
    miProtoDbgStat.EntityData.Children.Append("fpd-gbltbl-src-entry", types.YChild{"FpdGbltblSrcEntry", nil})
    for i := range miProtoDbgStat.FpdGbltblSrcEntry {
        miProtoDbgStat.EntityData.Children.Append(types.GetSegmentPath(miProtoDbgStat.FpdGbltblSrcEntry[i]), types.YChild{"FpdGbltblSrcEntry", miProtoDbgStat.FpdGbltblSrcEntry[i]})
    }
    miProtoDbgStat.EntityData.Children.Append("fpd-vrftbl-src-entry", types.YChild{"FpdVrftblSrcEntry", nil})
    for i := range miProtoDbgStat.FpdVrftblSrcEntry {
        miProtoDbgStat.EntityData.Children.Append(types.GetSegmentPath(miProtoDbgStat.FpdVrftblSrcEntry[i]), types.YChild{"FpdVrftblSrcEntry", miProtoDbgStat.FpdVrftblSrcEntry[i]})
    }
    miProtoDbgStat.EntityData.Children.Append("fpd-num-retry", types.YChild{"FpdNumRetry", nil})
    for i := range miProtoDbgStat.FpdNumRetry {
        miProtoDbgStat.EntityData.Children.Append(types.GetSegmentPath(miProtoDbgStat.FpdNumRetry[i]), types.YChild{"FpdNumRetry", miProtoDbgStat.FpdNumRetry[i]})
    }
    miProtoDbgStat.EntityData.Leafs = types.NewOrderedMap()
    miProtoDbgStat.EntityData.Leafs.Append("fpd-gbltbl-entries", types.YLeaf{"FpdGbltblEntries", miProtoDbgStat.FpdGbltblEntries})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-gbltbl-rej-entries", types.YLeaf{"FpdGbltblRejEntries", miProtoDbgStat.FpdGbltblRejEntries})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-vrftbl-entries", types.YLeaf{"FpdVrftblEntries", miProtoDbgStat.FpdVrftblEntries})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-vrftbl-rej-entries", types.YLeaf{"FpdVrftblRejEntries", miProtoDbgStat.FpdVrftblRejEntries})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-num-tbls", types.YLeaf{"FpdNumTbls", miProtoDbgStat.FpdNumTbls})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-bcdl-msgs", types.YLeaf{"FpdBcdlMsgs", miProtoDbgStat.FpdBcdlMsgs})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-route-upd", types.YLeaf{"FpdRouteUpd", miProtoDbgStat.FpdRouteUpd})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-route-del", types.YLeaf{"FpdRouteDel", miProtoDbgStat.FpdRouteDel})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-route-rcv", types.YLeaf{"FpdRouteRcv", miProtoDbgStat.FpdRouteRcv})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-route-drops", types.YLeaf{"FpdRouteDrops", miProtoDbgStat.FpdRouteDrops})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-lbl-recycled", types.YLeaf{"FpdLblRecycled", miProtoDbgStat.FpdLblRecycled})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-version-mismatch-drops", types.YLeaf{"FpdVersionMismatchDrops", miProtoDbgStat.FpdVersionMismatchDrops})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-upd", types.YLeaf{"FpdAdjUpd", miProtoDbgStat.FpdAdjUpd})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-del", types.YLeaf{"FpdAdjDel", miProtoDbgStat.FpdAdjDel})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-upd-tx", types.YLeaf{"FpdAdjUpdTx", miProtoDbgStat.FpdAdjUpdTx})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-upd-tx-nh-found", types.YLeaf{"FpdAdjUpdTxNhFound", miProtoDbgStat.FpdAdjUpdTxNhFound})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-upd-tx-retry-created", types.YLeaf{"FpdAdjUpdTxRetryCreated", miProtoDbgStat.FpdAdjUpdTxRetryCreated})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-tx-retry-nh-found", types.YLeaf{"FpdAdjTxRetryNhFound", miProtoDbgStat.FpdAdjTxRetryNhFound})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-tx-retry-obj-reinit", types.YLeaf{"FpdAdjTxRetryObjReinit", miProtoDbgStat.FpdAdjTxRetryObjReinit})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-drops", types.YLeaf{"FpdAdjDrops", miProtoDbgStat.FpdAdjDrops})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-adj-msg", types.YLeaf{"FpdAdjMsg", miProtoDbgStat.FpdAdjMsg})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-te-rcv", types.YLeaf{"FpdTeRcv", miProtoDbgStat.FpdTeRcv})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-te-version-mismatch-drops", types.YLeaf{"FpdTeVersionMismatchDrops", miProtoDbgStat.FpdTeVersionMismatchDrops})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-num-retry-touts", types.YLeaf{"FpdNumRetryTouts", miProtoDbgStat.FpdNumRetryTouts})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-num-fixedup", types.YLeaf{"FpdLdiNumFixedup", miProtoDbgStat.FpdLdiNumFixedup})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-num-correct-fixup", types.YLeaf{"FpdLdiNumCorrectFixup", miProtoDbgStat.FpdLdiNumCorrectFixup})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-num-queued-fixedup", types.YLeaf{"FpdPlNumQueuedFixedup", miProtoDbgStat.FpdPlNumQueuedFixedup})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-num-correct-fixup", types.YLeaf{"FpdPlNumCorrectFixup", miProtoDbgStat.FpdPlNumCorrectFixup})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-retry-add-exist", types.YLeaf{"FpdPlRetryAddExist", miProtoDbgStat.FpdPlRetryAddExist})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-inline-res-q", types.YLeaf{"FpdPlInlineResQ", miProtoDbgStat.FpdPlInlineResQ})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-with-backup-create-count", types.YLeaf{"FpdPlWithBackupCreateCount", miProtoDbgStat.FpdPlWithBackupCreateCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-with-backup-del-count", types.YLeaf{"FpdPlWithBackupDelCount", miProtoDbgStat.FpdPlWithBackupDelCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-backup-enable-count", types.YLeaf{"FpdPlBackupEnableCount", miProtoDbgStat.FpdPlBackupEnableCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-backup-disable-count", types.YLeaf{"FpdPlBackupDisableCount", miProtoDbgStat.FpdPlBackupDisableCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-pl-fast-nfn-count", types.YLeaf{"FpdPlFastNfnCount", miProtoDbgStat.FpdPlFastNfnCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-backup-activate-count", types.YLeaf{"FpdLdiBackupActivateCount", miProtoDbgStat.FpdLdiBackupActivateCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-last-backup-activate-time", types.YLeaf{"FpdLdiLastBackupActivateTime", miProtoDbgStat.FpdLdiLastBackupActivateTime})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-max-backup-activate-time", types.YLeaf{"FpdLdiMaxBackupActivateTime", miProtoDbgStat.FpdLdiMaxBackupActivateTime})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-min-backup-activate-time", types.YLeaf{"FpdLdiMinBackupActivateTime", miProtoDbgStat.FpdLdiMinBackupActivateTime})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-total-backup-activate-time", types.YLeaf{"FpdLdiTotalBackupActivateTime", miProtoDbgStat.FpdLdiTotalBackupActivateTime})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-avg-backup-activate-time", types.YLeaf{"FpdLdiAvgBackupActivateTime", miProtoDbgStat.FpdLdiAvgBackupActivateTime})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-recursion-constraint-count", types.YLeaf{"FpdRecursionConstraintCount", miProtoDbgStat.FpdRecursionConstraintCount})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-ldi-num-del-refcnt", types.YLeaf{"FpdLdiNumDelRefcnt", miProtoDbgStat.FpdLdiNumDelRefcnt})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-retryq-size", types.YLeaf{"FpdRetryqSize", miProtoDbgStat.FpdRetryqSize})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-num-allocs", types.YLeaf{"FpdNumAllocs", miProtoDbgStat.FpdNumAllocs})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-num-frees", types.YLeaf{"FpdNumFrees", miProtoDbgStat.FpdNumFrees})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-retryq-timeout", types.YLeaf{"FpdRetryqTimeout", miProtoDbgStat.FpdRetryqTimeout})
    miProtoDbgStat.EntityData.Leafs.Append("fpd-retryq-sched-time", types.YLeaf{"FpdRetryqSchedTime", miProtoDbgStat.FpdRetryqSchedTime})

    miProtoDbgStat.EntityData.YListKeys = []string {}

    return &(miProtoDbgStat.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats
// platform update statistics
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of successful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpusNumSuccess interface{}

    // Number of unsuccessful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpusNumFailure interface{}

    // Total time for all pd updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpusUpdTotalTime interface{}

    // Array of max time info indexed by object type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat.
    FpusObjStat []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetEntityData() *types.CommonEntityData {
    fpdPlatfUpdStats.EntityData.YFilter = fpdPlatfUpdStats.YFilter
    fpdPlatfUpdStats.EntityData.YangName = "fpd-platf-upd-stats"
    fpdPlatfUpdStats.EntityData.BundleName = "cisco_ios_xr"
    fpdPlatfUpdStats.EntityData.ParentYangName = "mi-proto-dbg-stat"
    fpdPlatfUpdStats.EntityData.SegmentPath = "fpd-platf-upd-stats"
    fpdPlatfUpdStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpdPlatfUpdStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpdPlatfUpdStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpdPlatfUpdStats.EntityData.Children = types.NewOrderedMap()
    fpdPlatfUpdStats.EntityData.Children.Append("fpus-obj-stat", types.YChild{"FpusObjStat", nil})
    for i := range fpdPlatfUpdStats.FpusObjStat {
        fpdPlatfUpdStats.EntityData.Children.Append(types.GetSegmentPath(fpdPlatfUpdStats.FpusObjStat[i]), types.YChild{"FpusObjStat", fpdPlatfUpdStats.FpusObjStat[i]})
    }
    fpdPlatfUpdStats.EntityData.Leafs = types.NewOrderedMap()
    fpdPlatfUpdStats.EntityData.Leafs.Append("fpus-num-success", types.YLeaf{"FpusNumSuccess", fpdPlatfUpdStats.FpusNumSuccess})
    fpdPlatfUpdStats.EntityData.Leafs.Append("fpus-num-failure", types.YLeaf{"FpusNumFailure", fpdPlatfUpdStats.FpusNumFailure})
    fpdPlatfUpdStats.EntityData.Leafs.Append("fpus-upd-total-time", types.YLeaf{"FpusUpdTotalTime", fpdPlatfUpdStats.FpusUpdTotalTime})

    fpdPlatfUpdStats.EntityData.YListKeys = []string {}

    return &(fpdPlatfUpdStats.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat
// Array of max time info indexed by object type
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FosTotUpdates interface{}

    // Total time for updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FosTotUpdTime interface{}

    // Array of max time info indexed by action type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat.
    FosObjActStat []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetEntityData() *types.CommonEntityData {
    fpusObjStat.EntityData.YFilter = fpusObjStat.YFilter
    fpusObjStat.EntityData.YangName = "fpus-obj-stat"
    fpusObjStat.EntityData.BundleName = "cisco_ios_xr"
    fpusObjStat.EntityData.ParentYangName = "fpd-platf-upd-stats"
    fpusObjStat.EntityData.SegmentPath = "fpus-obj-stat"
    fpusObjStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpusObjStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpusObjStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpusObjStat.EntityData.Children = types.NewOrderedMap()
    fpusObjStat.EntityData.Children.Append("fos-obj-act-stat", types.YChild{"FosObjActStat", nil})
    for i := range fpusObjStat.FosObjActStat {
        fpusObjStat.EntityData.Children.Append(types.GetSegmentPath(fpusObjStat.FosObjActStat[i]), types.YChild{"FosObjActStat", fpusObjStat.FosObjActStat[i]})
    }
    fpusObjStat.EntityData.Leafs = types.NewOrderedMap()
    fpusObjStat.EntityData.Leafs.Append("fos-tot-updates", types.YLeaf{"FosTotUpdates", fpusObjStat.FosTotUpdates})
    fpusObjStat.EntityData.Leafs.Append("fos-tot-upd-time", types.YLeaf{"FosTotUpdTime", fpusObjStat.FosTotUpdTime})

    fpusObjStat.EntityData.YListKeys = []string {}

    return &(fpusObjStat.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat
// Array of max time info indexed by action type
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasTotUpdates interface{}

    // Total time for updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasTotUpdTime interface{}

    // Total number of updates that took zero time. The type is interface{} with
    // range: 0..18446744073709551615.
    FoasTotUpdatesZero interface{}

    // Total number of successful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasNumSuccess interface{}

    // Total number of failed updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasNumFailure interface{}

    // Time for the update. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasMaxTime interface{}

    // Time stamp of max update. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasMaxTstamp interface{}
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetEntityData() *types.CommonEntityData {
    fosObjActStat.EntityData.YFilter = fosObjActStat.YFilter
    fosObjActStat.EntityData.YangName = "fos-obj-act-stat"
    fosObjActStat.EntityData.BundleName = "cisco_ios_xr"
    fosObjActStat.EntityData.ParentYangName = "fpus-obj-stat"
    fosObjActStat.EntityData.SegmentPath = "fos-obj-act-stat"
    fosObjActStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fosObjActStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fosObjActStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fosObjActStat.EntityData.Children = types.NewOrderedMap()
    fosObjActStat.EntityData.Leafs = types.NewOrderedMap()
    fosObjActStat.EntityData.Leafs.Append("foas-tot-updates", types.YLeaf{"FoasTotUpdates", fosObjActStat.FoasTotUpdates})
    fosObjActStat.EntityData.Leafs.Append("foas-tot-upd-time", types.YLeaf{"FoasTotUpdTime", fosObjActStat.FoasTotUpdTime})
    fosObjActStat.EntityData.Leafs.Append("foas-tot-updates-zero", types.YLeaf{"FoasTotUpdatesZero", fosObjActStat.FoasTotUpdatesZero})
    fosObjActStat.EntityData.Leafs.Append("foas-num-success", types.YLeaf{"FoasNumSuccess", fosObjActStat.FoasNumSuccess})
    fosObjActStat.EntityData.Leafs.Append("foas-num-failure", types.YLeaf{"FoasNumFailure", fosObjActStat.FoasNumFailure})
    fosObjActStat.EntityData.Leafs.Append("foas-max-time", types.YLeaf{"FoasMaxTime", fosObjActStat.FoasMaxTime})
    fosObjActStat.EntityData.Leafs.Append("foas-max-tstamp", types.YLeaf{"FoasMaxTstamp", fosObjActStat.FoasMaxTstamp})

    fosObjActStat.EntityData.YListKeys = []string {}

    return &(fosObjActStat.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming
// Gtrie timing statistics
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of successful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgtNumSuccess interface{}

    // Number of unsuccessful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgtNumFailure interface{}

    // Total time for all pd updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgtUpdTotalTime interface{}

    // Array of max time info indexed by gtrie function. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming.
    FgtGtrieFnTiming []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetEntityData() *types.CommonEntityData {
    fpdGtrieTiming.EntityData.YFilter = fpdGtrieTiming.YFilter
    fpdGtrieTiming.EntityData.YangName = "fpd-gtrie-timing"
    fpdGtrieTiming.EntityData.BundleName = "cisco_ios_xr"
    fpdGtrieTiming.EntityData.ParentYangName = "mi-proto-dbg-stat"
    fpdGtrieTiming.EntityData.SegmentPath = "fpd-gtrie-timing"
    fpdGtrieTiming.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpdGtrieTiming.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpdGtrieTiming.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpdGtrieTiming.EntityData.Children = types.NewOrderedMap()
    fpdGtrieTiming.EntityData.Children.Append("fgt-gtrie-fn-timing", types.YChild{"FgtGtrieFnTiming", nil})
    for i := range fpdGtrieTiming.FgtGtrieFnTiming {
        fpdGtrieTiming.EntityData.Children.Append(types.GetSegmentPath(fpdGtrieTiming.FgtGtrieFnTiming[i]), types.YChild{"FgtGtrieFnTiming", fpdGtrieTiming.FgtGtrieFnTiming[i]})
    }
    fpdGtrieTiming.EntityData.Leafs = types.NewOrderedMap()
    fpdGtrieTiming.EntityData.Leafs.Append("fgt-num-success", types.YLeaf{"FgtNumSuccess", fpdGtrieTiming.FgtNumSuccess})
    fpdGtrieTiming.EntityData.Leafs.Append("fgt-num-failure", types.YLeaf{"FgtNumFailure", fpdGtrieTiming.FgtNumFailure})
    fpdGtrieTiming.EntityData.Leafs.Append("fgt-upd-total-time", types.YLeaf{"FgtUpdTotalTime", fpdGtrieTiming.FgtUpdTotalTime})

    fpdGtrieTiming.EntityData.YListKeys = []string {}

    return &(fpdGtrieTiming.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming
// Array of max time info indexed by gtrie function
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Gtrie operation. The type is string with length: 0..64.
    FgftFn interface{}

    // Total number of updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftTotUpdates interface{}

    // Total number of updates with zero timing (due to timestamp granularity).
    // The type is interface{} with range: 0..18446744073709551615.
    FgftTotUpdatesZero interface{}

    // Total time for updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftTotUpdTime interface{}

    // Time for the update. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftMaxTime interface{}

    // Time stamp of max update. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftMaxTstamp interface{}
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetEntityData() *types.CommonEntityData {
    fgtGtrieFnTiming.EntityData.YFilter = fgtGtrieFnTiming.YFilter
    fgtGtrieFnTiming.EntityData.YangName = "fgt-gtrie-fn-timing"
    fgtGtrieFnTiming.EntityData.BundleName = "cisco_ios_xr"
    fgtGtrieFnTiming.EntityData.ParentYangName = "fpd-gtrie-timing"
    fgtGtrieFnTiming.EntityData.SegmentPath = "fgt-gtrie-fn-timing"
    fgtGtrieFnTiming.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgtGtrieFnTiming.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgtGtrieFnTiming.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgtGtrieFnTiming.EntityData.Children = types.NewOrderedMap()
    fgtGtrieFnTiming.EntityData.Leafs = types.NewOrderedMap()
    fgtGtrieFnTiming.EntityData.Leafs.Append("fgft-fn", types.YLeaf{"FgftFn", fgtGtrieFnTiming.FgftFn})
    fgtGtrieFnTiming.EntityData.Leafs.Append("fgft-tot-updates", types.YLeaf{"FgftTotUpdates", fgtGtrieFnTiming.FgftTotUpdates})
    fgtGtrieFnTiming.EntityData.Leafs.Append("fgft-tot-updates-zero", types.YLeaf{"FgftTotUpdatesZero", fgtGtrieFnTiming.FgftTotUpdatesZero})
    fgtGtrieFnTiming.EntityData.Leafs.Append("fgft-tot-upd-time", types.YLeaf{"FgftTotUpdTime", fgtGtrieFnTiming.FgftTotUpdTime})
    fgtGtrieFnTiming.EntityData.Leafs.Append("fgft-max-time", types.YLeaf{"FgftMaxTime", fgtGtrieFnTiming.FgftMaxTime})
    fgtGtrieFnTiming.EntityData.Leafs.Append("fgft-max-tstamp", types.YLeaf{"FgftMaxTstamp", fgtGtrieFnTiming.FgftMaxTstamp})

    fgtGtrieFnTiming.EntityData.YListKeys = []string {}

    return &(fgtGtrieFnTiming.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry
// Number of global routes from                    
// 
// each route source
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetEntityData() *types.CommonEntityData {
    fpdGbltblSrcEntry.EntityData.YFilter = fpdGbltblSrcEntry.YFilter
    fpdGbltblSrcEntry.EntityData.YangName = "fpd-gbltbl-src-entry"
    fpdGbltblSrcEntry.EntityData.BundleName = "cisco_ios_xr"
    fpdGbltblSrcEntry.EntityData.ParentYangName = "mi-proto-dbg-stat"
    fpdGbltblSrcEntry.EntityData.SegmentPath = "fpd-gbltbl-src-entry"
    fpdGbltblSrcEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpdGbltblSrcEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpdGbltblSrcEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpdGbltblSrcEntry.EntityData.Children = types.NewOrderedMap()
    fpdGbltblSrcEntry.EntityData.Leafs = types.NewOrderedMap()
    fpdGbltblSrcEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpdGbltblSrcEntry.Entry})

    fpdGbltblSrcEntry.EntityData.YListKeys = []string {}

    return &(fpdGbltblSrcEntry.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry
// Number of vrf routes from                       
// 
// each route source
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetEntityData() *types.CommonEntityData {
    fpdVrftblSrcEntry.EntityData.YFilter = fpdVrftblSrcEntry.YFilter
    fpdVrftblSrcEntry.EntityData.YangName = "fpd-vrftbl-src-entry"
    fpdVrftblSrcEntry.EntityData.BundleName = "cisco_ios_xr"
    fpdVrftblSrcEntry.EntityData.ParentYangName = "mi-proto-dbg-stat"
    fpdVrftblSrcEntry.EntityData.SegmentPath = "fpd-vrftbl-src-entry"
    fpdVrftblSrcEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpdVrftblSrcEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpdVrftblSrcEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpdVrftblSrcEntry.EntityData.Children = types.NewOrderedMap()
    fpdVrftblSrcEntry.EntityData.Leafs = types.NewOrderedMap()
    fpdVrftblSrcEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpdVrftblSrcEntry.Entry})

    fpdVrftblSrcEntry.EntityData.YListKeys = []string {}

    return &(fpdVrftblSrcEntry.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry
// the number of retries of each type
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetEntityData() *types.CommonEntityData {
    fpdNumRetry.EntityData.YFilter = fpdNumRetry.YFilter
    fpdNumRetry.EntityData.YangName = "fpd-num-retry"
    fpdNumRetry.EntityData.BundleName = "cisco_ios_xr"
    fpdNumRetry.EntityData.ParentYangName = "mi-proto-dbg-stat"
    fpdNumRetry.EntityData.SegmentPath = "fpd-num-retry"
    fpdNumRetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpdNumRetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpdNumRetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpdNumRetry.EntityData.Children = types.NewOrderedMap()
    fpdNumRetry.EntityData.Leafs = types.NewOrderedMap()
    fpdNumRetry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fpdNumRetry.Entry})

    fpdNumRetry.EntityData.YListKeys = []string {}

    return &(fpdNumRetry.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr
// the number of counters used for purge counter
// stats
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // the number of frees for this proto. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr.
    FppCntr []*Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetEntityData() *types.CommonEntityData {
    miIdbPurgeCntr.EntityData.YFilter = miIdbPurgeCntr.YFilter
    miIdbPurgeCntr.EntityData.YangName = "mi-idb-purge-cntr"
    miIdbPurgeCntr.EntityData.BundleName = "cisco_ios_xr"
    miIdbPurgeCntr.EntityData.ParentYangName = "misc"
    miIdbPurgeCntr.EntityData.SegmentPath = "mi-idb-purge-cntr"
    miIdbPurgeCntr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miIdbPurgeCntr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miIdbPurgeCntr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miIdbPurgeCntr.EntityData.Children = types.NewOrderedMap()
    miIdbPurgeCntr.EntityData.Children.Append("fpp-cntr", types.YChild{"FppCntr", nil})
    for i := range miIdbPurgeCntr.FppCntr {
        miIdbPurgeCntr.EntityData.Children.Append(types.GetSegmentPath(miIdbPurgeCntr.FppCntr[i]), types.YChild{"FppCntr", miIdbPurgeCntr.FppCntr[i]})
    }
    miIdbPurgeCntr.EntityData.Leafs = types.NewOrderedMap()

    miIdbPurgeCntr.EntityData.YListKeys = []string {}

    return &(miIdbPurgeCntr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr
// the number of frees for this proto
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetEntityData() *types.CommonEntityData {
    fppCntr.EntityData.YFilter = fppCntr.YFilter
    fppCntr.EntityData.YangName = "fpp-cntr"
    fppCntr.EntityData.BundleName = "cisco_ios_xr"
    fppCntr.EntityData.ParentYangName = "mi-idb-purge-cntr"
    fppCntr.EntityData.SegmentPath = "fpp-cntr"
    fppCntr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fppCntr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fppCntr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fppCntr.EntityData.Children = types.NewOrderedMap()
    fppCntr.EntityData.Leafs = types.NewOrderedMap()
    fppCntr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fppCntr.Entry})

    fppCntr.EntityData.YListKeys = []string {}

    return &(fppCntr.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel
// Timestamps of deleted routes
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // tableid. The type is interface{} with range: 0..4294967295.
    Tableid interface{}

    // prfx. The type is string with length: 0..16.
    Prfx interface{}

    // prfx len. The type is interface{} with range: 0..65535.
    PrfxLen interface{}

    // prfx proto. The type is interface{} with range: 0..65535.
    PrfxProto interface{}

    // msec time. The type is interface{} with range: 0..18446744073709551615.
    MsecTime interface{}
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetEntityData() *types.CommonEntityData {
    miDel.EntityData.YFilter = miDel.YFilter
    miDel.EntityData.YangName = "mi-del"
    miDel.EntityData.BundleName = "cisco_ios_xr"
    miDel.EntityData.ParentYangName = "misc"
    miDel.EntityData.SegmentPath = "mi-del"
    miDel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miDel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miDel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miDel.EntityData.Children = types.NewOrderedMap()
    miDel.EntityData.Leafs = types.NewOrderedMap()
    miDel.EntityData.Leafs.Append("tableid", types.YLeaf{"Tableid", miDel.Tableid})
    miDel.EntityData.Leafs.Append("prfx", types.YLeaf{"Prfx", miDel.Prfx})
    miDel.EntityData.Leafs.Append("prfx-len", types.YLeaf{"PrfxLen", miDel.PrfxLen})
    miDel.EntityData.Leafs.Append("prfx-proto", types.YLeaf{"PrfxProto", miDel.PrfxProto})
    miDel.EntityData.Leafs.Append("msec-time", types.YLeaf{"MsecTime", miDel.MsecTime})

    miDel.EntityData.YListKeys = []string {}

    return &(miDel.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat
// FRR statistics
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // number of FRR events sent on nh interface down. The type is interface{}
    // with range: 0..4294967295.
    MiNumIntfFrr interface{}

    // number of FRR events sent on nh parent interface down. The type is
    // interface{} with range: 0..4294967295.
    MiNumParentIntfFrr interface{}

    // number of interface down FRR events from PFI. The type is interface{} with
    // range: 0..4294967295.
    MiNumPfiIntfDown interface{}

    // number of NH down FRR events frm BFD. The type is interface{} with range:
    // 0..4294967295.
    MiNumBfdDown interface{}

    // total number of prot FRR objects. The type is interface{} with range:
    // 0..4294967295.
    MiNumProtFrrObjects interface{}

    // total number of backup FRR objects. The type is interface{} with range:
    // 0..4294967295.
    MiNumBkupFrrObjects interface{}

    // total number of successful FRR tunnel ID allocations. The type is
    // interface{} with range: 0..4294967295.
    MiNumTunidAllocs interface{}

    // total number of FRR tunnel ID allocation failures. The type is interface{}
    // with range: 0..4294967295.
    MiNumTunidAllocFailures interface{}

    // total number of successful FRR tunnel ID frees. The type is interface{}
    // with range: 0..4294967295.
    MiNumTunidFrees interface{}

    // total number of FRR tunnel ID free failures. The type is interface{} with
    // range: 0..4294967295.
    MiNumTunidFreeFailures interface{}

    // number of frr reset queue adds. The type is interface{} with range:
    // 0..4294967295.
    MiNumFrrResetQueueAdds interface{}

    // number of frr reset queue deletes. The type is interface{} with range:
    // 0..4294967295.
    MiNumFrrResetQueueRemove interface{}

    // number of frr resets. The type is interface{} with range: 0..4294967295.
    MiNumFrrReset interface{}

    // number of frr events received in proto thread. The type is interface{} with
    // range: 0..4294967295.
    MiNumFrrProtoEvents interface{}

    // frr log size. The type is interface{} with range: 0..4294967295.
    MiNumFrrLogs interface{}
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetEntityData() *types.CommonEntityData {
    miFrrStat.EntityData.YFilter = miFrrStat.YFilter
    miFrrStat.EntityData.YangName = "mi-frr-stat"
    miFrrStat.EntityData.BundleName = "cisco_ios_xr"
    miFrrStat.EntityData.ParentYangName = "misc"
    miFrrStat.EntityData.SegmentPath = "mi-frr-stat"
    miFrrStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    miFrrStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    miFrrStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    miFrrStat.EntityData.Children = types.NewOrderedMap()
    miFrrStat.EntityData.Leafs = types.NewOrderedMap()
    miFrrStat.EntityData.Leafs.Append("mi-num-intf-frr", types.YLeaf{"MiNumIntfFrr", miFrrStat.MiNumIntfFrr})
    miFrrStat.EntityData.Leafs.Append("mi-num-parent-intf-frr", types.YLeaf{"MiNumParentIntfFrr", miFrrStat.MiNumParentIntfFrr})
    miFrrStat.EntityData.Leafs.Append("mi-num-pfi-intf-down", types.YLeaf{"MiNumPfiIntfDown", miFrrStat.MiNumPfiIntfDown})
    miFrrStat.EntityData.Leafs.Append("mi-num-bfd-down", types.YLeaf{"MiNumBfdDown", miFrrStat.MiNumBfdDown})
    miFrrStat.EntityData.Leafs.Append("mi-num-prot-frr-objects", types.YLeaf{"MiNumProtFrrObjects", miFrrStat.MiNumProtFrrObjects})
    miFrrStat.EntityData.Leafs.Append("mi-num-bkup-frr-objects", types.YLeaf{"MiNumBkupFrrObjects", miFrrStat.MiNumBkupFrrObjects})
    miFrrStat.EntityData.Leafs.Append("mi-num-tunid-allocs", types.YLeaf{"MiNumTunidAllocs", miFrrStat.MiNumTunidAllocs})
    miFrrStat.EntityData.Leafs.Append("mi-num-tunid-alloc-failures", types.YLeaf{"MiNumTunidAllocFailures", miFrrStat.MiNumTunidAllocFailures})
    miFrrStat.EntityData.Leafs.Append("mi-num-tunid-frees", types.YLeaf{"MiNumTunidFrees", miFrrStat.MiNumTunidFrees})
    miFrrStat.EntityData.Leafs.Append("mi-num-tunid-free-failures", types.YLeaf{"MiNumTunidFreeFailures", miFrrStat.MiNumTunidFreeFailures})
    miFrrStat.EntityData.Leafs.Append("mi-num-frr-reset-queue-adds", types.YLeaf{"MiNumFrrResetQueueAdds", miFrrStat.MiNumFrrResetQueueAdds})
    miFrrStat.EntityData.Leafs.Append("mi-num-frr-reset-queue-remove", types.YLeaf{"MiNumFrrResetQueueRemove", miFrrStat.MiNumFrrResetQueueRemove})
    miFrrStat.EntityData.Leafs.Append("mi-num-frr-reset", types.YLeaf{"MiNumFrrReset", miFrrStat.MiNumFrrReset})
    miFrrStat.EntityData.Leafs.Append("mi-num-frr-proto-events", types.YLeaf{"MiNumFrrProtoEvents", miFrrStat.MiNumFrrProtoEvents})
    miFrrStat.EntityData.Leafs.Append("mi-num-frr-logs", types.YLeaf{"MiNumFrrLogs", miFrrStat.MiNumFrrLogs})

    miFrrStat.EntityData.YListKeys = []string {}

    return &(miFrrStat.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel
// Local label
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FIB Local-label conflicts database.
    Conflicts Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetEntityData() *types.CommonEntityData {
    localLabel.EntityData.YFilter = localLabel.YFilter
    localLabel.EntityData.YangName = "local-label"
    localLabel.EntityData.BundleName = "cisco_ios_xr"
    localLabel.EntityData.ParentYangName = "protocol"
    localLabel.EntityData.SegmentPath = "local-label"
    localLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabel.EntityData.Children = types.NewOrderedMap()
    localLabel.EntityData.Children.Append("conflicts", types.YChild{"Conflicts", &localLabel.Conflicts})
    localLabel.EntityData.Leafs = types.NewOrderedMap()

    localLabel.EntityData.YListKeys = []string {}

    return &(localLabel.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts
// FIB Local-label conflicts database
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CEF Local-label conflicts entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict.
    Conflict []*Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetEntityData() *types.CommonEntityData {
    conflicts.EntityData.YFilter = conflicts.YFilter
    conflicts.EntityData.YangName = "conflicts"
    conflicts.EntityData.BundleName = "cisco_ios_xr"
    conflicts.EntityData.ParentYangName = "local-label"
    conflicts.EntityData.SegmentPath = "conflicts"
    conflicts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    conflicts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    conflicts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    conflicts.EntityData.Children = types.NewOrderedMap()
    conflicts.EntityData.Children.Append("conflict", types.YChild{"Conflict", nil})
    for i := range conflicts.Conflict {
        conflicts.EntityData.Children.Append(types.GetSegmentPath(conflicts.Conflict[i]), types.YChild{"Conflict", conflicts.Conflict[i]})
    }
    conflicts.EntityData.Leafs = types.NewOrderedMap()

    conflicts.EntityData.YListKeys = []string {}

    return &(conflicts.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict
// CEF Local-label conflicts entry
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Route source. The type is FibRouteSource.
    Source interface{}

    // Type of entry. The type is FibllcEntry.
    LlCtype interface{}

    // Table ID of IP prefix. The type is interface{} with range: 0..4294967295.
    PfxTblId interface{}

    // IP Prefix. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Prefix interface{}

    // Length of IP Prefix. The type is interface{} with range: 0..4294967295.
    PrefixLen interface{}

    // local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // source xr. The type is interface{} with range: 0..4294967295.
    SourceXr interface{}

    // update ts. The type is interface{} with range: 0..18446744073709551615.
    UpdateTs interface{}

    // retry ts. The type is interface{} with range: 0..18446744073709551615.
    RetryTs interface{}

    // num retries. The type is interface{} with range: 0..4294967295.
    NumRetries interface{}

    // ext.
    Ext Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetEntityData() *types.CommonEntityData {
    conflict.EntityData.YFilter = conflict.YFilter
    conflict.EntityData.YangName = "conflict"
    conflict.EntityData.BundleName = "cisco_ios_xr"
    conflict.EntityData.ParentYangName = "conflicts"
    conflict.EntityData.SegmentPath = "conflict"
    conflict.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    conflict.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    conflict.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    conflict.EntityData.Children = types.NewOrderedMap()
    conflict.EntityData.Children.Append("ext", types.YChild{"Ext", &conflict.Ext})
    conflict.EntityData.Leafs = types.NewOrderedMap()
    conflict.EntityData.Leafs.Append("label", types.YLeaf{"Label", conflict.Label})
    conflict.EntityData.Leafs.Append("source", types.YLeaf{"Source", conflict.Source})
    conflict.EntityData.Leafs.Append("ll-ctype", types.YLeaf{"LlCtype", conflict.LlCtype})
    conflict.EntityData.Leafs.Append("pfx-tbl-id", types.YLeaf{"PfxTblId", conflict.PfxTblId})
    conflict.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", conflict.Prefix})
    conflict.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", conflict.PrefixLen})
    conflict.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", conflict.LocalLabel})
    conflict.EntityData.Leafs.Append("source-xr", types.YLeaf{"SourceXr", conflict.SourceXr})
    conflict.EntityData.Leafs.Append("update-ts", types.YLeaf{"UpdateTs", conflict.UpdateTs})
    conflict.EntityData.Leafs.Append("retry-ts", types.YLeaf{"RetryTs", conflict.RetryTs})
    conflict.EntityData.Leafs.Append("num-retries", types.YLeaf{"NumRetries", conflict.NumRetries})

    conflict.EntityData.YListKeys = []string {}

    return &(conflict.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext
// ext
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is FibMplsLlcEntryBag.
    Type interface{}

    // pfx.
    Pfx Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx

    // lsm.
    Lsm Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetEntityData() *types.CommonEntityData {
    ext.EntityData.YFilter = ext.YFilter
    ext.EntityData.YangName = "ext"
    ext.EntityData.BundleName = "cisco_ios_xr"
    ext.EntityData.ParentYangName = "conflict"
    ext.EntityData.SegmentPath = "ext"
    ext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ext.EntityData.Children = types.NewOrderedMap()
    ext.EntityData.Children.Append("pfx", types.YChild{"Pfx", &ext.Pfx})
    ext.EntityData.Children.Append("lsm", types.YChild{"Lsm", &ext.Lsm})
    ext.EntityData.Leafs = types.NewOrderedMap()
    ext.EntityData.Leafs.Append("type", types.YLeaf{"Type", ext.Type})

    ext.EntityData.YListKeys = []string {}

    return &(ext.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx
// pfx
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // pfx. The type is string with length: 0..52.
    Pfx interface{}

    // tbl id. The type is interface{} with range: 0..4294967295.
    TblId interface{}
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetEntityData() *types.CommonEntityData {
    pfx.EntityData.YFilter = pfx.YFilter
    pfx.EntityData.YangName = "pfx"
    pfx.EntityData.BundleName = "cisco_ios_xr"
    pfx.EntityData.ParentYangName = "ext"
    pfx.EntityData.SegmentPath = "pfx"
    pfx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfx.EntityData.Children = types.NewOrderedMap()
    pfx.EntityData.Leafs = types.NewOrderedMap()
    pfx.EntityData.Leafs.Append("pfx", types.YLeaf{"Pfx", pfx.Pfx})
    pfx.EntityData.Leafs.Append("tbl-id", types.YLeaf{"TblId", pfx.TblId})

    pfx.EntityData.YListKeys = []string {}

    return &(pfx.EntityData)
}

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm
// lsm
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nh. The type is string with length: 0..52.
    Nh interface{}

    // mcast id. The type is interface{} with range: 0..4294967295.
    McastId interface{}
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetEntityData() *types.CommonEntityData {
    lsm.EntityData.YFilter = lsm.YFilter
    lsm.EntityData.YangName = "lsm"
    lsm.EntityData.BundleName = "cisco_ios_xr"
    lsm.EntityData.ParentYangName = "ext"
    lsm.EntityData.SegmentPath = "lsm"
    lsm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsm.EntityData.Children = types.NewOrderedMap()
    lsm.EntityData.Leafs = types.NewOrderedMap()
    lsm.EntityData.Leafs.Append("nh", types.YLeaf{"Nh", lsm.Nh})
    lsm.EntityData.Leafs.Append("mcast-id", types.YLeaf{"McastId", lsm.McastId})

    lsm.EntityData.YListKeys = []string {}

    return &(lsm.EntityData)
}

// OcAftL3
// oc aft l3
type OcAftL3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table VRFs - openconfig network-instances.
    Vrfs OcAftL3_Vrfs
}

func (ocAftL3 *OcAftL3) GetEntityData() *types.CommonEntityData {
    ocAftL3.EntityData.YFilter = ocAftL3.YFilter
    ocAftL3.EntityData.YangName = "oc-aft-l3"
    ocAftL3.EntityData.BundleName = "cisco_ios_xr"
    ocAftL3.EntityData.ParentYangName = "Cisco-IOS-XR-fib-common-oper"
    ocAftL3.EntityData.SegmentPath = "Cisco-IOS-XR-fib-common-oper:oc-aft-l3"
    ocAftL3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocAftL3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocAftL3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocAftL3.EntityData.Children = types.NewOrderedMap()
    ocAftL3.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &ocAftL3.Vrfs})
    ocAftL3.EntityData.Leafs = types.NewOrderedMap()

    ocAftL3.EntityData.YListKeys = []string {}

    return &(ocAftL3.EntityData)
}

// OcAftL3_Vrfs
// Table VRFs - openconfig network-instances
type OcAftL3_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF/network-instace table. The type is slice of OcAftL3_Vrfs_Vrf.
    Vrf []*OcAftL3_Vrfs_Vrf
}

func (vrfs *OcAftL3_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "oc-aft-l3"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// OcAftL3_Vrfs_Vrf
// VRF/network-instace table
type OcAftL3_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Instance Name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Abstract forwarding table per FIB protocol.
    AbstractForwardingTables OcAftL3_Vrfs_Vrf_AbstractForwardingTables
}

func (vrf *OcAftL3_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("abstract-forwarding-tables", types.YChild{"AbstractForwardingTables", &vrf.AbstractForwardingTables})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables
// Abstract forwarding table per FIB protocol
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS abstract forwarding table.
    Mpls OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls

    // IPv6 abstract forwarding table.
    Ipv6Unicast OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast

    // IPv4 abstract forwarding table.
    Ipv4Unicast OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast
}

func (abstractForwardingTables *OcAftL3_Vrfs_Vrf_AbstractForwardingTables) GetEntityData() *types.CommonEntityData {
    abstractForwardingTables.EntityData.YFilter = abstractForwardingTables.YFilter
    abstractForwardingTables.EntityData.YangName = "abstract-forwarding-tables"
    abstractForwardingTables.EntityData.BundleName = "cisco_ios_xr"
    abstractForwardingTables.EntityData.ParentYangName = "vrf"
    abstractForwardingTables.EntityData.SegmentPath = "abstract-forwarding-tables"
    abstractForwardingTables.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    abstractForwardingTables.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    abstractForwardingTables.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    abstractForwardingTables.EntityData.Children = types.NewOrderedMap()
    abstractForwardingTables.EntityData.Children.Append("mpls", types.YChild{"Mpls", &abstractForwardingTables.Mpls})
    abstractForwardingTables.EntityData.Children.Append("ipv6-unicast", types.YChild{"Ipv6Unicast", &abstractForwardingTables.Ipv6Unicast})
    abstractForwardingTables.EntityData.Children.Append("ipv4-unicast", types.YChild{"Ipv4Unicast", &abstractForwardingTables.Ipv4Unicast})
    abstractForwardingTables.EntityData.Leafs = types.NewOrderedMap()

    abstractForwardingTables.EntityData.YListKeys = []string {}

    return &(abstractForwardingTables.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls
// MPLS abstract forwarding table
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of MPLS labels.
    LabelEntries OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries
}

func (mpls *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "abstract-forwarding-tables"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("label-entries", types.YChild{"LabelEntries", &mpls.LabelEntries})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries
// Table of MPLS labels
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label data. The type is slice of
    // OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry.
    LabelEntry []*OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry
}

func (labelEntries *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries) GetEntityData() *types.CommonEntityData {
    labelEntries.EntityData.YFilter = labelEntries.YFilter
    labelEntries.EntityData.YangName = "label-entries"
    labelEntries.EntityData.BundleName = "cisco_ios_xr"
    labelEntries.EntityData.ParentYangName = "mpls"
    labelEntries.EntityData.SegmentPath = "label-entries"
    labelEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelEntries.EntityData.Children = types.NewOrderedMap()
    labelEntries.EntityData.Children.Append("label-entry", types.YChild{"LabelEntry", nil})
    for i := range labelEntries.LabelEntry {
        labelEntries.EntityData.Children.Append(types.GetSegmentPath(labelEntries.LabelEntry[i]), types.YChild{"LabelEntry", labelEntries.LabelEntry[i]})
    }
    labelEntries.EntityData.Leafs = types.NewOrderedMap()

    labelEntries.EntityData.YListKeys = []string {}

    return &(labelEntries.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry
// Label data
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. MPLS label. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Label interface{}

    // This attribute is a key. Internal representation of a mask-length of MPLS
    // label. The type is interface{} with range: 0..4294967295.
    LabelLength interface{}

    // State.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_State

    // Next hops. The type is slice of
    // OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop.
    NextHop []*OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop
}

func (labelEntry *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry) GetEntityData() *types.CommonEntityData {
    labelEntry.EntityData.YFilter = labelEntry.YFilter
    labelEntry.EntityData.YangName = "label-entry"
    labelEntry.EntityData.BundleName = "cisco_ios_xr"
    labelEntry.EntityData.ParentYangName = "label-entries"
    labelEntry.EntityData.SegmentPath = "label-entry" + types.AddKeyToken(labelEntry.Label, "label") + types.AddKeyToken(labelEntry.LabelLength, "label-length")
    labelEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelEntry.EntityData.Children = types.NewOrderedMap()
    labelEntry.EntityData.Children.Append("state", types.YChild{"State", &labelEntry.State})
    labelEntry.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range labelEntry.NextHop {
        labelEntry.EntityData.Children.Append(types.GetSegmentPath(labelEntry.NextHop[i]), types.YChild{"NextHop", labelEntry.NextHop[i]})
    }
    labelEntry.EntityData.Leafs = types.NewOrderedMap()
    labelEntry.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelEntry.Label})
    labelEntry.EntityData.Leafs.Append("label-length", types.YLeaf{"LabelLength", labelEntry.LabelLength})

    labelEntry.EntityData.YListKeys = []string {"Label", "LabelLength"}

    return &(labelEntry.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_State
// State
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP prefix. The type is string.
    PrefixIndex interface{}

    // MPLS label. The type is string.
    LabelIndex interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "label-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix-index", types.YLeaf{"PrefixIndex", state.PrefixIndex})
    state.EntityData.Leafs.Append("label-index", types.YLeaf{"LabelIndex", state.LabelIndex})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop
// Next hops
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OC AFT entry next-hop state.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_State

    // AFT entry next-hop interface ref.
    InterfaceRef OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef
}

func (nextHop *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "label-entry"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_State
// OC AFT entry next-hop state
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Index. The type is interface{} with range: 0..18446744073709551615.
    Index interface{}

    // Weight. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // IP address. The type is string.
    IpAddress interface{}

    // VRF name where the nexthop is resolved. The type is string.
    NetworkInstance interface{}

    // Popped mpls label stack. The type is slice of string.
    PoppedMplsLabelStack []interface{}

    // Pushed mpls label stack. The type is slice of string.
    PushedMplsLabelStack []interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("network-instance", types.YLeaf{"NetworkInstance", state.NetworkInstance})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef
// AFT entry next-hop interface ref
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFT entry interface ref state.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef_State
}

func (interfaceRef *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "cisco_ios_xr"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef_State
// AFT entry interface ref state
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string.
    Interface interface{}

    // Sub-Interface index. The type is interface{} with range: 0..4294967295.
    Subinterface interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Mpls_LabelEntries_LabelEntry_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast
// IPv6 abstract forwarding table
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of IP prefixes.
    PrefixEntries OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries
}

func (ipv6Unicast *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "cisco_ios_xr"
    ipv6Unicast.EntityData.ParentYangName = "abstract-forwarding-tables"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Unicast.EntityData.Children = types.NewOrderedMap()
    ipv6Unicast.EntityData.Children.Append("prefix-entries", types.YChild{"PrefixEntries", &ipv6Unicast.PrefixEntries})
    ipv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6Unicast.EntityData.YListKeys = []string {}

    return &(ipv6Unicast.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries
// Table of IP prefixes
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix data. The type is slice of
    // OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry.
    PrefixEntry []*OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry
}

func (prefixEntries *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries) GetEntityData() *types.CommonEntityData {
    prefixEntries.EntityData.YFilter = prefixEntries.YFilter
    prefixEntries.EntityData.YangName = "prefix-entries"
    prefixEntries.EntityData.BundleName = "cisco_ios_xr"
    prefixEntries.EntityData.ParentYangName = "ipv6-unicast"
    prefixEntries.EntityData.SegmentPath = "prefix-entries"
    prefixEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixEntries.EntityData.Children = types.NewOrderedMap()
    prefixEntries.EntityData.Children.Append("prefix-entry", types.YChild{"PrefixEntry", nil})
    for i := range prefixEntries.PrefixEntry {
        prefixEntries.EntityData.Children.Append(types.GetSegmentPath(prefixEntries.PrefixEntry[i]), types.YChild{"PrefixEntry", prefixEntries.PrefixEntry[i]})
    }
    prefixEntries.EntityData.Leafs = types.NewOrderedMap()

    prefixEntries.EntityData.YListKeys = []string {}

    return &(prefixEntries.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry
// Prefix data
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NetworkAddress interface{}

    // This attribute is a key. Mask legnth (prefix length). The type is
    // interface{} with range: 0..4294967295.
    MaskLength interface{}

    // State.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_State

    // Next hops. The type is slice of
    // OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop.
    NextHop []*OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop
}

func (prefixEntry *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry) GetEntityData() *types.CommonEntityData {
    prefixEntry.EntityData.YFilter = prefixEntry.YFilter
    prefixEntry.EntityData.YangName = "prefix-entry"
    prefixEntry.EntityData.BundleName = "cisco_ios_xr"
    prefixEntry.EntityData.ParentYangName = "prefix-entries"
    prefixEntry.EntityData.SegmentPath = "prefix-entry" + types.AddKeyToken(prefixEntry.NetworkAddress, "network-address") + types.AddKeyToken(prefixEntry.MaskLength, "mask-length")
    prefixEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixEntry.EntityData.Children = types.NewOrderedMap()
    prefixEntry.EntityData.Children.Append("state", types.YChild{"State", &prefixEntry.State})
    prefixEntry.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range prefixEntry.NextHop {
        prefixEntry.EntityData.Children.Append(types.GetSegmentPath(prefixEntry.NextHop[i]), types.YChild{"NextHop", prefixEntry.NextHop[i]})
    }
    prefixEntry.EntityData.Leafs = types.NewOrderedMap()
    prefixEntry.EntityData.Leafs.Append("network-address", types.YLeaf{"NetworkAddress", prefixEntry.NetworkAddress})
    prefixEntry.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", prefixEntry.MaskLength})

    prefixEntry.EntityData.YListKeys = []string {"NetworkAddress", "MaskLength"}

    return &(prefixEntry.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_State
// State
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP prefix. The type is string.
    PrefixIndex interface{}

    // MPLS label. The type is string.
    LabelIndex interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefix-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix-index", types.YLeaf{"PrefixIndex", state.PrefixIndex})
    state.EntityData.Leafs.Append("label-index", types.YLeaf{"LabelIndex", state.LabelIndex})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop
// Next hops
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OC AFT entry next-hop state.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_State

    // AFT entry next-hop interface ref.
    InterfaceRef OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef
}

func (nextHop *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "prefix-entry"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_State
// OC AFT entry next-hop state
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Index. The type is interface{} with range: 0..18446744073709551615.
    Index interface{}

    // Weight. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // IP address. The type is string.
    IpAddress interface{}

    // VRF name where the nexthop is resolved. The type is string.
    NetworkInstance interface{}

    // Popped mpls label stack. The type is slice of string.
    PoppedMplsLabelStack []interface{}

    // Pushed mpls label stack. The type is slice of string.
    PushedMplsLabelStack []interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("network-instance", types.YLeaf{"NetworkInstance", state.NetworkInstance})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef
// AFT entry next-hop interface ref
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFT entry interface ref state.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State
}

func (interfaceRef *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "cisco_ios_xr"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State
// AFT entry interface ref state
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string.
    Interface interface{}

    // Sub-Interface index. The type is interface{} with range: 0..4294967295.
    Subinterface interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv6Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast
// IPv4 abstract forwarding table
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of IP prefixes.
    PrefixEntries OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries
}

func (ipv4Unicast *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "cisco_ios_xr"
    ipv4Unicast.EntityData.ParentYangName = "abstract-forwarding-tables"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Unicast.EntityData.Children = types.NewOrderedMap()
    ipv4Unicast.EntityData.Children.Append("prefix-entries", types.YChild{"PrefixEntries", &ipv4Unicast.PrefixEntries})
    ipv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4Unicast.EntityData.YListKeys = []string {}

    return &(ipv4Unicast.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries
// Table of IP prefixes
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix data. The type is slice of
    // OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry.
    PrefixEntry []*OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry
}

func (prefixEntries *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries) GetEntityData() *types.CommonEntityData {
    prefixEntries.EntityData.YFilter = prefixEntries.YFilter
    prefixEntries.EntityData.YangName = "prefix-entries"
    prefixEntries.EntityData.BundleName = "cisco_ios_xr"
    prefixEntries.EntityData.ParentYangName = "ipv4-unicast"
    prefixEntries.EntityData.SegmentPath = "prefix-entries"
    prefixEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixEntries.EntityData.Children = types.NewOrderedMap()
    prefixEntries.EntityData.Children.Append("prefix-entry", types.YChild{"PrefixEntry", nil})
    for i := range prefixEntries.PrefixEntry {
        prefixEntries.EntityData.Children.Append(types.GetSegmentPath(prefixEntries.PrefixEntry[i]), types.YChild{"PrefixEntry", prefixEntries.PrefixEntry[i]})
    }
    prefixEntries.EntityData.Leafs = types.NewOrderedMap()

    prefixEntries.EntityData.YListKeys = []string {}

    return &(prefixEntries.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry
// Prefix data
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NetworkAddress interface{}

    // This attribute is a key. Mask legnth (prefix length). The type is
    // interface{} with range: 0..4294967295.
    MaskLength interface{}

    // State.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_State

    // Next hops. The type is slice of
    // OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop.
    NextHop []*OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop
}

func (prefixEntry *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry) GetEntityData() *types.CommonEntityData {
    prefixEntry.EntityData.YFilter = prefixEntry.YFilter
    prefixEntry.EntityData.YangName = "prefix-entry"
    prefixEntry.EntityData.BundleName = "cisco_ios_xr"
    prefixEntry.EntityData.ParentYangName = "prefix-entries"
    prefixEntry.EntityData.SegmentPath = "prefix-entry" + types.AddKeyToken(prefixEntry.NetworkAddress, "network-address") + types.AddKeyToken(prefixEntry.MaskLength, "mask-length")
    prefixEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixEntry.EntityData.Children = types.NewOrderedMap()
    prefixEntry.EntityData.Children.Append("state", types.YChild{"State", &prefixEntry.State})
    prefixEntry.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range prefixEntry.NextHop {
        prefixEntry.EntityData.Children.Append(types.GetSegmentPath(prefixEntry.NextHop[i]), types.YChild{"NextHop", prefixEntry.NextHop[i]})
    }
    prefixEntry.EntityData.Leafs = types.NewOrderedMap()
    prefixEntry.EntityData.Leafs.Append("network-address", types.YLeaf{"NetworkAddress", prefixEntry.NetworkAddress})
    prefixEntry.EntityData.Leafs.Append("mask-length", types.YLeaf{"MaskLength", prefixEntry.MaskLength})

    prefixEntry.EntityData.YListKeys = []string {"NetworkAddress", "MaskLength"}

    return &(prefixEntry.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_State
// State
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP prefix. The type is string.
    PrefixIndex interface{}

    // MPLS label. The type is string.
    LabelIndex interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefix-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix-index", types.YLeaf{"PrefixIndex", state.PrefixIndex})
    state.EntityData.Leafs.Append("label-index", types.YLeaf{"LabelIndex", state.LabelIndex})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop
// Next hops
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OC AFT entry next-hop state.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_State

    // AFT entry next-hop interface ref.
    InterfaceRef OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef
}

func (nextHop *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "prefix-entry"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_State
// OC AFT entry next-hop state
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Index. The type is interface{} with range: 0..18446744073709551615.
    Index interface{}

    // Weight. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // IP address. The type is string.
    IpAddress interface{}

    // VRF name where the nexthop is resolved. The type is string.
    NetworkInstance interface{}

    // Popped mpls label stack. The type is slice of string.
    PoppedMplsLabelStack []interface{}

    // Pushed mpls label stack. The type is slice of string.
    PushedMplsLabelStack []interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("network-instance", types.YLeaf{"NetworkInstance", state.NetworkInstance})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef
// AFT entry next-hop interface ref
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFT entry interface ref state.
    State OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State
}

func (interfaceRef *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "cisco_ios_xr"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State
// AFT entry interface ref state
type OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string.
    Interface interface{}

    // Sub-Interface index. The type is interface{} with range: 0..4294967295.
    Subinterface interface{}
}

func (state *OcAftL3_Vrfs_Vrf_AbstractForwardingTables_Ipv4Unicast_PrefixEntries_PrefixEntry_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// MplsForwarding
// mpls forwarding
type MplsForwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of Nodes.
    Nodes MplsForwarding_Nodes
}

func (mplsForwarding *MplsForwarding) GetEntityData() *types.CommonEntityData {
    mplsForwarding.EntityData.YFilter = mplsForwarding.YFilter
    mplsForwarding.EntityData.YangName = "mpls-forwarding"
    mplsForwarding.EntityData.BundleName = "cisco_ios_xr"
    mplsForwarding.EntityData.ParentYangName = "Cisco-IOS-XR-fib-common-oper"
    mplsForwarding.EntityData.SegmentPath = "Cisco-IOS-XR-fib-common-oper:mpls-forwarding"
    mplsForwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsForwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsForwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsForwarding.EntityData.Children = types.NewOrderedMap()
    mplsForwarding.EntityData.Children.Append("nodes", types.YChild{"Nodes", &mplsForwarding.Nodes})
    mplsForwarding.EntityData.Leafs = types.NewOrderedMap()

    mplsForwarding.EntityData.YListKeys = []string {}

    return &(mplsForwarding.EntityData)
}

// MplsForwarding_Nodes
// Table of Nodes
type MplsForwarding_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for a specific Node. The type is slice of
    // MplsForwarding_Nodes_Node.
    Node []*MplsForwarding_Nodes_Node
}

func (nodes *MplsForwarding_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "mpls-forwarding"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = types.NewOrderedMap()
    nodes.EntityData.Children.Append("node", types.YChild{"Node", nil})
    for i := range nodes.Node {
        nodes.EntityData.Children.Append(types.GetSegmentPath(nodes.Node[i]), types.YChild{"Node", nodes.Node[i]})
    }
    nodes.EntityData.Leafs = types.NewOrderedMap()

    nodes.EntityData.YListKeys = []string {}

    return &(nodes.EntityData)
}

// MplsForwarding_Nodes_Node
// Operational data for a specific Node
type MplsForwarding_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // MPLS forwarding summary.
    ForwardingSummary MplsForwarding_Nodes_Node_ForwardingSummary

    // FRR Log Table.
    FrrLogs MplsForwarding_Nodes_Node_FrrLogs

    // Labels For FIB.
    LabelFib MplsForwarding_Nodes_Node_LabelFib

    // TE Tunnel information.
    Tunnel MplsForwarding_Nodes_Node_Tunnel

    // MPLS forwarding FRR Database.
    FrrDatabase MplsForwarding_Nodes_Node_FrrDatabase
}

func (node *MplsForwarding_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + types.AddKeyToken(node.NodeName, "node-name")
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = types.NewOrderedMap()
    node.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &node.ForwardingSummary})
    node.EntityData.Children.Append("frr-logs", types.YChild{"FrrLogs", &node.FrrLogs})
    node.EntityData.Children.Append("label-fib", types.YChild{"LabelFib", &node.LabelFib})
    node.EntityData.Children.Append("tunnel", types.YChild{"Tunnel", &node.Tunnel})
    node.EntityData.Children.Append("frr-database", types.YChild{"FrrDatabase", &node.FrrDatabase})
    node.EntityData.Leafs = types.NewOrderedMap()
    node.EntityData.Leafs.Append("node-name", types.YLeaf{"NodeName", node.NodeName})

    node.EntityData.YListKeys = []string {"NodeName"}

    return &(node.EntityData)
}

// MplsForwarding_Nodes_Node_ForwardingSummary
// MPLS forwarding summary
type MplsForwarding_Nodes_Node_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of IPv4 imposition entries. The type is interface{} with range:
    // 0..4294967295.
    Ipv4ImpositionEntries interface{}

    // Number of reserved label entries. The type is interface{} with range:
    // 0..4294967295.
    ReservedLabelEntries interface{}

    // Number of label swap/disposition entries. The type is interface{} with
    // range: 0..4294967295.
    LabelSwitchedEntries interface{}

    // Number of delete stale label entries. The type is interface{} with range:
    // 0..4294967295.
    DeletedStaleEntries interface{}

    // Number of TE tunnel head imposition entries. The type is interface{} with
    // range: 0..4294967295.
    TeHeadEntries interface{}

    // Number of TE FRR tunnel head imposition entries. The type is interface{}
    // with range: 0..4294967295.
    TeFrrHeadEntries interface{}

    // Number of TE FRR protected interface entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrInterfaceEntries interface{}

    // Number of TE FRR protected next-hop entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrNextHopEntries interface{}

    // Number of TE MidPoints forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeMidPointsEntries interface{}

    // Number of TE FRR MidPoints forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrMidPointsEntries interface{}

    // Number of TE internal forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeInternalEntries interface{}

    // Number of TE internal forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrInternalEntries interface{}

    // Total forwarding updates from LSD to LFDs. The type is interface{} with
    // range: 0..4294967295.
    TotalForwardingUpdates interface{}

    // Total forwarding update messages from LSD to LFDs. The type is interface{}
    // with range: 0..4294967295.
    TotalForwardingUpdateMessages interface{}

    // Total forwarding updates from MRIB to LFDs. The type is interface{} with
    // range: 0..4294967295.
    TotalP2mpForwardingUpdates interface{}

    // Total p2mp forwarding add/modify messages from MRIB to LFDs. The type is
    // interface{} with range: 0..4294967295.
    TotalP2mpForwardingAddedOrModifyMessages interface{}

    // Total p2mp forwarding del messages from MRIB to LFDs. The type is
    // interface{} with range: 0..4294967295.
    TotalP2mpForwardingDeleteMessages interface{}

    // Total p2mp forwarding messages dropped from MRIB to LFDs. The type is
    // interface{} with range: 0..4294967295.
    TotalP2mpForwardingDropMessages interface{}

    // Total IIR triggered p2mp forwarding MRIB messages dropped. The type is
    // interface{} with range: 0..4294967295.
    TotalP2mpIirForwardingDropMessages interface{}

    // Lowest label in use. The type is interface{} with range: 0..4294967295.
    LowestLabel interface{}

    // Highest Label in use. The type is interface{} with range: 0..4294967295.
    HighestLabel interface{}

    // Number of TE tunnels treated as non-protected. The type is interface{} with
    // range: 0..4294967295.
    IgnoreProtect interface{}

    // Number of MTE tunnel head entries. The type is interface{} with range:
    // 0..4294967295.
    MteHeadEntries interface{}

    // Number of MTE local entries. The type is interface{} with range:
    // 0..4294967295.
    MteLlEntries interface{}

    // Number of MTE midpoint entries. The type is interface{} with range:
    // 0..4294967295.
    MteMidpointEntries interface{}

    // Number of global FIB packets dropped. The type is interface{} with range:
    // 0..18446744073709551615.
    GlobalDroppedPackets interface{}

    // Number of global FIB packets fragmented. The type is interface{} with
    // range: 0..18446744073709551615.
    GlobalFragmentedPackets interface{}

    // Number of global failed lookups. The type is interface{} with range:
    // 0..18446744073709551615.
    GlobalFailedLookups interface{}

    // Number of labels with RPF. The type is interface{} with range:
    // 0..4294967295.
    LrpfEntries interface{}
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "node"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("ipv4-imposition-entries", types.YLeaf{"Ipv4ImpositionEntries", forwardingSummary.Ipv4ImpositionEntries})
    forwardingSummary.EntityData.Leafs.Append("reserved-label-entries", types.YLeaf{"ReservedLabelEntries", forwardingSummary.ReservedLabelEntries})
    forwardingSummary.EntityData.Leafs.Append("label-switched-entries", types.YLeaf{"LabelSwitchedEntries", forwardingSummary.LabelSwitchedEntries})
    forwardingSummary.EntityData.Leafs.Append("deleted-stale-entries", types.YLeaf{"DeletedStaleEntries", forwardingSummary.DeletedStaleEntries})
    forwardingSummary.EntityData.Leafs.Append("te-head-entries", types.YLeaf{"TeHeadEntries", forwardingSummary.TeHeadEntries})
    forwardingSummary.EntityData.Leafs.Append("te-frr-head-entries", types.YLeaf{"TeFrrHeadEntries", forwardingSummary.TeFrrHeadEntries})
    forwardingSummary.EntityData.Leafs.Append("te-frr-interface-entries", types.YLeaf{"TeFrrInterfaceEntries", forwardingSummary.TeFrrInterfaceEntries})
    forwardingSummary.EntityData.Leafs.Append("te-frr-next-hop-entries", types.YLeaf{"TeFrrNextHopEntries", forwardingSummary.TeFrrNextHopEntries})
    forwardingSummary.EntityData.Leafs.Append("te-mid-points-entries", types.YLeaf{"TeMidPointsEntries", forwardingSummary.TeMidPointsEntries})
    forwardingSummary.EntityData.Leafs.Append("te-frr-mid-points-entries", types.YLeaf{"TeFrrMidPointsEntries", forwardingSummary.TeFrrMidPointsEntries})
    forwardingSummary.EntityData.Leafs.Append("te-internal-entries", types.YLeaf{"TeInternalEntries", forwardingSummary.TeInternalEntries})
    forwardingSummary.EntityData.Leafs.Append("te-frr-internal-entries", types.YLeaf{"TeFrrInternalEntries", forwardingSummary.TeFrrInternalEntries})
    forwardingSummary.EntityData.Leafs.Append("total-forwarding-updates", types.YLeaf{"TotalForwardingUpdates", forwardingSummary.TotalForwardingUpdates})
    forwardingSummary.EntityData.Leafs.Append("total-forwarding-update-messages", types.YLeaf{"TotalForwardingUpdateMessages", forwardingSummary.TotalForwardingUpdateMessages})
    forwardingSummary.EntityData.Leafs.Append("total-p2mp-forwarding-updates", types.YLeaf{"TotalP2mpForwardingUpdates", forwardingSummary.TotalP2mpForwardingUpdates})
    forwardingSummary.EntityData.Leafs.Append("total-p2mp-forwarding-added-or-modify-messages", types.YLeaf{"TotalP2mpForwardingAddedOrModifyMessages", forwardingSummary.TotalP2mpForwardingAddedOrModifyMessages})
    forwardingSummary.EntityData.Leafs.Append("total-p2mp-forwarding-delete-messages", types.YLeaf{"TotalP2mpForwardingDeleteMessages", forwardingSummary.TotalP2mpForwardingDeleteMessages})
    forwardingSummary.EntityData.Leafs.Append("total-p2mp-forwarding-drop-messages", types.YLeaf{"TotalP2mpForwardingDropMessages", forwardingSummary.TotalP2mpForwardingDropMessages})
    forwardingSummary.EntityData.Leafs.Append("total-p2mp-iir-forwarding-drop-messages", types.YLeaf{"TotalP2mpIirForwardingDropMessages", forwardingSummary.TotalP2mpIirForwardingDropMessages})
    forwardingSummary.EntityData.Leafs.Append("lowest-label", types.YLeaf{"LowestLabel", forwardingSummary.LowestLabel})
    forwardingSummary.EntityData.Leafs.Append("highest-label", types.YLeaf{"HighestLabel", forwardingSummary.HighestLabel})
    forwardingSummary.EntityData.Leafs.Append("ignore-protect", types.YLeaf{"IgnoreProtect", forwardingSummary.IgnoreProtect})
    forwardingSummary.EntityData.Leafs.Append("mte-head-entries", types.YLeaf{"MteHeadEntries", forwardingSummary.MteHeadEntries})
    forwardingSummary.EntityData.Leafs.Append("mte-ll-entries", types.YLeaf{"MteLlEntries", forwardingSummary.MteLlEntries})
    forwardingSummary.EntityData.Leafs.Append("mte-midpoint-entries", types.YLeaf{"MteMidpointEntries", forwardingSummary.MteMidpointEntries})
    forwardingSummary.EntityData.Leafs.Append("global-dropped-packets", types.YLeaf{"GlobalDroppedPackets", forwardingSummary.GlobalDroppedPackets})
    forwardingSummary.EntityData.Leafs.Append("global-fragmented-packets", types.YLeaf{"GlobalFragmentedPackets", forwardingSummary.GlobalFragmentedPackets})
    forwardingSummary.EntityData.Leafs.Append("global-failed-lookups", types.YLeaf{"GlobalFailedLookups", forwardingSummary.GlobalFailedLookups})
    forwardingSummary.EntityData.Leafs.Append("lrpf-entries", types.YLeaf{"LrpfEntries", forwardingSummary.LrpfEntries})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsForwarding_Nodes_Node_FrrLogs
// FRR Log Table
type MplsForwarding_Nodes_Node_FrrLogs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR Log information. The type is slice of
    // MplsForwarding_Nodes_Node_FrrLogs_FrrLog.
    FrrLog []*MplsForwarding_Nodes_Node_FrrLogs_FrrLog
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetEntityData() *types.CommonEntityData {
    frrLogs.EntityData.YFilter = frrLogs.YFilter
    frrLogs.EntityData.YangName = "frr-logs"
    frrLogs.EntityData.BundleName = "cisco_ios_xr"
    frrLogs.EntityData.ParentYangName = "node"
    frrLogs.EntityData.SegmentPath = "frr-logs"
    frrLogs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrLogs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrLogs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrLogs.EntityData.Children = types.NewOrderedMap()
    frrLogs.EntityData.Children.Append("frr-log", types.YChild{"FrrLog", nil})
    for i := range frrLogs.FrrLog {
        frrLogs.EntityData.Children.Append(types.GetSegmentPath(frrLogs.FrrLog[i]), types.YChild{"FrrLog", frrLogs.FrrLog[i]})
    }
    frrLogs.EntityData.Leafs = types.NewOrderedMap()

    frrLogs.EntityData.YListKeys = []string {}

    return &(frrLogs.EntityData)
}

// MplsForwarding_Nodes_Node_FrrLogs_FrrLog
// FRR Log information
type MplsForwarding_Nodes_Node_FrrLogs_FrrLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Event ID. The type is interface{} with range:
    // 0..4294967295.
    EventId interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProtectedFrrInterfaceName interface{}

    // Next Hop. The type is interface{} with range: 0..4294967295.
    NextHop interface{}

    // Number of rewrites affected. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRewritesAffected interface{}

    // Time to switch rewrites [nsecs]. The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    SwitchingTimeNsecs interface{}

    // Main Processing for FRR. The type is interface{} with range: 0..4294967295.
    MainProcessing interface{}

    // Fast Bundle Member Down Interface. The type is interface{} with range:
    // 0..4294967295.
    FastBundleMemberDownInterface interface{}

    // Node on which the FRR event happened. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    FrrEventNodeId interface{}

    // Time of FRR event processing start, Seconds in UTC, and Nano Seconds.
    StartTime MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetEntityData() *types.CommonEntityData {
    frrLog.EntityData.YFilter = frrLog.YFilter
    frrLog.EntityData.YangName = "frr-log"
    frrLog.EntityData.BundleName = "cisco_ios_xr"
    frrLog.EntityData.ParentYangName = "frr-logs"
    frrLog.EntityData.SegmentPath = "frr-log" + types.AddKeyToken(frrLog.EventId, "event-id")
    frrLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrLog.EntityData.Children = types.NewOrderedMap()
    frrLog.EntityData.Children.Append("start-time", types.YChild{"StartTime", &frrLog.StartTime})
    frrLog.EntityData.Leafs = types.NewOrderedMap()
    frrLog.EntityData.Leafs.Append("event-id", types.YLeaf{"EventId", frrLog.EventId})
    frrLog.EntityData.Leafs.Append("protected-frr-interface-name", types.YLeaf{"ProtectedFrrInterfaceName", frrLog.ProtectedFrrInterfaceName})
    frrLog.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", frrLog.NextHop})
    frrLog.EntityData.Leafs.Append("number-of-rewrites-affected", types.YLeaf{"NumberOfRewritesAffected", frrLog.NumberOfRewritesAffected})
    frrLog.EntityData.Leafs.Append("switching-time-nsecs", types.YLeaf{"SwitchingTimeNsecs", frrLog.SwitchingTimeNsecs})
    frrLog.EntityData.Leafs.Append("main-processing", types.YLeaf{"MainProcessing", frrLog.MainProcessing})
    frrLog.EntityData.Leafs.Append("fast-bundle-member-down-interface", types.YLeaf{"FastBundleMemberDownInterface", frrLog.FastBundleMemberDownInterface})
    frrLog.EntityData.Leafs.Append("frr-event-node-id", types.YLeaf{"FrrEventNodeId", frrLog.FrrEventNodeId})

    frrLog.EntityData.YListKeys = []string {"EventId"}

    return &(frrLog.EntityData)
}

// MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime
// Time of FRR event processing start, Seconds in
// UTC, and Nano Seconds
type MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds part of time valueiin UTC. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Nanoseconds part of time value. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetEntityData() *types.CommonEntityData {
    startTime.EntityData.YFilter = startTime.YFilter
    startTime.EntityData.YangName = "start-time"
    startTime.EntityData.BundleName = "cisco_ios_xr"
    startTime.EntityData.ParentYangName = "frr-log"
    startTime.EntityData.SegmentPath = "start-time"
    startTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    startTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    startTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    startTime.EntityData.Children = types.NewOrderedMap()
    startTime.EntityData.Leafs = types.NewOrderedMap()
    startTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", startTime.Seconds})
    startTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", startTime.Nanoseconds})

    startTime.EntityData.YListKeys = []string {}

    return &(startTime.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib
// Labels For FIB
type MplsForwarding_Nodes_Node_LabelFib struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Forwarding Detail table.
    ForwardingDetails MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails

    // Forwarding filtering details.
    Informations MplsForwarding_Nodes_Node_LabelFib_Informations

    // MPLS label security.
    LabelSecurity MplsForwarding_Nodes_Node_LabelFib_LabelSecurity
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetEntityData() *types.CommonEntityData {
    labelFib.EntityData.YFilter = labelFib.YFilter
    labelFib.EntityData.YangName = "label-fib"
    labelFib.EntityData.BundleName = "cisco_ios_xr"
    labelFib.EntityData.ParentYangName = "node"
    labelFib.EntityData.SegmentPath = "label-fib"
    labelFib.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelFib.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelFib.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelFib.EntityData.Children = types.NewOrderedMap()
    labelFib.EntityData.Children.Append("forwarding-details", types.YChild{"ForwardingDetails", &labelFib.ForwardingDetails})
    labelFib.EntityData.Children.Append("informations", types.YChild{"Informations", &labelFib.Informations})
    labelFib.EntityData.Children.Append("label-security", types.YChild{"LabelSecurity", &labelFib.LabelSecurity})
    labelFib.EntityData.Leafs = types.NewOrderedMap()

    labelFib.EntityData.YListKeys = []string {}

    return &(labelFib.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails
// MPLS Forwarding Detail table
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding details. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail.
    ForwardingDetail []*MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetEntityData() *types.CommonEntityData {
    forwardingDetails.EntityData.YFilter = forwardingDetails.YFilter
    forwardingDetails.EntityData.YangName = "forwarding-details"
    forwardingDetails.EntityData.BundleName = "cisco_ios_xr"
    forwardingDetails.EntityData.ParentYangName = "label-fib"
    forwardingDetails.EntityData.SegmentPath = "forwarding-details"
    forwardingDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingDetails.EntityData.Children = types.NewOrderedMap()
    forwardingDetails.EntityData.Children.Append("forwarding-detail", types.YChild{"ForwardingDetail", nil})
    for i := range forwardingDetails.ForwardingDetail {
        forwardingDetails.EntityData.Children.Append(types.GetSegmentPath(forwardingDetails.ForwardingDetail[i]), types.YChild{"ForwardingDetail", forwardingDetails.ForwardingDetail[i]})
    }
    forwardingDetails.EntityData.Leafs = types.NewOrderedMap()

    forwardingDetails.EntityData.YListKeys = []string {}

    return &(forwardingDetails.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail
// MPLS forwarding details
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label value. The type is interface{} with range: 16..1048575.
    LabelValue interface{}

    // End of stack flag. The type is Mplseos.
    Eos interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LeafLocalLabel interface{}

    // EOS bit. The type is interface{} with range: 0..4294967295.
    EosBit interface{}

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Number of references to the leaf. The type is interface{} with range:
    // 0..4294967295.
    LeafReferanceCount interface{}

    // The leaf flags. The type is interface{} with range: 0..4294967295.
    LeafFlags interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    PathListReferanceCount interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    LdiReferanceCount interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The LDI type. The type is interface{} with range: 0..4294967295.
    LdiType interface{}

    // The pointer to the LDI. The type is interface{} with range: 0..4294967295.
    LdiPointer interface{}

    // The LW-LDI type. The type is interface{} with range: 0..4294967295.
    LwLdiType interface{}

    // The pointer to the LW-LDI. The type is interface{} with range:
    // 0..4294967295.
    LwLdiPointer interface{}

    // The LW-LDI refcounter. The type is interface{} with range: 0..4294967295.
    LwLdiRefernaceCount interface{}

    // The pointer to the shared LDI in LW-LDI. The type is interface{} with
    // range: 0..4294967295.
    LwSharedLdiPointer interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The AFI table ID. The type is interface{} with range: 0..4294967295.
    AfiTableId interface{}

    // The unicast or multicast label. The type is bool.
    MulticastLabel interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LeafTimeInMilliSeconds interface{}

    // LDI-info in FIB leaf.
    LdiInformation MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation

    // The multicast info.
    MulticastInformation MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation

    // Label-infos in FIB leaf. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation.
    LabelInformation []*MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetEntityData() *types.CommonEntityData {
    forwardingDetail.EntityData.YFilter = forwardingDetail.YFilter
    forwardingDetail.EntityData.YangName = "forwarding-detail"
    forwardingDetail.EntityData.BundleName = "cisco_ios_xr"
    forwardingDetail.EntityData.ParentYangName = "forwarding-details"
    forwardingDetail.EntityData.SegmentPath = "forwarding-detail"
    forwardingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingDetail.EntityData.Children = types.NewOrderedMap()
    forwardingDetail.EntityData.Children.Append("ldi-information", types.YChild{"LdiInformation", &forwardingDetail.LdiInformation})
    forwardingDetail.EntityData.Children.Append("multicast-information", types.YChild{"MulticastInformation", &forwardingDetail.MulticastInformation})
    forwardingDetail.EntityData.Children.Append("label-information", types.YChild{"LabelInformation", nil})
    for i := range forwardingDetail.LabelInformation {
        forwardingDetail.EntityData.Children.Append(types.GetSegmentPath(forwardingDetail.LabelInformation[i]), types.YChild{"LabelInformation", forwardingDetail.LabelInformation[i]})
    }
    forwardingDetail.EntityData.Leafs = types.NewOrderedMap()
    forwardingDetail.EntityData.Leafs.Append("label-value", types.YLeaf{"LabelValue", forwardingDetail.LabelValue})
    forwardingDetail.EntityData.Leafs.Append("eos", types.YLeaf{"Eos", forwardingDetail.Eos})
    forwardingDetail.EntityData.Leafs.Append("leaf-local-label", types.YLeaf{"LeafLocalLabel", forwardingDetail.LeafLocalLabel})
    forwardingDetail.EntityData.Leafs.Append("eos-bit", types.YLeaf{"EosBit", forwardingDetail.EosBit})
    forwardingDetail.EntityData.Leafs.Append("hardware-information", types.YLeaf{"HardwareInformation", forwardingDetail.HardwareInformation})
    forwardingDetail.EntityData.Leafs.Append("leaf-referance-count", types.YLeaf{"LeafReferanceCount", forwardingDetail.LeafReferanceCount})
    forwardingDetail.EntityData.Leafs.Append("leaf-flags", types.YLeaf{"LeafFlags", forwardingDetail.LeafFlags})
    forwardingDetail.EntityData.Leafs.Append("path-list-referance-count", types.YLeaf{"PathListReferanceCount", forwardingDetail.PathListReferanceCount})
    forwardingDetail.EntityData.Leafs.Append("path-list-flags", types.YLeaf{"PathListFlags", forwardingDetail.PathListFlags})
    forwardingDetail.EntityData.Leafs.Append("ldi-referance-count", types.YLeaf{"LdiReferanceCount", forwardingDetail.LdiReferanceCount})
    forwardingDetail.EntityData.Leafs.Append("ldi-flags", types.YLeaf{"LdiFlags", forwardingDetail.LdiFlags})
    forwardingDetail.EntityData.Leafs.Append("ldi-type", types.YLeaf{"LdiType", forwardingDetail.LdiType})
    forwardingDetail.EntityData.Leafs.Append("ldi-pointer", types.YLeaf{"LdiPointer", forwardingDetail.LdiPointer})
    forwardingDetail.EntityData.Leafs.Append("lw-ldi-type", types.YLeaf{"LwLdiType", forwardingDetail.LwLdiType})
    forwardingDetail.EntityData.Leafs.Append("lw-ldi-pointer", types.YLeaf{"LwLdiPointer", forwardingDetail.LwLdiPointer})
    forwardingDetail.EntityData.Leafs.Append("lw-ldi-refernace-count", types.YLeaf{"LwLdiRefernaceCount", forwardingDetail.LwLdiRefernaceCount})
    forwardingDetail.EntityData.Leafs.Append("lw-shared-ldi-pointer", types.YLeaf{"LwSharedLdiPointer", forwardingDetail.LwSharedLdiPointer})
    forwardingDetail.EntityData.Leafs.Append("lspa-flags", types.YLeaf{"LspaFlags", forwardingDetail.LspaFlags})
    forwardingDetail.EntityData.Leafs.Append("afi-table-id", types.YLeaf{"AfiTableId", forwardingDetail.AfiTableId})
    forwardingDetail.EntityData.Leafs.Append("multicast-label", types.YLeaf{"MulticastLabel", forwardingDetail.MulticastLabel})
    forwardingDetail.EntityData.Leafs.Append("leaf-time-in-milli-seconds", types.YLeaf{"LeafTimeInMilliSeconds", forwardingDetail.LeafTimeInMilliSeconds})

    forwardingDetail.EntityData.YListKeys = []string {}

    return &(forwardingDetail.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation
// LDI-info in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LdiHardwareInformation interface{}
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetEntityData() *types.CommonEntityData {
    ldiInformation.EntityData.YFilter = ldiInformation.YFilter
    ldiInformation.EntityData.YangName = "ldi-information"
    ldiInformation.EntityData.BundleName = "cisco_ios_xr"
    ldiInformation.EntityData.ParentYangName = "forwarding-detail"
    ldiInformation.EntityData.SegmentPath = "ldi-information"
    ldiInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldiInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldiInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldiInformation.EntityData.Children = types.NewOrderedMap()
    ldiInformation.EntityData.Leafs = types.NewOrderedMap()
    ldiInformation.EntityData.Leafs.Append("ldi-hardware-information", types.YLeaf{"LdiHardwareInformation", ldiInformation.LdiHardwareInformation})

    ldiInformation.EntityData.YListKeys = []string {}

    return &(ldiInformation.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation
// The multicast info
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MOL base flags. The type is interface{} with range: 0..4294967295.
    MulticastMolBaseFlags interface{}

    // MOL flags. The type is interface{} with range: 0..65535.
    MulticastMolFlags interface{}

    // MOL refcount. The type is interface{} with range: 0..65535.
    MulticastMolReferanceCount interface{}

    // multicast mpls tunnel. The type is string with pattern: [a-zA-Z0-9./-]+.
    MulticastTunnelInterfaceHandler interface{}

    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes. The
    // type is interface{} with range: 0..4294967295.
    MulticastTunnelId interface{}

    // multicast nhinfo for p2mp TE Head. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelNextHopInformation interface{}

    // multicast LSPVIF for MLDP Tunnels. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLspvif interface{}

    // num multicast mpls output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsOutputPaths interface{}

    // num multicast mpls prot output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsProtocolOutputPaths interface{}

    // num multicast mpls local output paths. The type is interface{} with range:
    // 0..65535.
    MulticastMplsLocalOutputPaths interface{}

    // The multicast RPF-ID . The type is interface{} with range: 0..4294967295.
    MulticastRpfId interface{}

    // The multicast ENCAP-ID . The type is interface{} with range: 0..4294967295.
    MulticastEncapId interface{}

    // The multicast platform data len. The type is interface{} with range:
    // 0..255.
    MulticastPlatformDataLength interface{}

    // The multicast platform data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    MulticastPlatformData interface{}
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetEntityData() *types.CommonEntityData {
    multicastInformation.EntityData.YFilter = multicastInformation.YFilter
    multicastInformation.EntityData.YangName = "multicast-information"
    multicastInformation.EntityData.BundleName = "cisco_ios_xr"
    multicastInformation.EntityData.ParentYangName = "forwarding-detail"
    multicastInformation.EntityData.SegmentPath = "multicast-information"
    multicastInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastInformation.EntityData.Children = types.NewOrderedMap()
    multicastInformation.EntityData.Leafs = types.NewOrderedMap()
    multicastInformation.EntityData.Leafs.Append("multicast-mol-base-flags", types.YLeaf{"MulticastMolBaseFlags", multicastInformation.MulticastMolBaseFlags})
    multicastInformation.EntityData.Leafs.Append("multicast-mol-flags", types.YLeaf{"MulticastMolFlags", multicastInformation.MulticastMolFlags})
    multicastInformation.EntityData.Leafs.Append("multicast-mol-referance-count", types.YLeaf{"MulticastMolReferanceCount", multicastInformation.MulticastMolReferanceCount})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-interface-handler", types.YLeaf{"MulticastTunnelInterfaceHandler", multicastInformation.MulticastTunnelInterfaceHandler})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-id", types.YLeaf{"MulticastTunnelId", multicastInformation.MulticastTunnelId})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-next-hop-information", types.YLeaf{"MulticastTunnelNextHopInformation", multicastInformation.MulticastTunnelNextHopInformation})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-lspvif", types.YLeaf{"MulticastTunnelLspvif", multicastInformation.MulticastTunnelLspvif})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-output-paths", types.YLeaf{"MulticastMplsOutputPaths", multicastInformation.MulticastMplsOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-protocol-output-paths", types.YLeaf{"MulticastMplsProtocolOutputPaths", multicastInformation.MulticastMplsProtocolOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-local-output-paths", types.YLeaf{"MulticastMplsLocalOutputPaths", multicastInformation.MulticastMplsLocalOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-rpf-id", types.YLeaf{"MulticastRpfId", multicastInformation.MulticastRpfId})
    multicastInformation.EntityData.Leafs.Append("multicast-encap-id", types.YLeaf{"MulticastEncapId", multicastInformation.MulticastEncapId})
    multicastInformation.EntityData.Leafs.Append("multicast-platform-data-length", types.YLeaf{"MulticastPlatformDataLength", multicastInformation.MulticastPlatformDataLength})
    multicastInformation.EntityData.Leafs.Append("multicast-platform-data", types.YLeaf{"MulticastPlatformData", multicastInformation.MulticastPlatformData})

    multicastInformation.EntityData.YListKeys = []string {}

    return &(multicastInformation.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation
// Label-infos in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label-Info type. The type is interface{} with range: 0..4294967295.
    LabelInformationType interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // MPLS Adjacency flags. The type is interface{} with range: 0..4294967295.
    MplsAdjacencyFlags interface{}

    // Tunnel id present?. The type is bool.
    TunnelIdPresent interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing Physical Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingPhysicalInterface interface{}

    // Outgoing Parent Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingParentInterface interface{}

    // Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // LabelInformationPathIndex. The type is interface{} with range:
    // 0..4294967295.
    LabelInformationPathIndex interface{}

    // NHinfo Type. The type is NextHop.
    LabelInformationNextHopType interface{}

    // The address family (v4/v6) . The type is Proto.
    LabelInformationNextHopProtocol interface{}

    // Bytes transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TxBytes interface{}

    // Packets transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615.
    TxPackets interface{}

    // Output Interface in string format. The type is string.
    OutgoingInterfaceString interface{}

    // Output Label in string format. The type is string.
    OutgoingLabelString interface{}

    // Prefix Or ID. The type is string.
    PrefixOrId interface{}

    // Next hop address in string format. The type is string.
    LabelInformationNextHopString interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationRouteVersion interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationTimeInMilliSeconds interface{}

    // Detail label info.
    LabelInformationDetail MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail

    // Path's Hash info in case of exact-route command.
    ExactRouteHashInfo MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetEntityData() *types.CommonEntityData {
    labelInformation.EntityData.YFilter = labelInformation.YFilter
    labelInformation.EntityData.YangName = "label-information"
    labelInformation.EntityData.BundleName = "cisco_ios_xr"
    labelInformation.EntityData.ParentYangName = "forwarding-detail"
    labelInformation.EntityData.SegmentPath = "label-information"
    labelInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInformation.EntityData.Children = types.NewOrderedMap()
    labelInformation.EntityData.Children.Append("label-information-detail", types.YChild{"LabelInformationDetail", &labelInformation.LabelInformationDetail})
    labelInformation.EntityData.Children.Append("exact-route-hash-info", types.YChild{"ExactRouteHashInfo", &labelInformation.ExactRouteHashInfo})
    labelInformation.EntityData.Leafs = types.NewOrderedMap()
    labelInformation.EntityData.Leafs.Append("label-information-type", types.YLeaf{"LabelInformationType", labelInformation.LabelInformationType})
    labelInformation.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", labelInformation.LocalLabel})
    labelInformation.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", labelInformation.OutgoingLabel})
    labelInformation.EntityData.Leafs.Append("mpls-adjacency-flags", types.YLeaf{"MplsAdjacencyFlags", labelInformation.MplsAdjacencyFlags})
    labelInformation.EntityData.Leafs.Append("tunnel-id-present", types.YLeaf{"TunnelIdPresent", labelInformation.TunnelIdPresent})
    labelInformation.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", labelInformation.OutgoingInterface})
    labelInformation.EntityData.Leafs.Append("outgoing-physical-interface", types.YLeaf{"OutgoingPhysicalInterface", labelInformation.OutgoingPhysicalInterface})
    labelInformation.EntityData.Leafs.Append("outgoing-parent-interface", types.YLeaf{"OutgoingParentInterface", labelInformation.OutgoingParentInterface})
    labelInformation.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", labelInformation.TunnelInterface})
    labelInformation.EntityData.Leafs.Append("label-information-path-index", types.YLeaf{"LabelInformationPathIndex", labelInformation.LabelInformationPathIndex})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-type", types.YLeaf{"LabelInformationNextHopType", labelInformation.LabelInformationNextHopType})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-protocol", types.YLeaf{"LabelInformationNextHopProtocol", labelInformation.LabelInformationNextHopProtocol})
    labelInformation.EntityData.Leafs.Append("tx-bytes", types.YLeaf{"TxBytes", labelInformation.TxBytes})
    labelInformation.EntityData.Leafs.Append("tx-packets", types.YLeaf{"TxPackets", labelInformation.TxPackets})
    labelInformation.EntityData.Leafs.Append("outgoing-interface-string", types.YLeaf{"OutgoingInterfaceString", labelInformation.OutgoingInterfaceString})
    labelInformation.EntityData.Leafs.Append("outgoing-label-string", types.YLeaf{"OutgoingLabelString", labelInformation.OutgoingLabelString})
    labelInformation.EntityData.Leafs.Append("prefix-or-id", types.YLeaf{"PrefixOrId", labelInformation.PrefixOrId})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-string", types.YLeaf{"LabelInformationNextHopString", labelInformation.LabelInformationNextHopString})
    labelInformation.EntityData.Leafs.Append("label-information-route-version", types.YLeaf{"LabelInformationRouteVersion", labelInformation.LabelInformationRouteVersion})
    labelInformation.EntityData.Leafs.Append("label-information-time-in-milli-seconds", types.YLeaf{"LabelInformationTimeInMilliSeconds", labelInformation.LabelInformationTimeInMilliSeconds})

    labelInformation.EntityData.YListKeys = []string {}

    return &(labelInformation.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail
// Detail label info
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L3 MTU. The type is interface{} with range: 0..4294967295.
    L3Mtu interface{}

    // Total encapsulation size: L2 + MPLS. The type is interface{} with range:
    // 0..4294967295.
    TotalEncapsulationSize interface{}

    // Length of L2 encapsulation. The type is interface{} with range:
    // 0..4294967295.
    MacSize interface{}

    // Number of packets switched. The type is interface{} with range:
    // 0..18446744073709551615.
    TransmitNumberOfPacketsSwitched interface{}

    // Number of Bytes switched. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TransmitNumberOfBytesSwitched interface{}

    // Status. The type is interface{} with range: -2147483648..2147483647.
    Status interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // The address family (V4/V6) . The type is Proto.
    NextHopProtocol interface{}

    // Next hop address in string format. The type is string.
    NextHopString interface{}

    // Label stack. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack.
    LabelStack []*MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetEntityData() *types.CommonEntityData {
    labelInformationDetail.EntityData.YFilter = labelInformationDetail.YFilter
    labelInformationDetail.EntityData.YangName = "label-information-detail"
    labelInformationDetail.EntityData.BundleName = "cisco_ios_xr"
    labelInformationDetail.EntityData.ParentYangName = "label-information"
    labelInformationDetail.EntityData.SegmentPath = "label-information-detail"
    labelInformationDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInformationDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInformationDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInformationDetail.EntityData.Children = types.NewOrderedMap()
    labelInformationDetail.EntityData.Children.Append("label-stack", types.YChild{"LabelStack", nil})
    for i := range labelInformationDetail.LabelStack {
        labelInformationDetail.EntityData.Children.Append(types.GetSegmentPath(labelInformationDetail.LabelStack[i]), types.YChild{"LabelStack", labelInformationDetail.LabelStack[i]})
    }
    labelInformationDetail.EntityData.Leafs = types.NewOrderedMap()
    labelInformationDetail.EntityData.Leafs.Append("l3-mtu", types.YLeaf{"L3Mtu", labelInformationDetail.L3Mtu})
    labelInformationDetail.EntityData.Leafs.Append("total-encapsulation-size", types.YLeaf{"TotalEncapsulationSize", labelInformationDetail.TotalEncapsulationSize})
    labelInformationDetail.EntityData.Leafs.Append("mac-size", types.YLeaf{"MacSize", labelInformationDetail.MacSize})
    labelInformationDetail.EntityData.Leafs.Append("transmit-number-of-packets-switched", types.YLeaf{"TransmitNumberOfPacketsSwitched", labelInformationDetail.TransmitNumberOfPacketsSwitched})
    labelInformationDetail.EntityData.Leafs.Append("transmit-number-of-bytes-switched", types.YLeaf{"TransmitNumberOfBytesSwitched", labelInformationDetail.TransmitNumberOfBytesSwitched})
    labelInformationDetail.EntityData.Leafs.Append("status", types.YLeaf{"Status", labelInformationDetail.Status})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-interface", types.YLeaf{"NextHopInterface", labelInformationDetail.NextHopInterface})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-protocol", types.YLeaf{"NextHopProtocol", labelInformationDetail.NextHopProtocol})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-string", types.YLeaf{"NextHopString", labelInformationDetail.NextHopString})

    labelInformationDetail.EntityData.YListKeys = []string {}

    return &(labelInformationDetail.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack
// Label stack
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetEntityData() *types.CommonEntityData {
    labelStack.EntityData.YFilter = labelStack.YFilter
    labelStack.EntityData.YangName = "label-stack"
    labelStack.EntityData.BundleName = "cisco_ios_xr"
    labelStack.EntityData.ParentYangName = "label-information-detail"
    labelStack.EntityData.SegmentPath = "label-stack"
    labelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelStack.EntityData.Children = types.NewOrderedMap()
    labelStack.EntityData.Leafs = types.NewOrderedMap()
    labelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelStack.Entry})

    labelStack.EntityData.YListKeys = []string {}

    return &(labelStack.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo
// Path's Hash info in case of exact-route command
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Hash Index valid?. The type is bool.
    HashIndexIsValid interface{}

    // Hash Index value. The type is interface{} with range: 0..255.
    HashIndex interface{}
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetEntityData() *types.CommonEntityData {
    exactRouteHashInfo.EntityData.YFilter = exactRouteHashInfo.YFilter
    exactRouteHashInfo.EntityData.YangName = "exact-route-hash-info"
    exactRouteHashInfo.EntityData.BundleName = "cisco_ios_xr"
    exactRouteHashInfo.EntityData.ParentYangName = "label-information"
    exactRouteHashInfo.EntityData.SegmentPath = "exact-route-hash-info"
    exactRouteHashInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exactRouteHashInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exactRouteHashInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exactRouteHashInfo.EntityData.Children = types.NewOrderedMap()
    exactRouteHashInfo.EntityData.Leafs = types.NewOrderedMap()
    exactRouteHashInfo.EntityData.Leafs.Append("hash-index-is-valid", types.YLeaf{"HashIndexIsValid", exactRouteHashInfo.HashIndexIsValid})
    exactRouteHashInfo.EntityData.Leafs.Append("hash-index", types.YLeaf{"HashIndex", exactRouteHashInfo.HashIndex})

    exactRouteHashInfo.EntityData.YListKeys = []string {}

    return &(exactRouteHashInfo.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations
// Forwarding filtering details
type MplsForwarding_Nodes_Node_LabelFib_Informations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding information. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_Informations_Information.
    Information []*MplsForwarding_Nodes_Node_LabelFib_Informations_Information
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetEntityData() *types.CommonEntityData {
    informations.EntityData.YFilter = informations.YFilter
    informations.EntityData.YangName = "informations"
    informations.EntityData.BundleName = "cisco_ios_xr"
    informations.EntityData.ParentYangName = "label-fib"
    informations.EntityData.SegmentPath = "informations"
    informations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    informations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    informations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    informations.EntityData.Children = types.NewOrderedMap()
    informations.EntityData.Children.Append("information", types.YChild{"Information", nil})
    for i := range informations.Information {
        informations.EntityData.Children.Append(types.GetSegmentPath(informations.Information[i]), types.YChild{"Information", informations.Information[i]})
    }
    informations.EntityData.Leafs = types.NewOrderedMap()

    informations.EntityData.YListKeys = []string {}

    return &(informations.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information
// MPLS forwarding information
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label value. The type is interface{} with range: 16..1048575.
    LabelValue interface{}

    // End of stack flag. The type is Mplseos.
    Eos interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LeafLocalLabel interface{}

    // EOS bit. The type is interface{} with range: 0..4294967295.
    EosBit interface{}

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Number of references to the leaf. The type is interface{} with range:
    // 0..4294967295.
    LeafReferanceCount interface{}

    // The leaf flags. The type is interface{} with range: 0..4294967295.
    LeafFlags interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    PathListReferanceCount interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    LdiReferanceCount interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The LDI type. The type is interface{} with range: 0..4294967295.
    LdiType interface{}

    // The pointer to the LDI. The type is interface{} with range: 0..4294967295.
    LdiPointer interface{}

    // The LW-LDI type. The type is interface{} with range: 0..4294967295.
    LwLdiType interface{}

    // The pointer to the LW-LDI. The type is interface{} with range:
    // 0..4294967295.
    LwLdiPointer interface{}

    // The LW-LDI refcounter. The type is interface{} with range: 0..4294967295.
    LwLdiRefernaceCount interface{}

    // The pointer to the shared LDI in LW-LDI. The type is interface{} with
    // range: 0..4294967295.
    LwSharedLdiPointer interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The AFI table ID. The type is interface{} with range: 0..4294967295.
    AfiTableId interface{}

    // The unicast or multicast label. The type is bool.
    MulticastLabel interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LeafTimeInMilliSeconds interface{}

    // LDI-info in FIB leaf.
    LdiInformation MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation

    // The multicast info.
    MulticastInformation MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation

    // Label-infos in FIB leaf. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation.
    LabelInformation []*MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "informations"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Children.Append("ldi-information", types.YChild{"LdiInformation", &information.LdiInformation})
    information.EntityData.Children.Append("multicast-information", types.YChild{"MulticastInformation", &information.MulticastInformation})
    information.EntityData.Children.Append("label-information", types.YChild{"LabelInformation", nil})
    for i := range information.LabelInformation {
        information.EntityData.Children.Append(types.GetSegmentPath(information.LabelInformation[i]), types.YChild{"LabelInformation", information.LabelInformation[i]})
    }
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("label-value", types.YLeaf{"LabelValue", information.LabelValue})
    information.EntityData.Leafs.Append("eos", types.YLeaf{"Eos", information.Eos})
    information.EntityData.Leafs.Append("leaf-local-label", types.YLeaf{"LeafLocalLabel", information.LeafLocalLabel})
    information.EntityData.Leafs.Append("eos-bit", types.YLeaf{"EosBit", information.EosBit})
    information.EntityData.Leafs.Append("hardware-information", types.YLeaf{"HardwareInformation", information.HardwareInformation})
    information.EntityData.Leafs.Append("leaf-referance-count", types.YLeaf{"LeafReferanceCount", information.LeafReferanceCount})
    information.EntityData.Leafs.Append("leaf-flags", types.YLeaf{"LeafFlags", information.LeafFlags})
    information.EntityData.Leafs.Append("path-list-referance-count", types.YLeaf{"PathListReferanceCount", information.PathListReferanceCount})
    information.EntityData.Leafs.Append("path-list-flags", types.YLeaf{"PathListFlags", information.PathListFlags})
    information.EntityData.Leafs.Append("ldi-referance-count", types.YLeaf{"LdiReferanceCount", information.LdiReferanceCount})
    information.EntityData.Leafs.Append("ldi-flags", types.YLeaf{"LdiFlags", information.LdiFlags})
    information.EntityData.Leafs.Append("ldi-type", types.YLeaf{"LdiType", information.LdiType})
    information.EntityData.Leafs.Append("ldi-pointer", types.YLeaf{"LdiPointer", information.LdiPointer})
    information.EntityData.Leafs.Append("lw-ldi-type", types.YLeaf{"LwLdiType", information.LwLdiType})
    information.EntityData.Leafs.Append("lw-ldi-pointer", types.YLeaf{"LwLdiPointer", information.LwLdiPointer})
    information.EntityData.Leafs.Append("lw-ldi-refernace-count", types.YLeaf{"LwLdiRefernaceCount", information.LwLdiRefernaceCount})
    information.EntityData.Leafs.Append("lw-shared-ldi-pointer", types.YLeaf{"LwSharedLdiPointer", information.LwSharedLdiPointer})
    information.EntityData.Leafs.Append("lspa-flags", types.YLeaf{"LspaFlags", information.LspaFlags})
    information.EntityData.Leafs.Append("afi-table-id", types.YLeaf{"AfiTableId", information.AfiTableId})
    information.EntityData.Leafs.Append("multicast-label", types.YLeaf{"MulticastLabel", information.MulticastLabel})
    information.EntityData.Leafs.Append("leaf-time-in-milli-seconds", types.YLeaf{"LeafTimeInMilliSeconds", information.LeafTimeInMilliSeconds})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation
// LDI-info in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LdiHardwareInformation interface{}
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetEntityData() *types.CommonEntityData {
    ldiInformation.EntityData.YFilter = ldiInformation.YFilter
    ldiInformation.EntityData.YangName = "ldi-information"
    ldiInformation.EntityData.BundleName = "cisco_ios_xr"
    ldiInformation.EntityData.ParentYangName = "information"
    ldiInformation.EntityData.SegmentPath = "ldi-information"
    ldiInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldiInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldiInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldiInformation.EntityData.Children = types.NewOrderedMap()
    ldiInformation.EntityData.Leafs = types.NewOrderedMap()
    ldiInformation.EntityData.Leafs.Append("ldi-hardware-information", types.YLeaf{"LdiHardwareInformation", ldiInformation.LdiHardwareInformation})

    ldiInformation.EntityData.YListKeys = []string {}

    return &(ldiInformation.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation
// The multicast info
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MOL base flags. The type is interface{} with range: 0..4294967295.
    MulticastMolBaseFlags interface{}

    // MOL flags. The type is interface{} with range: 0..65535.
    MulticastMolFlags interface{}

    // MOL refcount. The type is interface{} with range: 0..65535.
    MulticastMolReferanceCount interface{}

    // multicast mpls tunnel. The type is string with pattern: [a-zA-Z0-9./-]+.
    MulticastTunnelInterfaceHandler interface{}

    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes. The
    // type is interface{} with range: 0..4294967295.
    MulticastTunnelId interface{}

    // multicast nhinfo for p2mp TE Head. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelNextHopInformation interface{}

    // multicast LSPVIF for MLDP Tunnels. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLspvif interface{}

    // num multicast mpls output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsOutputPaths interface{}

    // num multicast mpls prot output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsProtocolOutputPaths interface{}

    // num multicast mpls local output paths. The type is interface{} with range:
    // 0..65535.
    MulticastMplsLocalOutputPaths interface{}

    // The multicast RPF-ID . The type is interface{} with range: 0..4294967295.
    MulticastRpfId interface{}

    // The multicast ENCAP-ID . The type is interface{} with range: 0..4294967295.
    MulticastEncapId interface{}

    // The multicast platform data len. The type is interface{} with range:
    // 0..255.
    MulticastPlatformDataLength interface{}

    // The multicast platform data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    MulticastPlatformData interface{}
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetEntityData() *types.CommonEntityData {
    multicastInformation.EntityData.YFilter = multicastInformation.YFilter
    multicastInformation.EntityData.YangName = "multicast-information"
    multicastInformation.EntityData.BundleName = "cisco_ios_xr"
    multicastInformation.EntityData.ParentYangName = "information"
    multicastInformation.EntityData.SegmentPath = "multicast-information"
    multicastInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastInformation.EntityData.Children = types.NewOrderedMap()
    multicastInformation.EntityData.Leafs = types.NewOrderedMap()
    multicastInformation.EntityData.Leafs.Append("multicast-mol-base-flags", types.YLeaf{"MulticastMolBaseFlags", multicastInformation.MulticastMolBaseFlags})
    multicastInformation.EntityData.Leafs.Append("multicast-mol-flags", types.YLeaf{"MulticastMolFlags", multicastInformation.MulticastMolFlags})
    multicastInformation.EntityData.Leafs.Append("multicast-mol-referance-count", types.YLeaf{"MulticastMolReferanceCount", multicastInformation.MulticastMolReferanceCount})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-interface-handler", types.YLeaf{"MulticastTunnelInterfaceHandler", multicastInformation.MulticastTunnelInterfaceHandler})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-id", types.YLeaf{"MulticastTunnelId", multicastInformation.MulticastTunnelId})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-next-hop-information", types.YLeaf{"MulticastTunnelNextHopInformation", multicastInformation.MulticastTunnelNextHopInformation})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-lspvif", types.YLeaf{"MulticastTunnelLspvif", multicastInformation.MulticastTunnelLspvif})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-output-paths", types.YLeaf{"MulticastMplsOutputPaths", multicastInformation.MulticastMplsOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-protocol-output-paths", types.YLeaf{"MulticastMplsProtocolOutputPaths", multicastInformation.MulticastMplsProtocolOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-local-output-paths", types.YLeaf{"MulticastMplsLocalOutputPaths", multicastInformation.MulticastMplsLocalOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-rpf-id", types.YLeaf{"MulticastRpfId", multicastInformation.MulticastRpfId})
    multicastInformation.EntityData.Leafs.Append("multicast-encap-id", types.YLeaf{"MulticastEncapId", multicastInformation.MulticastEncapId})
    multicastInformation.EntityData.Leafs.Append("multicast-platform-data-length", types.YLeaf{"MulticastPlatformDataLength", multicastInformation.MulticastPlatformDataLength})
    multicastInformation.EntityData.Leafs.Append("multicast-platform-data", types.YLeaf{"MulticastPlatformData", multicastInformation.MulticastPlatformData})

    multicastInformation.EntityData.YListKeys = []string {}

    return &(multicastInformation.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation
// Label-infos in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label-Info type. The type is interface{} with range: 0..4294967295.
    LabelInformationType interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // MPLS Adjacency flags. The type is interface{} with range: 0..4294967295.
    MplsAdjacencyFlags interface{}

    // Tunnel id present?. The type is bool.
    TunnelIdPresent interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing Physical Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingPhysicalInterface interface{}

    // Outgoing Parent Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingParentInterface interface{}

    // Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // LabelInformationPathIndex. The type is interface{} with range:
    // 0..4294967295.
    LabelInformationPathIndex interface{}

    // NHinfo Type. The type is NextHop.
    LabelInformationNextHopType interface{}

    // The address family (v4/v6) . The type is Proto.
    LabelInformationNextHopProtocol interface{}

    // Bytes transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TxBytes interface{}

    // Packets transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615.
    TxPackets interface{}

    // Output Interface in string format. The type is string.
    OutgoingInterfaceString interface{}

    // Output Label in string format. The type is string.
    OutgoingLabelString interface{}

    // Prefix Or ID. The type is string.
    PrefixOrId interface{}

    // Next hop address in string format. The type is string.
    LabelInformationNextHopString interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationRouteVersion interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationTimeInMilliSeconds interface{}

    // Detail label info.
    LabelInformationDetail MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail

    // Path's Hash info in case of exact-route command.
    ExactRouteHashInfo MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetEntityData() *types.CommonEntityData {
    labelInformation.EntityData.YFilter = labelInformation.YFilter
    labelInformation.EntityData.YangName = "label-information"
    labelInformation.EntityData.BundleName = "cisco_ios_xr"
    labelInformation.EntityData.ParentYangName = "information"
    labelInformation.EntityData.SegmentPath = "label-information"
    labelInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInformation.EntityData.Children = types.NewOrderedMap()
    labelInformation.EntityData.Children.Append("label-information-detail", types.YChild{"LabelInformationDetail", &labelInformation.LabelInformationDetail})
    labelInformation.EntityData.Children.Append("exact-route-hash-info", types.YChild{"ExactRouteHashInfo", &labelInformation.ExactRouteHashInfo})
    labelInformation.EntityData.Leafs = types.NewOrderedMap()
    labelInformation.EntityData.Leafs.Append("label-information-type", types.YLeaf{"LabelInformationType", labelInformation.LabelInformationType})
    labelInformation.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", labelInformation.LocalLabel})
    labelInformation.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", labelInformation.OutgoingLabel})
    labelInformation.EntityData.Leafs.Append("mpls-adjacency-flags", types.YLeaf{"MplsAdjacencyFlags", labelInformation.MplsAdjacencyFlags})
    labelInformation.EntityData.Leafs.Append("tunnel-id-present", types.YLeaf{"TunnelIdPresent", labelInformation.TunnelIdPresent})
    labelInformation.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", labelInformation.OutgoingInterface})
    labelInformation.EntityData.Leafs.Append("outgoing-physical-interface", types.YLeaf{"OutgoingPhysicalInterface", labelInformation.OutgoingPhysicalInterface})
    labelInformation.EntityData.Leafs.Append("outgoing-parent-interface", types.YLeaf{"OutgoingParentInterface", labelInformation.OutgoingParentInterface})
    labelInformation.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", labelInformation.TunnelInterface})
    labelInformation.EntityData.Leafs.Append("label-information-path-index", types.YLeaf{"LabelInformationPathIndex", labelInformation.LabelInformationPathIndex})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-type", types.YLeaf{"LabelInformationNextHopType", labelInformation.LabelInformationNextHopType})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-protocol", types.YLeaf{"LabelInformationNextHopProtocol", labelInformation.LabelInformationNextHopProtocol})
    labelInformation.EntityData.Leafs.Append("tx-bytes", types.YLeaf{"TxBytes", labelInformation.TxBytes})
    labelInformation.EntityData.Leafs.Append("tx-packets", types.YLeaf{"TxPackets", labelInformation.TxPackets})
    labelInformation.EntityData.Leafs.Append("outgoing-interface-string", types.YLeaf{"OutgoingInterfaceString", labelInformation.OutgoingInterfaceString})
    labelInformation.EntityData.Leafs.Append("outgoing-label-string", types.YLeaf{"OutgoingLabelString", labelInformation.OutgoingLabelString})
    labelInformation.EntityData.Leafs.Append("prefix-or-id", types.YLeaf{"PrefixOrId", labelInformation.PrefixOrId})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-string", types.YLeaf{"LabelInformationNextHopString", labelInformation.LabelInformationNextHopString})
    labelInformation.EntityData.Leafs.Append("label-information-route-version", types.YLeaf{"LabelInformationRouteVersion", labelInformation.LabelInformationRouteVersion})
    labelInformation.EntityData.Leafs.Append("label-information-time-in-milli-seconds", types.YLeaf{"LabelInformationTimeInMilliSeconds", labelInformation.LabelInformationTimeInMilliSeconds})

    labelInformation.EntityData.YListKeys = []string {}

    return &(labelInformation.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail
// Detail label info
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L3 MTU. The type is interface{} with range: 0..4294967295.
    L3Mtu interface{}

    // Total encapsulation size: L2 + MPLS. The type is interface{} with range:
    // 0..4294967295.
    TotalEncapsulationSize interface{}

    // Length of L2 encapsulation. The type is interface{} with range:
    // 0..4294967295.
    MacSize interface{}

    // Number of packets switched. The type is interface{} with range:
    // 0..18446744073709551615.
    TransmitNumberOfPacketsSwitched interface{}

    // Number of Bytes switched. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TransmitNumberOfBytesSwitched interface{}

    // Status. The type is interface{} with range: -2147483648..2147483647.
    Status interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // The address family (V4/V6) . The type is Proto.
    NextHopProtocol interface{}

    // Next hop address in string format. The type is string.
    NextHopString interface{}

    // Label stack. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack.
    LabelStack []*MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetEntityData() *types.CommonEntityData {
    labelInformationDetail.EntityData.YFilter = labelInformationDetail.YFilter
    labelInformationDetail.EntityData.YangName = "label-information-detail"
    labelInformationDetail.EntityData.BundleName = "cisco_ios_xr"
    labelInformationDetail.EntityData.ParentYangName = "label-information"
    labelInformationDetail.EntityData.SegmentPath = "label-information-detail"
    labelInformationDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInformationDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInformationDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInformationDetail.EntityData.Children = types.NewOrderedMap()
    labelInformationDetail.EntityData.Children.Append("label-stack", types.YChild{"LabelStack", nil})
    for i := range labelInformationDetail.LabelStack {
        labelInformationDetail.EntityData.Children.Append(types.GetSegmentPath(labelInformationDetail.LabelStack[i]), types.YChild{"LabelStack", labelInformationDetail.LabelStack[i]})
    }
    labelInformationDetail.EntityData.Leafs = types.NewOrderedMap()
    labelInformationDetail.EntityData.Leafs.Append("l3-mtu", types.YLeaf{"L3Mtu", labelInformationDetail.L3Mtu})
    labelInformationDetail.EntityData.Leafs.Append("total-encapsulation-size", types.YLeaf{"TotalEncapsulationSize", labelInformationDetail.TotalEncapsulationSize})
    labelInformationDetail.EntityData.Leafs.Append("mac-size", types.YLeaf{"MacSize", labelInformationDetail.MacSize})
    labelInformationDetail.EntityData.Leafs.Append("transmit-number-of-packets-switched", types.YLeaf{"TransmitNumberOfPacketsSwitched", labelInformationDetail.TransmitNumberOfPacketsSwitched})
    labelInformationDetail.EntityData.Leafs.Append("transmit-number-of-bytes-switched", types.YLeaf{"TransmitNumberOfBytesSwitched", labelInformationDetail.TransmitNumberOfBytesSwitched})
    labelInformationDetail.EntityData.Leafs.Append("status", types.YLeaf{"Status", labelInformationDetail.Status})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-interface", types.YLeaf{"NextHopInterface", labelInformationDetail.NextHopInterface})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-protocol", types.YLeaf{"NextHopProtocol", labelInformationDetail.NextHopProtocol})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-string", types.YLeaf{"NextHopString", labelInformationDetail.NextHopString})

    labelInformationDetail.EntityData.YListKeys = []string {}

    return &(labelInformationDetail.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack
// Label stack
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetEntityData() *types.CommonEntityData {
    labelStack.EntityData.YFilter = labelStack.YFilter
    labelStack.EntityData.YangName = "label-stack"
    labelStack.EntityData.BundleName = "cisco_ios_xr"
    labelStack.EntityData.ParentYangName = "label-information-detail"
    labelStack.EntityData.SegmentPath = "label-stack"
    labelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelStack.EntityData.Children = types.NewOrderedMap()
    labelStack.EntityData.Leafs = types.NewOrderedMap()
    labelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelStack.Entry})

    labelStack.EntityData.YListKeys = []string {}

    return &(labelStack.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo
// Path's Hash info in case of exact-route command
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Hash Index valid?. The type is bool.
    HashIndexIsValid interface{}

    // Hash Index value. The type is interface{} with range: 0..255.
    HashIndex interface{}
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetEntityData() *types.CommonEntityData {
    exactRouteHashInfo.EntityData.YFilter = exactRouteHashInfo.YFilter
    exactRouteHashInfo.EntityData.YangName = "exact-route-hash-info"
    exactRouteHashInfo.EntityData.BundleName = "cisco_ios_xr"
    exactRouteHashInfo.EntityData.ParentYangName = "label-information"
    exactRouteHashInfo.EntityData.SegmentPath = "exact-route-hash-info"
    exactRouteHashInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exactRouteHashInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exactRouteHashInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exactRouteHashInfo.EntityData.Children = types.NewOrderedMap()
    exactRouteHashInfo.EntityData.Leafs = types.NewOrderedMap()
    exactRouteHashInfo.EntityData.Leafs.Append("hash-index-is-valid", types.YLeaf{"HashIndexIsValid", exactRouteHashInfo.HashIndexIsValid})
    exactRouteHashInfo.EntityData.Leafs.Append("hash-index", types.YLeaf{"HashIndex", exactRouteHashInfo.HashIndex})

    exactRouteHashInfo.EntityData.YListKeys = []string {}

    return &(exactRouteHashInfo.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity
// MPLS label security
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS label security interface table.
    Interfaces MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces

    // MPLS label security summary.
    Summary MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetEntityData() *types.CommonEntityData {
    labelSecurity.EntityData.YFilter = labelSecurity.YFilter
    labelSecurity.EntityData.YangName = "label-security"
    labelSecurity.EntityData.BundleName = "cisco_ios_xr"
    labelSecurity.EntityData.ParentYangName = "label-fib"
    labelSecurity.EntityData.SegmentPath = "label-security"
    labelSecurity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSecurity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSecurity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSecurity.EntityData.Children = types.NewOrderedMap()
    labelSecurity.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &labelSecurity.Interfaces})
    labelSecurity.EntityData.Children.Append("summary", types.YChild{"Summary", &labelSecurity.Summary})
    labelSecurity.EntityData.Leafs = types.NewOrderedMap()

    labelSecurity.EntityData.YListKeys = []string {}

    return &(labelSecurity.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces
// MPLS label security interface table
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify interface Name. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface.
    Interface []*MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "label-security"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface
// Specify interface Name
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // RPF is enabled on interface. The type is bool.
    RpfEnabled interface{}

    // RPF stats supported per interface. The type is bool.
    RpfSupported interface{}

    // Multi-label drop is enabled on interface. The type is bool.
    MldEnabled interface{}

    // Multi-label drop counters are supported per interface. The type is bool.
    MldSupported interface{}

    // RPF drops. The type is interface{} with range: 0..18446744073709551615.
    RpfDrops interface{}

    // Multi-label drops. The type is interface{} with range:
    // 0..18446744073709551615.
    MultiLabelDrops interface{}

    // RPF interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    Rpfifh interface{}
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("rpf-enabled", types.YLeaf{"RpfEnabled", self.RpfEnabled})
    self.EntityData.Leafs.Append("rpf-supported", types.YLeaf{"RpfSupported", self.RpfSupported})
    self.EntityData.Leafs.Append("mld-enabled", types.YLeaf{"MldEnabled", self.MldEnabled})
    self.EntityData.Leafs.Append("mld-supported", types.YLeaf{"MldSupported", self.MldSupported})
    self.EntityData.Leafs.Append("rpf-drops", types.YLeaf{"RpfDrops", self.RpfDrops})
    self.EntityData.Leafs.Append("multi-label-drops", types.YLeaf{"MultiLabelDrops", self.MultiLabelDrops})
    self.EntityData.Leafs.Append("rpfifh", types.YLeaf{"Rpfifh", self.Rpfifh})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary
// MPLS label security summary
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF drops. The type is interface{} with range: 0..18446744073709551615.
    RpfDrops interface{}

    // Multi-label drops. The type is interface{} with range:
    // 0..18446744073709551615.
    MultiLabelDrops interface{}
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "label-security"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("rpf-drops", types.YLeaf{"RpfDrops", summary.RpfDrops})
    summary.EntityData.Leafs.Append("multi-label-drops", types.YLeaf{"MultiLabelDrops", summary.MultiLabelDrops})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel
// TE Tunnel information
type MplsForwarding_Nodes_Node_Tunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding details for TE tunnels.
    ForwardingTunnels MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetEntityData() *types.CommonEntityData {
    tunnel.EntityData.YFilter = tunnel.YFilter
    tunnel.EntityData.YangName = "tunnel"
    tunnel.EntityData.BundleName = "cisco_ios_xr"
    tunnel.EntityData.ParentYangName = "node"
    tunnel.EntityData.SegmentPath = "tunnel"
    tunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnel.EntityData.Children = types.NewOrderedMap()
    tunnel.EntityData.Children.Append("forwarding-tunnels", types.YChild{"ForwardingTunnels", &tunnel.ForwardingTunnels})
    tunnel.EntityData.Leafs = types.NewOrderedMap()

    tunnel.EntityData.YListKeys = []string {}

    return &(tunnel.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels
// Forwarding details for TE tunnels
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding information for the TE tunnel. The type is slice of
    // MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel.
    ForwardingTunnel []*MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetEntityData() *types.CommonEntityData {
    forwardingTunnels.EntityData.YFilter = forwardingTunnels.YFilter
    forwardingTunnels.EntityData.YangName = "forwarding-tunnels"
    forwardingTunnels.EntityData.BundleName = "cisco_ios_xr"
    forwardingTunnels.EntityData.ParentYangName = "tunnel"
    forwardingTunnels.EntityData.SegmentPath = "forwarding-tunnels"
    forwardingTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingTunnels.EntityData.Children = types.NewOrderedMap()
    forwardingTunnels.EntityData.Children.Append("forwarding-tunnel", types.YChild{"ForwardingTunnel", nil})
    for i := range forwardingTunnels.ForwardingTunnel {
        forwardingTunnels.EntityData.Children.Append(types.GetSegmentPath(forwardingTunnels.ForwardingTunnel[i]), types.YChild{"ForwardingTunnel", forwardingTunnels.ForwardingTunnel[i]})
    }
    forwardingTunnels.EntityData.Leafs = types.NewOrderedMap()

    forwardingTunnels.EntityData.YListKeys = []string {}

    return &(forwardingTunnels.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel
// Forwarding information for the TE tunnel
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Tunnel head information.
    TunnelInfo MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo

    // Tunnel forwarding information.
    Fwdg MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetEntityData() *types.CommonEntityData {
    forwardingTunnel.EntityData.YFilter = forwardingTunnel.YFilter
    forwardingTunnel.EntityData.YangName = "forwarding-tunnel"
    forwardingTunnel.EntityData.BundleName = "cisco_ios_xr"
    forwardingTunnel.EntityData.ParentYangName = "forwarding-tunnels"
    forwardingTunnel.EntityData.SegmentPath = "forwarding-tunnel" + types.AddKeyToken(forwardingTunnel.InterfaceName, "interface-name")
    forwardingTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingTunnel.EntityData.Children = types.NewOrderedMap()
    forwardingTunnel.EntityData.Children.Append("tunnel-info", types.YChild{"TunnelInfo", &forwardingTunnel.TunnelInfo})
    forwardingTunnel.EntityData.Children.Append("fwdg", types.YChild{"Fwdg", &forwardingTunnel.Fwdg})
    forwardingTunnel.EntityData.Leafs = types.NewOrderedMap()
    forwardingTunnel.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", forwardingTunnel.InterfaceName})

    forwardingTunnel.EntityData.YListKeys = []string {"InterfaceName"}

    return &(forwardingTunnel.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo
// Tunnel head information
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Tunnel Local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel Forward Class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load Metric. The type is interface{} with range: 0..255.
    TunnelLoadMetric interface{}

    // Is Tunnel SRTE. The type is bool.
    TunnelIsSrte interface{}

    // Tunnel head resolution is incomplete. The type is bool.
    TunnelResolutionIncomplete interface{}

    // Tunnel head resolition is inconsitent b/w TEhead and Local label. The type
    // is bool.
    TunnelResolutionInconsistent interface{}

    // Is Tunnel programmed as drop. The type is bool.
    TunnelIsProgrammedToDrop interface{}
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetEntityData() *types.CommonEntityData {
    tunnelInfo.EntityData.YFilter = tunnelInfo.YFilter
    tunnelInfo.EntityData.YangName = "tunnel-info"
    tunnelInfo.EntityData.BundleName = "cisco_ios_xr"
    tunnelInfo.EntityData.ParentYangName = "forwarding-tunnel"
    tunnelInfo.EntityData.SegmentPath = "tunnel-info"
    tunnelInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelInfo.EntityData.Children = types.NewOrderedMap()
    tunnelInfo.EntityData.Leafs = types.NewOrderedMap()
    tunnelInfo.EntityData.Leafs.Append("tunnel-interface-name", types.YLeaf{"TunnelInterfaceName", tunnelInfo.TunnelInterfaceName})
    tunnelInfo.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", tunnelInfo.TunnelLocalLabel})
    tunnelInfo.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", tunnelInfo.TunnelFwdClass})
    tunnelInfo.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", tunnelInfo.TunnelLoadMetric})
    tunnelInfo.EntityData.Leafs.Append("tunnel-is-srte", types.YLeaf{"TunnelIsSrte", tunnelInfo.TunnelIsSrte})
    tunnelInfo.EntityData.Leafs.Append("tunnel-resolution-incomplete", types.YLeaf{"TunnelResolutionIncomplete", tunnelInfo.TunnelResolutionIncomplete})
    tunnelInfo.EntityData.Leafs.Append("tunnel-resolution-inconsistent", types.YLeaf{"TunnelResolutionInconsistent", tunnelInfo.TunnelResolutionInconsistent})
    tunnelInfo.EntityData.Leafs.Append("tunnel-is-programmed-to-drop", types.YLeaf{"TunnelIsProgrammedToDrop", tunnelInfo.TunnelIsProgrammedToDrop})

    tunnelInfo.EntityData.YListKeys = []string {}

    return &(tunnelInfo.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg
// Tunnel forwarding information
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LeafLocalLabel interface{}

    // EOS bit. The type is interface{} with range: 0..4294967295.
    EosBit interface{}

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Number of references to the leaf. The type is interface{} with range:
    // 0..4294967295.
    LeafReferanceCount interface{}

    // The leaf flags. The type is interface{} with range: 0..4294967295.
    LeafFlags interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    PathListReferanceCount interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    LdiReferanceCount interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The LDI type. The type is interface{} with range: 0..4294967295.
    LdiType interface{}

    // The pointer to the LDI. The type is interface{} with range: 0..4294967295.
    LdiPointer interface{}

    // The LW-LDI type. The type is interface{} with range: 0..4294967295.
    LwLdiType interface{}

    // The pointer to the LW-LDI. The type is interface{} with range:
    // 0..4294967295.
    LwLdiPointer interface{}

    // The LW-LDI refcounter. The type is interface{} with range: 0..4294967295.
    LwLdiRefernaceCount interface{}

    // The pointer to the shared LDI in LW-LDI. The type is interface{} with
    // range: 0..4294967295.
    LwSharedLdiPointer interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The AFI table ID. The type is interface{} with range: 0..4294967295.
    AfiTableId interface{}

    // The unicast or multicast label. The type is bool.
    MulticastLabel interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LeafTimeInMilliSeconds interface{}

    // LDI-info in FIB leaf.
    LdiInformation MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation

    // The multicast info.
    MulticastInformation MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation

    // Label-infos in FIB leaf. The type is slice of
    // MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation.
    LabelInformation []*MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetEntityData() *types.CommonEntityData {
    fwdg.EntityData.YFilter = fwdg.YFilter
    fwdg.EntityData.YangName = "fwdg"
    fwdg.EntityData.BundleName = "cisco_ios_xr"
    fwdg.EntityData.ParentYangName = "forwarding-tunnel"
    fwdg.EntityData.SegmentPath = "fwdg"
    fwdg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fwdg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fwdg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fwdg.EntityData.Children = types.NewOrderedMap()
    fwdg.EntityData.Children.Append("ldi-information", types.YChild{"LdiInformation", &fwdg.LdiInformation})
    fwdg.EntityData.Children.Append("multicast-information", types.YChild{"MulticastInformation", &fwdg.MulticastInformation})
    fwdg.EntityData.Children.Append("label-information", types.YChild{"LabelInformation", nil})
    for i := range fwdg.LabelInformation {
        fwdg.EntityData.Children.Append(types.GetSegmentPath(fwdg.LabelInformation[i]), types.YChild{"LabelInformation", fwdg.LabelInformation[i]})
    }
    fwdg.EntityData.Leafs = types.NewOrderedMap()
    fwdg.EntityData.Leafs.Append("leaf-local-label", types.YLeaf{"LeafLocalLabel", fwdg.LeafLocalLabel})
    fwdg.EntityData.Leafs.Append("eos-bit", types.YLeaf{"EosBit", fwdg.EosBit})
    fwdg.EntityData.Leafs.Append("hardware-information", types.YLeaf{"HardwareInformation", fwdg.HardwareInformation})
    fwdg.EntityData.Leafs.Append("leaf-referance-count", types.YLeaf{"LeafReferanceCount", fwdg.LeafReferanceCount})
    fwdg.EntityData.Leafs.Append("leaf-flags", types.YLeaf{"LeafFlags", fwdg.LeafFlags})
    fwdg.EntityData.Leafs.Append("path-list-referance-count", types.YLeaf{"PathListReferanceCount", fwdg.PathListReferanceCount})
    fwdg.EntityData.Leafs.Append("path-list-flags", types.YLeaf{"PathListFlags", fwdg.PathListFlags})
    fwdg.EntityData.Leafs.Append("ldi-referance-count", types.YLeaf{"LdiReferanceCount", fwdg.LdiReferanceCount})
    fwdg.EntityData.Leafs.Append("ldi-flags", types.YLeaf{"LdiFlags", fwdg.LdiFlags})
    fwdg.EntityData.Leafs.Append("ldi-type", types.YLeaf{"LdiType", fwdg.LdiType})
    fwdg.EntityData.Leafs.Append("ldi-pointer", types.YLeaf{"LdiPointer", fwdg.LdiPointer})
    fwdg.EntityData.Leafs.Append("lw-ldi-type", types.YLeaf{"LwLdiType", fwdg.LwLdiType})
    fwdg.EntityData.Leafs.Append("lw-ldi-pointer", types.YLeaf{"LwLdiPointer", fwdg.LwLdiPointer})
    fwdg.EntityData.Leafs.Append("lw-ldi-refernace-count", types.YLeaf{"LwLdiRefernaceCount", fwdg.LwLdiRefernaceCount})
    fwdg.EntityData.Leafs.Append("lw-shared-ldi-pointer", types.YLeaf{"LwSharedLdiPointer", fwdg.LwSharedLdiPointer})
    fwdg.EntityData.Leafs.Append("lspa-flags", types.YLeaf{"LspaFlags", fwdg.LspaFlags})
    fwdg.EntityData.Leafs.Append("afi-table-id", types.YLeaf{"AfiTableId", fwdg.AfiTableId})
    fwdg.EntityData.Leafs.Append("multicast-label", types.YLeaf{"MulticastLabel", fwdg.MulticastLabel})
    fwdg.EntityData.Leafs.Append("leaf-time-in-milli-seconds", types.YLeaf{"LeafTimeInMilliSeconds", fwdg.LeafTimeInMilliSeconds})

    fwdg.EntityData.YListKeys = []string {}

    return &(fwdg.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation
// LDI-info in FIB leaf
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LdiHardwareInformation interface{}
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetEntityData() *types.CommonEntityData {
    ldiInformation.EntityData.YFilter = ldiInformation.YFilter
    ldiInformation.EntityData.YangName = "ldi-information"
    ldiInformation.EntityData.BundleName = "cisco_ios_xr"
    ldiInformation.EntityData.ParentYangName = "fwdg"
    ldiInformation.EntityData.SegmentPath = "ldi-information"
    ldiInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldiInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldiInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldiInformation.EntityData.Children = types.NewOrderedMap()
    ldiInformation.EntityData.Leafs = types.NewOrderedMap()
    ldiInformation.EntityData.Leafs.Append("ldi-hardware-information", types.YLeaf{"LdiHardwareInformation", ldiInformation.LdiHardwareInformation})

    ldiInformation.EntityData.YListKeys = []string {}

    return &(ldiInformation.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation
// The multicast info
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MOL base flags. The type is interface{} with range: 0..4294967295.
    MulticastMolBaseFlags interface{}

    // MOL flags. The type is interface{} with range: 0..65535.
    MulticastMolFlags interface{}

    // MOL refcount. The type is interface{} with range: 0..65535.
    MulticastMolReferanceCount interface{}

    // multicast mpls tunnel. The type is string with pattern: [a-zA-Z0-9./-]+.
    MulticastTunnelInterfaceHandler interface{}

    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes. The
    // type is interface{} with range: 0..4294967295.
    MulticastTunnelId interface{}

    // multicast nhinfo for p2mp TE Head. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelNextHopInformation interface{}

    // multicast LSPVIF for MLDP Tunnels. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLspvif interface{}

    // num multicast mpls output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsOutputPaths interface{}

    // num multicast mpls prot output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsProtocolOutputPaths interface{}

    // num multicast mpls local output paths. The type is interface{} with range:
    // 0..65535.
    MulticastMplsLocalOutputPaths interface{}

    // The multicast RPF-ID . The type is interface{} with range: 0..4294967295.
    MulticastRpfId interface{}

    // The multicast ENCAP-ID . The type is interface{} with range: 0..4294967295.
    MulticastEncapId interface{}

    // The multicast platform data len. The type is interface{} with range:
    // 0..255.
    MulticastPlatformDataLength interface{}

    // The multicast platform data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    MulticastPlatformData interface{}
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetEntityData() *types.CommonEntityData {
    multicastInformation.EntityData.YFilter = multicastInformation.YFilter
    multicastInformation.EntityData.YangName = "multicast-information"
    multicastInformation.EntityData.BundleName = "cisco_ios_xr"
    multicastInformation.EntityData.ParentYangName = "fwdg"
    multicastInformation.EntityData.SegmentPath = "multicast-information"
    multicastInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastInformation.EntityData.Children = types.NewOrderedMap()
    multicastInformation.EntityData.Leafs = types.NewOrderedMap()
    multicastInformation.EntityData.Leafs.Append("multicast-mol-base-flags", types.YLeaf{"MulticastMolBaseFlags", multicastInformation.MulticastMolBaseFlags})
    multicastInformation.EntityData.Leafs.Append("multicast-mol-flags", types.YLeaf{"MulticastMolFlags", multicastInformation.MulticastMolFlags})
    multicastInformation.EntityData.Leafs.Append("multicast-mol-referance-count", types.YLeaf{"MulticastMolReferanceCount", multicastInformation.MulticastMolReferanceCount})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-interface-handler", types.YLeaf{"MulticastTunnelInterfaceHandler", multicastInformation.MulticastTunnelInterfaceHandler})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-id", types.YLeaf{"MulticastTunnelId", multicastInformation.MulticastTunnelId})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-next-hop-information", types.YLeaf{"MulticastTunnelNextHopInformation", multicastInformation.MulticastTunnelNextHopInformation})
    multicastInformation.EntityData.Leafs.Append("multicast-tunnel-lspvif", types.YLeaf{"MulticastTunnelLspvif", multicastInformation.MulticastTunnelLspvif})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-output-paths", types.YLeaf{"MulticastMplsOutputPaths", multicastInformation.MulticastMplsOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-protocol-output-paths", types.YLeaf{"MulticastMplsProtocolOutputPaths", multicastInformation.MulticastMplsProtocolOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-mpls-local-output-paths", types.YLeaf{"MulticastMplsLocalOutputPaths", multicastInformation.MulticastMplsLocalOutputPaths})
    multicastInformation.EntityData.Leafs.Append("multicast-rpf-id", types.YLeaf{"MulticastRpfId", multicastInformation.MulticastRpfId})
    multicastInformation.EntityData.Leafs.Append("multicast-encap-id", types.YLeaf{"MulticastEncapId", multicastInformation.MulticastEncapId})
    multicastInformation.EntityData.Leafs.Append("multicast-platform-data-length", types.YLeaf{"MulticastPlatformDataLength", multicastInformation.MulticastPlatformDataLength})
    multicastInformation.EntityData.Leafs.Append("multicast-platform-data", types.YLeaf{"MulticastPlatformData", multicastInformation.MulticastPlatformData})

    multicastInformation.EntityData.YListKeys = []string {}

    return &(multicastInformation.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation
// Label-infos in FIB leaf
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label-Info type. The type is interface{} with range: 0..4294967295.
    LabelInformationType interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // MPLS Adjacency flags. The type is interface{} with range: 0..4294967295.
    MplsAdjacencyFlags interface{}

    // Tunnel id present?. The type is bool.
    TunnelIdPresent interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing Physical Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingPhysicalInterface interface{}

    // Outgoing Parent Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingParentInterface interface{}

    // Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // LabelInformationPathIndex. The type is interface{} with range:
    // 0..4294967295.
    LabelInformationPathIndex interface{}

    // NHinfo Type. The type is NextHop.
    LabelInformationNextHopType interface{}

    // The address family (v4/v6) . The type is Proto.
    LabelInformationNextHopProtocol interface{}

    // Bytes transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TxBytes interface{}

    // Packets transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615.
    TxPackets interface{}

    // Output Interface in string format. The type is string.
    OutgoingInterfaceString interface{}

    // Output Label in string format. The type is string.
    OutgoingLabelString interface{}

    // Prefix Or ID. The type is string.
    PrefixOrId interface{}

    // Next hop address in string format. The type is string.
    LabelInformationNextHopString interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationRouteVersion interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationTimeInMilliSeconds interface{}

    // Detail label info.
    LabelInformationDetail MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail

    // Path's Hash info in case of exact-route command.
    ExactRouteHashInfo MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetEntityData() *types.CommonEntityData {
    labelInformation.EntityData.YFilter = labelInformation.YFilter
    labelInformation.EntityData.YangName = "label-information"
    labelInformation.EntityData.BundleName = "cisco_ios_xr"
    labelInformation.EntityData.ParentYangName = "fwdg"
    labelInformation.EntityData.SegmentPath = "label-information"
    labelInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInformation.EntityData.Children = types.NewOrderedMap()
    labelInformation.EntityData.Children.Append("label-information-detail", types.YChild{"LabelInformationDetail", &labelInformation.LabelInformationDetail})
    labelInformation.EntityData.Children.Append("exact-route-hash-info", types.YChild{"ExactRouteHashInfo", &labelInformation.ExactRouteHashInfo})
    labelInformation.EntityData.Leafs = types.NewOrderedMap()
    labelInformation.EntityData.Leafs.Append("label-information-type", types.YLeaf{"LabelInformationType", labelInformation.LabelInformationType})
    labelInformation.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", labelInformation.LocalLabel})
    labelInformation.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", labelInformation.OutgoingLabel})
    labelInformation.EntityData.Leafs.Append("mpls-adjacency-flags", types.YLeaf{"MplsAdjacencyFlags", labelInformation.MplsAdjacencyFlags})
    labelInformation.EntityData.Leafs.Append("tunnel-id-present", types.YLeaf{"TunnelIdPresent", labelInformation.TunnelIdPresent})
    labelInformation.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", labelInformation.OutgoingInterface})
    labelInformation.EntityData.Leafs.Append("outgoing-physical-interface", types.YLeaf{"OutgoingPhysicalInterface", labelInformation.OutgoingPhysicalInterface})
    labelInformation.EntityData.Leafs.Append("outgoing-parent-interface", types.YLeaf{"OutgoingParentInterface", labelInformation.OutgoingParentInterface})
    labelInformation.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", labelInformation.TunnelInterface})
    labelInformation.EntityData.Leafs.Append("label-information-path-index", types.YLeaf{"LabelInformationPathIndex", labelInformation.LabelInformationPathIndex})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-type", types.YLeaf{"LabelInformationNextHopType", labelInformation.LabelInformationNextHopType})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-protocol", types.YLeaf{"LabelInformationNextHopProtocol", labelInformation.LabelInformationNextHopProtocol})
    labelInformation.EntityData.Leafs.Append("tx-bytes", types.YLeaf{"TxBytes", labelInformation.TxBytes})
    labelInformation.EntityData.Leafs.Append("tx-packets", types.YLeaf{"TxPackets", labelInformation.TxPackets})
    labelInformation.EntityData.Leafs.Append("outgoing-interface-string", types.YLeaf{"OutgoingInterfaceString", labelInformation.OutgoingInterfaceString})
    labelInformation.EntityData.Leafs.Append("outgoing-label-string", types.YLeaf{"OutgoingLabelString", labelInformation.OutgoingLabelString})
    labelInformation.EntityData.Leafs.Append("prefix-or-id", types.YLeaf{"PrefixOrId", labelInformation.PrefixOrId})
    labelInformation.EntityData.Leafs.Append("label-information-next-hop-string", types.YLeaf{"LabelInformationNextHopString", labelInformation.LabelInformationNextHopString})
    labelInformation.EntityData.Leafs.Append("label-information-route-version", types.YLeaf{"LabelInformationRouteVersion", labelInformation.LabelInformationRouteVersion})
    labelInformation.EntityData.Leafs.Append("label-information-time-in-milli-seconds", types.YLeaf{"LabelInformationTimeInMilliSeconds", labelInformation.LabelInformationTimeInMilliSeconds})

    labelInformation.EntityData.YListKeys = []string {}

    return &(labelInformation.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail
// Detail label info
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L3 MTU. The type is interface{} with range: 0..4294967295.
    L3Mtu interface{}

    // Total encapsulation size: L2 + MPLS. The type is interface{} with range:
    // 0..4294967295.
    TotalEncapsulationSize interface{}

    // Length of L2 encapsulation. The type is interface{} with range:
    // 0..4294967295.
    MacSize interface{}

    // Number of packets switched. The type is interface{} with range:
    // 0..18446744073709551615.
    TransmitNumberOfPacketsSwitched interface{}

    // Number of Bytes switched. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TransmitNumberOfBytesSwitched interface{}

    // Status. The type is interface{} with range: -2147483648..2147483647.
    Status interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // The address family (V4/V6) . The type is Proto.
    NextHopProtocol interface{}

    // Next hop address in string format. The type is string.
    NextHopString interface{}

    // Label stack. The type is slice of
    // MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack.
    LabelStack []*MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetEntityData() *types.CommonEntityData {
    labelInformationDetail.EntityData.YFilter = labelInformationDetail.YFilter
    labelInformationDetail.EntityData.YangName = "label-information-detail"
    labelInformationDetail.EntityData.BundleName = "cisco_ios_xr"
    labelInformationDetail.EntityData.ParentYangName = "label-information"
    labelInformationDetail.EntityData.SegmentPath = "label-information-detail"
    labelInformationDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInformationDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInformationDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInformationDetail.EntityData.Children = types.NewOrderedMap()
    labelInformationDetail.EntityData.Children.Append("label-stack", types.YChild{"LabelStack", nil})
    for i := range labelInformationDetail.LabelStack {
        labelInformationDetail.EntityData.Children.Append(types.GetSegmentPath(labelInformationDetail.LabelStack[i]), types.YChild{"LabelStack", labelInformationDetail.LabelStack[i]})
    }
    labelInformationDetail.EntityData.Leafs = types.NewOrderedMap()
    labelInformationDetail.EntityData.Leafs.Append("l3-mtu", types.YLeaf{"L3Mtu", labelInformationDetail.L3Mtu})
    labelInformationDetail.EntityData.Leafs.Append("total-encapsulation-size", types.YLeaf{"TotalEncapsulationSize", labelInformationDetail.TotalEncapsulationSize})
    labelInformationDetail.EntityData.Leafs.Append("mac-size", types.YLeaf{"MacSize", labelInformationDetail.MacSize})
    labelInformationDetail.EntityData.Leafs.Append("transmit-number-of-packets-switched", types.YLeaf{"TransmitNumberOfPacketsSwitched", labelInformationDetail.TransmitNumberOfPacketsSwitched})
    labelInformationDetail.EntityData.Leafs.Append("transmit-number-of-bytes-switched", types.YLeaf{"TransmitNumberOfBytesSwitched", labelInformationDetail.TransmitNumberOfBytesSwitched})
    labelInformationDetail.EntityData.Leafs.Append("status", types.YLeaf{"Status", labelInformationDetail.Status})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-interface", types.YLeaf{"NextHopInterface", labelInformationDetail.NextHopInterface})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-protocol", types.YLeaf{"NextHopProtocol", labelInformationDetail.NextHopProtocol})
    labelInformationDetail.EntityData.Leafs.Append("next-hop-string", types.YLeaf{"NextHopString", labelInformationDetail.NextHopString})

    labelInformationDetail.EntityData.YListKeys = []string {}

    return &(labelInformationDetail.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack
// Label stack
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetEntityData() *types.CommonEntityData {
    labelStack.EntityData.YFilter = labelStack.YFilter
    labelStack.EntityData.YangName = "label-stack"
    labelStack.EntityData.BundleName = "cisco_ios_xr"
    labelStack.EntityData.ParentYangName = "label-information-detail"
    labelStack.EntityData.SegmentPath = "label-stack"
    labelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelStack.EntityData.Children = types.NewOrderedMap()
    labelStack.EntityData.Leafs = types.NewOrderedMap()
    labelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelStack.Entry})

    labelStack.EntityData.YListKeys = []string {}

    return &(labelStack.EntityData)
}

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo
// Path's Hash info in case of exact-route command
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Hash Index valid?. The type is bool.
    HashIndexIsValid interface{}

    // Hash Index value. The type is interface{} with range: 0..255.
    HashIndex interface{}
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetEntityData() *types.CommonEntityData {
    exactRouteHashInfo.EntityData.YFilter = exactRouteHashInfo.YFilter
    exactRouteHashInfo.EntityData.YangName = "exact-route-hash-info"
    exactRouteHashInfo.EntityData.BundleName = "cisco_ios_xr"
    exactRouteHashInfo.EntityData.ParentYangName = "label-information"
    exactRouteHashInfo.EntityData.SegmentPath = "exact-route-hash-info"
    exactRouteHashInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    exactRouteHashInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    exactRouteHashInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    exactRouteHashInfo.EntityData.Children = types.NewOrderedMap()
    exactRouteHashInfo.EntityData.Leafs = types.NewOrderedMap()
    exactRouteHashInfo.EntityData.Leafs.Append("hash-index-is-valid", types.YLeaf{"HashIndexIsValid", exactRouteHashInfo.HashIndexIsValid})
    exactRouteHashInfo.EntityData.Leafs.Append("hash-index", types.YLeaf{"HashIndex", exactRouteHashInfo.HashIndex})

    exactRouteHashInfo.EntityData.YListKeys = []string {}

    return &(exactRouteHashInfo.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase
// MPLS forwarding FRR Database
type MplsForwarding_Nodes_Node_FrrDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Summary.
    FrrdbSummary MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary

    // MPLS forwarding FRR Database Protected Interface Summary Table.
    FrrdbProtectedInterfaceTableSummaries MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries

    // MPLS forwarding FRR Database Tunnel Midpoint Summary.
    FrrdbTunnelMidpointSummary MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary

    // MPLS forwarding FRR Database Tunnel Midpoint Table.
    FrrdbTunnelMidpoints MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints

    // MPLS forwarding FRR Database Tunnel Head Table.
    FrrdbTunnelHeads MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads

    // MPLS forwarding FRR Database Tunnel Head Summary.
    FrrdbTunnelHeadSummary MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary

    // MPLS forwarding FRR Database Backup Interface Summary Table.
    FrrdbBackupInterfaceSummaries MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetEntityData() *types.CommonEntityData {
    frrDatabase.EntityData.YFilter = frrDatabase.YFilter
    frrDatabase.EntityData.YangName = "frr-database"
    frrDatabase.EntityData.BundleName = "cisco_ios_xr"
    frrDatabase.EntityData.ParentYangName = "node"
    frrDatabase.EntityData.SegmentPath = "frr-database"
    frrDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrDatabase.EntityData.Children = types.NewOrderedMap()
    frrDatabase.EntityData.Children.Append("frrdb-summary", types.YChild{"FrrdbSummary", &frrDatabase.FrrdbSummary})
    frrDatabase.EntityData.Children.Append("frrdb-protected-interface-table-summaries", types.YChild{"FrrdbProtectedInterfaceTableSummaries", &frrDatabase.FrrdbProtectedInterfaceTableSummaries})
    frrDatabase.EntityData.Children.Append("frrdb-tunnel-midpoint-summary", types.YChild{"FrrdbTunnelMidpointSummary", &frrDatabase.FrrdbTunnelMidpointSummary})
    frrDatabase.EntityData.Children.Append("frrdb-tunnel-midpoints", types.YChild{"FrrdbTunnelMidpoints", &frrDatabase.FrrdbTunnelMidpoints})
    frrDatabase.EntityData.Children.Append("frrdb-tunnel-heads", types.YChild{"FrrdbTunnelHeads", &frrDatabase.FrrdbTunnelHeads})
    frrDatabase.EntityData.Children.Append("frrdb-tunnel-head-summary", types.YChild{"FrrdbTunnelHeadSummary", &frrDatabase.FrrdbTunnelHeadSummary})
    frrDatabase.EntityData.Children.Append("frrdb-backup-interface-summaries", types.YChild{"FrrdbBackupInterfaceSummaries", &frrDatabase.FrrdbBackupInterfaceSummaries})
    frrDatabase.EntityData.Leafs = types.NewOrderedMap()

    frrDatabase.EntityData.YListKeys = []string {}

    return &(frrDatabase.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary
// MPLS forwarding FRR Database Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetEntityData() *types.CommonEntityData {
    frrdbSummary.EntityData.YFilter = frrdbSummary.YFilter
    frrdbSummary.EntityData.YangName = "frrdb-summary"
    frrdbSummary.EntityData.BundleName = "cisco_ios_xr"
    frrdbSummary.EntityData.ParentYangName = "frr-database"
    frrdbSummary.EntityData.SegmentPath = "frrdb-summary"
    frrdbSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbSummary.EntityData.Children = types.NewOrderedMap()
    frrdbSummary.EntityData.Leafs = types.NewOrderedMap()
    frrdbSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", frrdbSummary.Active})
    frrdbSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", frrdbSummary.Ready})
    frrdbSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", frrdbSummary.Partial})
    frrdbSummary.EntityData.Leafs.Append("other", types.YLeaf{"Other", frrdbSummary.Other})

    frrdbSummary.EntityData.YListKeys = []string {}

    return &(frrdbSummary.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries
// MPLS forwarding FRR Database Protected
// Interface Summary Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Protected Interface Summary. The type is slice
    // of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary.
    FrrdbProtectedInterfaceTableSummary []*MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetEntityData() *types.CommonEntityData {
    frrdbProtectedInterfaceTableSummaries.EntityData.YFilter = frrdbProtectedInterfaceTableSummaries.YFilter
    frrdbProtectedInterfaceTableSummaries.EntityData.YangName = "frrdb-protected-interface-table-summaries"
    frrdbProtectedInterfaceTableSummaries.EntityData.BundleName = "cisco_ios_xr"
    frrdbProtectedInterfaceTableSummaries.EntityData.ParentYangName = "frr-database"
    frrdbProtectedInterfaceTableSummaries.EntityData.SegmentPath = "frrdb-protected-interface-table-summaries"
    frrdbProtectedInterfaceTableSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbProtectedInterfaceTableSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbProtectedInterfaceTableSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbProtectedInterfaceTableSummaries.EntityData.Children = types.NewOrderedMap()
    frrdbProtectedInterfaceTableSummaries.EntityData.Children.Append("frrdb-protected-interface-table-summary", types.YChild{"FrrdbProtectedInterfaceTableSummary", nil})
    for i := range frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary {
        frrdbProtectedInterfaceTableSummaries.EntityData.Children.Append(types.GetSegmentPath(frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary[i]), types.YChild{"FrrdbProtectedInterfaceTableSummary", frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary[i]})
    }
    frrdbProtectedInterfaceTableSummaries.EntityData.Leafs = types.NewOrderedMap()

    frrdbProtectedInterfaceTableSummaries.EntityData.YListKeys = []string {}

    return &(frrdbProtectedInterfaceTableSummaries.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary
// MPLS forwarding FRR Database Protected
// Interface Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetEntityData() *types.CommonEntityData {
    frrdbProtectedInterfaceTableSummary.EntityData.YFilter = frrdbProtectedInterfaceTableSummary.YFilter
    frrdbProtectedInterfaceTableSummary.EntityData.YangName = "frrdb-protected-interface-table-summary"
    frrdbProtectedInterfaceTableSummary.EntityData.BundleName = "cisco_ios_xr"
    frrdbProtectedInterfaceTableSummary.EntityData.ParentYangName = "frrdb-protected-interface-table-summaries"
    frrdbProtectedInterfaceTableSummary.EntityData.SegmentPath = "frrdb-protected-interface-table-summary" + types.AddKeyToken(frrdbProtectedInterfaceTableSummary.InterfaceName, "interface-name")
    frrdbProtectedInterfaceTableSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbProtectedInterfaceTableSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbProtectedInterfaceTableSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbProtectedInterfaceTableSummary.EntityData.Children = types.NewOrderedMap()
    frrdbProtectedInterfaceTableSummary.EntityData.Leafs = types.NewOrderedMap()
    frrdbProtectedInterfaceTableSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", frrdbProtectedInterfaceTableSummary.InterfaceName})
    frrdbProtectedInterfaceTableSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", frrdbProtectedInterfaceTableSummary.Active})
    frrdbProtectedInterfaceTableSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", frrdbProtectedInterfaceTableSummary.Ready})
    frrdbProtectedInterfaceTableSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", frrdbProtectedInterfaceTableSummary.Partial})
    frrdbProtectedInterfaceTableSummary.EntityData.Leafs.Append("other", types.YLeaf{"Other", frrdbProtectedInterfaceTableSummary.Other})

    frrdbProtectedInterfaceTableSummary.EntityData.YListKeys = []string {"InterfaceName"}

    return &(frrdbProtectedInterfaceTableSummary.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary
// MPLS forwarding FRR Database Tunnel Midpoint
// Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetEntityData() *types.CommonEntityData {
    frrdbTunnelMidpointSummary.EntityData.YFilter = frrdbTunnelMidpointSummary.YFilter
    frrdbTunnelMidpointSummary.EntityData.YangName = "frrdb-tunnel-midpoint-summary"
    frrdbTunnelMidpointSummary.EntityData.BundleName = "cisco_ios_xr"
    frrdbTunnelMidpointSummary.EntityData.ParentYangName = "frr-database"
    frrdbTunnelMidpointSummary.EntityData.SegmentPath = "frrdb-tunnel-midpoint-summary"
    frrdbTunnelMidpointSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbTunnelMidpointSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbTunnelMidpointSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbTunnelMidpointSummary.EntityData.Children = types.NewOrderedMap()
    frrdbTunnelMidpointSummary.EntityData.Leafs = types.NewOrderedMap()
    frrdbTunnelMidpointSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", frrdbTunnelMidpointSummary.Active})
    frrdbTunnelMidpointSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", frrdbTunnelMidpointSummary.Ready})
    frrdbTunnelMidpointSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", frrdbTunnelMidpointSummary.Partial})
    frrdbTunnelMidpointSummary.EntityData.Leafs.Append("other", types.YLeaf{"Other", frrdbTunnelMidpointSummary.Other})

    frrdbTunnelMidpointSummary.EntityData.YListKeys = []string {}

    return &(frrdbTunnelMidpointSummary.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints
// MPLS forwarding FRR Database Tunnel Midpoint
// Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Tunnel Midpoint Entry. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint.
    FrrdbTunnelMidpoint []*MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetEntityData() *types.CommonEntityData {
    frrdbTunnelMidpoints.EntityData.YFilter = frrdbTunnelMidpoints.YFilter
    frrdbTunnelMidpoints.EntityData.YangName = "frrdb-tunnel-midpoints"
    frrdbTunnelMidpoints.EntityData.BundleName = "cisco_ios_xr"
    frrdbTunnelMidpoints.EntityData.ParentYangName = "frr-database"
    frrdbTunnelMidpoints.EntityData.SegmentPath = "frrdb-tunnel-midpoints"
    frrdbTunnelMidpoints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbTunnelMidpoints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbTunnelMidpoints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbTunnelMidpoints.EntityData.Children = types.NewOrderedMap()
    frrdbTunnelMidpoints.EntityData.Children.Append("frrdb-tunnel-midpoint", types.YChild{"FrrdbTunnelMidpoint", nil})
    for i := range frrdbTunnelMidpoints.FrrdbTunnelMidpoint {
        frrdbTunnelMidpoints.EntityData.Children.Append(types.GetSegmentPath(frrdbTunnelMidpoints.FrrdbTunnelMidpoint[i]), types.YChild{"FrrdbTunnelMidpoint", frrdbTunnelMidpoints.FrrdbTunnelMidpoint[i]})
    }
    frrdbTunnelMidpoints.EntityData.Leafs = types.NewOrderedMap()

    frrdbTunnelMidpoints.EntityData.YListKeys = []string {}

    return &(frrdbTunnelMidpoints.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint
// MPLS forwarding FRR Database Tunnel Midpoint
// Entry
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Local label value. The type is interface{} with
    // range: 16..1048575.
    LocalLabel interface{}

    // Output label in string format. The type is string.
    OutgoingLableString interface{}

    // FRR label in string format. The type is string.
    FrrLableString interface{}

    // FRR DB.
    FrrDb MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetEntityData() *types.CommonEntityData {
    frrdbTunnelMidpoint.EntityData.YFilter = frrdbTunnelMidpoint.YFilter
    frrdbTunnelMidpoint.EntityData.YangName = "frrdb-tunnel-midpoint"
    frrdbTunnelMidpoint.EntityData.BundleName = "cisco_ios_xr"
    frrdbTunnelMidpoint.EntityData.ParentYangName = "frrdb-tunnel-midpoints"
    frrdbTunnelMidpoint.EntityData.SegmentPath = "frrdb-tunnel-midpoint" + types.AddKeyToken(frrdbTunnelMidpoint.LocalLabel, "local-label")
    frrdbTunnelMidpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbTunnelMidpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbTunnelMidpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbTunnelMidpoint.EntityData.Children = types.NewOrderedMap()
    frrdbTunnelMidpoint.EntityData.Children.Append("frr-db", types.YChild{"FrrDb", &frrdbTunnelMidpoint.FrrDb})
    frrdbTunnelMidpoint.EntityData.Leafs = types.NewOrderedMap()
    frrdbTunnelMidpoint.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", frrdbTunnelMidpoint.LocalLabel})
    frrdbTunnelMidpoint.EntityData.Leafs.Append("outgoing-lable-string", types.YLeaf{"OutgoingLableString", frrdbTunnelMidpoint.OutgoingLableString})
    frrdbTunnelMidpoint.EntityData.Leafs.Append("frr-lable-string", types.YLeaf{"FrrLableString", frrdbTunnelMidpoint.FrrLableString})

    frrdbTunnelMidpoint.EntityData.YListKeys = []string {"LocalLabel"}

    return &(frrdbTunnelMidpoint.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb
// FRR DB
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // Multicast tunnel. The type is bool.
    IsMulticastTunnel interface{}

    // Number of legs in MCAST tunnel. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLegs interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId

    // MCAST legs. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg.
    MulticastLeg []*MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetEntityData() *types.CommonEntityData {
    frrDb.EntityData.YFilter = frrDb.YFilter
    frrDb.EntityData.YangName = "frr-db"
    frrDb.EntityData.BundleName = "cisco_ios_xr"
    frrDb.EntityData.ParentYangName = "frrdb-tunnel-midpoint"
    frrDb.EntityData.SegmentPath = "frr-db"
    frrDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrDb.EntityData.Children = types.NewOrderedMap()
    frrDb.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &frrDb.FrrEntryId})
    frrDb.EntityData.Children.Append("multicast-leg", types.YChild{"MulticastLeg", nil})
    for i := range frrDb.MulticastLeg {
        frrDb.EntityData.Children.Append(types.GetSegmentPath(frrDb.MulticastLeg[i]), types.YChild{"MulticastLeg", frrDb.MulticastLeg[i]})
    }
    frrDb.EntityData.Leafs = types.NewOrderedMap()
    frrDb.EntityData.Leafs.Append("tunnel-interface-name", types.YLeaf{"TunnelInterfaceName", frrDb.TunnelInterfaceName})
    frrDb.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", frrDb.InputLabel})
    frrDb.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", frrDb.OutgoingInterface})
    frrDb.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrDb.OutgoingLabel})
    frrDb.EntityData.Leafs.Append("frr-interface-name", types.YLeaf{"FrrInterfaceName", frrDb.FrrInterfaceName})
    frrDb.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", frrDb.FrrLabel})
    frrDb.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", frrDb.EntryFrrState})
    frrDb.EntityData.Leafs.Append("frr-next-hop-ipv4-address", types.YLeaf{"FrrNextHopIpv4Address", frrDb.FrrNextHopIpv4Address})
    frrDb.EntityData.Leafs.Append("is-mldp-lsp", types.YLeaf{"IsMldpLsp", frrDb.IsMldpLsp})
    frrDb.EntityData.Leafs.Append("is-multicast-tunnel", types.YLeaf{"IsMulticastTunnel", frrDb.IsMulticastTunnel})
    frrDb.EntityData.Leafs.Append("multicast-tunnel-legs", types.YLeaf{"MulticastTunnelLegs", frrDb.MulticastTunnelLegs})

    frrDb.EntityData.YListKeys = []string {}

    return &(frrDb.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "frr-db"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg
// MCAST legs
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetEntityData() *types.CommonEntityData {
    multicastLeg.EntityData.YFilter = multicastLeg.YFilter
    multicastLeg.EntityData.YangName = "multicast-leg"
    multicastLeg.EntityData.BundleName = "cisco_ios_xr"
    multicastLeg.EntityData.ParentYangName = "frr-db"
    multicastLeg.EntityData.SegmentPath = "multicast-leg"
    multicastLeg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastLeg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastLeg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastLeg.EntityData.Children = types.NewOrderedMap()
    multicastLeg.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &multicastLeg.FrrEntryId})
    multicastLeg.EntityData.Leafs = types.NewOrderedMap()
    multicastLeg.EntityData.Leafs.Append("tunnel-interface-name", types.YLeaf{"TunnelInterfaceName", multicastLeg.TunnelInterfaceName})
    multicastLeg.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", multicastLeg.InputLabel})
    multicastLeg.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", multicastLeg.OutgoingInterface})
    multicastLeg.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastLeg.OutgoingLabel})
    multicastLeg.EntityData.Leafs.Append("frr-interface-name", types.YLeaf{"FrrInterfaceName", multicastLeg.FrrInterfaceName})
    multicastLeg.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", multicastLeg.FrrLabel})
    multicastLeg.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", multicastLeg.EntryFrrState})
    multicastLeg.EntityData.Leafs.Append("frr-next-hop-ipv4-address", types.YLeaf{"FrrNextHopIpv4Address", multicastLeg.FrrNextHopIpv4Address})
    multicastLeg.EntityData.Leafs.Append("is-mldp-lsp", types.YLeaf{"IsMldpLsp", multicastLeg.IsMldpLsp})

    multicastLeg.EntityData.YListKeys = []string {}

    return &(multicastLeg.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "multicast-leg"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads
// MPLS forwarding FRR Database Tunnel Head
// Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Tunnel Head Entry. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead.
    FrrdbTunnelHead []*MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetEntityData() *types.CommonEntityData {
    frrdbTunnelHeads.EntityData.YFilter = frrdbTunnelHeads.YFilter
    frrdbTunnelHeads.EntityData.YangName = "frrdb-tunnel-heads"
    frrdbTunnelHeads.EntityData.BundleName = "cisco_ios_xr"
    frrdbTunnelHeads.EntityData.ParentYangName = "frr-database"
    frrdbTunnelHeads.EntityData.SegmentPath = "frrdb-tunnel-heads"
    frrdbTunnelHeads.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbTunnelHeads.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbTunnelHeads.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbTunnelHeads.EntityData.Children = types.NewOrderedMap()
    frrdbTunnelHeads.EntityData.Children.Append("frrdb-tunnel-head", types.YChild{"FrrdbTunnelHead", nil})
    for i := range frrdbTunnelHeads.FrrdbTunnelHead {
        frrdbTunnelHeads.EntityData.Children.Append(types.GetSegmentPath(frrdbTunnelHeads.FrrdbTunnelHead[i]), types.YChild{"FrrdbTunnelHead", frrdbTunnelHeads.FrrdbTunnelHead[i]})
    }
    frrdbTunnelHeads.EntityData.Leafs = types.NewOrderedMap()

    frrdbTunnelHeads.EntityData.YListKeys = []string {}

    return &(frrdbTunnelHeads.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead
// MPLS forwarding FRR Database Tunnel Head
// Entry
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Output label in string format. The type is string.
    OutgoingLableString interface{}

    // FRR label in string format. The type is string.
    FrrLableString interface{}

    // FRR DB.
    FrrDb MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetEntityData() *types.CommonEntityData {
    frrdbTunnelHead.EntityData.YFilter = frrdbTunnelHead.YFilter
    frrdbTunnelHead.EntityData.YangName = "frrdb-tunnel-head"
    frrdbTunnelHead.EntityData.BundleName = "cisco_ios_xr"
    frrdbTunnelHead.EntityData.ParentYangName = "frrdb-tunnel-heads"
    frrdbTunnelHead.EntityData.SegmentPath = "frrdb-tunnel-head" + types.AddKeyToken(frrdbTunnelHead.InterfaceName, "interface-name")
    frrdbTunnelHead.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbTunnelHead.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbTunnelHead.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbTunnelHead.EntityData.Children = types.NewOrderedMap()
    frrdbTunnelHead.EntityData.Children.Append("frr-db", types.YChild{"FrrDb", &frrdbTunnelHead.FrrDb})
    frrdbTunnelHead.EntityData.Leafs = types.NewOrderedMap()
    frrdbTunnelHead.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", frrdbTunnelHead.InterfaceName})
    frrdbTunnelHead.EntityData.Leafs.Append("outgoing-lable-string", types.YLeaf{"OutgoingLableString", frrdbTunnelHead.OutgoingLableString})
    frrdbTunnelHead.EntityData.Leafs.Append("frr-lable-string", types.YLeaf{"FrrLableString", frrdbTunnelHead.FrrLableString})

    frrdbTunnelHead.EntityData.YListKeys = []string {"InterfaceName"}

    return &(frrdbTunnelHead.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb
// FRR DB
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // Multicast tunnel. The type is bool.
    IsMulticastTunnel interface{}

    // Number of legs in MCAST tunnel. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLegs interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId

    // MCAST legs. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg.
    MulticastLeg []*MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetEntityData() *types.CommonEntityData {
    frrDb.EntityData.YFilter = frrDb.YFilter
    frrDb.EntityData.YangName = "frr-db"
    frrDb.EntityData.BundleName = "cisco_ios_xr"
    frrDb.EntityData.ParentYangName = "frrdb-tunnel-head"
    frrDb.EntityData.SegmentPath = "frr-db"
    frrDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrDb.EntityData.Children = types.NewOrderedMap()
    frrDb.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &frrDb.FrrEntryId})
    frrDb.EntityData.Children.Append("multicast-leg", types.YChild{"MulticastLeg", nil})
    for i := range frrDb.MulticastLeg {
        frrDb.EntityData.Children.Append(types.GetSegmentPath(frrDb.MulticastLeg[i]), types.YChild{"MulticastLeg", frrDb.MulticastLeg[i]})
    }
    frrDb.EntityData.Leafs = types.NewOrderedMap()
    frrDb.EntityData.Leafs.Append("tunnel-interface-name", types.YLeaf{"TunnelInterfaceName", frrDb.TunnelInterfaceName})
    frrDb.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", frrDb.InputLabel})
    frrDb.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", frrDb.OutgoingInterface})
    frrDb.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrDb.OutgoingLabel})
    frrDb.EntityData.Leafs.Append("frr-interface-name", types.YLeaf{"FrrInterfaceName", frrDb.FrrInterfaceName})
    frrDb.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", frrDb.FrrLabel})
    frrDb.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", frrDb.EntryFrrState})
    frrDb.EntityData.Leafs.Append("frr-next-hop-ipv4-address", types.YLeaf{"FrrNextHopIpv4Address", frrDb.FrrNextHopIpv4Address})
    frrDb.EntityData.Leafs.Append("is-mldp-lsp", types.YLeaf{"IsMldpLsp", frrDb.IsMldpLsp})
    frrDb.EntityData.Leafs.Append("is-multicast-tunnel", types.YLeaf{"IsMulticastTunnel", frrDb.IsMulticastTunnel})
    frrDb.EntityData.Leafs.Append("multicast-tunnel-legs", types.YLeaf{"MulticastTunnelLegs", frrDb.MulticastTunnelLegs})

    frrDb.EntityData.YListKeys = []string {}

    return &(frrDb.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "frr-db"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg
// MCAST legs
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetEntityData() *types.CommonEntityData {
    multicastLeg.EntityData.YFilter = multicastLeg.YFilter
    multicastLeg.EntityData.YangName = "multicast-leg"
    multicastLeg.EntityData.BundleName = "cisco_ios_xr"
    multicastLeg.EntityData.ParentYangName = "frr-db"
    multicastLeg.EntityData.SegmentPath = "multicast-leg"
    multicastLeg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastLeg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastLeg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastLeg.EntityData.Children = types.NewOrderedMap()
    multicastLeg.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &multicastLeg.FrrEntryId})
    multicastLeg.EntityData.Leafs = types.NewOrderedMap()
    multicastLeg.EntityData.Leafs.Append("tunnel-interface-name", types.YLeaf{"TunnelInterfaceName", multicastLeg.TunnelInterfaceName})
    multicastLeg.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", multicastLeg.InputLabel})
    multicastLeg.EntityData.Leafs.Append("outgoing-interface", types.YLeaf{"OutgoingInterface", multicastLeg.OutgoingInterface})
    multicastLeg.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastLeg.OutgoingLabel})
    multicastLeg.EntityData.Leafs.Append("frr-interface-name", types.YLeaf{"FrrInterfaceName", multicastLeg.FrrInterfaceName})
    multicastLeg.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", multicastLeg.FrrLabel})
    multicastLeg.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", multicastLeg.EntryFrrState})
    multicastLeg.EntityData.Leafs.Append("frr-next-hop-ipv4-address", types.YLeaf{"FrrNextHopIpv4Address", multicastLeg.FrrNextHopIpv4Address})
    multicastLeg.EntityData.Leafs.Append("is-mldp-lsp", types.YLeaf{"IsMldpLsp", multicastLeg.IsMldpLsp})

    multicastLeg.EntityData.YListKeys = []string {}

    return &(multicastLeg.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "multicast-leg"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary
// MPLS forwarding FRR Database Tunnel Head
// Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetEntityData() *types.CommonEntityData {
    frrdbTunnelHeadSummary.EntityData.YFilter = frrdbTunnelHeadSummary.YFilter
    frrdbTunnelHeadSummary.EntityData.YangName = "frrdb-tunnel-head-summary"
    frrdbTunnelHeadSummary.EntityData.BundleName = "cisco_ios_xr"
    frrdbTunnelHeadSummary.EntityData.ParentYangName = "frr-database"
    frrdbTunnelHeadSummary.EntityData.SegmentPath = "frrdb-tunnel-head-summary"
    frrdbTunnelHeadSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbTunnelHeadSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbTunnelHeadSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbTunnelHeadSummary.EntityData.Children = types.NewOrderedMap()
    frrdbTunnelHeadSummary.EntityData.Leafs = types.NewOrderedMap()
    frrdbTunnelHeadSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", frrdbTunnelHeadSummary.Active})
    frrdbTunnelHeadSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", frrdbTunnelHeadSummary.Ready})
    frrdbTunnelHeadSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", frrdbTunnelHeadSummary.Partial})
    frrdbTunnelHeadSummary.EntityData.Leafs.Append("other", types.YLeaf{"Other", frrdbTunnelHeadSummary.Other})

    frrdbTunnelHeadSummary.EntityData.YListKeys = []string {}

    return &(frrdbTunnelHeadSummary.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries
// MPLS forwarding FRR Database Backup Interface
// Summary Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Backup Interface Summary. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary.
    FrrdbBackupInterfaceSummary []*MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetEntityData() *types.CommonEntityData {
    frrdbBackupInterfaceSummaries.EntityData.YFilter = frrdbBackupInterfaceSummaries.YFilter
    frrdbBackupInterfaceSummaries.EntityData.YangName = "frrdb-backup-interface-summaries"
    frrdbBackupInterfaceSummaries.EntityData.BundleName = "cisco_ios_xr"
    frrdbBackupInterfaceSummaries.EntityData.ParentYangName = "frr-database"
    frrdbBackupInterfaceSummaries.EntityData.SegmentPath = "frrdb-backup-interface-summaries"
    frrdbBackupInterfaceSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbBackupInterfaceSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbBackupInterfaceSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbBackupInterfaceSummaries.EntityData.Children = types.NewOrderedMap()
    frrdbBackupInterfaceSummaries.EntityData.Children.Append("frrdb-backup-interface-summary", types.YChild{"FrrdbBackupInterfaceSummary", nil})
    for i := range frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary {
        frrdbBackupInterfaceSummaries.EntityData.Children.Append(types.GetSegmentPath(frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary[i]), types.YChild{"FrrdbBackupInterfaceSummary", frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary[i]})
    }
    frrdbBackupInterfaceSummaries.EntityData.Leafs = types.NewOrderedMap()

    frrdbBackupInterfaceSummaries.EntityData.YListKeys = []string {}

    return &(frrdbBackupInterfaceSummaries.EntityData)
}

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary
// MPLS forwarding FRR Database Backup
// Interface Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetEntityData() *types.CommonEntityData {
    frrdbBackupInterfaceSummary.EntityData.YFilter = frrdbBackupInterfaceSummary.YFilter
    frrdbBackupInterfaceSummary.EntityData.YangName = "frrdb-backup-interface-summary"
    frrdbBackupInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    frrdbBackupInterfaceSummary.EntityData.ParentYangName = "frrdb-backup-interface-summaries"
    frrdbBackupInterfaceSummary.EntityData.SegmentPath = "frrdb-backup-interface-summary" + types.AddKeyToken(frrdbBackupInterfaceSummary.InterfaceName, "interface-name")
    frrdbBackupInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrdbBackupInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrdbBackupInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrdbBackupInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    frrdbBackupInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    frrdbBackupInterfaceSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", frrdbBackupInterfaceSummary.InterfaceName})
    frrdbBackupInterfaceSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", frrdbBackupInterfaceSummary.Active})
    frrdbBackupInterfaceSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", frrdbBackupInterfaceSummary.Ready})
    frrdbBackupInterfaceSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", frrdbBackupInterfaceSummary.Partial})
    frrdbBackupInterfaceSummary.EntityData.Leafs.Append("other", types.YLeaf{"Other", frrdbBackupInterfaceSummary.Other})

    frrdbBackupInterfaceSummary.EntityData.YListKeys = []string {"InterfaceName"}

    return &(frrdbBackupInterfaceSummary.EntityData)
}

