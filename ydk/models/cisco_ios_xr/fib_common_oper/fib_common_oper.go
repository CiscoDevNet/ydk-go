// This module contains a collection of YANG definitions
// for Cisco IOS-XR fib-common package operational data.
// 
// This module contains definitions
// for the following management objects:
//   fib-statistics: cef interface drops operational data
//   fib: fib
//   mpls-forwarding: mpls forwarding
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package fib_common_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package fib_common_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper fib-statistics}", reflect.TypeOf(FibStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:fib-statistics", reflect.TypeOf(FibStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper fib}", reflect.TypeOf(Fib{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:fib", reflect.TypeOf(Fib{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper mpls-forwarding}", reflect.TypeOf(MplsForwarding{}))
    ydk.RegisterEntity("Cisco-IOS-XR-fib-common-oper:mpls-forwarding", reflect.TypeOf(MplsForwarding{}))
}

// MgmtFibMplsFrrState represents MPLS FRR entry state
type MgmtFibMplsFrrState string

const (
    // Partial
    MgmtFibMplsFrrState_partial MgmtFibMplsFrrState = "partial"

    // Active
    MgmtFibMplsFrrState_active MgmtFibMplsFrrState = "active"

    // Ready
    MgmtFibMplsFrrState_ready MgmtFibMplsFrrState = "ready"

    // Complete
    MgmtFibMplsFrrState_complete MgmtFibMplsFrrState = "complete"

    // Any
    MgmtFibMplsFrrState_any MgmtFibMplsFrrState = "any"
)

// FibNehSpecial represents Fib neh special
type FibNehSpecial string

const (
    // nh not found
    FibNehSpecial_nh_not_found FibNehSpecial = "nh-not-found"

    // nh null0
    FibNehSpecial_nh_null0 FibNehSpecial = "nh-null0"

    // nh punt
    FibNehSpecial_nh_punt FibNehSpecial = "nh-punt"

    // nh drop
    FibNehSpecial_nh_drop FibNehSpecial = "nh-drop"

    // nh glean
    FibNehSpecial_nh_glean FibNehSpecial = "nh-glean"

    // nh receive
    FibNehSpecial_nh_receive FibNehSpecial = "nh-receive"

    // nh broadcast
    FibNehSpecial_nh_broadcast FibNehSpecial = "nh-broadcast"

    // nh external
    FibNehSpecial_nh_external FibNehSpecial = "nh-external"

    // nh lisp
    FibNehSpecial_nh_lisp FibNehSpecial = "nh-lisp"

    // nh lookup
    FibNehSpecial_nh_lookup FibNehSpecial = "nh-lookup"

    // nh max type
    FibNehSpecial_nh_max_type FibNehSpecial = "nh-max-type"
)

// Proto represents MPLS Forwarding Protocol Type
type Proto string

const (
    // IPv4
    Proto_ipv4 Proto = "ipv4"

    // IPv6
    Proto_ipv6 Proto = "ipv6"

    // MPLS
    Proto_mpls Proto = "mpls"
)

// FibShIpencapHdr represents IP Encap Header Type
type FibShIpencapHdr string

const (
    // No Header
    FibShIpencapHdr_fib_sh_ip_encap_none FibShIpencapHdr = "fib-sh-ip-encap-none"

    // IPv4 Header
    FibShIpencapHdr_fib_sh_ip_encap_ip4 FibShIpencapHdr = "fib-sh-ip-encap-ip4"

    // IPv6 Header
    FibShIpencapHdr_fib_sh_ip_encap_ip6 FibShIpencapHdr = "fib-sh-ip-encap-ip6"

    // UDP Header
    FibShIpencapHdr_fib_sh_ip_encap_udp FibShIpencapHdr = "fib-sh-ip-encap-udp"

    // Lisp Header
    FibShIpencapHdr_fib_sh_ip_encap_lisp FibShIpencapHdr = "fib-sh-ip-encap-lisp"
)

// FibAdjacencyShow represents Adjacency types
type FibAdjacencyShow string

const (
    // Normal adjacency
    FibAdjacencyShow_fib_adjacency_normal FibAdjacencyShow = "fib-adjacency-normal"

    // Null adjacency
    FibAdjacencyShow_fib_adjacency_null FibAdjacencyShow = "fib-adjacency-null"

    // Punt adjacency
    FibAdjacencyShow_fib_adjacency_punt FibAdjacencyShow = "fib-adjacency-punt"

    // Drop adjacency
    FibAdjacencyShow_fib_adjacency_drop FibAdjacencyShow = "fib-adjacency-drop"

    // Glean adjacency
    FibAdjacencyShow_fib_adjacency_glean FibAdjacencyShow = "fib-adjacency-glean"

    // Discard adjacency
    FibAdjacencyShow_fib_adjacency_discard FibAdjacencyShow = "fib-adjacency-discard"

    // Broadcast adjacency
    FibAdjacencyShow_fib_adjacency_broadcast FibAdjacencyShow = "fib-adjacency-broadcast"

    // external adjacency
    FibAdjacencyShow_fib_adjacency_external FibAdjacencyShow = "fib-adjacency-external"

    // LISP adjacency
    FibAdjacencyShow_fib_adjacency_lisp FibAdjacencyShow = "fib-adjacency-lisp"

    // Unknown adjacency
    FibAdjacencyShow_fib_adjacency_unknown FibAdjacencyShow = "fib-adjacency-unknown"
)

// FibNhinfoExtBag represents FIB NHINFO extension type
type FibNhinfoExtBag string

const (
    // Replicated NHINFO
    FibNhinfoExtBag_replicated_nh_info FibNhinfoExtBag = "replicated-nh-info"

    // Shared NHINFO
    FibNhinfoExtBag_shared_nh_info FibNhinfoExtBag = "shared-nh-info"
)

// SsLbaState represents Load Balance config
type SsLbaState string

const (
    // L3 Load Balance config
    SsLbaState_l3 SsLbaState = "l3"

    // L4 Load Balance config
    SsLbaState_l4 SsLbaState = "l4"
)

// FibRouteSource represents Fib route source
type FibRouteSource string

const (
    // LSD
    FibRouteSource_lsd FibRouteSource = "lsd"

    // RIB
    FibRouteSource_rib FibRouteSource = "rib"

    // MRIB
    FibRouteSource_mrib FibRouteSource = "mrib"
)

// FibMplsLlcEntryBag represents Fib mpls llc entry bag
type FibMplsLlcEntryBag string

const (
    // fib mpls llc bag type xc
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_xc FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-xc"

    // fib mpls llc bag type pfx
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_pfx FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-pfx"

    // fib mpls llc bag type lsm
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_lsm FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-lsm"

    // fib mpls llc bag type max
    FibMplsLlcEntryBag_fib_mpls_llc_bag_type_max FibMplsLlcEntryBag = "fib-mpls-llc-bag-type-max"
)

// FibRpfMode represents RPF mode types
type FibRpfMode string

const (
    // RPF mode strict
    FibRpfMode_fib_rpf_mode_strict FibRpfMode = "fib-rpf-mode-strict"

    // RPF mode loose
    FibRpfMode_fib_rpf_mode_loose FibRpfMode = "fib-rpf-mode-loose"

    // RPF mode unknown
    FibRpfMode_fib_rpf_mode_unknown FibRpfMode = "fib-rpf-mode-unknown"
)

// FibafiProto represents Fibafi proto
type FibafiProto string

const (
    // ipv4 protocol
    FibafiProto_ipv4 FibafiProto = "ipv4"

    // ipv4 mpls protocol
    FibafiProto_ipv4_mpls FibafiProto = "ipv4-mpls"

    // ipv6 protocol
    FibafiProto_ipv6 FibafiProto = "ipv6"

    // ipv6 mpls protocol
    FibafiProto_ipv6_mpls FibafiProto = "ipv6-mpls"
)

// Mplseos represents Mplseos
type Mplseos string

const (
    // EOS Disable
    Mplseos_eos0 Mplseos = "eos0"

    // EOS Enable
    Mplseos_eos1 Mplseos = "eos1"
)

// FibFrrProtocolShow represents Fib frr protocol show
type FibFrrProtocolShow string

const (
    // frr protocol ipv4
    FibFrrProtocolShow_frr_protocol_ipv4 FibFrrProtocolShow = "frr-protocol-ipv4"

    // frr protocol ipv6
    FibFrrProtocolShow_frr_protocol_ipv6 FibFrrProtocolShow = "frr-protocol-ipv6"

    // frr protocol mpls
    FibFrrProtocolShow_frr_protocol_mpls FibFrrProtocolShow = "frr-protocol-mpls"
)

// FibLink represents Fib link
type FibLink string

const (
    // IPv4 link protocol
    FibLink_link_ipv4 FibLink = "link-ipv4"

    // IPv6 link protocol
    FibLink_link_ipv6 FibLink = "link-ipv6"

    // MPLS link protocol
    FibLink_link_mpls FibLink = "link-mpls"
)

// FibUpdatePathLfaProtection represents LFA protection type
type FibUpdatePathLfaProtection string

const (
    // Not LFA-protected
    FibUpdatePathLfaProtection_not_lfa_protected FibUpdatePathLfaProtection = "not-lfa-protected"

    // Local-LFA protected
    FibUpdatePathLfaProtection_local_lfa_protected FibUpdatePathLfaProtection = "local-lfa-protected"

    // Remote-LFA protected
    FibUpdatePathLfaProtection_remote_lfa_protected FibUpdatePathLfaProtection = "remote-lfa-protected"

    // TI-LFA protected
    FibUpdatePathLfaProtection_ti_lfa_protected FibUpdatePathLfaProtection = "ti-lfa-protected"
)

// FibLoadshareShow represents Loadsharing type
type FibLoadshareShow string

const (
    // No loadsharing
    FibLoadshareShow_fib_load_share_none FibLoadshareShow = "fib-load-share-none"

    // Per packet loadsharing
    FibLoadshareShow_fib_load_share_per_packet FibLoadshareShow = "fib-load-share-per-packet"

    // Destination loadsharing
    FibLoadshareShow_fib_load_share_dest_sharing FibLoadshareShow = "fib-load-share-dest-sharing"
)

// FibllcEntry represents Fibllc entry
type FibllcEntry string

const (
    // LabelXconnect
    FibllcEntry_xc FibllcEntry = "xc"

    // IPPrefix
    FibllcEntry_pfx FibllcEntry = "pfx"
)

// FibNeh represents Fib neh
type FibNeh string

const (
    // nh local
    FibNeh_nh_local FibNeh = "nh-local"

    // nh remote
    FibNeh_nh_remote FibNeh = "nh-remote"

    // nh special
    FibNeh_nh_special FibNeh = "nh-special"
)

// NextHop represents MPLS Forwarding Next Hop Type
type NextHop string

const (
    // TX
    NextHop_tx NextHop = "tx"

    // RX
    NextHop_rx NextHop = "rx"

    // Special
    NextHop_special NextHop = "special"
)

// MgmtFibMplsLspRole represents MPLS FRR entry role
type MgmtFibMplsLspRole string

const (
    // Head
    MgmtFibMplsLspRole_head MgmtFibMplsLspRole = "head"

    // Midpoint
    MgmtFibMplsLspRole_midpoint MgmtFibMplsLspRole = "midpoint"
)

// FibProtocol represents Fib protocol
type FibProtocol string

const (
    // ipv4 protocol
    FibProtocol_ipv4 FibProtocol = "ipv4"

    // ipv6 protocol
    FibProtocol_ipv6 FibProtocol = "ipv6"

    // MPLS protocol
    FibProtocol_mpls FibProtocol = "mpls"
)

// FibidbOper represents Fibidb oper
type FibidbOper string

const (
    // fibidb none
    FibidbOper_fibidb_none FibidbOper = "fibidb-none"

    // fibidb create
    FibidbOper_fibidb_create FibidbOper = "fibidb-create"

    // fibidb delete
    FibidbOper_fibidb_delete FibidbOper = "fibidb-delete"

    // fibidb modify
    FibidbOper_fibidb_modify FibidbOper = "fibidb-modify"

    // fibidb max
    FibidbOper_fibidb_max FibidbOper = "fibidb-max"
)

// FibShTblFibExtBag represents Fib sh tbl fib ext bag
type FibShTblFibExtBag string

const (
    // Leaf Extension
    FibShTblFibExtBag_leaf_extension FibShTblFibExtBag = "leaf-extension"
)

// FibStatistics
// cef interface drops operational data
type FibStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of nodes.
    Nodes FibStatistics_Nodes
}

func (fibStatistics *FibStatistics) GetFilter() yfilter.YFilter { return fibStatistics.YFilter }

func (fibStatistics *FibStatistics) SetFilter(yf yfilter.YFilter) { fibStatistics.YFilter = yf }

func (fibStatistics *FibStatistics) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (fibStatistics *FibStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-fib-common-oper:fib-statistics"
}

func (fibStatistics *FibStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &fibStatistics.Nodes
    }
    return nil
}

func (fibStatistics *FibStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &fibStatistics.Nodes
    return children
}

func (fibStatistics *FibStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fibStatistics *FibStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (fibStatistics *FibStatistics) GetYangName() string { return "fib-statistics" }

func (fibStatistics *FibStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibStatistics *FibStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibStatistics *FibStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibStatistics *FibStatistics) SetParent(parent types.Entity) { fibStatistics.parent = parent }

func (fibStatistics *FibStatistics) GetParent() types.Entity { return fibStatistics.parent }

func (fibStatistics *FibStatistics) GetParentYangName() string { return "Cisco-IOS-XR-fib-common-oper" }

// FibStatistics_Nodes
// List of nodes
type FibStatistics_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific node operational data. The type is slice of
    // FibStatistics_Nodes_Node.
    Node []FibStatistics_Nodes_Node
}

func (nodes *FibStatistics_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *FibStatistics_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *FibStatistics_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *FibStatistics_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *FibStatistics_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := FibStatistics_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *FibStatistics_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *FibStatistics_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *FibStatistics_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *FibStatistics_Nodes) GetYangName() string { return "nodes" }

func (nodes *FibStatistics_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *FibStatistics_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *FibStatistics_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *FibStatistics_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *FibStatistics_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *FibStatistics_Nodes) GetParentYangName() string { return "fib-statistics" }

// FibStatistics_Nodes_Node
// Specific node operational data
type FibStatistics_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Specific node drops.
    Drops FibStatistics_Nodes_Node_Drops
}

func (node *FibStatistics_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *FibStatistics_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *FibStatistics_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "drops" { return "Drops" }
    return ""
}

func (node *FibStatistics_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *FibStatistics_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "drops" {
        return &node.Drops
    }
    return nil
}

func (node *FibStatistics_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["drops"] = &node.Drops
    return children
}

func (node *FibStatistics_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *FibStatistics_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *FibStatistics_Nodes_Node) GetYangName() string { return "node" }

func (node *FibStatistics_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *FibStatistics_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *FibStatistics_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *FibStatistics_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *FibStatistics_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *FibStatistics_Nodes_Node) GetParentYangName() string { return "nodes" }

// FibStatistics_Nodes_Node_Drops
// Specific node drops
type FibStatistics_Nodes_Node_Drops struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // no route pkt. The type is interface{} with range: 0..18446744073709551615.
    NoRoutePackets interface{}

    // Punt generate unreach pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    PuntUnreachablePackets interface{}

    // DF unreachable pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    DfUnreachablePackets interface{}

    // encapsulation failure pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    EncapsulationFailurePackets interface{}

    // incomplete adjacency pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    IncompleteAdjacencyPackets interface{}

    // unresolved prefix pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    UnresolvedPrefixPackets interface{}

    // unsupported feature pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    UnsupportedFeaturePackets interface{}

    // discard pkt. The type is interface{} with range: 0..18446744073709551615.
    DiscardPackets interface{}

    // checksum error pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErrorPackets interface{}

    // frag consumed packet pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    FragmenationConsumedPackets interface{}

    // fragmenation failure pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    FragmenationFailurePackets interface{}

    // null0 pkt. The type is interface{} with range: 0..18446744073709551615.
    NullPackets interface{}

    // RPF check failures pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    RpfCheckFailurePackets interface{}

    // ACL in RPF pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    AclInRpfPackets interface{}

    // rp dest drop pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    RpDestinationDropPackets interface{}

    // the total number of drop pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNumberOfDropPackets interface{}

    // mpls disabled in interface. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsDisabledInterface interface{}

    // GRE tunnel lookup failed drop pkt. The type is interface{} with range:
    // 0..18446744073709551615.
    GreLookupFailedDrop interface{}

    // GRE processing errors. The type is interface{} with range:
    // 0..18446744073709551615.
    GreErrorDrop interface{}

    // LISP Punt drops. The type is interface{} with range:
    // 0..18446744073709551615.
    LispPuntDrops interface{}

    // Lisp encap error drops. The type is interface{} with range:
    // 0..18446744073709551615.
    LispEncapErrorDrops interface{}

    // Lisp decap error drops. The type is interface{} with range:
    // 0..18446744073709551615.
    LispDecapErrorDrops interface{}

    // Drops for the packets with multi[le labels. The type is interface{} with
    // range: 0..18446744073709551615.
    MultiLabelDrops interface{}
}

func (drops *FibStatistics_Nodes_Node_Drops) GetFilter() yfilter.YFilter { return drops.YFilter }

func (drops *FibStatistics_Nodes_Node_Drops) SetFilter(yf yfilter.YFilter) { drops.YFilter = yf }

func (drops *FibStatistics_Nodes_Node_Drops) GetGoName(yname string) string {
    if yname == "no-route-packets" { return "NoRoutePackets" }
    if yname == "punt-unreachable-packets" { return "PuntUnreachablePackets" }
    if yname == "df-unreachable-packets" { return "DfUnreachablePackets" }
    if yname == "encapsulation-failure-packets" { return "EncapsulationFailurePackets" }
    if yname == "incomplete-adjacency-packets" { return "IncompleteAdjacencyPackets" }
    if yname == "unresolved-prefix-packets" { return "UnresolvedPrefixPackets" }
    if yname == "unsupported-feature-packets" { return "UnsupportedFeaturePackets" }
    if yname == "discard-packets" { return "DiscardPackets" }
    if yname == "checksum-error-packets" { return "ChecksumErrorPackets" }
    if yname == "fragmenation-consumed-packets" { return "FragmenationConsumedPackets" }
    if yname == "fragmenation-failure-packets" { return "FragmenationFailurePackets" }
    if yname == "null-packets" { return "NullPackets" }
    if yname == "rpf-check-failure-packets" { return "RpfCheckFailurePackets" }
    if yname == "acl-in-rpf-packets" { return "AclInRpfPackets" }
    if yname == "rp-destination-drop-packets" { return "RpDestinationDropPackets" }
    if yname == "total-number-of-drop-packets" { return "TotalNumberOfDropPackets" }
    if yname == "mpls-disabled-interface" { return "MplsDisabledInterface" }
    if yname == "gre-lookup-failed-drop" { return "GreLookupFailedDrop" }
    if yname == "gre-error-drop" { return "GreErrorDrop" }
    if yname == "lisp-punt-drops" { return "LispPuntDrops" }
    if yname == "lisp-encap-error-drops" { return "LispEncapErrorDrops" }
    if yname == "lisp-decap-error-drops" { return "LispDecapErrorDrops" }
    if yname == "multi-label-drops" { return "MultiLabelDrops" }
    return ""
}

func (drops *FibStatistics_Nodes_Node_Drops) GetSegmentPath() string {
    return "drops"
}

func (drops *FibStatistics_Nodes_Node_Drops) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (drops *FibStatistics_Nodes_Node_Drops) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (drops *FibStatistics_Nodes_Node_Drops) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-route-packets"] = drops.NoRoutePackets
    leafs["punt-unreachable-packets"] = drops.PuntUnreachablePackets
    leafs["df-unreachable-packets"] = drops.DfUnreachablePackets
    leafs["encapsulation-failure-packets"] = drops.EncapsulationFailurePackets
    leafs["incomplete-adjacency-packets"] = drops.IncompleteAdjacencyPackets
    leafs["unresolved-prefix-packets"] = drops.UnresolvedPrefixPackets
    leafs["unsupported-feature-packets"] = drops.UnsupportedFeaturePackets
    leafs["discard-packets"] = drops.DiscardPackets
    leafs["checksum-error-packets"] = drops.ChecksumErrorPackets
    leafs["fragmenation-consumed-packets"] = drops.FragmenationConsumedPackets
    leafs["fragmenation-failure-packets"] = drops.FragmenationFailurePackets
    leafs["null-packets"] = drops.NullPackets
    leafs["rpf-check-failure-packets"] = drops.RpfCheckFailurePackets
    leafs["acl-in-rpf-packets"] = drops.AclInRpfPackets
    leafs["rp-destination-drop-packets"] = drops.RpDestinationDropPackets
    leafs["total-number-of-drop-packets"] = drops.TotalNumberOfDropPackets
    leafs["mpls-disabled-interface"] = drops.MplsDisabledInterface
    leafs["gre-lookup-failed-drop"] = drops.GreLookupFailedDrop
    leafs["gre-error-drop"] = drops.GreErrorDrop
    leafs["lisp-punt-drops"] = drops.LispPuntDrops
    leafs["lisp-encap-error-drops"] = drops.LispEncapErrorDrops
    leafs["lisp-decap-error-drops"] = drops.LispDecapErrorDrops
    leafs["multi-label-drops"] = drops.MultiLabelDrops
    return leafs
}

func (drops *FibStatistics_Nodes_Node_Drops) GetBundleName() string { return "cisco_ios_xr" }

func (drops *FibStatistics_Nodes_Node_Drops) GetYangName() string { return "drops" }

func (drops *FibStatistics_Nodes_Node_Drops) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (drops *FibStatistics_Nodes_Node_Drops) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (drops *FibStatistics_Nodes_Node_Drops) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (drops *FibStatistics_Nodes_Node_Drops) SetParent(parent types.Entity) { drops.parent = parent }

func (drops *FibStatistics_Nodes_Node_Drops) GetParent() types.Entity { return drops.parent }

func (drops *FibStatistics_Nodes_Node_Drops) GetParentYangName() string { return "node" }

// Fib
// fib
type Fib struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of nodes.
    Nodes Fib_Nodes
}

func (fib *Fib) GetFilter() yfilter.YFilter { return fib.YFilter }

func (fib *Fib) SetFilter(yf yfilter.YFilter) { fib.YFilter = yf }

func (fib *Fib) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (fib *Fib) GetSegmentPath() string {
    return "Cisco-IOS-XR-fib-common-oper:fib"
}

func (fib *Fib) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &fib.Nodes
    }
    return nil
}

func (fib *Fib) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &fib.Nodes
    return children
}

func (fib *Fib) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fib *Fib) GetBundleName() string { return "cisco_ios_xr" }

func (fib *Fib) GetYangName() string { return "fib" }

func (fib *Fib) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fib *Fib) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fib *Fib) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fib *Fib) SetParent(parent types.Entity) { fib.parent = parent }

func (fib *Fib) GetParent() types.Entity { return fib.parent }

func (fib *Fib) GetParentYangName() string { return "Cisco-IOS-XR-fib-common-oper" }

// Fib_Nodes
// Table of nodes
type Fib_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data for a specific Node. The type is slice of Fib_Nodes_Node.
    Node []Fib_Nodes_Node
}

func (nodes *Fib_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *Fib_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *Fib_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *Fib_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *Fib_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *Fib_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *Fib_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *Fib_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *Fib_Nodes) GetYangName() string { return "nodes" }

func (nodes *Fib_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *Fib_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *Fib_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *Fib_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *Fib_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *Fib_Nodes) GetParentYangName() string { return "fib" }

// Fib_Nodes_Node
// Operational data for a specific Node
type Fib_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // FIB Global info.
    Global Fib_Nodes_Node_Global

    // Protocol table.
    Protocols Fib_Nodes_Node_Protocols
}

func (node *Fib_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *Fib_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *Fib_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "global" { return "Global" }
    if yname == "protocols" { return "Protocols" }
    return ""
}

func (node *Fib_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *Fib_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global" {
        return &node.Global
    }
    if childYangName == "protocols" {
        return &node.Protocols
    }
    return nil
}

func (node *Fib_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global"] = &node.Global
    children["protocols"] = &node.Protocols
    return children
}

func (node *Fib_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *Fib_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *Fib_Nodes_Node) GetYangName() string { return "node" }

func (node *Fib_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *Fib_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *Fib_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *Fib_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *Fib_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *Fib_Nodes_Node) GetParentYangName() string { return "nodes" }

// Fib_Nodes_Node_Global
// FIB Global info
type Fib_Nodes_Node_Global struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global Summary.
    Summary Fib_Nodes_Node_Global_Summary

    // Object History.
    ObjectHistory Fib_Nodes_Node_Global_ObjectHistory
}

func (global *Fib_Nodes_Node_Global) GetFilter() yfilter.YFilter { return global.YFilter }

func (global *Fib_Nodes_Node_Global) SetFilter(yf yfilter.YFilter) { global.YFilter = yf }

func (global *Fib_Nodes_Node_Global) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "object-history" { return "ObjectHistory" }
    return ""
}

func (global *Fib_Nodes_Node_Global) GetSegmentPath() string {
    return "global"
}

func (global *Fib_Nodes_Node_Global) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &global.Summary
    }
    if childYangName == "object-history" {
        return &global.ObjectHistory
    }
    return nil
}

func (global *Fib_Nodes_Node_Global) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &global.Summary
    children["object-history"] = &global.ObjectHistory
    return children
}

func (global *Fib_Nodes_Node_Global) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (global *Fib_Nodes_Node_Global) GetBundleName() string { return "cisco_ios_xr" }

func (global *Fib_Nodes_Node_Global) GetYangName() string { return "global" }

func (global *Fib_Nodes_Node_Global) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (global *Fib_Nodes_Node_Global) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (global *Fib_Nodes_Node_Global) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (global *Fib_Nodes_Node_Global) SetParent(parent types.Entity) { global.parent = parent }

func (global *Fib_Nodes_Node_Global) GetParent() types.Entity { return global.parent }

func (global *Fib_Nodes_Node_Global) GetParentYangName() string { return "node" }

// Fib_Nodes_Node_Global_Summary
// Global Summary
type Fib_Nodes_Node_Global_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Display total counters and common info.
    Total Fib_Nodes_Node_Global_Summary_Total

    // Proto Table.
    Protos Fib_Nodes_Node_Global_Summary_Protos
}

func (summary *Fib_Nodes_Node_Global_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Fib_Nodes_Node_Global_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Fib_Nodes_Node_Global_Summary) GetGoName(yname string) string {
    if yname == "total" { return "Total" }
    if yname == "protos" { return "Protos" }
    return ""
}

func (summary *Fib_Nodes_Node_Global_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Fib_Nodes_Node_Global_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "total" {
        return &summary.Total
    }
    if childYangName == "protos" {
        return &summary.Protos
    }
    return nil
}

func (summary *Fib_Nodes_Node_Global_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["total"] = &summary.Total
    children["protos"] = &summary.Protos
    return children
}

func (summary *Fib_Nodes_Node_Global_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Fib_Nodes_Node_Global_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Fib_Nodes_Node_Global_Summary) GetYangName() string { return "summary" }

func (summary *Fib_Nodes_Node_Global_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Fib_Nodes_Node_Global_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Fib_Nodes_Node_Global_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Fib_Nodes_Node_Global_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Fib_Nodes_Node_Global_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Fib_Nodes_Node_Global_Summary) GetParentYangName() string { return "global" }

// Fib_Nodes_Node_Global_Summary_Total
// Display total counters and common info
type Fib_Nodes_Node_Global_Summary_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Common info.
    CommonInfo Fib_Nodes_Node_Global_Summary_Total_CommonInfo

    // Aggregate counters of all protocols.
    TotalCounters Fib_Nodes_Node_Global_Summary_Total_TotalCounters
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *Fib_Nodes_Node_Global_Summary_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetGoName(yname string) string {
    if yname == "common-info" { return "CommonInfo" }
    if yname == "total-counters" { return "TotalCounters" }
    return ""
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetSegmentPath() string {
    return "total"
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-info" {
        return &total.CommonInfo
    }
    if childYangName == "total-counters" {
        return &total.TotalCounters
    }
    return nil
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["common-info"] = &total.CommonInfo
    children["total-counters"] = &total.TotalCounters
    return children
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (total *Fib_Nodes_Node_Global_Summary_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetYangName() string { return "total" }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *Fib_Nodes_Node_Global_Summary_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetParent() types.Entity { return total.parent }

func (total *Fib_Nodes_Node_Global_Summary_Total) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Global_Summary_Total_CommonInfo
// Common info
type Fib_Nodes_Node_Global_Summary_Total_CommonInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Placeholder for common info counts. The type is interface{} with range:
    // 0..4294967295.
    Count interface{}
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetFilter() yfilter.YFilter { return commonInfo.YFilter }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) SetFilter(yf yfilter.YFilter) { commonInfo.YFilter = yf }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetGoName(yname string) string {
    if yname == "count" { return "Count" }
    return ""
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetSegmentPath() string {
    return "common-info"
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["count"] = commonInfo.Count
    return leafs
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetBundleName() string { return "cisco_ios_xr" }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetYangName() string { return "common-info" }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) SetParent(parent types.Entity) { commonInfo.parent = parent }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetParent() types.Entity { return commonInfo.parent }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Total_CommonInfo) GetParentYangName() string { return "total" }

// Fib_Nodes_Node_Global_Summary_Total_TotalCounters
// Aggregate counters of all protocols
type Fib_Nodes_Node_Global_Summary_Total_TotalCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // number of retry timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    NumRetryTimeouts interface{}

    // number of elements in retry db. The type is interface{} with range:
    // 0..4294967295.
    NumRetryOjbects interface{}

    // number of objects in retry db. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry.
    ArrayNumberOfRetry []Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry

    // total number of objects. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject.
    ArrayNumberOfObject []Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetFilter() yfilter.YFilter { return totalCounters.YFilter }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) SetFilter(yf yfilter.YFilter) { totalCounters.YFilter = yf }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetGoName(yname string) string {
    if yname == "num-retry-timeouts" { return "NumRetryTimeouts" }
    if yname == "num-retry-ojbects" { return "NumRetryOjbects" }
    if yname == "array-number-of-retry" { return "ArrayNumberOfRetry" }
    if yname == "array-number-of-object" { return "ArrayNumberOfObject" }
    return ""
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetSegmentPath() string {
    return "total-counters"
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "array-number-of-retry" {
        for _, c := range totalCounters.ArrayNumberOfRetry {
            if totalCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry{}
        totalCounters.ArrayNumberOfRetry = append(totalCounters.ArrayNumberOfRetry, child)
        return &totalCounters.ArrayNumberOfRetry[len(totalCounters.ArrayNumberOfRetry)-1]
    }
    if childYangName == "array-number-of-object" {
        for _, c := range totalCounters.ArrayNumberOfObject {
            if totalCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject{}
        totalCounters.ArrayNumberOfObject = append(totalCounters.ArrayNumberOfObject, child)
        return &totalCounters.ArrayNumberOfObject[len(totalCounters.ArrayNumberOfObject)-1]
    }
    return nil
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range totalCounters.ArrayNumberOfRetry {
        children[totalCounters.ArrayNumberOfRetry[i].GetSegmentPath()] = &totalCounters.ArrayNumberOfRetry[i]
    }
    for i := range totalCounters.ArrayNumberOfObject {
        children[totalCounters.ArrayNumberOfObject[i].GetSegmentPath()] = &totalCounters.ArrayNumberOfObject[i]
    }
    return children
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-retry-timeouts"] = totalCounters.NumRetryTimeouts
    leafs["num-retry-ojbects"] = totalCounters.NumRetryOjbects
    return leafs
}

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetBundleName() string { return "cisco_ios_xr" }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetYangName() string { return "total-counters" }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) SetParent(parent types.Entity) { totalCounters.parent = parent }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetParent() types.Entity { return totalCounters.parent }

func (totalCounters *Fib_Nodes_Node_Global_Summary_Total_TotalCounters) GetParentYangName() string { return "total" }

// Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry
// number of objects in retry db
type Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // retry object. The type is string with length: 0..30.
    RetryObjectType interface{}

    // number of elements for this obj type in retry db. The type is interface{}
    // with range: 0..18446744073709551615.
    NumRetries interface{}
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetFilter() yfilter.YFilter { return arrayNumberOfRetry.YFilter }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) SetFilter(yf yfilter.YFilter) { arrayNumberOfRetry.YFilter = yf }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetGoName(yname string) string {
    if yname == "retry-object-type" { return "RetryObjectType" }
    if yname == "num-retries" { return "NumRetries" }
    return ""
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetSegmentPath() string {
    return "array-number-of-retry"
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["retry-object-type"] = arrayNumberOfRetry.RetryObjectType
    leafs["num-retries"] = arrayNumberOfRetry.NumRetries
    return leafs
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetBundleName() string { return "cisco_ios_xr" }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetYangName() string { return "array-number-of-retry" }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) SetParent(parent types.Entity) { arrayNumberOfRetry.parent = parent }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetParent() types.Entity { return arrayNumberOfRetry.parent }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfRetry) GetParentYangName() string { return "total-counters" }

// Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject
// total number of objects
type Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // object. The type is string with length: 0..30.
    ObjectType interface{}

    // number of elements for this obj type. The type is interface{} with range:
    // 0..4294967295.
    NumObjects interface{}
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetFilter() yfilter.YFilter { return arrayNumberOfObject.YFilter }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) SetFilter(yf yfilter.YFilter) { arrayNumberOfObject.YFilter = yf }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetGoName(yname string) string {
    if yname == "object-type" { return "ObjectType" }
    if yname == "num-objects" { return "NumObjects" }
    return ""
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetSegmentPath() string {
    return "array-number-of-object"
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-type"] = arrayNumberOfObject.ObjectType
    leafs["num-objects"] = arrayNumberOfObject.NumObjects
    return leafs
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetBundleName() string { return "cisco_ios_xr" }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetYangName() string { return "array-number-of-object" }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) SetParent(parent types.Entity) { arrayNumberOfObject.parent = parent }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetParent() types.Entity { return arrayNumberOfObject.parent }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Total_TotalCounters_ArrayNumberOfObject) GetParentYangName() string { return "total-counters" }

// Fib_Nodes_Node_Global_Summary_Protos
// Proto Table
type Fib_Nodes_Node_Global_Summary_Protos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Proto Table entry. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Protos_Proto.
    Proto []Fib_Nodes_Node_Global_Summary_Protos_Proto
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetFilter() yfilter.YFilter { return protos.YFilter }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) SetFilter(yf yfilter.YFilter) { protos.YFilter = yf }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetGoName(yname string) string {
    if yname == "proto" { return "Proto" }
    return ""
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetSegmentPath() string {
    return "protos"
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "proto" {
        for _, c := range protos.Proto {
            if protos.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Global_Summary_Protos_Proto{}
        protos.Proto = append(protos.Proto, child)
        return &protos.Proto[len(protos.Proto)-1]
    }
    return nil
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protos.Proto {
        children[protos.Proto[i].GetSegmentPath()] = &protos.Proto[i]
    }
    return children
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetBundleName() string { return "cisco_ios_xr" }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetYangName() string { return "protos" }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) SetParent(parent types.Entity) { protos.parent = parent }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetParent() types.Entity { return protos.parent }

func (protos *Fib_Nodes_Node_Global_Summary_Protos) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto
// Proto Table entry
type Fib_Nodes_Node_Global_Summary_Protos_Proto struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol Name. The type is FibafiProto.
    ProtocolName interface{}

    // Common Info.
    CommonInfo Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo

    // Global summary.
    Summary Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetFilter() yfilter.YFilter { return proto.YFilter }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) SetFilter(yf yfilter.YFilter) { proto.YFilter = yf }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "common-info" { return "CommonInfo" }
    if yname == "summary" { return "Summary" }
    return ""
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetSegmentPath() string {
    return "proto" + "[protocol-name='" + fmt.Sprintf("%v", proto.ProtocolName) + "']"
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-info" {
        return &proto.CommonInfo
    }
    if childYangName == "summary" {
        return &proto.Summary
    }
    return nil
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["common-info"] = &proto.CommonInfo
    children["summary"] = &proto.Summary
    return children
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = proto.ProtocolName
    return leafs
}

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetBundleName() string { return "cisco_ios_xr" }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetYangName() string { return "proto" }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) SetParent(parent types.Entity) { proto.parent = parent }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetParent() types.Entity { return proto.parent }

func (proto *Fib_Nodes_Node_Global_Summary_Protos_Proto) GetParentYangName() string { return "protos" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo
// Common Info
type Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Placeholder for common info counts. The type is interface{} with range:
    // 0..4294967295.
    Count interface{}
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetFilter() yfilter.YFilter { return commonInfo.YFilter }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) SetFilter(yf yfilter.YFilter) { commonInfo.YFilter = yf }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetGoName(yname string) string {
    if yname == "count" { return "Count" }
    return ""
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetSegmentPath() string {
    return "common-info"
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["count"] = commonInfo.Count
    return leafs
}

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetBundleName() string { return "cisco_ios_xr" }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetYangName() string { return "common-info" }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) SetParent(parent types.Entity) { commonInfo.parent = parent }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetParent() types.Entity { return commonInfo.parent }

func (commonInfo *Fib_Nodes_Node_Global_Summary_Protos_Proto_CommonInfo) GetParentYangName() string { return "proto" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary
// Global summary
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Base object.
    BaseObject Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject

    // Global Summary counts.
    SummaryCounts Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts

    // Global summary health.
    Health Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetGoName(yname string) string {
    if yname == "base-object" { return "BaseObject" }
    if yname == "summary-counts" { return "SummaryCounts" }
    if yname == "health" { return "Health" }
    return ""
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "base-object" {
        return &summary.BaseObject
    }
    if childYangName == "summary-counts" {
        return &summary.SummaryCounts
    }
    if childYangName == "health" {
        return &summary.Health
    }
    return nil
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["base-object"] = &summary.BaseObject
    children["summary-counts"] = &summary.SummaryCounts
    children["health"] = &summary.Health
    return children
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetYangName() string { return "summary" }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary) GetParentYangName() string { return "proto" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject
// Base object
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetFilter() yfilter.YFilter { return baseObject.YFilter }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) SetFilter(yf yfilter.YFilter) { baseObject.YFilter = yf }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    return ""
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetSegmentPath() string {
    return "base-object"
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = baseObject.Protocol
    return leafs
}

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetBundleName() string { return "cisco_ios_xr" }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetYangName() string { return "base-object" }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) SetParent(parent types.Entity) { baseObject.parent = parent }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetParent() types.Entity { return baseObject.parent }

func (baseObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_BaseObject) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts
// Global Summary counts
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // number of retry timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    NumRetryTimeouts interface{}

    // number of elements in retry db. The type is interface{} with range:
    // 0..4294967295.
    NumRetryOjbects interface{}

    // number of objects in retry db. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry.
    ArrayNumberOfRetry []Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry

    // total number of objects. The type is slice of
    // Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject.
    ArrayNumberOfObject []Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetFilter() yfilter.YFilter { return summaryCounts.YFilter }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) SetFilter(yf yfilter.YFilter) { summaryCounts.YFilter = yf }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetGoName(yname string) string {
    if yname == "num-retry-timeouts" { return "NumRetryTimeouts" }
    if yname == "num-retry-ojbects" { return "NumRetryOjbects" }
    if yname == "array-number-of-retry" { return "ArrayNumberOfRetry" }
    if yname == "array-number-of-object" { return "ArrayNumberOfObject" }
    return ""
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetSegmentPath() string {
    return "summary-counts"
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "array-number-of-retry" {
        for _, c := range summaryCounts.ArrayNumberOfRetry {
            if summaryCounts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry{}
        summaryCounts.ArrayNumberOfRetry = append(summaryCounts.ArrayNumberOfRetry, child)
        return &summaryCounts.ArrayNumberOfRetry[len(summaryCounts.ArrayNumberOfRetry)-1]
    }
    if childYangName == "array-number-of-object" {
        for _, c := range summaryCounts.ArrayNumberOfObject {
            if summaryCounts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject{}
        summaryCounts.ArrayNumberOfObject = append(summaryCounts.ArrayNumberOfObject, child)
        return &summaryCounts.ArrayNumberOfObject[len(summaryCounts.ArrayNumberOfObject)-1]
    }
    return nil
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryCounts.ArrayNumberOfRetry {
        children[summaryCounts.ArrayNumberOfRetry[i].GetSegmentPath()] = &summaryCounts.ArrayNumberOfRetry[i]
    }
    for i := range summaryCounts.ArrayNumberOfObject {
        children[summaryCounts.ArrayNumberOfObject[i].GetSegmentPath()] = &summaryCounts.ArrayNumberOfObject[i]
    }
    return children
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-retry-timeouts"] = summaryCounts.NumRetryTimeouts
    leafs["num-retry-ojbects"] = summaryCounts.NumRetryOjbects
    return leafs
}

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetBundleName() string { return "cisco_ios_xr" }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetYangName() string { return "summary-counts" }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) SetParent(parent types.Entity) { summaryCounts.parent = parent }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetParent() types.Entity { return summaryCounts.parent }

func (summaryCounts *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry
// number of objects in retry db
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // retry object. The type is string with length: 0..30.
    RetryObjectType interface{}

    // number of elements for this obj type in retry db. The type is interface{}
    // with range: 0..18446744073709551615.
    NumRetries interface{}
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetFilter() yfilter.YFilter { return arrayNumberOfRetry.YFilter }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) SetFilter(yf yfilter.YFilter) { arrayNumberOfRetry.YFilter = yf }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetGoName(yname string) string {
    if yname == "retry-object-type" { return "RetryObjectType" }
    if yname == "num-retries" { return "NumRetries" }
    return ""
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetSegmentPath() string {
    return "array-number-of-retry"
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["retry-object-type"] = arrayNumberOfRetry.RetryObjectType
    leafs["num-retries"] = arrayNumberOfRetry.NumRetries
    return leafs
}

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetBundleName() string { return "cisco_ios_xr" }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetYangName() string { return "array-number-of-retry" }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) SetParent(parent types.Entity) { arrayNumberOfRetry.parent = parent }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetParent() types.Entity { return arrayNumberOfRetry.parent }

func (arrayNumberOfRetry *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfRetry) GetParentYangName() string { return "summary-counts" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject
// total number of objects
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // object. The type is string with length: 0..30.
    ObjectType interface{}

    // number of elements for this obj type. The type is interface{} with range:
    // 0..4294967295.
    NumObjects interface{}
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetFilter() yfilter.YFilter { return arrayNumberOfObject.YFilter }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) SetFilter(yf yfilter.YFilter) { arrayNumberOfObject.YFilter = yf }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetGoName(yname string) string {
    if yname == "object-type" { return "ObjectType" }
    if yname == "num-objects" { return "NumObjects" }
    return ""
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetSegmentPath() string {
    return "array-number-of-object"
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-type"] = arrayNumberOfObject.ObjectType
    leafs["num-objects"] = arrayNumberOfObject.NumObjects
    return leafs
}

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetBundleName() string { return "cisco_ios_xr" }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetYangName() string { return "array-number-of-object" }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) SetParent(parent types.Entity) { arrayNumberOfObject.parent = parent }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetParent() types.Entity { return arrayNumberOfObject.parent }

func (arrayNumberOfObject *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_SummaryCounts_ArrayNumberOfObject) GetParentYangName() string { return "summary-counts" }

// Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health
// Global summary health
type Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the retry db empty?. The type is bool.
    IsRetryDbEmpty interface{}
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetFilter() yfilter.YFilter { return health.YFilter }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) SetFilter(yf yfilter.YFilter) { health.YFilter = yf }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetGoName(yname string) string {
    if yname == "is-retry-db-empty" { return "IsRetryDbEmpty" }
    return ""
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetSegmentPath() string {
    return "health"
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-retry-db-empty"] = health.IsRetryDbEmpty
    return leafs
}

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetBundleName() string { return "cisco_ios_xr" }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetYangName() string { return "health" }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) SetParent(parent types.Entity) { health.parent = parent }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetParent() types.Entity { return health.parent }

func (health *Fib_Nodes_Node_Global_Summary_Protos_Proto_Summary_Health) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Global_ObjectHistory
// Object History
type Fib_Nodes_Node_Global_ObjectHistory struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Proto Table.
    ObjHistoryProtos Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetFilter() yfilter.YFilter { return objectHistory.YFilter }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) SetFilter(yf yfilter.YFilter) { objectHistory.YFilter = yf }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetGoName(yname string) string {
    if yname == "obj-history-protos" { return "ObjHistoryProtos" }
    return ""
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetSegmentPath() string {
    return "object-history"
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "obj-history-protos" {
        return &objectHistory.ObjHistoryProtos
    }
    return nil
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["obj-history-protos"] = &objectHistory.ObjHistoryProtos
    return children
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetBundleName() string { return "cisco_ios_xr" }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetYangName() string { return "object-history" }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) SetParent(parent types.Entity) { objectHistory.parent = parent }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetParent() types.Entity { return objectHistory.parent }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory) GetParentYangName() string { return "global" }

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos
// Proto Table
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol Table entry. The type is slice of
    // Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto.
    ObjHistoryProto []Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetFilter() yfilter.YFilter { return objHistoryProtos.YFilter }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) SetFilter(yf yfilter.YFilter) { objHistoryProtos.YFilter = yf }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetGoName(yname string) string {
    if yname == "obj-history-proto" { return "ObjHistoryProto" }
    return ""
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetSegmentPath() string {
    return "obj-history-protos"
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "obj-history-proto" {
        for _, c := range objHistoryProtos.ObjHistoryProto {
            if objHistoryProtos.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto{}
        objHistoryProtos.ObjHistoryProto = append(objHistoryProtos.ObjHistoryProto, child)
        return &objHistoryProtos.ObjHistoryProto[len(objHistoryProtos.ObjHistoryProto)-1]
    }
    return nil
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range objHistoryProtos.ObjHistoryProto {
        children[objHistoryProtos.ObjHistoryProto[i].GetSegmentPath()] = &objHistoryProtos.ObjHistoryProto[i]
    }
    return children
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetBundleName() string { return "cisco_ios_xr" }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetYangName() string { return "obj-history-protos" }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) SetParent(parent types.Entity) { objHistoryProtos.parent = parent }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetParent() types.Entity { return objHistoryProtos.parent }

func (objHistoryProtos *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos) GetParentYangName() string { return "object-history" }

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto
// Protocol Table entry
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol Name. The type is FibafiProto.
    ProtocolName interface{}

    // Base object.
    BaseObject Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject

    // Obj History.
    ObjectHistory Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetFilter() yfilter.YFilter { return objHistoryProto.YFilter }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) SetFilter(yf yfilter.YFilter) { objHistoryProto.YFilter = yf }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "base-object" { return "BaseObject" }
    if yname == "object-history" { return "ObjectHistory" }
    return ""
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetSegmentPath() string {
    return "obj-history-proto" + "[protocol-name='" + fmt.Sprintf("%v", objHistoryProto.ProtocolName) + "']"
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "base-object" {
        return &objHistoryProto.BaseObject
    }
    if childYangName == "object-history" {
        return &objHistoryProto.ObjectHistory
    }
    return nil
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["base-object"] = &objHistoryProto.BaseObject
    children["object-history"] = &objHistoryProto.ObjectHistory
    return children
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = objHistoryProto.ProtocolName
    return leafs
}

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetBundleName() string { return "cisco_ios_xr" }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetYangName() string { return "obj-history-proto" }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) SetParent(parent types.Entity) { objHistoryProto.parent = parent }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetParent() types.Entity { return objHistoryProto.parent }

func (objHistoryProto *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto) GetParentYangName() string { return "obj-history-protos" }

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject
// Base object
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetFilter() yfilter.YFilter { return baseObject.YFilter }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) SetFilter(yf yfilter.YFilter) { baseObject.YFilter = yf }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    return ""
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetSegmentPath() string {
    return "base-object"
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = baseObject.Protocol
    return leafs
}

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetBundleName() string { return "cisco_ios_xr" }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetYangName() string { return "base-object" }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) SetParent(parent types.Entity) { baseObject.parent = parent }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetParent() types.Entity { return baseObject.parent }

func (baseObject *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_BaseObject) GetParentYangName() string { return "obj-history-proto" }

// Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory
// Obj History
type Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Placeholder for obj history counts. The type is interface{} with range:
    // 0..4294967295.
    Count interface{}
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetFilter() yfilter.YFilter { return objectHistory.YFilter }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) SetFilter(yf yfilter.YFilter) { objectHistory.YFilter = yf }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetGoName(yname string) string {
    if yname == "count" { return "Count" }
    return ""
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetSegmentPath() string {
    return "object-history"
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["count"] = objectHistory.Count
    return leafs
}

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetBundleName() string { return "cisco_ios_xr" }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetYangName() string { return "object-history" }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) SetParent(parent types.Entity) { objectHistory.parent = parent }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetParent() types.Entity { return objectHistory.parent }

func (objectHistory *Fib_Nodes_Node_Global_ObjectHistory_ObjHistoryProtos_ObjHistoryProto_ObjectHistory) GetParentYangName() string { return "obj-history-proto" }

// Fib_Nodes_Node_Protocols
// Protocol table
type Fib_Nodes_Node_Protocols struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol.
    Protocol []Fib_Nodes_Node_Protocols_Protocol
}

func (protocols *Fib_Nodes_Node_Protocols) GetFilter() yfilter.YFilter { return protocols.YFilter }

func (protocols *Fib_Nodes_Node_Protocols) SetFilter(yf yfilter.YFilter) { protocols.YFilter = yf }

func (protocols *Fib_Nodes_Node_Protocols) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    return ""
}

func (protocols *Fib_Nodes_Node_Protocols) GetSegmentPath() string {
    return "protocols"
}

func (protocols *Fib_Nodes_Node_Protocols) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol" {
        for _, c := range protocols.Protocol {
            if protocols.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol{}
        protocols.Protocol = append(protocols.Protocol, child)
        return &protocols.Protocol[len(protocols.Protocol)-1]
    }
    return nil
}

func (protocols *Fib_Nodes_Node_Protocols) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocols.Protocol {
        children[protocols.Protocol[i].GetSegmentPath()] = &protocols.Protocol[i]
    }
    return children
}

func (protocols *Fib_Nodes_Node_Protocols) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocols *Fib_Nodes_Node_Protocols) GetBundleName() string { return "cisco_ios_xr" }

func (protocols *Fib_Nodes_Node_Protocols) GetYangName() string { return "protocols" }

func (protocols *Fib_Nodes_Node_Protocols) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocols *Fib_Nodes_Node_Protocols) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocols *Fib_Nodes_Node_Protocols) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocols *Fib_Nodes_Node_Protocols) SetParent(parent types.Entity) { protocols.parent = parent }

func (protocols *Fib_Nodes_Node_Protocols) GetParent() types.Entity { return protocols.parent }

func (protocols *Fib_Nodes_Node_Protocols) GetParentYangName() string { return "node" }

// Fib_Nodes_Node_Protocols_Protocol
// Protocol table entry
type Fib_Nodes_Node_Protocols_Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol Name . The type is FibProtocol.
    ProtocolName interface{}

    // CEF ISSU State.
    IssuState Fib_Nodes_Node_Protocols_Protocol_IssuState

    // Resource information.
    Resource Fib_Nodes_Node_Protocols_Protocol_Resource

    // Summary for FIB tables.
    FibSummaries Fib_Nodes_Node_Protocols_Protocol_FibSummaries

    // Summary for all external clients.
    ExternalSummaryAll Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll

    // Table of Fast Reroute activation logs.
    FrrLog Fib_Nodes_Node_Protocols_Protocol_FrrLog

    // VRF table.
    Vrfs Fib_Nodes_Node_Protocols_Protocol_Vrfs

    // Exact Route Table.
    ExactRoutes Fib_Nodes_Node_Protocols_Protocol_ExactRoutes

    // NHIdTable is accessed by two keys; {NHIdValue} and/or
    // {NHInterface,NHAddress.
    NhIds Fib_Nodes_Node_Protocols_Protocol_NhIds

    // External Client Summary Table.
    ExternalClientSummaries Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries

    // CEF misc hidden data.
    Misc Fib_Nodes_Node_Protocols_Protocol_Misc

    // Local label.
    LocalLabel Fib_Nodes_Node_Protocols_Protocol_LocalLabel
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetFilter() yfilter.YFilter { return protocol.YFilter }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) SetFilter(yf yfilter.YFilter) { protocol.YFilter = yf }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "issu-state" { return "IssuState" }
    if yname == "resource" { return "Resource" }
    if yname == "fib-summaries" { return "FibSummaries" }
    if yname == "external-summary-all" { return "ExternalSummaryAll" }
    if yname == "frr-log" { return "FrrLog" }
    if yname == "vrfs" { return "Vrfs" }
    if yname == "exact-routes" { return "ExactRoutes" }
    if yname == "nh-ids" { return "NhIds" }
    if yname == "external-client-summaries" { return "ExternalClientSummaries" }
    if yname == "misc" { return "Misc" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetSegmentPath() string {
    return "protocol" + "[protocol-name='" + fmt.Sprintf("%v", protocol.ProtocolName) + "']"
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "issu-state" {
        return &protocol.IssuState
    }
    if childYangName == "resource" {
        return &protocol.Resource
    }
    if childYangName == "fib-summaries" {
        return &protocol.FibSummaries
    }
    if childYangName == "external-summary-all" {
        return &protocol.ExternalSummaryAll
    }
    if childYangName == "frr-log" {
        return &protocol.FrrLog
    }
    if childYangName == "vrfs" {
        return &protocol.Vrfs
    }
    if childYangName == "exact-routes" {
        return &protocol.ExactRoutes
    }
    if childYangName == "nh-ids" {
        return &protocol.NhIds
    }
    if childYangName == "external-client-summaries" {
        return &protocol.ExternalClientSummaries
    }
    if childYangName == "misc" {
        return &protocol.Misc
    }
    if childYangName == "local-label" {
        return &protocol.LocalLabel
    }
    return nil
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["issu-state"] = &protocol.IssuState
    children["resource"] = &protocol.Resource
    children["fib-summaries"] = &protocol.FibSummaries
    children["external-summary-all"] = &protocol.ExternalSummaryAll
    children["frr-log"] = &protocol.FrrLog
    children["vrfs"] = &protocol.Vrfs
    children["exact-routes"] = &protocol.ExactRoutes
    children["nh-ids"] = &protocol.NhIds
    children["external-client-summaries"] = &protocol.ExternalClientSummaries
    children["misc"] = &protocol.Misc
    children["local-label"] = &protocol.LocalLabel
    return children
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = protocol.ProtocolName
    return leafs
}

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetYangName() string { return "protocol" }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) SetParent(parent types.Entity) { protocol.parent = parent }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetParent() types.Entity { return protocol.parent }

func (protocol *Fib_Nodes_Node_Protocols_Protocol) GetParentYangName() string { return "protocols" }

// Fib_Nodes_Node_Protocols_Protocol_IssuState
// CEF ISSU State
type Fib_Nodes_Node_Protocols_Protocol_IssuState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IMDR supported. The type is bool.
    ImdrSupport interface{}

    // SLC supported. The type is bool.
    SlcSupport interface{}

    // ISSU restart. The type is bool.
    FisIssuRestart interface{}

    // IMDR End-of-config implicit. The type is bool.
    ImdrEocImplicit interface{}

    // SLC End-of-config implicit. The type is bool.
    SlcEocImplicit interface{}

    // End-of-config received from IMDR timestamp. The type is string with length:
    // 0..33.
    EocReceivedImdrTimeStamp interface{}

    // End-of-config received from SLC timestamp. The type is string with length:
    // 0..33.
    EocReceivedSlcTimeStamp interface{}

    // End-of-download received from IM timestamp. The type is string with length:
    // 0..33.
    EodReceivedImTimeStamp interface{}

    // End-of-download send to IMDR timestamp. The type is string with length:
    // 0..33.
    EodSentImdrTimeStamp interface{}

    // End-of-download send to SLC timestamp. The type is string with length:
    // 0..33.
    EodSentSlcTimeStamp interface{}

    // ISSU error sent to ISSUMGR timetstamp. The type is interface{} with range:
    // 0..18446744073709551615.
    FisIssuErrorTs interface{}

    // IMDR state for the protocols. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState.
    FisProtoState []Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetFilter() yfilter.YFilter { return issuState.YFilter }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) SetFilter(yf yfilter.YFilter) { issuState.YFilter = yf }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetGoName(yname string) string {
    if yname == "imdr-support" { return "ImdrSupport" }
    if yname == "slc-support" { return "SlcSupport" }
    if yname == "fis-issu-restart" { return "FisIssuRestart" }
    if yname == "imdr-eoc-implicit" { return "ImdrEocImplicit" }
    if yname == "slc-eoc-implicit" { return "SlcEocImplicit" }
    if yname == "eoc-received-imdr-time-stamp" { return "EocReceivedImdrTimeStamp" }
    if yname == "eoc-received-slc-time-stamp" { return "EocReceivedSlcTimeStamp" }
    if yname == "eod-received-im-time-stamp" { return "EodReceivedImTimeStamp" }
    if yname == "eod-sent-imdr-time-stamp" { return "EodSentImdrTimeStamp" }
    if yname == "eod-sent-slc-time-stamp" { return "EodSentSlcTimeStamp" }
    if yname == "fis-issu-error-ts" { return "FisIssuErrorTs" }
    if yname == "fis-proto-state" { return "FisProtoState" }
    return ""
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetSegmentPath() string {
    return "issu-state"
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fis-proto-state" {
        for _, c := range issuState.FisProtoState {
            if issuState.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState{}
        issuState.FisProtoState = append(issuState.FisProtoState, child)
        return &issuState.FisProtoState[len(issuState.FisProtoState)-1]
    }
    return nil
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range issuState.FisProtoState {
        children[issuState.FisProtoState[i].GetSegmentPath()] = &issuState.FisProtoState[i]
    }
    return children
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["imdr-support"] = issuState.ImdrSupport
    leafs["slc-support"] = issuState.SlcSupport
    leafs["fis-issu-restart"] = issuState.FisIssuRestart
    leafs["imdr-eoc-implicit"] = issuState.ImdrEocImplicit
    leafs["slc-eoc-implicit"] = issuState.SlcEocImplicit
    leafs["eoc-received-imdr-time-stamp"] = issuState.EocReceivedImdrTimeStamp
    leafs["eoc-received-slc-time-stamp"] = issuState.EocReceivedSlcTimeStamp
    leafs["eod-received-im-time-stamp"] = issuState.EodReceivedImTimeStamp
    leafs["eod-sent-imdr-time-stamp"] = issuState.EodSentImdrTimeStamp
    leafs["eod-sent-slc-time-stamp"] = issuState.EodSentSlcTimeStamp
    leafs["fis-issu-error-ts"] = issuState.FisIssuErrorTs
    return leafs
}

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetBundleName() string { return "cisco_ios_xr" }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetYangName() string { return "issu-state" }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) SetParent(parent types.Entity) { issuState.parent = parent }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetParent() types.Entity { return issuState.parent }

func (issuState *Fib_Nodes_Node_Protocols_Protocol_IssuState) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState
// IMDR state for the protocols
type Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol name. The type is string with length: 0..6.
    ProtocolName interface{}

    // AIB EODTimeStamp. The type is string with length: 0..33.
    AibEodTimeStamp interface{}

    // RSI EOD expected/valid. The type is bool.
    RsiEodValid interface{}

    // RSI EOD received timestamp. The type is string with length: 0..33.
    RsiEodTimeStamp interface{}

    // LSD EOD expected/valid. The type is bool.
    LsdEodValid interface{}

    // LSD EOD received timestamp. The type is string with length: 0..33.
    LsdEodTimeStamp interface{}

    // LMRIB EOD expected/valid. The type is bool.
    LmribEodValid interface{}

    // LMRIB EOD received timestamp. The type is string with length: 0..33.
    LmribEodTimeStamp interface{}

    // RIB table info valid. The type is bool.
    RibInfoValid interface{}

    // Number of BCDL tables. The type is interface{} with range: 0..4294967295.
    BcdlTables interface{}

    // Number of tables converged. The type is interface{} with range:
    // 0..4294967295.
    ConvergedTables interface{}

    // All RIB tables converged timestamp. The type is string with length: 0..33.
    RibTablesConvergedTimeStamp interface{}

    // Protocol EOD expected/valid. The type is bool.
    ProtocolEodValid interface{}

    // Protocol EOD sent timestamp. The type is string with length: 0..33.
    ProtocolEodTimeStamp interface{}
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetFilter() yfilter.YFilter { return fisProtoState.YFilter }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) SetFilter(yf yfilter.YFilter) { fisProtoState.YFilter = yf }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "aib-eod-time-stamp" { return "AibEodTimeStamp" }
    if yname == "rsi-eod-valid" { return "RsiEodValid" }
    if yname == "rsi-eod-time-stamp" { return "RsiEodTimeStamp" }
    if yname == "lsd-eod-valid" { return "LsdEodValid" }
    if yname == "lsd-eod-time-stamp" { return "LsdEodTimeStamp" }
    if yname == "lmrib-eod-valid" { return "LmribEodValid" }
    if yname == "lmrib-eod-time-stamp" { return "LmribEodTimeStamp" }
    if yname == "rib-info-valid" { return "RibInfoValid" }
    if yname == "bcdl-tables" { return "BcdlTables" }
    if yname == "converged-tables" { return "ConvergedTables" }
    if yname == "rib-tables-converged-time-stamp" { return "RibTablesConvergedTimeStamp" }
    if yname == "protocol-eod-valid" { return "ProtocolEodValid" }
    if yname == "protocol-eod-time-stamp" { return "ProtocolEodTimeStamp" }
    return ""
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetSegmentPath() string {
    return "fis-proto-state"
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = fisProtoState.ProtocolName
    leafs["aib-eod-time-stamp"] = fisProtoState.AibEodTimeStamp
    leafs["rsi-eod-valid"] = fisProtoState.RsiEodValid
    leafs["rsi-eod-time-stamp"] = fisProtoState.RsiEodTimeStamp
    leafs["lsd-eod-valid"] = fisProtoState.LsdEodValid
    leafs["lsd-eod-time-stamp"] = fisProtoState.LsdEodTimeStamp
    leafs["lmrib-eod-valid"] = fisProtoState.LmribEodValid
    leafs["lmrib-eod-time-stamp"] = fisProtoState.LmribEodTimeStamp
    leafs["rib-info-valid"] = fisProtoState.RibInfoValid
    leafs["bcdl-tables"] = fisProtoState.BcdlTables
    leafs["converged-tables"] = fisProtoState.ConvergedTables
    leafs["rib-tables-converged-time-stamp"] = fisProtoState.RibTablesConvergedTimeStamp
    leafs["protocol-eod-valid"] = fisProtoState.ProtocolEodValid
    leafs["protocol-eod-time-stamp"] = fisProtoState.ProtocolEodTimeStamp
    return leafs
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetBundleName() string { return "cisco_ios_xr" }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetYangName() string { return "fis-proto-state" }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) SetParent(parent types.Entity) { fisProtoState.parent = parent }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetParent() types.Entity { return fisProtoState.parent }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_IssuState_FisProtoState) GetParentYangName() string { return "issu-state" }

// Fib_Nodes_Node_Protocols_Protocol_Resource
// Resource information
type Fib_Nodes_Node_Protocols_Protocol_Resource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info.
    ResourceDetailInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo

    // Detailed info with ingress hardware info.
    ResourceHardwareIngressInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo

    // Detailed info with egress hardware info.
    ResourceHardwareEgressInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo

    // Summary info.
    ResourceSummaryInfo Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetFilter() yfilter.YFilter { return resource.YFilter }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) SetFilter(yf yfilter.YFilter) { resource.YFilter = yf }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetGoName(yname string) string {
    if yname == "resource-detail-info" { return "ResourceDetailInfo" }
    if yname == "resource-hardware-ingress-info" { return "ResourceHardwareIngressInfo" }
    if yname == "resource-hardware-egress-info" { return "ResourceHardwareEgressInfo" }
    if yname == "resource-summary-info" { return "ResourceSummaryInfo" }
    return ""
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetSegmentPath() string {
    return "resource"
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "resource-detail-info" {
        return &resource.ResourceDetailInfo
    }
    if childYangName == "resource-hardware-ingress-info" {
        return &resource.ResourceHardwareIngressInfo
    }
    if childYangName == "resource-hardware-egress-info" {
        return &resource.ResourceHardwareEgressInfo
    }
    if childYangName == "resource-summary-info" {
        return &resource.ResourceSummaryInfo
    }
    return nil
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["resource-detail-info"] = &resource.ResourceDetailInfo
    children["resource-hardware-ingress-info"] = &resource.ResourceHardwareIngressInfo
    children["resource-hardware-egress-info"] = &resource.ResourceHardwareEgressInfo
    children["resource-summary-info"] = &resource.ResourceSummaryInfo
    return children
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetBundleName() string { return "cisco_ios_xr" }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetYangName() string { return "resource" }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) SetParent(parent types.Entity) { resource.parent = parent }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetParent() types.Entity { return resource.parent }

func (resource *Fib_Nodes_Node_Protocols_Protocol_Resource) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo
// Detailed info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode.
    SrHwrsrcMode []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState.
    SrShmState []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetFilter() yfilter.YFilter { return resourceDetailInfo.YFilter }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) SetFilter(yf yfilter.YFilter) { resourceDetailInfo.YFilter = yf }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetGoName(yname string) string {
    if yname == "sr-curr-mode" { return "SrCurrMode" }
    if yname == "sr-hwrsrc-info" { return "SrHwrsrcInfo" }
    if yname == "sr-shmwin-oor-count" { return "SrShmwinOorCount" }
    if yname == "sr-hw-oor-count" { return "SrHwOorCount" }
    if yname == "sr-in-oor-ts" { return "SrInOorTs" }
    if yname == "sr-out-oor-ts" { return "SrOutOorTs" }
    if yname == "sr-hwrsrc-mode" { return "SrHwrsrcMode" }
    if yname == "sr-shm-state" { return "SrShmState" }
    return ""
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetSegmentPath() string {
    return "resource-detail-info"
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sr-hwrsrc-mode" {
        for _, c := range resourceDetailInfo.SrHwrsrcMode {
            if resourceDetailInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode{}
        resourceDetailInfo.SrHwrsrcMode = append(resourceDetailInfo.SrHwrsrcMode, child)
        return &resourceDetailInfo.SrHwrsrcMode[len(resourceDetailInfo.SrHwrsrcMode)-1]
    }
    if childYangName == "sr-shm-state" {
        for _, c := range resourceDetailInfo.SrShmState {
            if resourceDetailInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState{}
        resourceDetailInfo.SrShmState = append(resourceDetailInfo.SrShmState, child)
        return &resourceDetailInfo.SrShmState[len(resourceDetailInfo.SrShmState)-1]
    }
    return nil
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range resourceDetailInfo.SrHwrsrcMode {
        children[resourceDetailInfo.SrHwrsrcMode[i].GetSegmentPath()] = &resourceDetailInfo.SrHwrsrcMode[i]
    }
    for i := range resourceDetailInfo.SrShmState {
        children[resourceDetailInfo.SrShmState[i].GetSegmentPath()] = &resourceDetailInfo.SrShmState[i]
    }
    return children
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sr-curr-mode"] = resourceDetailInfo.SrCurrMode
    leafs["sr-hwrsrc-info"] = resourceDetailInfo.SrHwrsrcInfo
    leafs["sr-shmwin-oor-count"] = resourceDetailInfo.SrShmwinOorCount
    leafs["sr-hw-oor-count"] = resourceDetailInfo.SrHwOorCount
    leafs["sr-in-oor-ts"] = resourceDetailInfo.SrInOorTs
    leafs["sr-out-oor-ts"] = resourceDetailInfo.SrOutOorTs
    return leafs
}

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetBundleName() string { return "cisco_ios_xr" }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetYangName() string { return "resource-detail-info" }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) SetParent(parent types.Entity) { resourceDetailInfo.parent = parent }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetParent() types.Entity { return resourceDetailInfo.parent }

func (resourceDetailInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo) GetParentYangName() string { return "resource" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetFilter() yfilter.YFilter { return srHwrsrcMode.YFilter }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) SetFilter(yf yfilter.YFilter) { srHwrsrcMode.YFilter = yf }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetSegmentPath() string {
    return "sr-hwrsrc-mode"
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = srHwrsrcMode.Entry
    return leafs
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetBundleName() string { return "cisco_ios_xr" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetYangName() string { return "sr-hwrsrc-mode" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) SetParent(parent types.Entity) { srHwrsrcMode.parent = parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetParent() types.Entity { return srHwrsrcMode.parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrHwrsrcMode) GetParentYangName() string { return "resource-detail-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetFilter() yfilter.YFilter { return srShmState.YFilter }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) SetFilter(yf yfilter.YFilter) { srShmState.YFilter = yf }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetGoName(yname string) string {
    if yname == "srs-curr-mode" { return "SrsCurrMode" }
    if yname == "srs-avg-avail" { return "SrsAvgAvail" }
    if yname == "srs-max-avail" { return "SrsMaxAvail" }
    return ""
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetSegmentPath() string {
    return "sr-shm-state"
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srs-curr-mode"] = srShmState.SrsCurrMode
    leafs["srs-avg-avail"] = srShmState.SrsAvgAvail
    leafs["srs-max-avail"] = srShmState.SrsMaxAvail
    return leafs
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetBundleName() string { return "cisco_ios_xr" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetYangName() string { return "sr-shm-state" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) SetParent(parent types.Entity) { srShmState.parent = parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetParent() types.Entity { return srShmState.parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceDetailInfo_SrShmState) GetParentYangName() string { return "resource-detail-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo
// Detailed info with ingress hardware info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode.
    SrHwrsrcMode []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState.
    SrShmState []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetFilter() yfilter.YFilter { return resourceHardwareIngressInfo.YFilter }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) SetFilter(yf yfilter.YFilter) { resourceHardwareIngressInfo.YFilter = yf }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetGoName(yname string) string {
    if yname == "sr-curr-mode" { return "SrCurrMode" }
    if yname == "sr-hwrsrc-info" { return "SrHwrsrcInfo" }
    if yname == "sr-shmwin-oor-count" { return "SrShmwinOorCount" }
    if yname == "sr-hw-oor-count" { return "SrHwOorCount" }
    if yname == "sr-in-oor-ts" { return "SrInOorTs" }
    if yname == "sr-out-oor-ts" { return "SrOutOorTs" }
    if yname == "sr-hwrsrc-mode" { return "SrHwrsrcMode" }
    if yname == "sr-shm-state" { return "SrShmState" }
    return ""
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetSegmentPath() string {
    return "resource-hardware-ingress-info"
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sr-hwrsrc-mode" {
        for _, c := range resourceHardwareIngressInfo.SrHwrsrcMode {
            if resourceHardwareIngressInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode{}
        resourceHardwareIngressInfo.SrHwrsrcMode = append(resourceHardwareIngressInfo.SrHwrsrcMode, child)
        return &resourceHardwareIngressInfo.SrHwrsrcMode[len(resourceHardwareIngressInfo.SrHwrsrcMode)-1]
    }
    if childYangName == "sr-shm-state" {
        for _, c := range resourceHardwareIngressInfo.SrShmState {
            if resourceHardwareIngressInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState{}
        resourceHardwareIngressInfo.SrShmState = append(resourceHardwareIngressInfo.SrShmState, child)
        return &resourceHardwareIngressInfo.SrShmState[len(resourceHardwareIngressInfo.SrShmState)-1]
    }
    return nil
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range resourceHardwareIngressInfo.SrHwrsrcMode {
        children[resourceHardwareIngressInfo.SrHwrsrcMode[i].GetSegmentPath()] = &resourceHardwareIngressInfo.SrHwrsrcMode[i]
    }
    for i := range resourceHardwareIngressInfo.SrShmState {
        children[resourceHardwareIngressInfo.SrShmState[i].GetSegmentPath()] = &resourceHardwareIngressInfo.SrShmState[i]
    }
    return children
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sr-curr-mode"] = resourceHardwareIngressInfo.SrCurrMode
    leafs["sr-hwrsrc-info"] = resourceHardwareIngressInfo.SrHwrsrcInfo
    leafs["sr-shmwin-oor-count"] = resourceHardwareIngressInfo.SrShmwinOorCount
    leafs["sr-hw-oor-count"] = resourceHardwareIngressInfo.SrHwOorCount
    leafs["sr-in-oor-ts"] = resourceHardwareIngressInfo.SrInOorTs
    leafs["sr-out-oor-ts"] = resourceHardwareIngressInfo.SrOutOorTs
    return leafs
}

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetBundleName() string { return "cisco_ios_xr" }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetYangName() string { return "resource-hardware-ingress-info" }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) SetParent(parent types.Entity) { resourceHardwareIngressInfo.parent = parent }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetParent() types.Entity { return resourceHardwareIngressInfo.parent }

func (resourceHardwareIngressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo) GetParentYangName() string { return "resource" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetFilter() yfilter.YFilter { return srHwrsrcMode.YFilter }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) SetFilter(yf yfilter.YFilter) { srHwrsrcMode.YFilter = yf }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetSegmentPath() string {
    return "sr-hwrsrc-mode"
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = srHwrsrcMode.Entry
    return leafs
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetBundleName() string { return "cisco_ios_xr" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetYangName() string { return "sr-hwrsrc-mode" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) SetParent(parent types.Entity) { srHwrsrcMode.parent = parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetParent() types.Entity { return srHwrsrcMode.parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrHwrsrcMode) GetParentYangName() string { return "resource-hardware-ingress-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetFilter() yfilter.YFilter { return srShmState.YFilter }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) SetFilter(yf yfilter.YFilter) { srShmState.YFilter = yf }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetGoName(yname string) string {
    if yname == "srs-curr-mode" { return "SrsCurrMode" }
    if yname == "srs-avg-avail" { return "SrsAvgAvail" }
    if yname == "srs-max-avail" { return "SrsMaxAvail" }
    return ""
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetSegmentPath() string {
    return "sr-shm-state"
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srs-curr-mode"] = srShmState.SrsCurrMode
    leafs["srs-avg-avail"] = srShmState.SrsAvgAvail
    leafs["srs-max-avail"] = srShmState.SrsMaxAvail
    return leafs
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetBundleName() string { return "cisco_ios_xr" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetYangName() string { return "sr-shm-state" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) SetParent(parent types.Entity) { srShmState.parent = parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetParent() types.Entity { return srShmState.parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareIngressInfo_SrShmState) GetParentYangName() string { return "resource-hardware-ingress-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo
// Detailed info with egress hardware info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode.
    SrHwrsrcMode []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState.
    SrShmState []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetFilter() yfilter.YFilter { return resourceHardwareEgressInfo.YFilter }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) SetFilter(yf yfilter.YFilter) { resourceHardwareEgressInfo.YFilter = yf }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetGoName(yname string) string {
    if yname == "sr-curr-mode" { return "SrCurrMode" }
    if yname == "sr-hwrsrc-info" { return "SrHwrsrcInfo" }
    if yname == "sr-shmwin-oor-count" { return "SrShmwinOorCount" }
    if yname == "sr-hw-oor-count" { return "SrHwOorCount" }
    if yname == "sr-in-oor-ts" { return "SrInOorTs" }
    if yname == "sr-out-oor-ts" { return "SrOutOorTs" }
    if yname == "sr-hwrsrc-mode" { return "SrHwrsrcMode" }
    if yname == "sr-shm-state" { return "SrShmState" }
    return ""
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetSegmentPath() string {
    return "resource-hardware-egress-info"
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sr-hwrsrc-mode" {
        for _, c := range resourceHardwareEgressInfo.SrHwrsrcMode {
            if resourceHardwareEgressInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode{}
        resourceHardwareEgressInfo.SrHwrsrcMode = append(resourceHardwareEgressInfo.SrHwrsrcMode, child)
        return &resourceHardwareEgressInfo.SrHwrsrcMode[len(resourceHardwareEgressInfo.SrHwrsrcMode)-1]
    }
    if childYangName == "sr-shm-state" {
        for _, c := range resourceHardwareEgressInfo.SrShmState {
            if resourceHardwareEgressInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState{}
        resourceHardwareEgressInfo.SrShmState = append(resourceHardwareEgressInfo.SrShmState, child)
        return &resourceHardwareEgressInfo.SrShmState[len(resourceHardwareEgressInfo.SrShmState)-1]
    }
    return nil
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range resourceHardwareEgressInfo.SrHwrsrcMode {
        children[resourceHardwareEgressInfo.SrHwrsrcMode[i].GetSegmentPath()] = &resourceHardwareEgressInfo.SrHwrsrcMode[i]
    }
    for i := range resourceHardwareEgressInfo.SrShmState {
        children[resourceHardwareEgressInfo.SrShmState[i].GetSegmentPath()] = &resourceHardwareEgressInfo.SrShmState[i]
    }
    return children
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sr-curr-mode"] = resourceHardwareEgressInfo.SrCurrMode
    leafs["sr-hwrsrc-info"] = resourceHardwareEgressInfo.SrHwrsrcInfo
    leafs["sr-shmwin-oor-count"] = resourceHardwareEgressInfo.SrShmwinOorCount
    leafs["sr-hw-oor-count"] = resourceHardwareEgressInfo.SrHwOorCount
    leafs["sr-in-oor-ts"] = resourceHardwareEgressInfo.SrInOorTs
    leafs["sr-out-oor-ts"] = resourceHardwareEgressInfo.SrOutOorTs
    return leafs
}

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetBundleName() string { return "cisco_ios_xr" }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetYangName() string { return "resource-hardware-egress-info" }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) SetParent(parent types.Entity) { resourceHardwareEgressInfo.parent = parent }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetParent() types.Entity { return resourceHardwareEgressInfo.parent }

func (resourceHardwareEgressInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo) GetParentYangName() string { return "resource" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetFilter() yfilter.YFilter { return srHwrsrcMode.YFilter }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) SetFilter(yf yfilter.YFilter) { srHwrsrcMode.YFilter = yf }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetSegmentPath() string {
    return "sr-hwrsrc-mode"
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = srHwrsrcMode.Entry
    return leafs
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetBundleName() string { return "cisco_ios_xr" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetYangName() string { return "sr-hwrsrc-mode" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) SetParent(parent types.Entity) { srHwrsrcMode.parent = parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetParent() types.Entity { return srHwrsrcMode.parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrHwrsrcMode) GetParentYangName() string { return "resource-hardware-egress-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetFilter() yfilter.YFilter { return srShmState.YFilter }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) SetFilter(yf yfilter.YFilter) { srShmState.YFilter = yf }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetGoName(yname string) string {
    if yname == "srs-curr-mode" { return "SrsCurrMode" }
    if yname == "srs-avg-avail" { return "SrsAvgAvail" }
    if yname == "srs-max-avail" { return "SrsMaxAvail" }
    return ""
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetSegmentPath() string {
    return "sr-shm-state"
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srs-curr-mode"] = srShmState.SrsCurrMode
    leafs["srs-avg-avail"] = srShmState.SrsAvgAvail
    leafs["srs-max-avail"] = srShmState.SrsMaxAvail
    return leafs
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetBundleName() string { return "cisco_ios_xr" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetYangName() string { return "sr-shm-state" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) SetParent(parent types.Entity) { srShmState.parent = parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetParent() types.Entity { return srShmState.parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceHardwareEgressInfo_SrShmState) GetParentYangName() string { return "resource-hardware-egress-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo
// Summary info
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current overall oor mode. The type is interface{} with range:
    // 0..4294967295.
    SrCurrMode interface{}

    // Opaque hardware rsrc state info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SrHwrsrcInfo interface{}

    // sr shmwin oor count. The type is interface{} with range: 0..255.
    SrShmwinOorCount interface{}

    // sr hw oor count. The type is interface{} with range: 0..255.
    SrHwOorCount interface{}

    // sr in oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrInOorTs interface{}

    // sr out oor ts. The type is interface{} with range: 0..18446744073709551615.
    SrOutOorTs interface{}

    // Hardware resource mode. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode.
    SrHwrsrcMode []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode

    // Current status of shared memories. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState.
    SrShmState []Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetFilter() yfilter.YFilter { return resourceSummaryInfo.YFilter }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) SetFilter(yf yfilter.YFilter) { resourceSummaryInfo.YFilter = yf }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetGoName(yname string) string {
    if yname == "sr-curr-mode" { return "SrCurrMode" }
    if yname == "sr-hwrsrc-info" { return "SrHwrsrcInfo" }
    if yname == "sr-shmwin-oor-count" { return "SrShmwinOorCount" }
    if yname == "sr-hw-oor-count" { return "SrHwOorCount" }
    if yname == "sr-in-oor-ts" { return "SrInOorTs" }
    if yname == "sr-out-oor-ts" { return "SrOutOorTs" }
    if yname == "sr-hwrsrc-mode" { return "SrHwrsrcMode" }
    if yname == "sr-shm-state" { return "SrShmState" }
    return ""
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetSegmentPath() string {
    return "resource-summary-info"
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sr-hwrsrc-mode" {
        for _, c := range resourceSummaryInfo.SrHwrsrcMode {
            if resourceSummaryInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode{}
        resourceSummaryInfo.SrHwrsrcMode = append(resourceSummaryInfo.SrHwrsrcMode, child)
        return &resourceSummaryInfo.SrHwrsrcMode[len(resourceSummaryInfo.SrHwrsrcMode)-1]
    }
    if childYangName == "sr-shm-state" {
        for _, c := range resourceSummaryInfo.SrShmState {
            if resourceSummaryInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState{}
        resourceSummaryInfo.SrShmState = append(resourceSummaryInfo.SrShmState, child)
        return &resourceSummaryInfo.SrShmState[len(resourceSummaryInfo.SrShmState)-1]
    }
    return nil
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range resourceSummaryInfo.SrHwrsrcMode {
        children[resourceSummaryInfo.SrHwrsrcMode[i].GetSegmentPath()] = &resourceSummaryInfo.SrHwrsrcMode[i]
    }
    for i := range resourceSummaryInfo.SrShmState {
        children[resourceSummaryInfo.SrShmState[i].GetSegmentPath()] = &resourceSummaryInfo.SrShmState[i]
    }
    return children
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sr-curr-mode"] = resourceSummaryInfo.SrCurrMode
    leafs["sr-hwrsrc-info"] = resourceSummaryInfo.SrHwrsrcInfo
    leafs["sr-shmwin-oor-count"] = resourceSummaryInfo.SrShmwinOorCount
    leafs["sr-hw-oor-count"] = resourceSummaryInfo.SrHwOorCount
    leafs["sr-in-oor-ts"] = resourceSummaryInfo.SrInOorTs
    leafs["sr-out-oor-ts"] = resourceSummaryInfo.SrOutOorTs
    return leafs
}

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetYangName() string { return "resource-summary-info" }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) SetParent(parent types.Entity) { resourceSummaryInfo.parent = parent }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetParent() types.Entity { return resourceSummaryInfo.parent }

func (resourceSummaryInfo *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo) GetParentYangName() string { return "resource" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode
// Hardware resource mode
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetFilter() yfilter.YFilter { return srHwrsrcMode.YFilter }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) SetFilter(yf yfilter.YFilter) { srHwrsrcMode.YFilter = yf }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetSegmentPath() string {
    return "sr-hwrsrc-mode"
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = srHwrsrcMode.Entry
    return leafs
}

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetBundleName() string { return "cisco_ios_xr" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetYangName() string { return "sr-hwrsrc-mode" }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) SetParent(parent types.Entity) { srHwrsrcMode.parent = parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetParent() types.Entity { return srHwrsrcMode.parent }

func (srHwrsrcMode *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrHwrsrcMode) GetParentYangName() string { return "resource-summary-info" }

// Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState
// Current status of shared memories
type Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OOR mode for this shared memory window. The type is interface{} with range:
    // 0..4294967295.
    SrsCurrMode interface{}

    // Average number of bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsAvgAvail interface{}

    // Maximum bytes available. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    SrsMaxAvail interface{}
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetFilter() yfilter.YFilter { return srShmState.YFilter }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) SetFilter(yf yfilter.YFilter) { srShmState.YFilter = yf }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetGoName(yname string) string {
    if yname == "srs-curr-mode" { return "SrsCurrMode" }
    if yname == "srs-avg-avail" { return "SrsAvgAvail" }
    if yname == "srs-max-avail" { return "SrsMaxAvail" }
    return ""
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetSegmentPath() string {
    return "sr-shm-state"
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srs-curr-mode"] = srShmState.SrsCurrMode
    leafs["srs-avg-avail"] = srShmState.SrsAvgAvail
    leafs["srs-max-avail"] = srShmState.SrsMaxAvail
    return leafs
}

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetBundleName() string { return "cisco_ios_xr" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetYangName() string { return "sr-shm-state" }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) SetParent(parent types.Entity) { srShmState.parent = parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetParent() types.Entity { return srShmState.parent }

func (srShmState *Fib_Nodes_Node_Protocols_Protocol_Resource_ResourceSummaryInfo_SrShmState) GetParentYangName() string { return "resource-summary-info" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries
// Summary for FIB tables
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary for the requested fib table. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary.
    FibSummary []Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetFilter() yfilter.YFilter { return fibSummaries.YFilter }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) SetFilter(yf yfilter.YFilter) { fibSummaries.YFilter = yf }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetGoName(yname string) string {
    if yname == "fib-summary" { return "FibSummary" }
    return ""
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetSegmentPath() string {
    return "fib-summaries"
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-summary" {
        for _, c := range fibSummaries.FibSummary {
            if fibSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary{}
        fibSummaries.FibSummary = append(fibSummaries.FibSummary, child)
        return &fibSummaries.FibSummary[len(fibSummaries.FibSummary)-1]
    }
    return nil
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fibSummaries.FibSummary {
        children[fibSummaries.FibSummary[i].GetSegmentPath()] = &fibSummaries.FibSummary[i]
    }
    return children
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetYangName() string { return "fib-summaries" }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) SetParent(parent types.Entity) { fibSummaries.parent = parent }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetParent() types.Entity { return fibSummaries.parent }

func (fibSummaries *Fib_Nodes_Node_Protocols_Protocol_FibSummaries) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary
// Summary for the requested fib table
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // FIB table id. The type is string with pattern: [0-9a-fA-F]{1,8}.
    TableId interface{}

    // The router-id. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Prefix interface{}

    // Table Id. The type is interface{} with range: 0..4294967295.
    SsTblId interface{}

    // Table Id Ptr. The type is interface{} with range: 0..4294967295.
    SsTblIdPtr interface{}

    // Virtual routing forwarding instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrfId interface{}

    // Virtual router instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrId interface{}

    // LBA configuration state. The type is SsLbaState.
    LoadBalancing interface{}

    // Number of forwarding elements linked to the table. The type is interface{}
    // with range: 0..4294967295.
    ForwardingElements interface{}

    // Number of routes. The type is interface{} with range: 0..4294967295.
    Routes interface{}

    // Number of inplace modifications. The type is interface{} with range:
    // 0..4294967295.
    PrefixInPlaceModifications interface{}

    // Number of deleted stale leafs. The type is interface{} with range:
    // 0..4294967295.
    StalePrefixDeletes interface{}

    // Count of load sharing elements. The type is interface{} with range:
    // 0..4294967295.
    LoadSharingElements interface{}

    // Count of load sharing references. The type is interface{} with range:
    // 0..18446744073709551615.
    LoadSharingReferences interface{}

    // Total memory used by load sharing elements. The type is interface{} with
    // range: 0..4294967295.
    TotalLoadShareElementBytes interface{}

    // Total memory used by leaves. The type is interface{} with range:
    // 0..4294967295.
    LeavesUsedBytes interface{}

    // Number of reresolved entries. The type is interface{} with range:
    // 0..4294967295.
    ReresolveEntries interface{}

    // Number of old unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    OldUnresolveEntries interface{}

    // Number of new unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    NewUnresolveEntries interface{}

    // Number of total unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    UnresolveEntries interface{}

    // Number of routes dropped by CEF. The type is interface{} with range:
    // 0..4294967295.
    CefRouteDrops interface{}

    // the number of routes dropped due to version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    CefVersionMismatchRouteDrops interface{}

    // Number of entries in the route delete cache. The type is interface{} with
    // range: 0..4294967295.
    DeleteCacheNumEntries interface{}

    // Number of entries present on addition. The type is interface{} with range:
    // 0..4294967295.
    ExistingLeavesRevisions interface{}

    // Default prefix. The type is interface{} with range: 0..4294967295.
    FibDefaultPrefix interface{}

    // Default prefix mask length. The type is interface{} with range:
    // 0..4294967295.
    FibDefaultPrefixMaskLength interface{}

    // Number of NHINFOS. The type is interface{} with range: 0..4294967295.
    NextHops interface{}

    // Number of incomplete NHINFOS. The type is interface{} with range:
    // 0..4294967295.
    IncompleteNextHops interface{}

    // IP CEF resolution timer in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ResolutionTimer interface{}

    // IP CEF slow processing time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    SlowProcessTimer interface{}

    // IP CEF max resolution time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaxResolutionTimer interface{}

    // Number of prefixes with imposition LDI. The type is interface{} with range:
    // 0..4294967295.
    ImpositionPrefixes interface{}

    // Number of prefixes with extended path-list. The type is interface{} with
    // range: 0..4294967295.
    ExtendedPrefixes interface{}

    // Number of routes updates with recycled label handled. The type is
    // interface{} with range: 0..4294967295.
    CeflBlRecycledRoutes interface{}

    // pd backwalks on LDI modify with backup path. The type is interface{} with
    // range: 0..4294967295.
    LdiBackwalks interface{}

    // Number of routes with FRR protection. The type is interface{} with range:
    // 0..4294967295.
    SsProtRouteCount interface{}

    // Number of lisp eid prefixes associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispEidPrefixes interface{}

    // Number of lisp eid prefixes eligible for forwarding. The type is
    // interface{} with range: 0..4294967295.
    LispEidValidPrefixes interface{}

    // Number of lisp rloc objects associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispRlocObjects interface{}

    // VXLAN local Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    SsVxlanLtepIfh interface{}

    // Number of dropped pathlists. The type is interface{} with range:
    // 0..4294967295.
    SsDropPlCount interface{}

    // Exclusive load sharing element.
    ExclusiveLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement

    // Shared load sharing element.
    SharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement

    // Cross-table shared load sharing element.
    CrossSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement

    // Label-shared load sharing element.
    LabelSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement

    // Distribution of prefix mask lengths.
    PrefixMasklenDistribution Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetFilter() yfilter.YFilter { return fibSummary.YFilter }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) SetFilter(yf yfilter.YFilter) { fibSummary.YFilter = yf }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "ss-tbl-id" { return "SsTblId" }
    if yname == "ss-tbl-id-ptr" { return "SsTblIdPtr" }
    if yname == "ss-vrf-id" { return "SsVrfId" }
    if yname == "ss-vr-id" { return "SsVrId" }
    if yname == "load-balancing" { return "LoadBalancing" }
    if yname == "forwarding-elements" { return "ForwardingElements" }
    if yname == "routes" { return "Routes" }
    if yname == "prefix-in-place-modifications" { return "PrefixInPlaceModifications" }
    if yname == "stale-prefix-deletes" { return "StalePrefixDeletes" }
    if yname == "load-sharing-elements" { return "LoadSharingElements" }
    if yname == "load-sharing-references" { return "LoadSharingReferences" }
    if yname == "total-load-share-element-bytes" { return "TotalLoadShareElementBytes" }
    if yname == "leaves-used-bytes" { return "LeavesUsedBytes" }
    if yname == "reresolve-entries" { return "ReresolveEntries" }
    if yname == "old-unresolve-entries" { return "OldUnresolveEntries" }
    if yname == "new-unresolve-entries" { return "NewUnresolveEntries" }
    if yname == "unresolve-entries" { return "UnresolveEntries" }
    if yname == "cef-route-drops" { return "CefRouteDrops" }
    if yname == "cef-version-mismatch-route-drops" { return "CefVersionMismatchRouteDrops" }
    if yname == "delete-cache-num-entries" { return "DeleteCacheNumEntries" }
    if yname == "existing-leaves-revisions" { return "ExistingLeavesRevisions" }
    if yname == "fib-default-prefix" { return "FibDefaultPrefix" }
    if yname == "fib-default-prefix-mask-length" { return "FibDefaultPrefixMaskLength" }
    if yname == "next-hops" { return "NextHops" }
    if yname == "incomplete-next-hops" { return "IncompleteNextHops" }
    if yname == "resolution-timer" { return "ResolutionTimer" }
    if yname == "slow-process-timer" { return "SlowProcessTimer" }
    if yname == "max-resolution-timer" { return "MaxResolutionTimer" }
    if yname == "imposition-prefixes" { return "ImpositionPrefixes" }
    if yname == "extended-prefixes" { return "ExtendedPrefixes" }
    if yname == "cefl-bl-recycled-routes" { return "CeflBlRecycledRoutes" }
    if yname == "ldi-backwalks" { return "LdiBackwalks" }
    if yname == "ss-prot-route-count" { return "SsProtRouteCount" }
    if yname == "lisp-eid-prefixes" { return "LispEidPrefixes" }
    if yname == "lisp-eid-valid-prefixes" { return "LispEidValidPrefixes" }
    if yname == "lisp-rloc-objects" { return "LispRlocObjects" }
    if yname == "ss-vxlan-ltep-ifh" { return "SsVxlanLtepIfh" }
    if yname == "ss-drop-pl-count" { return "SsDropPlCount" }
    if yname == "exclusive-load-sharing-element" { return "ExclusiveLoadSharingElement" }
    if yname == "shared-load-sharing-element" { return "SharedLoadSharingElement" }
    if yname == "cross-shared-load-sharing-element" { return "CrossSharedLoadSharingElement" }
    if yname == "label-shared-load-sharing-element" { return "LabelSharedLoadSharingElement" }
    if yname == "prefix-masklen-distribution" { return "PrefixMasklenDistribution" }
    return ""
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetSegmentPath() string {
    return "fib-summary"
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclusive-load-sharing-element" {
        return &fibSummary.ExclusiveLoadSharingElement
    }
    if childYangName == "shared-load-sharing-element" {
        return &fibSummary.SharedLoadSharingElement
    }
    if childYangName == "cross-shared-load-sharing-element" {
        return &fibSummary.CrossSharedLoadSharingElement
    }
    if childYangName == "label-shared-load-sharing-element" {
        return &fibSummary.LabelSharedLoadSharingElement
    }
    if childYangName == "prefix-masklen-distribution" {
        return &fibSummary.PrefixMasklenDistribution
    }
    return nil
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["exclusive-load-sharing-element"] = &fibSummary.ExclusiveLoadSharingElement
    children["shared-load-sharing-element"] = &fibSummary.SharedLoadSharingElement
    children["cross-shared-load-sharing-element"] = &fibSummary.CrossSharedLoadSharingElement
    children["label-shared-load-sharing-element"] = &fibSummary.LabelSharedLoadSharingElement
    children["prefix-masklen-distribution"] = &fibSummary.PrefixMasklenDistribution
    return children
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = fibSummary.VrfName
    leafs["table-id"] = fibSummary.TableId
    leafs["prefix"] = fibSummary.Prefix
    leafs["ss-tbl-id"] = fibSummary.SsTblId
    leafs["ss-tbl-id-ptr"] = fibSummary.SsTblIdPtr
    leafs["ss-vrf-id"] = fibSummary.SsVrfId
    leafs["ss-vr-id"] = fibSummary.SsVrId
    leafs["load-balancing"] = fibSummary.LoadBalancing
    leafs["forwarding-elements"] = fibSummary.ForwardingElements
    leafs["routes"] = fibSummary.Routes
    leafs["prefix-in-place-modifications"] = fibSummary.PrefixInPlaceModifications
    leafs["stale-prefix-deletes"] = fibSummary.StalePrefixDeletes
    leafs["load-sharing-elements"] = fibSummary.LoadSharingElements
    leafs["load-sharing-references"] = fibSummary.LoadSharingReferences
    leafs["total-load-share-element-bytes"] = fibSummary.TotalLoadShareElementBytes
    leafs["leaves-used-bytes"] = fibSummary.LeavesUsedBytes
    leafs["reresolve-entries"] = fibSummary.ReresolveEntries
    leafs["old-unresolve-entries"] = fibSummary.OldUnresolveEntries
    leafs["new-unresolve-entries"] = fibSummary.NewUnresolveEntries
    leafs["unresolve-entries"] = fibSummary.UnresolveEntries
    leafs["cef-route-drops"] = fibSummary.CefRouteDrops
    leafs["cef-version-mismatch-route-drops"] = fibSummary.CefVersionMismatchRouteDrops
    leafs["delete-cache-num-entries"] = fibSummary.DeleteCacheNumEntries
    leafs["existing-leaves-revisions"] = fibSummary.ExistingLeavesRevisions
    leafs["fib-default-prefix"] = fibSummary.FibDefaultPrefix
    leafs["fib-default-prefix-mask-length"] = fibSummary.FibDefaultPrefixMaskLength
    leafs["next-hops"] = fibSummary.NextHops
    leafs["incomplete-next-hops"] = fibSummary.IncompleteNextHops
    leafs["resolution-timer"] = fibSummary.ResolutionTimer
    leafs["slow-process-timer"] = fibSummary.SlowProcessTimer
    leafs["max-resolution-timer"] = fibSummary.MaxResolutionTimer
    leafs["imposition-prefixes"] = fibSummary.ImpositionPrefixes
    leafs["extended-prefixes"] = fibSummary.ExtendedPrefixes
    leafs["cefl-bl-recycled-routes"] = fibSummary.CeflBlRecycledRoutes
    leafs["ldi-backwalks"] = fibSummary.LdiBackwalks
    leafs["ss-prot-route-count"] = fibSummary.SsProtRouteCount
    leafs["lisp-eid-prefixes"] = fibSummary.LispEidPrefixes
    leafs["lisp-eid-valid-prefixes"] = fibSummary.LispEidValidPrefixes
    leafs["lisp-rloc-objects"] = fibSummary.LispRlocObjects
    leafs["ss-vxlan-ltep-ifh"] = fibSummary.SsVxlanLtepIfh
    leafs["ss-drop-pl-count"] = fibSummary.SsDropPlCount
    return leafs
}

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetBundleName() string { return "cisco_ios_xr" }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetYangName() string { return "fib-summary" }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) SetParent(parent types.Entity) { fibSummary.parent = parent }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetParent() types.Entity { return fibSummary.parent }

func (fibSummary *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary) GetParentYangName() string { return "fib-summaries" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement
// Exclusive load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetFilter() yfilter.YFilter { return exclusiveLoadSharingElement.YFilter }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) SetFilter(yf yfilter.YFilter) { exclusiveLoadSharingElement.YFilter = yf }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetSegmentPath() string {
    return "exclusive-load-sharing-element"
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = exclusiveLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = exclusiveLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = exclusiveLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = exclusiveLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = exclusiveLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = exclusiveLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = exclusiveLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = exclusiveLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = exclusiveLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = exclusiveLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetYangName() string { return "exclusive-load-sharing-element" }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) SetParent(parent types.Entity) { exclusiveLoadSharingElement.parent = parent }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetParent() types.Entity { return exclusiveLoadSharingElement.parent }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_ExclusiveLoadSharingElement) GetParentYangName() string { return "fib-summary" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement
// Shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetFilter() yfilter.YFilter { return sharedLoadSharingElement.YFilter }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) SetFilter(yf yfilter.YFilter) { sharedLoadSharingElement.YFilter = yf }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetSegmentPath() string {
    return "shared-load-sharing-element"
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = sharedLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = sharedLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = sharedLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = sharedLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = sharedLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = sharedLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = sharedLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = sharedLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = sharedLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = sharedLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetYangName() string { return "shared-load-sharing-element" }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) SetParent(parent types.Entity) { sharedLoadSharingElement.parent = parent }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetParent() types.Entity { return sharedLoadSharingElement.parent }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_SharedLoadSharingElement) GetParentYangName() string { return "fib-summary" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement
// Cross-table shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetFilter() yfilter.YFilter { return crossSharedLoadSharingElement.YFilter }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) SetFilter(yf yfilter.YFilter) { crossSharedLoadSharingElement.YFilter = yf }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetSegmentPath() string {
    return "cross-shared-load-sharing-element"
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = crossSharedLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = crossSharedLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = crossSharedLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = crossSharedLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = crossSharedLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = crossSharedLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = crossSharedLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = crossSharedLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = crossSharedLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = crossSharedLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetYangName() string { return "cross-shared-load-sharing-element" }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) SetParent(parent types.Entity) { crossSharedLoadSharingElement.parent = parent }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetParent() types.Entity { return crossSharedLoadSharingElement.parent }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_CrossSharedLoadSharingElement) GetParentYangName() string { return "fib-summary" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement
// Label-shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetFilter() yfilter.YFilter { return labelSharedLoadSharingElement.YFilter }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) SetFilter(yf yfilter.YFilter) { labelSharedLoadSharingElement.YFilter = yf }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetSegmentPath() string {
    return "label-shared-load-sharing-element"
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = labelSharedLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = labelSharedLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = labelSharedLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = labelSharedLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = labelSharedLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = labelSharedLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = labelSharedLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = labelSharedLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = labelSharedLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = labelSharedLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetYangName() string { return "label-shared-load-sharing-element" }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) SetParent(parent types.Entity) { labelSharedLoadSharingElement.parent = parent }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetParent() types.Entity { return labelSharedLoadSharingElement.parent }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_LabelSharedLoadSharingElement) GetParentYangName() string { return "fib-summary" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution
// Distribution of prefix mask lengths
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Masklength counts for unicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe.
    UnicastPrefixe []Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe

    // Masklength counts for broadcast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe.
    BroadcastPrefixe []Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe

    // Masklength counts for multicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix.
    MulticastPrefix []Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetFilter() yfilter.YFilter { return prefixMasklenDistribution.YFilter }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) SetFilter(yf yfilter.YFilter) { prefixMasklenDistribution.YFilter = yf }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetGoName(yname string) string {
    if yname == "unicast-prefixe" { return "UnicastPrefixe" }
    if yname == "broadcast-prefixe" { return "BroadcastPrefixe" }
    if yname == "multicast-prefix" { return "MulticastPrefix" }
    return ""
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetSegmentPath() string {
    return "prefix-masklen-distribution"
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unicast-prefixe" {
        for _, c := range prefixMasklenDistribution.UnicastPrefixe {
            if prefixMasklenDistribution.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe{}
        prefixMasklenDistribution.UnicastPrefixe = append(prefixMasklenDistribution.UnicastPrefixe, child)
        return &prefixMasklenDistribution.UnicastPrefixe[len(prefixMasklenDistribution.UnicastPrefixe)-1]
    }
    if childYangName == "broadcast-prefixe" {
        for _, c := range prefixMasklenDistribution.BroadcastPrefixe {
            if prefixMasklenDistribution.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe{}
        prefixMasklenDistribution.BroadcastPrefixe = append(prefixMasklenDistribution.BroadcastPrefixe, child)
        return &prefixMasklenDistribution.BroadcastPrefixe[len(prefixMasklenDistribution.BroadcastPrefixe)-1]
    }
    if childYangName == "multicast-prefix" {
        for _, c := range prefixMasklenDistribution.MulticastPrefix {
            if prefixMasklenDistribution.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix{}
        prefixMasklenDistribution.MulticastPrefix = append(prefixMasklenDistribution.MulticastPrefix, child)
        return &prefixMasklenDistribution.MulticastPrefix[len(prefixMasklenDistribution.MulticastPrefix)-1]
    }
    return nil
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixMasklenDistribution.UnicastPrefixe {
        children[prefixMasklenDistribution.UnicastPrefixe[i].GetSegmentPath()] = &prefixMasklenDistribution.UnicastPrefixe[i]
    }
    for i := range prefixMasklenDistribution.BroadcastPrefixe {
        children[prefixMasklenDistribution.BroadcastPrefixe[i].GetSegmentPath()] = &prefixMasklenDistribution.BroadcastPrefixe[i]
    }
    for i := range prefixMasklenDistribution.MulticastPrefix {
        children[prefixMasklenDistribution.MulticastPrefix[i].GetSegmentPath()] = &prefixMasklenDistribution.MulticastPrefix[i]
    }
    return children
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetBundleName() string { return "cisco_ios_xr" }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetYangName() string { return "prefix-masklen-distribution" }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) SetParent(parent types.Entity) { prefixMasklenDistribution.parent = parent }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetParent() types.Entity { return prefixMasklenDistribution.parent }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution) GetParentYangName() string { return "fib-summary" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe
// Masklength counts for unicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetFilter() yfilter.YFilter { return unicastPrefixe.YFilter }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) SetFilter(yf yfilter.YFilter) { unicastPrefixe.YFilter = yf }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetGoName(yname string) string {
    if yname == "mask-length" { return "MaskLength" }
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    return ""
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetSegmentPath() string {
    return "unicast-prefixe"
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mask-length"] = unicastPrefixe.MaskLength
    leafs["number-of-prefixes"] = unicastPrefixe.NumberOfPrefixes
    return leafs
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetBundleName() string { return "cisco_ios_xr" }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetYangName() string { return "unicast-prefixe" }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) SetParent(parent types.Entity) { unicastPrefixe.parent = parent }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetParent() types.Entity { return unicastPrefixe.parent }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_UnicastPrefixe) GetParentYangName() string { return "prefix-masklen-distribution" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe
// Masklength counts for broadcast prefixes
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetFilter() yfilter.YFilter { return broadcastPrefixe.YFilter }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) SetFilter(yf yfilter.YFilter) { broadcastPrefixe.YFilter = yf }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetGoName(yname string) string {
    if yname == "mask-length" { return "MaskLength" }
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    return ""
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetSegmentPath() string {
    return "broadcast-prefixe"
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mask-length"] = broadcastPrefixe.MaskLength
    leafs["number-of-prefixes"] = broadcastPrefixe.NumberOfPrefixes
    return leafs
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetBundleName() string { return "cisco_ios_xr" }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetYangName() string { return "broadcast-prefixe" }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) SetParent(parent types.Entity) { broadcastPrefixe.parent = parent }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetParent() types.Entity { return broadcastPrefixe.parent }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_BroadcastPrefixe) GetParentYangName() string { return "prefix-masklen-distribution" }

// Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix
// Masklength counts for multicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetFilter() yfilter.YFilter { return multicastPrefix.YFilter }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) SetFilter(yf yfilter.YFilter) { multicastPrefix.YFilter = yf }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetGoName(yname string) string {
    if yname == "mask-length" { return "MaskLength" }
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    return ""
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetSegmentPath() string {
    return "multicast-prefix"
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mask-length"] = multicastPrefix.MaskLength
    leafs["number-of-prefixes"] = multicastPrefix.NumberOfPrefixes
    return leafs
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetYangName() string { return "multicast-prefix" }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) SetParent(parent types.Entity) { multicastPrefix.parent = parent }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetParent() types.Entity { return multicastPrefix.parent }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_FibSummaries_FibSummary_PrefixMasklenDistribution_MulticastPrefix) GetParentYangName() string { return "prefix-masklen-distribution" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll
// Summary for all external clients
type Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client information. The type is interface{} with range: 0..4294967295.
    SesaNumClient interface{}

    // External pathlist summary.
    SesaPlSum Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetFilter() yfilter.YFilter { return externalSummaryAll.YFilter }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) SetFilter(yf yfilter.YFilter) { externalSummaryAll.YFilter = yf }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetGoName(yname string) string {
    if yname == "sesa-num-client" { return "SesaNumClient" }
    if yname == "sesa-pl-sum" { return "SesaPlSum" }
    return ""
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetSegmentPath() string {
    return "external-summary-all"
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sesa-pl-sum" {
        return &externalSummaryAll.SesaPlSum
    }
    return nil
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sesa-pl-sum"] = &externalSummaryAll.SesaPlSum
    return children
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sesa-num-client"] = externalSummaryAll.SesaNumClient
    return leafs
}

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetBundleName() string { return "cisco_ios_xr" }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetYangName() string { return "external-summary-all" }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) SetParent(parent types.Entity) { externalSummaryAll.parent = parent }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetParent() types.Entity { return externalSummaryAll.parent }

func (externalSummaryAll *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum
// External pathlist summary
type Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of ECD pathlists. The type is interface{} with range: 0..4294967295.
    SepNumEcdPathlist interface{}

    // Number of ECD pathlists unresolved. The type is interface{} with range:
    // 0..4294967295.
    SepNumEcdPlUnresolved interface{}

    // Number of ECD pathlists per interest. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest.
    SepNumEcdPlPerInterest []Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetFilter() yfilter.YFilter { return sesaPlSum.YFilter }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) SetFilter(yf yfilter.YFilter) { sesaPlSum.YFilter = yf }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetGoName(yname string) string {
    if yname == "sep-num-ecd-pathlist" { return "SepNumEcdPathlist" }
    if yname == "sep-num-ecd-pl-unresolved" { return "SepNumEcdPlUnresolved" }
    if yname == "sep-num-ecd-pl-per-interest" { return "SepNumEcdPlPerInterest" }
    return ""
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetSegmentPath() string {
    return "sesa-pl-sum"
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sep-num-ecd-pl-per-interest" {
        for _, c := range sesaPlSum.SepNumEcdPlPerInterest {
            if sesaPlSum.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest{}
        sesaPlSum.SepNumEcdPlPerInterest = append(sesaPlSum.SepNumEcdPlPerInterest, child)
        return &sesaPlSum.SepNumEcdPlPerInterest[len(sesaPlSum.SepNumEcdPlPerInterest)-1]
    }
    return nil
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sesaPlSum.SepNumEcdPlPerInterest {
        children[sesaPlSum.SepNumEcdPlPerInterest[i].GetSegmentPath()] = &sesaPlSum.SepNumEcdPlPerInterest[i]
    }
    return children
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sep-num-ecd-pathlist"] = sesaPlSum.SepNumEcdPathlist
    leafs["sep-num-ecd-pl-unresolved"] = sesaPlSum.SepNumEcdPlUnresolved
    return leafs
}

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetBundleName() string { return "cisco_ios_xr" }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetYangName() string { return "sesa-pl-sum" }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) SetParent(parent types.Entity) { sesaPlSum.parent = parent }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetParent() types.Entity { return sesaPlSum.parent }

func (sesaPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum) GetParentYangName() string { return "external-summary-all" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest
// Number of ECD pathlists per interest
type Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetFilter() yfilter.YFilter { return sepNumEcdPlPerInterest.YFilter }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) SetFilter(yf yfilter.YFilter) { sepNumEcdPlPerInterest.YFilter = yf }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetSegmentPath() string {
    return "sep-num-ecd-pl-per-interest"
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = sepNumEcdPlPerInterest.Entry
    return leafs
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetBundleName() string { return "cisco_ios_xr" }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetYangName() string { return "sep-num-ecd-pl-per-interest" }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) SetParent(parent types.Entity) { sepNumEcdPlPerInterest.parent = parent }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetParent() types.Entity { return sepNumEcdPlPerInterest.parent }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalSummaryAll_SesaPlSum_SepNumEcdPlPerInterest) GetParentYangName() string { return "sesa-pl-sum" }

// Fib_Nodes_Node_Protocols_Protocol_FrrLog
// Table of Fast Reroute activation logs
type Fib_Nodes_Node_Protocols_Protocol_FrrLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR Interface Table.
    FrrInterfaces Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetFilter() yfilter.YFilter { return frrLog.YFilter }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) SetFilter(yf yfilter.YFilter) { frrLog.YFilter = yf }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetGoName(yname string) string {
    if yname == "frr-interfaces" { return "FrrInterfaces" }
    return ""
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetSegmentPath() string {
    return "frr-log"
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-interfaces" {
        return &frrLog.FrrInterfaces
    }
    return nil
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-interfaces"] = &frrLog.FrrInterfaces
    return children
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetBundleName() string { return "cisco_ios_xr" }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetYangName() string { return "frr-log" }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) SetParent(parent types.Entity) { frrLog.parent = parent }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetParent() types.Entity { return frrLog.parent }

func (frrLog *Fib_Nodes_Node_Protocols_Protocol_FrrLog) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces
// FRR Interface Table
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify FRR Interface Name. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface.
    FrrInterface []Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetFilter() yfilter.YFilter { return frrInterfaces.YFilter }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) SetFilter(yf yfilter.YFilter) { frrInterfaces.YFilter = yf }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetGoName(yname string) string {
    if yname == "frr-interface" { return "FrrInterface" }
    return ""
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetSegmentPath() string {
    return "frr-interfaces"
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-interface" {
        for _, c := range frrInterfaces.FrrInterface {
            if frrInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface{}
        frrInterfaces.FrrInterface = append(frrInterfaces.FrrInterface, child)
        return &frrInterfaces.FrrInterface[len(frrInterfaces.FrrInterface)-1]
    }
    return nil
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrInterfaces.FrrInterface {
        children[frrInterfaces.FrrInterface[i].GetSegmentPath()] = &frrInterfaces.FrrInterface[i]
    }
    return children
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetYangName() string { return "frr-interfaces" }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) SetParent(parent types.Entity) { frrInterfaces.parent = parent }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetParent() types.Entity { return frrInterfaces.parent }

func (frrInterfaces *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces) GetParentYangName() string { return "frr-log" }

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface
// Specify FRR Interface Name
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR log table.
    Logs Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetFilter() yfilter.YFilter { return frrInterface.YFilter }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) SetFilter(yf yfilter.YFilter) { frrInterface.YFilter = yf }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetGoName(yname string) string {
    if yname == "frr-interface-name" { return "FrrInterfaceName" }
    if yname == "logs" { return "Logs" }
    return ""
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetSegmentPath() string {
    return "frr-interface" + "[frr-interface-name='" + fmt.Sprintf("%v", frrInterface.FrrInterfaceName) + "']"
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "logs" {
        return &frrInterface.Logs
    }
    return nil
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["logs"] = &frrInterface.Logs
    return children
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["frr-interface-name"] = frrInterface.FrrInterfaceName
    return leafs
}

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetBundleName() string { return "cisco_ios_xr" }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetYangName() string { return "frr-interface" }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) SetParent(parent types.Entity) { frrInterface.parent = parent }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetParent() types.Entity { return frrInterface.parent }

func (frrInterface *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface) GetParentYangName() string { return "frr-interfaces" }

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs
// FRR log table
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify index into frr log table. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log.
    Log []Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetFilter() yfilter.YFilter { return logs.YFilter }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) SetFilter(yf yfilter.YFilter) { logs.YFilter = yf }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetGoName(yname string) string {
    if yname == "log" { return "Log" }
    return ""
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetSegmentPath() string {
    return "logs"
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log" {
        for _, c := range logs.Log {
            if logs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log{}
        logs.Log = append(logs.Log, child)
        return &logs.Log[len(logs.Log)-1]
    }
    return nil
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range logs.Log {
        children[logs.Log[i].GetSegmentPath()] = &logs.Log[i]
    }
    return children
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetBundleName() string { return "cisco_ios_xr" }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetYangName() string { return "logs" }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) SetParent(parent types.Entity) { logs.parent = parent }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetParent() types.Entity { return logs.parent }

func (logs *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs) GetParentYangName() string { return "frr-interface" }

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log
// Specify index into frr log table
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. FRR Log Index. The type is interface{} with range:
    // -2147483648..2147483647.
    LogIndex interface{}

    // FIB Protocol Type. The type is FibFrrProtocolShow.
    FrrProtocolType interface{}

    // Interface assoc w frr nh. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // nh prefix. The type is string with length: 0..52.
    FrrPrefix interface{}

    // frr switching time. The type is interface{} with range: 0..4294967295.
    FrrSwitchingTime interface{}

    // bundle member. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleMemberInterfaceName interface{}

    // frr timestamp.
    FrrTimestamp Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetFilter() yfilter.YFilter { return log.YFilter }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) SetFilter(yf yfilter.YFilter) { log.YFilter = yf }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetGoName(yname string) string {
    if yname == "log-index" { return "LogIndex" }
    if yname == "frr-protocol-type" { return "FrrProtocolType" }
    if yname == "frr-interface-name" { return "FrrInterfaceName" }
    if yname == "frr-prefix" { return "FrrPrefix" }
    if yname == "frr-switching-time" { return "FrrSwitchingTime" }
    if yname == "bundle-member-interface-name" { return "BundleMemberInterfaceName" }
    if yname == "frr-timestamp" { return "FrrTimestamp" }
    return ""
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetSegmentPath() string {
    return "log" + "[log-index='" + fmt.Sprintf("%v", log.LogIndex) + "']"
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-timestamp" {
        return &log.FrrTimestamp
    }
    return nil
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-timestamp"] = &log.FrrTimestamp
    return children
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["log-index"] = log.LogIndex
    leafs["frr-protocol-type"] = log.FrrProtocolType
    leafs["frr-interface-name"] = log.FrrInterfaceName
    leafs["frr-prefix"] = log.FrrPrefix
    leafs["frr-switching-time"] = log.FrrSwitchingTime
    leafs["bundle-member-interface-name"] = log.BundleMemberInterfaceName
    return leafs
}

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetBundleName() string { return "cisco_ios_xr" }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetYangName() string { return "log" }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) SetParent(parent types.Entity) { log.parent = parent }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetParent() types.Entity { return log.parent }

func (log *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log) GetParentYangName() string { return "logs" }

// Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp
// frr timestamp
type Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds. The type is interface{} with range: -2147483648..2147483647.
    Seconds interface{}

    // NanoSeconds. The type is interface{} with range: -2147483648..2147483647.
    NanoSeconds interface{}
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetFilter() yfilter.YFilter { return frrTimestamp.YFilter }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) SetFilter(yf yfilter.YFilter) { frrTimestamp.YFilter = yf }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetSegmentPath() string {
    return "frr-timestamp"
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = frrTimestamp.Seconds
    leafs["nano-seconds"] = frrTimestamp.NanoSeconds
    return leafs
}

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetBundleName() string { return "cisco_ios_xr" }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetYangName() string { return "frr-timestamp" }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) SetParent(parent types.Entity) { frrTimestamp.parent = parent }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetParent() types.Entity { return frrTimestamp.parent }

func (frrTimestamp *Fib_Nodes_Node_Protocols_Protocol_FrrLog_FrrInterfaces_FrrInterface_Logs_Log_FrrTimestamp) GetParentYangName() string { return "log" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs
// VRF table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf.
    Vrf []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Fib_Nodes_Node_Protocols_Protocol_Vrfs) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf
// VRF table entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress

    // IP FIB prefix detail table.
    IpPrefixDetails Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail

    // Operational data for FIB Tablee.
    Summary Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary

    // Table of InterfaceInfo.
    InterfaceInfos Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos

    // IP FIB prefix brief table.
    IpPrefixBriefs Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress

    // NHInfoTable is accessed by two keys; {NHInterface,NHAddress}.
    NhInfoBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "nh-info-detail-hardware-egress" { return "NhInfoDetailHardwareEgress" }
    if yname == "ip-prefix-details" { return "IpPrefixDetails" }
    if yname == "nh-info-detail" { return "NhInfoDetail" }
    if yname == "summary" { return "Summary" }
    if yname == "interface-infos" { return "InterfaceInfos" }
    if yname == "ip-prefix-briefs" { return "IpPrefixBriefs" }
    if yname == "nh-info-detail-hardware-ingress" { return "NhInfoDetailHardwareIngress" }
    if yname == "nh-info-brief" { return "NhInfoBrief" }
    return ""
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-detail-hardware-egress" {
        return &vrf.NhInfoDetailHardwareEgress
    }
    if childYangName == "ip-prefix-details" {
        return &vrf.IpPrefixDetails
    }
    if childYangName == "nh-info-detail" {
        return &vrf.NhInfoDetail
    }
    if childYangName == "summary" {
        return &vrf.Summary
    }
    if childYangName == "interface-infos" {
        return &vrf.InterfaceInfos
    }
    if childYangName == "ip-prefix-briefs" {
        return &vrf.IpPrefixBriefs
    }
    if childYangName == "nh-info-detail-hardware-ingress" {
        return &vrf.NhInfoDetailHardwareIngress
    }
    if childYangName == "nh-info-brief" {
        return &vrf.NhInfoBrief
    }
    return nil
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-detail-hardware-egress"] = &vrf.NhInfoDetailHardwareEgress
    children["ip-prefix-details"] = &vrf.IpPrefixDetails
    children["nh-info-detail"] = &vrf.NhInfoDetail
    children["summary"] = &vrf.Summary
    children["interface-infos"] = &vrf.InterfaceInfos
    children["ip-prefix-briefs"] = &vrf.IpPrefixBriefs
    children["nh-info-detail-hardware-ingress"] = &vrf.NhInfoDetailHardwareIngress
    children["nh-info-brief"] = &vrf.NhInfoBrief
    return children
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware engress info for Special nhinfo.
    NhInfoSpecialDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress

    // Local (non-remote) nhinfo.
    NhInfoLocalDetailHardwareEgresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses

    // Detail hardware egress info for remote NHInfo table.
    NhInfoRemoteDetailHardwareEgresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoDetailHardwareEgress.YFilter }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoDetailHardwareEgress.YFilter = yf }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "nh-info-special-detail-hardware-egress" { return "NhInfoSpecialDetailHardwareEgress" }
    if yname == "nh-info-local-detail-hardware-egresses" { return "NhInfoLocalDetailHardwareEgresses" }
    if yname == "nh-info-remote-detail-hardware-egresses" { return "NhInfoRemoteDetailHardwareEgresses" }
    return ""
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-detail-hardware-egress"
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-special-detail-hardware-egress" {
        return &nhInfoDetailHardwareEgress.NhInfoSpecialDetailHardwareEgress
    }
    if childYangName == "nh-info-local-detail-hardware-egresses" {
        return &nhInfoDetailHardwareEgress.NhInfoLocalDetailHardwareEgresses
    }
    if childYangName == "nh-info-remote-detail-hardware-egresses" {
        return &nhInfoDetailHardwareEgress.NhInfoRemoteDetailHardwareEgresses
    }
    return nil
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-special-detail-hardware-egress"] = &nhInfoDetailHardwareEgress.NhInfoSpecialDetailHardwareEgress
    children["nh-info-local-detail-hardware-egresses"] = &nhInfoDetailHardwareEgress.NhInfoLocalDetailHardwareEgresses
    children["nh-info-remote-detail-hardware-egresses"] = &nhInfoDetailHardwareEgress.NhInfoRemoteDetailHardwareEgresses
    return children
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetYangName() string { return "nh-info-detail-hardware-egress" }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoDetailHardwareEgress.parent = parent }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetParent() types.Entity { return nhInfoDetailHardwareEgress.parent }

func (nhInfoDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress
// Detail hardware engress info for Special
// nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware engress info for special-null NHInfo entry.
    NhInfoSpecialNullDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress

    // Detail hardware engress info for special-punt NHInfo entry.
    NhInfoSpecialPuntDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress

    // Detail hardware engress info for special-discard NHInfo entry.
    NhInfoSpecialDiscardDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress

    // Detail hardware engress info for special-drop NHInfo entry.
    NhInfoSpecialDropDetailHardwareEgress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoSpecialDetailHardwareEgress.YFilter }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDetailHardwareEgress.YFilter = yf }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "nh-info-special-null-detail-hardware-egress" { return "NhInfoSpecialNullDetailHardwareEgress" }
    if yname == "nh-info-special-punt-detail-hardware-egress" { return "NhInfoSpecialPuntDetailHardwareEgress" }
    if yname == "nh-info-special-discard-detail-hardware-egress" { return "NhInfoSpecialDiscardDetailHardwareEgress" }
    if yname == "nh-info-special-drop-detail-hardware-egress" { return "NhInfoSpecialDropDetailHardwareEgress" }
    return ""
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-special-detail-hardware-egress"
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-special-null-detail-hardware-egress" {
        return &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialNullDetailHardwareEgress
    }
    if childYangName == "nh-info-special-punt-detail-hardware-egress" {
        return &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialPuntDetailHardwareEgress
    }
    if childYangName == "nh-info-special-discard-detail-hardware-egress" {
        return &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialDiscardDetailHardwareEgress
    }
    if childYangName == "nh-info-special-drop-detail-hardware-egress" {
        return &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialDropDetailHardwareEgress
    }
    return nil
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-special-null-detail-hardware-egress"] = &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialNullDetailHardwareEgress
    children["nh-info-special-punt-detail-hardware-egress"] = &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialPuntDetailHardwareEgress
    children["nh-info-special-discard-detail-hardware-egress"] = &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialDiscardDetailHardwareEgress
    children["nh-info-special-drop-detail-hardware-egress"] = &nhInfoSpecialDetailHardwareEgress.NhInfoSpecialDropDetailHardwareEgress
    return children
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetYangName() string { return "nh-info-special-detail-hardware-egress" }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoSpecialDetailHardwareEgress.parent = parent }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetParent() types.Entity { return nhInfoSpecialDetailHardwareEgress.parent }

func (nhInfoSpecialDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress) GetParentYangName() string { return "nh-info-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress
// Detail hardware engress info for
// special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoSpecialNullDetailHardwareEgress.YFilter }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialNullDetailHardwareEgress.YFilter = yf }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-special-null-detail-hardware-egress"
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialNullDetailHardwareEgress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialNullDetailHardwareEgress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialNullDetailHardwareEgress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialNullDetailHardwareEgress.NhInfoExtension
    return children
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialNullDetailHardwareEgress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialNullDetailHardwareEgress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialNullDetailHardwareEgress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialNullDetailHardwareEgress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialNullDetailHardwareEgress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialNullDetailHardwareEgress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialNullDetailHardwareEgress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialNullDetailHardwareEgress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialNullDetailHardwareEgress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialNullDetailHardwareEgress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialNullDetailHardwareEgress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialNullDetailHardwareEgress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialNullDetailHardwareEgress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialNullDetailHardwareEgress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialNullDetailHardwareEgress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialNullDetailHardwareEgress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialNullDetailHardwareEgress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialNullDetailHardwareEgress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialNullDetailHardwareEgress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialNullDetailHardwareEgress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialNullDetailHardwareEgress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialNullDetailHardwareEgress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialNullDetailHardwareEgress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialNullDetailHardwareEgress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialNullDetailHardwareEgress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialNullDetailHardwareEgress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialNullDetailHardwareEgress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialNullDetailHardwareEgress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialNullDetailHardwareEgress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialNullDetailHardwareEgress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialNullDetailHardwareEgress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialNullDetailHardwareEgress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialNullDetailHardwareEgress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialNullDetailHardwareEgress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialNullDetailHardwareEgress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialNullDetailHardwareEgress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialNullDetailHardwareEgress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialNullDetailHardwareEgress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialNullDetailHardwareEgress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialNullDetailHardwareEgress.SiUpdTs
    return leafs
}

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetYangName() string { return "nh-info-special-null-detail-hardware-egress" }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoSpecialNullDetailHardwareEgress.parent = parent }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetParent() types.Entity { return nhInfoSpecialNullDetailHardwareEgress.parent }

func (nhInfoSpecialNullDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress) GetParentYangName() string { return "nh-info-special-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_SiPwhe) GetParentYangName() string { return "nh-info-special-null-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-null-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialNullDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress
// Detail hardware engress info for
// special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoSpecialPuntDetailHardwareEgress.YFilter }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialPuntDetailHardwareEgress.YFilter = yf }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-special-punt-detail-hardware-egress"
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialPuntDetailHardwareEgress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialPuntDetailHardwareEgress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialPuntDetailHardwareEgress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialPuntDetailHardwareEgress.NhInfoExtension
    return children
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialPuntDetailHardwareEgress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialPuntDetailHardwareEgress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialPuntDetailHardwareEgress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialPuntDetailHardwareEgress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialPuntDetailHardwareEgress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialPuntDetailHardwareEgress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialPuntDetailHardwareEgress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialPuntDetailHardwareEgress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialPuntDetailHardwareEgress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialPuntDetailHardwareEgress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialPuntDetailHardwareEgress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialPuntDetailHardwareEgress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialPuntDetailHardwareEgress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialPuntDetailHardwareEgress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialPuntDetailHardwareEgress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialPuntDetailHardwareEgress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialPuntDetailHardwareEgress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialPuntDetailHardwareEgress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialPuntDetailHardwareEgress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialPuntDetailHardwareEgress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialPuntDetailHardwareEgress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialPuntDetailHardwareEgress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialPuntDetailHardwareEgress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialPuntDetailHardwareEgress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialPuntDetailHardwareEgress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialPuntDetailHardwareEgress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialPuntDetailHardwareEgress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialPuntDetailHardwareEgress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialPuntDetailHardwareEgress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialPuntDetailHardwareEgress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialPuntDetailHardwareEgress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialPuntDetailHardwareEgress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialPuntDetailHardwareEgress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialPuntDetailHardwareEgress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialPuntDetailHardwareEgress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialPuntDetailHardwareEgress.SiUpdTs
    return leafs
}

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetYangName() string { return "nh-info-special-punt-detail-hardware-egress" }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoSpecialPuntDetailHardwareEgress.parent = parent }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetParent() types.Entity { return nhInfoSpecialPuntDetailHardwareEgress.parent }

func (nhInfoSpecialPuntDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress) GetParentYangName() string { return "nh-info-special-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_SiPwhe) GetParentYangName() string { return "nh-info-special-punt-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-punt-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialPuntDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress
// Detail hardware engress info for
// special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoSpecialDiscardDetailHardwareEgress.YFilter }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDiscardDetailHardwareEgress.YFilter = yf }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-special-discard-detail-hardware-egress"
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDiscardDetailHardwareEgress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDiscardDetailHardwareEgress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDiscardDetailHardwareEgress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDiscardDetailHardwareEgress.NhInfoExtension
    return children
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDiscardDetailHardwareEgress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDiscardDetailHardwareEgress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDiscardDetailHardwareEgress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDiscardDetailHardwareEgress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDiscardDetailHardwareEgress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDiscardDetailHardwareEgress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDiscardDetailHardwareEgress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDiscardDetailHardwareEgress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDiscardDetailHardwareEgress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDiscardDetailHardwareEgress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDiscardDetailHardwareEgress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDiscardDetailHardwareEgress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDiscardDetailHardwareEgress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDiscardDetailHardwareEgress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDiscardDetailHardwareEgress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDiscardDetailHardwareEgress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDiscardDetailHardwareEgress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDiscardDetailHardwareEgress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDiscardDetailHardwareEgress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDiscardDetailHardwareEgress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDiscardDetailHardwareEgress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDiscardDetailHardwareEgress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDiscardDetailHardwareEgress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDiscardDetailHardwareEgress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDiscardDetailHardwareEgress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDiscardDetailHardwareEgress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDiscardDetailHardwareEgress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDiscardDetailHardwareEgress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDiscardDetailHardwareEgress.SiUpdTs
    return leafs
}

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetYangName() string { return "nh-info-special-discard-detail-hardware-egress" }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoSpecialDiscardDetailHardwareEgress.parent = parent }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetParent() types.Entity { return nhInfoSpecialDiscardDetailHardwareEgress.parent }

func (nhInfoSpecialDiscardDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress) GetParentYangName() string { return "nh-info-special-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_SiPwhe) GetParentYangName() string { return "nh-info-special-discard-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-discard-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDiscardDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress
// Detail hardware engress info for
// special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoSpecialDropDetailHardwareEgress.YFilter }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDropDetailHardwareEgress.YFilter = yf }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-special-drop-detail-hardware-egress"
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDropDetailHardwareEgress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDropDetailHardwareEgress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDropDetailHardwareEgress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDropDetailHardwareEgress.NhInfoExtension
    return children
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDropDetailHardwareEgress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDropDetailHardwareEgress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDropDetailHardwareEgress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDropDetailHardwareEgress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDropDetailHardwareEgress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDropDetailHardwareEgress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDropDetailHardwareEgress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDropDetailHardwareEgress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDropDetailHardwareEgress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDropDetailHardwareEgress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDropDetailHardwareEgress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDropDetailHardwareEgress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDropDetailHardwareEgress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDropDetailHardwareEgress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDropDetailHardwareEgress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDropDetailHardwareEgress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDropDetailHardwareEgress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDropDetailHardwareEgress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDropDetailHardwareEgress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDropDetailHardwareEgress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDropDetailHardwareEgress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDropDetailHardwareEgress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDropDetailHardwareEgress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDropDetailHardwareEgress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDropDetailHardwareEgress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDropDetailHardwareEgress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDropDetailHardwareEgress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDropDetailHardwareEgress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDropDetailHardwareEgress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDropDetailHardwareEgress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDropDetailHardwareEgress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDropDetailHardwareEgress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDropDetailHardwareEgress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDropDetailHardwareEgress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDropDetailHardwareEgress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDropDetailHardwareEgress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDropDetailHardwareEgress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDropDetailHardwareEgress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDropDetailHardwareEgress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDropDetailHardwareEgress.SiUpdTs
    return leafs
}

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetYangName() string { return "nh-info-special-drop-detail-hardware-egress" }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoSpecialDropDetailHardwareEgress.parent = parent }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetParent() types.Entity { return nhInfoSpecialDropDetailHardwareEgress.parent }

func (nhInfoSpecialDropDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress) GetParentYangName() string { return "nh-info-special-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_SiPwhe) GetParentYangName() string { return "nh-info-special-drop-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-drop-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoSpecialDetailHardwareEgress_NhInfoSpecialDropDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware egress NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress.
    NhInfoLocalDetailHardwareEgress []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetFilter() yfilter.YFilter { return nhInfoLocalDetailHardwareEgresses.YFilter }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) SetFilter(yf yfilter.YFilter) { nhInfoLocalDetailHardwareEgresses.YFilter = yf }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetGoName(yname string) string {
    if yname == "nh-info-local-detail-hardware-egress" { return "NhInfoLocalDetailHardwareEgress" }
    return ""
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetSegmentPath() string {
    return "nh-info-local-detail-hardware-egresses"
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-local-detail-hardware-egress" {
        for _, c := range nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress {
            if nhInfoLocalDetailHardwareEgresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress{}
        nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress = append(nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress, child)
        return &nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress[len(nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress)-1]
    }
    return nil
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress {
        children[nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress[i].GetSegmentPath()] = &nhInfoLocalDetailHardwareEgresses.NhInfoLocalDetailHardwareEgress[i]
    }
    return children
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetYangName() string { return "nh-info-local-detail-hardware-egresses" }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) SetParent(parent types.Entity) { nhInfoLocalDetailHardwareEgresses.parent = parent }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetParent() types.Entity { return nhInfoLocalDetailHardwareEgresses.parent }

func (nhInfoLocalDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses) GetParentYangName() string { return "nh-info-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress
// Detail hardware egress NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoLocalDetailHardwareEgress.YFilter }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoLocalDetailHardwareEgress.YFilter = yf }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-local-detail-hardware-egress"
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoLocalDetailHardwareEgress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoLocalDetailHardwareEgress.NhInfoExtension
    }
    return nil
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoLocalDetailHardwareEgress.SiPwhe
    children["nh-info-extension"] = &nhInfoLocalDetailHardwareEgress.NhInfoExtension
    return children
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoLocalDetailHardwareEgress.NhInterfaceName
    leafs["nh-address"] = nhInfoLocalDetailHardwareEgress.NhAddress
    leafs["si-link-proto"] = nhInfoLocalDetailHardwareEgress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoLocalDetailHardwareEgress.SiNhinfo
    leafs["si-nhtype"] = nhInfoLocalDetailHardwareEgress.SiNhtype
    leafs["si-ifh"] = nhInfoLocalDetailHardwareEgress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoLocalDetailHardwareEgress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoLocalDetailHardwareEgress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoLocalDetailHardwareEgress.SiAdjPresent
    leafs["si-special-type"] = nhInfoLocalDetailHardwareEgress.SiSpecialType
    leafs["si-refcount"] = nhInfoLocalDetailHardwareEgress.SiRefcount
    leafs["si-flags"] = nhInfoLocalDetailHardwareEgress.SiFlags
    leafs["si-adj-if"] = nhInfoLocalDetailHardwareEgress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoLocalDetailHardwareEgress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoLocalDetailHardwareEgress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoLocalDetailHardwareEgress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoLocalDetailHardwareEgress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoLocalDetailHardwareEgress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoLocalDetailHardwareEgress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoLocalDetailHardwareEgress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoLocalDetailHardwareEgress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoLocalDetailHardwareEgress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoLocalDetailHardwareEgress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoLocalDetailHardwareEgress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoLocalDetailHardwareEgress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoLocalDetailHardwareEgress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoLocalDetailHardwareEgress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoLocalDetailHardwareEgress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoLocalDetailHardwareEgress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoLocalDetailHardwareEgress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoLocalDetailHardwareEgress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoLocalDetailHardwareEgress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoLocalDetailHardwareEgress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoLocalDetailHardwareEgress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoLocalDetailHardwareEgress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoLocalDetailHardwareEgress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoLocalDetailHardwareEgress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoLocalDetailHardwareEgress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoLocalDetailHardwareEgress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoLocalDetailHardwareEgress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoLocalDetailHardwareEgress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoLocalDetailHardwareEgress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoLocalDetailHardwareEgress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoLocalDetailHardwareEgress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoLocalDetailHardwareEgress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoLocalDetailHardwareEgress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoLocalDetailHardwareEgress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoLocalDetailHardwareEgress.SiNhid
    leafs["si-upd-ts"] = nhInfoLocalDetailHardwareEgress.SiUpdTs
    return leafs
}

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetYangName() string { return "nh-info-local-detail-hardware-egress" }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoLocalDetailHardwareEgress.parent = parent }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetParent() types.Entity { return nhInfoLocalDetailHardwareEgress.parent }

func (nhInfoLocalDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress) GetParentYangName() string { return "nh-info-local-detail-hardware-egresses" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_SiPwhe) GetParentYangName() string { return "nh-info-local-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension) GetParentYangName() string { return "nh-info-local-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoLocalDetailHardwareEgresses_NhInfoLocalDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses
// Detail hardware egress info for remote
// NHInfo table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware egress info for NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress.
    NhInfoRemoteDetailHardwareEgress []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetFilter() yfilter.YFilter { return nhInfoRemoteDetailHardwareEgresses.YFilter }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) SetFilter(yf yfilter.YFilter) { nhInfoRemoteDetailHardwareEgresses.YFilter = yf }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetGoName(yname string) string {
    if yname == "nh-info-remote-detail-hardware-egress" { return "NhInfoRemoteDetailHardwareEgress" }
    return ""
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetSegmentPath() string {
    return "nh-info-remote-detail-hardware-egresses"
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-remote-detail-hardware-egress" {
        for _, c := range nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress {
            if nhInfoRemoteDetailHardwareEgresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress{}
        nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress = append(nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress, child)
        return &nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress[len(nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress)-1]
    }
    return nil
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress {
        children[nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress[i].GetSegmentPath()] = &nhInfoRemoteDetailHardwareEgresses.NhInfoRemoteDetailHardwareEgress[i]
    }
    return children
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetYangName() string { return "nh-info-remote-detail-hardware-egresses" }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) SetParent(parent types.Entity) { nhInfoRemoteDetailHardwareEgresses.parent = parent }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetParent() types.Entity { return nhInfoRemoteDetailHardwareEgresses.parent }

func (nhInfoRemoteDetailHardwareEgresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses) GetParentYangName() string { return "nh-info-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress
// Detail hardware egress info for NHinfo
// entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetFilter() yfilter.YFilter { return nhInfoRemoteDetailHardwareEgress.YFilter }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) SetFilter(yf yfilter.YFilter) { nhInfoRemoteDetailHardwareEgress.YFilter = yf }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetSegmentPath() string {
    return "nh-info-remote-detail-hardware-egress"
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoRemoteDetailHardwareEgress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoRemoteDetailHardwareEgress.NhInfoExtension
    }
    return nil
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoRemoteDetailHardwareEgress.SiPwhe
    children["nh-info-extension"] = &nhInfoRemoteDetailHardwareEgress.NhInfoExtension
    return children
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoRemoteDetailHardwareEgress.NhInterfaceName
    leafs["nh-address"] = nhInfoRemoteDetailHardwareEgress.NhAddress
    leafs["si-link-proto"] = nhInfoRemoteDetailHardwareEgress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoRemoteDetailHardwareEgress.SiNhinfo
    leafs["si-nhtype"] = nhInfoRemoteDetailHardwareEgress.SiNhtype
    leafs["si-ifh"] = nhInfoRemoteDetailHardwareEgress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoRemoteDetailHardwareEgress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoRemoteDetailHardwareEgress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoRemoteDetailHardwareEgress.SiAdjPresent
    leafs["si-special-type"] = nhInfoRemoteDetailHardwareEgress.SiSpecialType
    leafs["si-refcount"] = nhInfoRemoteDetailHardwareEgress.SiRefcount
    leafs["si-flags"] = nhInfoRemoteDetailHardwareEgress.SiFlags
    leafs["si-adj-if"] = nhInfoRemoteDetailHardwareEgress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoRemoteDetailHardwareEgress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoRemoteDetailHardwareEgress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoRemoteDetailHardwareEgress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoRemoteDetailHardwareEgress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoRemoteDetailHardwareEgress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoRemoteDetailHardwareEgress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoRemoteDetailHardwareEgress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoRemoteDetailHardwareEgress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoRemoteDetailHardwareEgress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoRemoteDetailHardwareEgress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoRemoteDetailHardwareEgress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoRemoteDetailHardwareEgress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoRemoteDetailHardwareEgress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoRemoteDetailHardwareEgress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoRemoteDetailHardwareEgress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoRemoteDetailHardwareEgress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoRemoteDetailHardwareEgress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoRemoteDetailHardwareEgress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoRemoteDetailHardwareEgress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoRemoteDetailHardwareEgress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoRemoteDetailHardwareEgress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoRemoteDetailHardwareEgress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoRemoteDetailHardwareEgress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoRemoteDetailHardwareEgress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoRemoteDetailHardwareEgress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoRemoteDetailHardwareEgress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoRemoteDetailHardwareEgress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoRemoteDetailHardwareEgress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoRemoteDetailHardwareEgress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoRemoteDetailHardwareEgress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoRemoteDetailHardwareEgress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoRemoteDetailHardwareEgress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoRemoteDetailHardwareEgress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoRemoteDetailHardwareEgress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoRemoteDetailHardwareEgress.SiNhid
    leafs["si-upd-ts"] = nhInfoRemoteDetailHardwareEgress.SiUpdTs
    return leafs
}

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetYangName() string { return "nh-info-remote-detail-hardware-egress" }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) SetParent(parent types.Entity) { nhInfoRemoteDetailHardwareEgress.parent = parent }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetParent() types.Entity { return nhInfoRemoteDetailHardwareEgress.parent }

func (nhInfoRemoteDetailHardwareEgress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress) GetParentYangName() string { return "nh-info-remote-detail-hardware-egresses" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_SiPwhe) GetParentYangName() string { return "nh-info-remote-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension) GetParentYangName() string { return "nh-info-remote-detail-hardware-egress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareEgress_NhInfoRemoteDetailHardwareEgresses_NhInfoRemoteDetailHardwareEgress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails
// IP FIB prefix detail table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP FIB prefix detail table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail.
    IpPrefixDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetFilter() yfilter.YFilter { return ipPrefixDetails.YFilter }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) SetFilter(yf yfilter.YFilter) { ipPrefixDetails.YFilter = yf }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetGoName(yname string) string {
    if yname == "ip-prefix-detail" { return "IpPrefixDetail" }
    return ""
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetSegmentPath() string {
    return "ip-prefix-details"
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-prefix-detail" {
        for _, c := range ipPrefixDetails.IpPrefixDetail {
            if ipPrefixDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail{}
        ipPrefixDetails.IpPrefixDetail = append(ipPrefixDetails.IpPrefixDetail, child)
        return &ipPrefixDetails.IpPrefixDetail[len(ipPrefixDetails.IpPrefixDetail)-1]
    }
    return nil
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipPrefixDetails.IpPrefixDetail {
        children[ipPrefixDetails.IpPrefixDetail[i].GetSegmentPath()] = &ipPrefixDetails.IpPrefixDetail[i]
    }
    return children
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetYangName() string { return "ip-prefix-details" }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) SetParent(parent types.Entity) { ipPrefixDetails.parent = parent }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetParent() types.Entity { return ipPrefixDetails.parent }

func (ipPrefixDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail
// IP FIB prefix detail table entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination IP address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IP prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Proto type for this entry. The type is interface{} with range:
    // 0..4294967295.
    ProtocolTypeFibEntry interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardware interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToPathList interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // The pathlist source. The type is interface{} with range: 0..4294967295.
    PathListSource interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToLdi interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The flags of ext assocaited with LDI . The type is interface{} with range:
    // 0..4294967295.
    FlagsExternalLdi interface{}

    // The pointer to the ext assocaited with LDI. The type is interface{} with
    // range: 0..4294967295.
    PointerExternalLdi interface{}

    // exact-path interface handle. The type is interface{} with range:
    // 0..4294967295.
    ExactPathInterfaceHandle interface{}

    // exact-path GRE physical interface handle. The type is interface{} with
    // range: 0..4294967295.
    ExactPathGreInterfaceHandle interface{}

    // exact-route GRE phy ifh available. The type is bool.
    ExactRouteGrePhysIfhAvail interface{}

    // exact-route result. The type is bool.
    ExactRouteResult interface{}

    // Prefix is static or connected. The type is bool.
    PrefixIsStaticOrConnected interface{}

    // Packet should always be received. The type is bool.
    PacketShouldRecieve interface{}

    // Prefix is connected. The type is bool.
    PrefixConnected interface{}

    // Prefix is for an adjacency. The type is bool.
    PrefixForAdjancency interface{}

    // Prefix is for a PIC nexthop. The type is bool.
    PrefixForPicNextHop interface{}

    // Purgable after the purge interval. The type is bool.
    PurgableAfterPurgeInterval interface{}

    // Broadcast receive flag. The type is bool.
    BroadcastReciveFlag interface{}

    // Broadcast forward flag. The type is bool.
    BroadcastForwardFlag interface{}

    // 0/0 route added as default route. The type is bool.
    ZeroByZeroRouteAsDefault interface{}

    // External switch function triggered. The type is bool.
    ExternalSwitchTriggered interface{}

    // Route attributes summary flag. The type is bool.
    RouteAttributeFlag interface{}

    // Dummy real zero route. The type is bool.
    DummyRealZeroRoute interface{}

    // The LDI LW flags. The type is interface{} with range: 0..4294967295.
    LdiLwFlag interface{}

    // The refcounter of LDI LW LDI. The type is interface{} with range:
    // 0..4294967295.
    RefCounterOfLdiLwLdi interface{}

    // The type of LDI LW LDI. The type is interface{} with range: 0..4294967295.
    TypeOfLdiLwLdi interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    VersionOfRoute interface{}

    // Priority at which the route was downloaded. The type is interface{} with
    // range: 0..4294967295.
    FibRouteDownloadPriority interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}

    // Is L2 Subscriber route. The type is bool.
    L2SubscriberRoute interface{}

    // XConnect-id associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberXconnectId interface{}

    // IP protocol associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberIpProtocol interface{}

    // L2TPv3 cookie length for L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2Tpv3CookieLengthBits interface{}

    // Route destined for Line Card that support External Reach only. The type is
    // bool.
    RouteForExternalReachLinecardFlag interface{}

    // Route is a MPLS Segment-Routing prefix. The type is bool.
    RouteIsSrFlag interface{}

    // Detailed FIB entry information.
    DetailFibEntryInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation

    // FIB entry path details.
    FibEntryPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath

    // Information about IPv6 SR prefix.
    Srv6Information Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information

    // Leaf Extension Object List. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject.
    ExtensionObject []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetFilter() yfilter.YFilter { return ipPrefixDetail.YFilter }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) SetFilter(yf yfilter.YFilter) { ipPrefixDetail.YFilter = yf }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol-type-fib-entry" { return "ProtocolTypeFibEntry" }
    if yname == "platform-hardware" { return "PlatformHardware" }
    if yname == "number-of-referances-to-path-list" { return "NumberOfReferancesToPathList" }
    if yname == "path-list-flags" { return "PathListFlags" }
    if yname == "path-list-source" { return "PathListSource" }
    if yname == "number-of-referances-to-ldi" { return "NumberOfReferancesToLdi" }
    if yname == "ldi-flags" { return "LdiFlags" }
    if yname == "flags-external-ldi" { return "FlagsExternalLdi" }
    if yname == "pointer-external-ldi" { return "PointerExternalLdi" }
    if yname == "exact-path-interface-handle" { return "ExactPathInterfaceHandle" }
    if yname == "exact-path-gre-interface-handle" { return "ExactPathGreInterfaceHandle" }
    if yname == "exact-route-gre-phys-ifh-avail" { return "ExactRouteGrePhysIfhAvail" }
    if yname == "exact-route-result" { return "ExactRouteResult" }
    if yname == "prefix-is-static-or-connected" { return "PrefixIsStaticOrConnected" }
    if yname == "packet-should-recieve" { return "PacketShouldRecieve" }
    if yname == "prefix-connected" { return "PrefixConnected" }
    if yname == "prefix-for-adjancency" { return "PrefixForAdjancency" }
    if yname == "prefix-for-pic-next-hop" { return "PrefixForPicNextHop" }
    if yname == "purgable-after-purge-interval" { return "PurgableAfterPurgeInterval" }
    if yname == "broadcast-recive-flag" { return "BroadcastReciveFlag" }
    if yname == "broadcast-forward-flag" { return "BroadcastForwardFlag" }
    if yname == "zero-by-zero-route-as-default" { return "ZeroByZeroRouteAsDefault" }
    if yname == "external-switch-triggered" { return "ExternalSwitchTriggered" }
    if yname == "route-attribute-flag" { return "RouteAttributeFlag" }
    if yname == "dummy-real-zero-route" { return "DummyRealZeroRoute" }
    if yname == "ldi-lw-flag" { return "LdiLwFlag" }
    if yname == "ref-counter-of-ldi-lw-ldi" { return "RefCounterOfLdiLwLdi" }
    if yname == "type-of-ldi-lw-ldi" { return "TypeOfLdiLwLdi" }
    if yname == "lspa-flags" { return "LspaFlags" }
    if yname == "version-of-route" { return "VersionOfRoute" }
    if yname == "fib-route-download-priority" { return "FibRouteDownloadPriority" }
    if yname == "time-of-last-update-in-msec" { return "TimeOfLastUpdateInMsec" }
    if yname == "l2-subscriber-route" { return "L2SubscriberRoute" }
    if yname == "l2-subscriber-xconnect-id" { return "L2SubscriberXconnectId" }
    if yname == "l2-subscriber-ip-protocol" { return "L2SubscriberIpProtocol" }
    if yname == "l2tpv3-cookie-length-bits" { return "L2Tpv3CookieLengthBits" }
    if yname == "route-for-external-reach-linecard-flag" { return "RouteForExternalReachLinecardFlag" }
    if yname == "route-is-sr-flag" { return "RouteIsSrFlag" }
    if yname == "detail-fib-entry-information" { return "DetailFibEntryInformation" }
    if yname == "fib-entry-path" { return "FibEntryPath" }
    if yname == "srv6-information" { return "Srv6Information" }
    if yname == "extension-object" { return "ExtensionObject" }
    return ""
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetSegmentPath() string {
    return "ip-prefix-detail"
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-fib-entry-information" {
        return &ipPrefixDetail.DetailFibEntryInformation
    }
    if childYangName == "fib-entry-path" {
        return &ipPrefixDetail.FibEntryPath
    }
    if childYangName == "srv6-information" {
        return &ipPrefixDetail.Srv6Information
    }
    if childYangName == "extension-object" {
        for _, c := range ipPrefixDetail.ExtensionObject {
            if ipPrefixDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject{}
        ipPrefixDetail.ExtensionObject = append(ipPrefixDetail.ExtensionObject, child)
        return &ipPrefixDetail.ExtensionObject[len(ipPrefixDetail.ExtensionObject)-1]
    }
    return nil
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["detail-fib-entry-information"] = &ipPrefixDetail.DetailFibEntryInformation
    children["fib-entry-path"] = &ipPrefixDetail.FibEntryPath
    children["srv6-information"] = &ipPrefixDetail.Srv6Information
    for i := range ipPrefixDetail.ExtensionObject {
        children[ipPrefixDetail.ExtensionObject[i].GetSegmentPath()] = &ipPrefixDetail.ExtensionObject[i]
    }
    return children
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipPrefixDetail.Prefix
    leafs["prefix-length"] = ipPrefixDetail.PrefixLength
    leafs["protocol-type-fib-entry"] = ipPrefixDetail.ProtocolTypeFibEntry
    leafs["platform-hardware"] = ipPrefixDetail.PlatformHardware
    leafs["number-of-referances-to-path-list"] = ipPrefixDetail.NumberOfReferancesToPathList
    leafs["path-list-flags"] = ipPrefixDetail.PathListFlags
    leafs["path-list-source"] = ipPrefixDetail.PathListSource
    leafs["number-of-referances-to-ldi"] = ipPrefixDetail.NumberOfReferancesToLdi
    leafs["ldi-flags"] = ipPrefixDetail.LdiFlags
    leafs["flags-external-ldi"] = ipPrefixDetail.FlagsExternalLdi
    leafs["pointer-external-ldi"] = ipPrefixDetail.PointerExternalLdi
    leafs["exact-path-interface-handle"] = ipPrefixDetail.ExactPathInterfaceHandle
    leafs["exact-path-gre-interface-handle"] = ipPrefixDetail.ExactPathGreInterfaceHandle
    leafs["exact-route-gre-phys-ifh-avail"] = ipPrefixDetail.ExactRouteGrePhysIfhAvail
    leafs["exact-route-result"] = ipPrefixDetail.ExactRouteResult
    leafs["prefix-is-static-or-connected"] = ipPrefixDetail.PrefixIsStaticOrConnected
    leafs["packet-should-recieve"] = ipPrefixDetail.PacketShouldRecieve
    leafs["prefix-connected"] = ipPrefixDetail.PrefixConnected
    leafs["prefix-for-adjancency"] = ipPrefixDetail.PrefixForAdjancency
    leafs["prefix-for-pic-next-hop"] = ipPrefixDetail.PrefixForPicNextHop
    leafs["purgable-after-purge-interval"] = ipPrefixDetail.PurgableAfterPurgeInterval
    leafs["broadcast-recive-flag"] = ipPrefixDetail.BroadcastReciveFlag
    leafs["broadcast-forward-flag"] = ipPrefixDetail.BroadcastForwardFlag
    leafs["zero-by-zero-route-as-default"] = ipPrefixDetail.ZeroByZeroRouteAsDefault
    leafs["external-switch-triggered"] = ipPrefixDetail.ExternalSwitchTriggered
    leafs["route-attribute-flag"] = ipPrefixDetail.RouteAttributeFlag
    leafs["dummy-real-zero-route"] = ipPrefixDetail.DummyRealZeroRoute
    leafs["ldi-lw-flag"] = ipPrefixDetail.LdiLwFlag
    leafs["ref-counter-of-ldi-lw-ldi"] = ipPrefixDetail.RefCounterOfLdiLwLdi
    leafs["type-of-ldi-lw-ldi"] = ipPrefixDetail.TypeOfLdiLwLdi
    leafs["lspa-flags"] = ipPrefixDetail.LspaFlags
    leafs["version-of-route"] = ipPrefixDetail.VersionOfRoute
    leafs["fib-route-download-priority"] = ipPrefixDetail.FibRouteDownloadPriority
    leafs["time-of-last-update-in-msec"] = ipPrefixDetail.TimeOfLastUpdateInMsec
    leafs["l2-subscriber-route"] = ipPrefixDetail.L2SubscriberRoute
    leafs["l2-subscriber-xconnect-id"] = ipPrefixDetail.L2SubscriberXconnectId
    leafs["l2-subscriber-ip-protocol"] = ipPrefixDetail.L2SubscriberIpProtocol
    leafs["l2tpv3-cookie-length-bits"] = ipPrefixDetail.L2Tpv3CookieLengthBits
    leafs["route-for-external-reach-linecard-flag"] = ipPrefixDetail.RouteForExternalReachLinecardFlag
    leafs["route-is-sr-flag"] = ipPrefixDetail.RouteIsSrFlag
    return leafs
}

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetYangName() string { return "ip-prefix-detail" }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) SetParent(parent types.Entity) { ipPrefixDetail.parent = parent }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetParent() types.Entity { return ipPrefixDetail.parent }

func (ipPrefixDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail) GetParentYangName() string { return "ip-prefix-details" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation
// Detailed FIB entry information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB entry version number. The type is interface{} with range:
    // 0..4294967295.
    FibEntryVersion interface{}

    // Per Prefix Accounting. The type is interface{} with range: 0..255.
    PerPrefixAccounting interface{}

    // Load sharing type. The type is FibLoadshareShow.
    LoadSharingType interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    FibEntryAdjacencyType interface{}

    // FIB Protocol type. The type is interface{} with range: 0..4294967295.
    FibProtocolType interface{}

    // AFI FIB protocol type. The type is interface{} with range: 0..4294967295.
    AfiFibProtocolType interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    AibL3Address interface{}

    // ADJ ADDR LEN. The type is interface{} with range: 0..4294967295.
    AdjacencyAddressLength interface{}

    // ADJ IFH. The type is interface{} with range: 0..4294967295.
    AdjacencyInterface interface{}

    // FIB Special NHINFO Type. The type is interface{} with range: 0..4294967295.
    FibSpecialNhInformationType interface{}

    // FIB entry adj address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    FibEntryAdjacencyAddress interface{}

    // FIB entry adjacency interface. The type is interface{} with range:
    // 0..4294967295.
    FibEntryAdjacencyInterface interface{}

    // Packets through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughFibEntry interface{}

    // Bytes through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughFibEntry interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    DetailedPrefixLength interface{}

    // Prefix protocol. The type is interface{} with range: 0..4294967295.
    PrefixProtocol interface{}

    // Precedence for packets to this entry. The type is interface{} with range:
    // 0..255.
    PrecedenceForpackets interface{}

    // Traffic index for packets to this entry. The type is interface{} with
    // range: 0..255.
    TrafficIndexForPackets interface{}

    // Switch function compontent ID. The type is interface{} with range:
    // 0..4294967295.
    SwitchCompontentId interface{}

    // Fast adjacency flag. The type is bool.
    FastAdjacencyFlag interface{}

    // Illegal fast adjacency flag. The type is bool.
    IllegalFastAdjacencyFlag interface{}

    // Remote adjacency flag. The type is bool.
    RemoteAdjacencyFlag interface{}

    // BGP attribute id. The type is interface{} with range: 0..4294967295.
    BgpAttributeId interface{}

    // BGP local attribute id. The type is interface{} with range: 0..4294967295.
    BgpLocalAttributeId interface{}

    // BGP attribute origin as. The type is interface{} with range: 0..4294967295.
    BgpAttributeOriginAs interface{}

    // BGP attribute next hop as. The type is interface{} with range:
    // 0..4294967295.
    BgpAttributeNextHopAs interface{}

    // As path string. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathString interface{}

    // extcom st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtcomString interface{}

    // com st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ComString interface{}

    // extended community. The type is interface{} with range: 0..4294967295.
    ExtendedCommunity interface{}

    // qos group. The type is interface{} with range: 0..4294967295.
    QosGroup interface{}

    // mpls fec. The type is interface{} with range: 0..4294967295.
    MplsFec interface{}

    // qppb QOS group and IP precedence. The type is interface{} with range:
    // 0..4294967295.
    QppbQosGroupAndIpPrecedence interface{}

    // PBR flow-tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // SPP forwarding class ID. The type is interface{} with range: 0..255.
    ForwardClass interface{}

    // The time of last update for PL in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    PlTimeOfLastUpdateInMsec interface{}

    // The time of last update for LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LdiTimeOfLastUpdateInMsec interface{}

    // The time of last update for LW-LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LwldiTimeOfLastUpdateInMsec interface{}

    // The type of time-stamp on PL. The type is interface{} with range:
    // 0..4294967295.
    PlTimeStampType interface{}

    // Detailed Loadshare info.
    LoadshareInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetFilter() yfilter.YFilter { return detailFibEntryInformation.YFilter }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) SetFilter(yf yfilter.YFilter) { detailFibEntryInformation.YFilter = yf }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetGoName(yname string) string {
    if yname == "fib-entry-version" { return "FibEntryVersion" }
    if yname == "per-prefix-accounting" { return "PerPrefixAccounting" }
    if yname == "load-sharing-type" { return "LoadSharingType" }
    if yname == "fib-entry-adjacency-type" { return "FibEntryAdjacencyType" }
    if yname == "fib-protocol-type" { return "FibProtocolType" }
    if yname == "afi-fib-protocol-type" { return "AfiFibProtocolType" }
    if yname == "aib-l3-address" { return "AibL3Address" }
    if yname == "adjacency-address-length" { return "AdjacencyAddressLength" }
    if yname == "adjacency-interface" { return "AdjacencyInterface" }
    if yname == "fib-special-nh-information-type" { return "FibSpecialNhInformationType" }
    if yname == "fib-entry-adjacency-address" { return "FibEntryAdjacencyAddress" }
    if yname == "fib-entry-adjacency-interface" { return "FibEntryAdjacencyInterface" }
    if yname == "packets-through-fib-entry" { return "PacketsThroughFibEntry" }
    if yname == "bytes-through-fib-entry" { return "BytesThroughFibEntry" }
    if yname == "detailed-prefix-length" { return "DetailedPrefixLength" }
    if yname == "prefix-protocol" { return "PrefixProtocol" }
    if yname == "precedence-forpackets" { return "PrecedenceForpackets" }
    if yname == "traffic-index-for-packets" { return "TrafficIndexForPackets" }
    if yname == "switch-compontent-id" { return "SwitchCompontentId" }
    if yname == "fast-adjacency-flag" { return "FastAdjacencyFlag" }
    if yname == "illegal-fast-adjacency-flag" { return "IllegalFastAdjacencyFlag" }
    if yname == "remote-adjacency-flag" { return "RemoteAdjacencyFlag" }
    if yname == "bgp-attribute-id" { return "BgpAttributeId" }
    if yname == "bgp-local-attribute-id" { return "BgpLocalAttributeId" }
    if yname == "bgp-attribute-origin-as" { return "BgpAttributeOriginAs" }
    if yname == "bgp-attribute-next-hop-as" { return "BgpAttributeNextHopAs" }
    if yname == "path-string" { return "PathString" }
    if yname == "extcom-string" { return "ExtcomString" }
    if yname == "com-string" { return "ComString" }
    if yname == "extended-community" { return "ExtendedCommunity" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "mpls-fec" { return "MplsFec" }
    if yname == "qppb-qos-group-and-ip-precedence" { return "QppbQosGroupAndIpPrecedence" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "forward-class" { return "ForwardClass" }
    if yname == "pl-time-of-last-update-in-msec" { return "PlTimeOfLastUpdateInMsec" }
    if yname == "ldi-time-of-last-update-in-msec" { return "LdiTimeOfLastUpdateInMsec" }
    if yname == "lwldi-time-of-last-update-in-msec" { return "LwldiTimeOfLastUpdateInMsec" }
    if yname == "pl-time-stamp-type" { return "PlTimeStampType" }
    if yname == "loadshare-information" { return "LoadshareInformation" }
    return ""
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetSegmentPath() string {
    return "detail-fib-entry-information"
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loadshare-information" {
        return &detailFibEntryInformation.LoadshareInformation
    }
    return nil
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["loadshare-information"] = &detailFibEntryInformation.LoadshareInformation
    return children
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fib-entry-version"] = detailFibEntryInformation.FibEntryVersion
    leafs["per-prefix-accounting"] = detailFibEntryInformation.PerPrefixAccounting
    leafs["load-sharing-type"] = detailFibEntryInformation.LoadSharingType
    leafs["fib-entry-adjacency-type"] = detailFibEntryInformation.FibEntryAdjacencyType
    leafs["fib-protocol-type"] = detailFibEntryInformation.FibProtocolType
    leafs["afi-fib-protocol-type"] = detailFibEntryInformation.AfiFibProtocolType
    leafs["aib-l3-address"] = detailFibEntryInformation.AibL3Address
    leafs["adjacency-address-length"] = detailFibEntryInformation.AdjacencyAddressLength
    leafs["adjacency-interface"] = detailFibEntryInformation.AdjacencyInterface
    leafs["fib-special-nh-information-type"] = detailFibEntryInformation.FibSpecialNhInformationType
    leafs["fib-entry-adjacency-address"] = detailFibEntryInformation.FibEntryAdjacencyAddress
    leafs["fib-entry-adjacency-interface"] = detailFibEntryInformation.FibEntryAdjacencyInterface
    leafs["packets-through-fib-entry"] = detailFibEntryInformation.PacketsThroughFibEntry
    leafs["bytes-through-fib-entry"] = detailFibEntryInformation.BytesThroughFibEntry
    leafs["detailed-prefix-length"] = detailFibEntryInformation.DetailedPrefixLength
    leafs["prefix-protocol"] = detailFibEntryInformation.PrefixProtocol
    leafs["precedence-forpackets"] = detailFibEntryInformation.PrecedenceForpackets
    leafs["traffic-index-for-packets"] = detailFibEntryInformation.TrafficIndexForPackets
    leafs["switch-compontent-id"] = detailFibEntryInformation.SwitchCompontentId
    leafs["fast-adjacency-flag"] = detailFibEntryInformation.FastAdjacencyFlag
    leafs["illegal-fast-adjacency-flag"] = detailFibEntryInformation.IllegalFastAdjacencyFlag
    leafs["remote-adjacency-flag"] = detailFibEntryInformation.RemoteAdjacencyFlag
    leafs["bgp-attribute-id"] = detailFibEntryInformation.BgpAttributeId
    leafs["bgp-local-attribute-id"] = detailFibEntryInformation.BgpLocalAttributeId
    leafs["bgp-attribute-origin-as"] = detailFibEntryInformation.BgpAttributeOriginAs
    leafs["bgp-attribute-next-hop-as"] = detailFibEntryInformation.BgpAttributeNextHopAs
    leafs["path-string"] = detailFibEntryInformation.PathString
    leafs["extcom-string"] = detailFibEntryInformation.ExtcomString
    leafs["com-string"] = detailFibEntryInformation.ComString
    leafs["extended-community"] = detailFibEntryInformation.ExtendedCommunity
    leafs["qos-group"] = detailFibEntryInformation.QosGroup
    leafs["mpls-fec"] = detailFibEntryInformation.MplsFec
    leafs["qppb-qos-group-and-ip-precedence"] = detailFibEntryInformation.QppbQosGroupAndIpPrecedence
    leafs["flow-tag"] = detailFibEntryInformation.FlowTag
    leafs["forward-class"] = detailFibEntryInformation.ForwardClass
    leafs["pl-time-of-last-update-in-msec"] = detailFibEntryInformation.PlTimeOfLastUpdateInMsec
    leafs["ldi-time-of-last-update-in-msec"] = detailFibEntryInformation.LdiTimeOfLastUpdateInMsec
    leafs["lwldi-time-of-last-update-in-msec"] = detailFibEntryInformation.LwldiTimeOfLastUpdateInMsec
    leafs["pl-time-stamp-type"] = detailFibEntryInformation.PlTimeStampType
    return leafs
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetBundleName() string { return "cisco_ios_xr" }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetYangName() string { return "detail-fib-entry-information" }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) SetParent(parent types.Entity) { detailFibEntryInformation.parent = parent }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetParent() types.Entity { return detailFibEntryInformation.parent }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation) GetParentYangName() string { return "ip-prefix-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation
// Detailed Loadshare info
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughLoadInformation interface{}

    // Bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughLoadInformation interface{}

    // Total packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalPacketsThroughLoadInformation interface{}

    // Total bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TotalBytesThroughLoadInformation interface{}

    // Prefix of the owner. The type is interface{} with range: 0..4294967295.
    PrefixOfOwner interface{}

    // Mask length of the owner. The type is interface{} with range:
    // 0..4294967295.
    MaskLengthOfOwner interface{}

    // Loadinfo reference count. The type is interface{} with range: 0..65535.
    LoadInformationReferenceCount interface{}

    // Per destination load sharing flag. The type is bool.
    PerDestLoadSharingFlag interface{}

    // Loadinfo owner deleted flag. The type is bool.
    LoadInformationOwnerDeletedFlag interface{}

    // Loadinfo sanity flag. The type is bool.
    LoadinfoSanityFlag interface{}

    // Owner flag. The type is bool.
    IsOwner interface{}

    // Loadinfo internal data.
    LoadInformtionInternalData Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetFilter() yfilter.YFilter { return loadshareInformation.YFilter }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) SetFilter(yf yfilter.YFilter) { loadshareInformation.YFilter = yf }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetGoName(yname string) string {
    if yname == "packets-through-load-information" { return "PacketsThroughLoadInformation" }
    if yname == "bytes-through-load-information" { return "BytesThroughLoadInformation" }
    if yname == "total-packets-through-load-information" { return "TotalPacketsThroughLoadInformation" }
    if yname == "total-bytes-through-load-information" { return "TotalBytesThroughLoadInformation" }
    if yname == "prefix-of-owner" { return "PrefixOfOwner" }
    if yname == "mask-length-of-owner" { return "MaskLengthOfOwner" }
    if yname == "load-information-reference-count" { return "LoadInformationReferenceCount" }
    if yname == "per-dest-load-sharing-flag" { return "PerDestLoadSharingFlag" }
    if yname == "load-information-owner-deleted-flag" { return "LoadInformationOwnerDeletedFlag" }
    if yname == "loadinfo-sanity-flag" { return "LoadinfoSanityFlag" }
    if yname == "is-owner" { return "IsOwner" }
    if yname == "load-informtion-internal-data" { return "LoadInformtionInternalData" }
    return ""
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetSegmentPath() string {
    return "loadshare-information"
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "load-informtion-internal-data" {
        return &loadshareInformation.LoadInformtionInternalData
    }
    return nil
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["load-informtion-internal-data"] = &loadshareInformation.LoadInformtionInternalData
    return children
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["packets-through-load-information"] = loadshareInformation.PacketsThroughLoadInformation
    leafs["bytes-through-load-information"] = loadshareInformation.BytesThroughLoadInformation
    leafs["total-packets-through-load-information"] = loadshareInformation.TotalPacketsThroughLoadInformation
    leafs["total-bytes-through-load-information"] = loadshareInformation.TotalBytesThroughLoadInformation
    leafs["prefix-of-owner"] = loadshareInformation.PrefixOfOwner
    leafs["mask-length-of-owner"] = loadshareInformation.MaskLengthOfOwner
    leafs["load-information-reference-count"] = loadshareInformation.LoadInformationReferenceCount
    leafs["per-dest-load-sharing-flag"] = loadshareInformation.PerDestLoadSharingFlag
    leafs["load-information-owner-deleted-flag"] = loadshareInformation.LoadInformationOwnerDeletedFlag
    leafs["loadinfo-sanity-flag"] = loadshareInformation.LoadinfoSanityFlag
    leafs["is-owner"] = loadshareInformation.IsOwner
    return leafs
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetBundleName() string { return "cisco_ios_xr" }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetYangName() string { return "loadshare-information" }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) SetParent(parent types.Entity) { loadshareInformation.parent = parent }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetParent() types.Entity { return loadshareInformation.parent }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation) GetParentYangName() string { return "detail-fib-entry-information" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
// Loadinfo internal data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // level of ldis. The type is interface{} with range: 0..255.
    LevelOfldis interface{}

    // no. of ldis. The type is interface{} with range: 0..255.
    NumberOfLdis interface{}

    // Maximum index of the arrays. The type is interface{} with range:
    // 0..4294967295.
    MaximumIndexArrays interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathIndices interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathLdiNumbers interface{}

    // Maximum slots. The type is interface{} with range: 0..4294967295.
    MaximumSlots interface{}

    // Normalized weights. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NormalizedWeights interface{}

    // Tunnel class value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TunnelClassValue interface{}

    // PBTS info valid flag. The type is bool.
    IsPbtsInfoValid interface{}

    // PBTS class offset. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassOffset interface{}

    // PBTS class num paths. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassNumPaths interface{}

    // PBTS class falls back to class. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsFallbackMappedClass interface{}

    // Round Robin Disable. The type is bool.
    RoundRobinDisable interface{}

    // Number of LDI next hop buckets. The type is interface{} with range: 0..255.
    LdiNextHopBuckets interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardwareInformation interface{}

    // Sanity flag. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag.
    SanityFlag []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag

    // Interface handle. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle.
    InterfaceHandle []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle

    // Weights of paths. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath.
    WeightsOfPath []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath

    // Adjacency address. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress.
    AdjacencyAddress []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress

    // Does PBTS class fall back to drop or any class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped.
    PbtsClassIsFallbackMapped []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped

    // PBTS class falls back to drop. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop.
    PbtsFallbackToDrop []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop

    // Tunnel is forward class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass.
    TunnelIsForwardClass []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetFilter() yfilter.YFilter { return loadInformtionInternalData.YFilter }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) SetFilter(yf yfilter.YFilter) { loadInformtionInternalData.YFilter = yf }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetGoName(yname string) string {
    if yname == "level-ofldis" { return "LevelOfldis" }
    if yname == "number-of-ldis" { return "NumberOfLdis" }
    if yname == "maximum-index-arrays" { return "MaximumIndexArrays" }
    if yname == "path-indices" { return "PathIndices" }
    if yname == "path-ldi-numbers" { return "PathLdiNumbers" }
    if yname == "maximum-slots" { return "MaximumSlots" }
    if yname == "normalized-weights" { return "NormalizedWeights" }
    if yname == "tunnel-class-value" { return "TunnelClassValue" }
    if yname == "is-pbts-info-valid" { return "IsPbtsInfoValid" }
    if yname == "pbts-class-offset" { return "PbtsClassOffset" }
    if yname == "pbts-class-num-paths" { return "PbtsClassNumPaths" }
    if yname == "pbts-fallback-mapped-class" { return "PbtsFallbackMappedClass" }
    if yname == "round-robin-disable" { return "RoundRobinDisable" }
    if yname == "ldi-next-hop-buckets" { return "LdiNextHopBuckets" }
    if yname == "platform-hardware-information" { return "PlatformHardwareInformation" }
    if yname == "sanity-flag" { return "SanityFlag" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "weights-of-path" { return "WeightsOfPath" }
    if yname == "adjacency-address" { return "AdjacencyAddress" }
    if yname == "pbts-class-is-fallback-mapped" { return "PbtsClassIsFallbackMapped" }
    if yname == "pbts-fallback-to-drop" { return "PbtsFallbackToDrop" }
    if yname == "tunnel-is-forward-class" { return "TunnelIsForwardClass" }
    return ""
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetSegmentPath() string {
    return "load-informtion-internal-data"
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sanity-flag" {
        for _, c := range loadInformtionInternalData.SanityFlag {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag{}
        loadInformtionInternalData.SanityFlag = append(loadInformtionInternalData.SanityFlag, child)
        return &loadInformtionInternalData.SanityFlag[len(loadInformtionInternalData.SanityFlag)-1]
    }
    if childYangName == "interface-handle" {
        for _, c := range loadInformtionInternalData.InterfaceHandle {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle{}
        loadInformtionInternalData.InterfaceHandle = append(loadInformtionInternalData.InterfaceHandle, child)
        return &loadInformtionInternalData.InterfaceHandle[len(loadInformtionInternalData.InterfaceHandle)-1]
    }
    if childYangName == "weights-of-path" {
        for _, c := range loadInformtionInternalData.WeightsOfPath {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath{}
        loadInformtionInternalData.WeightsOfPath = append(loadInformtionInternalData.WeightsOfPath, child)
        return &loadInformtionInternalData.WeightsOfPath[len(loadInformtionInternalData.WeightsOfPath)-1]
    }
    if childYangName == "adjacency-address" {
        for _, c := range loadInformtionInternalData.AdjacencyAddress {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress{}
        loadInformtionInternalData.AdjacencyAddress = append(loadInformtionInternalData.AdjacencyAddress, child)
        return &loadInformtionInternalData.AdjacencyAddress[len(loadInformtionInternalData.AdjacencyAddress)-1]
    }
    if childYangName == "pbts-class-is-fallback-mapped" {
        for _, c := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped{}
        loadInformtionInternalData.PbtsClassIsFallbackMapped = append(loadInformtionInternalData.PbtsClassIsFallbackMapped, child)
        return &loadInformtionInternalData.PbtsClassIsFallbackMapped[len(loadInformtionInternalData.PbtsClassIsFallbackMapped)-1]
    }
    if childYangName == "pbts-fallback-to-drop" {
        for _, c := range loadInformtionInternalData.PbtsFallbackToDrop {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop{}
        loadInformtionInternalData.PbtsFallbackToDrop = append(loadInformtionInternalData.PbtsFallbackToDrop, child)
        return &loadInformtionInternalData.PbtsFallbackToDrop[len(loadInformtionInternalData.PbtsFallbackToDrop)-1]
    }
    if childYangName == "tunnel-is-forward-class" {
        for _, c := range loadInformtionInternalData.TunnelIsForwardClass {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass{}
        loadInformtionInternalData.TunnelIsForwardClass = append(loadInformtionInternalData.TunnelIsForwardClass, child)
        return &loadInformtionInternalData.TunnelIsForwardClass[len(loadInformtionInternalData.TunnelIsForwardClass)-1]
    }
    return nil
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range loadInformtionInternalData.SanityFlag {
        children[loadInformtionInternalData.SanityFlag[i].GetSegmentPath()] = &loadInformtionInternalData.SanityFlag[i]
    }
    for i := range loadInformtionInternalData.InterfaceHandle {
        children[loadInformtionInternalData.InterfaceHandle[i].GetSegmentPath()] = &loadInformtionInternalData.InterfaceHandle[i]
    }
    for i := range loadInformtionInternalData.WeightsOfPath {
        children[loadInformtionInternalData.WeightsOfPath[i].GetSegmentPath()] = &loadInformtionInternalData.WeightsOfPath[i]
    }
    for i := range loadInformtionInternalData.AdjacencyAddress {
        children[loadInformtionInternalData.AdjacencyAddress[i].GetSegmentPath()] = &loadInformtionInternalData.AdjacencyAddress[i]
    }
    for i := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
        children[loadInformtionInternalData.PbtsClassIsFallbackMapped[i].GetSegmentPath()] = &loadInformtionInternalData.PbtsClassIsFallbackMapped[i]
    }
    for i := range loadInformtionInternalData.PbtsFallbackToDrop {
        children[loadInformtionInternalData.PbtsFallbackToDrop[i].GetSegmentPath()] = &loadInformtionInternalData.PbtsFallbackToDrop[i]
    }
    for i := range loadInformtionInternalData.TunnelIsForwardClass {
        children[loadInformtionInternalData.TunnelIsForwardClass[i].GetSegmentPath()] = &loadInformtionInternalData.TunnelIsForwardClass[i]
    }
    return children
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level-ofldis"] = loadInformtionInternalData.LevelOfldis
    leafs["number-of-ldis"] = loadInformtionInternalData.NumberOfLdis
    leafs["maximum-index-arrays"] = loadInformtionInternalData.MaximumIndexArrays
    leafs["path-indices"] = loadInformtionInternalData.PathIndices
    leafs["path-ldi-numbers"] = loadInformtionInternalData.PathLdiNumbers
    leafs["maximum-slots"] = loadInformtionInternalData.MaximumSlots
    leafs["normalized-weights"] = loadInformtionInternalData.NormalizedWeights
    leafs["tunnel-class-value"] = loadInformtionInternalData.TunnelClassValue
    leafs["is-pbts-info-valid"] = loadInformtionInternalData.IsPbtsInfoValid
    leafs["pbts-class-offset"] = loadInformtionInternalData.PbtsClassOffset
    leafs["pbts-class-num-paths"] = loadInformtionInternalData.PbtsClassNumPaths
    leafs["pbts-fallback-mapped-class"] = loadInformtionInternalData.PbtsFallbackMappedClass
    leafs["round-robin-disable"] = loadInformtionInternalData.RoundRobinDisable
    leafs["ldi-next-hop-buckets"] = loadInformtionInternalData.LdiNextHopBuckets
    leafs["platform-hardware-information"] = loadInformtionInternalData.PlatformHardwareInformation
    return leafs
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetBundleName() string { return "cisco_ios_xr" }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetYangName() string { return "load-informtion-internal-data" }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) SetParent(parent types.Entity) { loadInformtionInternalData.parent = parent }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetParent() types.Entity { return loadInformtionInternalData.parent }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetParentYangName() string { return "loadshare-information" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag
// Sanity flag
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is bool.
    Entry interface{}
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetFilter() yfilter.YFilter { return sanityFlag.YFilter }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) SetFilter(yf yfilter.YFilter) { sanityFlag.YFilter = yf }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetSegmentPath() string {
    return "sanity-flag"
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = sanityFlag.Entry
    return leafs
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetBundleName() string { return "cisco_ios_xr" }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetYangName() string { return "sanity-flag" }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) SetParent(parent types.Entity) { sanityFlag.parent = parent }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetParent() types.Entity { return sanityFlag.parent }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle
// Interface handle
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-zA-Z0-9./-]+.
    Entry interface{}
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetFilter() yfilter.YFilter { return interfaceHandle.YFilter }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) SetFilter(yf yfilter.YFilter) { interfaceHandle.YFilter = yf }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetSegmentPath() string {
    return "interface-handle"
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceHandle.Entry
    return leafs
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetYangName() string { return "interface-handle" }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) SetParent(parent types.Entity) { interfaceHandle.parent = parent }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetParent() types.Entity { return interfaceHandle.parent }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath
// Weights of paths
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetFilter() yfilter.YFilter { return weightsOfPath.YFilter }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) SetFilter(yf yfilter.YFilter) { weightsOfPath.YFilter = yf }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetSegmentPath() string {
    return "weights-of-path"
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = weightsOfPath.Entry
    return leafs
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetBundleName() string { return "cisco_ios_xr" }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetYangName() string { return "weights-of-path" }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) SetParent(parent types.Entity) { weightsOfPath.parent = parent }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetParent() types.Entity { return weightsOfPath.parent }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress
// Adjacency address
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // address. The type is string with length: 0..60.
    Address interface{}
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetFilter() yfilter.YFilter { return adjacencyAddress.YFilter }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) SetFilter(yf yfilter.YFilter) { adjacencyAddress.YFilter = yf }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetSegmentPath() string {
    return "adjacency-address"
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = adjacencyAddress.Address
    return leafs
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetYangName() string { return "adjacency-address" }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) SetParent(parent types.Entity) { adjacencyAddress.parent = parent }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetParent() types.Entity { return adjacencyAddress.parent }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped
// Does PBTS class fall back to drop or any class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetFilter() yfilter.YFilter { return pbtsClassIsFallbackMapped.YFilter }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) SetFilter(yf yfilter.YFilter) { pbtsClassIsFallbackMapped.YFilter = yf }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetSegmentPath() string {
    return "pbts-class-is-fallback-mapped"
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = pbtsClassIsFallbackMapped.Entry
    return leafs
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetBundleName() string { return "cisco_ios_xr" }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetYangName() string { return "pbts-class-is-fallback-mapped" }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) SetParent(parent types.Entity) { pbtsClassIsFallbackMapped.parent = parent }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetParent() types.Entity { return pbtsClassIsFallbackMapped.parent }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop
// PBTS class falls back to drop
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetFilter() yfilter.YFilter { return pbtsFallbackToDrop.YFilter }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) SetFilter(yf yfilter.YFilter) { pbtsFallbackToDrop.YFilter = yf }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetSegmentPath() string {
    return "pbts-fallback-to-drop"
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = pbtsFallbackToDrop.Entry
    return leafs
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetBundleName() string { return "cisco_ios_xr" }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetYangName() string { return "pbts-fallback-to-drop" }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) SetParent(parent types.Entity) { pbtsFallbackToDrop.parent = parent }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetParent() types.Entity { return pbtsFallbackToDrop.parent }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
// Tunnel is forward class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetFilter() yfilter.YFilter { return tunnelIsForwardClass.YFilter }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) SetFilter(yf yfilter.YFilter) { tunnelIsForwardClass.YFilter = yf }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetSegmentPath() string {
    return "tunnel-is-forward-class"
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tunnelIsForwardClass.Entry
    return leafs
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetYangName() string { return "tunnel-is-forward-class" }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) SetParent(parent types.Entity) { tunnelIsForwardClass.parent = parent }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetParent() types.Entity { return tunnelIsForwardClass.parent }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath
// FIB entry path details
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // fib sh tbl path. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath.
    FibShTblPath []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetFilter() yfilter.YFilter { return fibEntryPath.YFilter }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) SetFilter(yf yfilter.YFilter) { fibEntryPath.YFilter = yf }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetGoName(yname string) string {
    if yname == "fib-sh-tbl-path" { return "FibShTblPath" }
    return ""
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetSegmentPath() string {
    return "fib-entry-path"
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-sh-tbl-path" {
        for _, c := range fibEntryPath.FibShTblPath {
            if fibEntryPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath{}
        fibEntryPath.FibShTblPath = append(fibEntryPath.FibShTblPath, child)
        return &fibEntryPath.FibShTblPath[len(fibEntryPath.FibShTblPath)-1]
    }
    return nil
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fibEntryPath.FibShTblPath {
        children[fibEntryPath.FibShTblPath[i].GetSegmentPath()] = &fibEntryPath.FibShTblPath[i]
    }
    return children
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetBundleName() string { return "cisco_ios_xr" }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetYangName() string { return "fib-entry-path" }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) SetParent(parent types.Entity) { fibEntryPath.parent = parent }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetParent() types.Entity { return fibEntryPath.parent }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath) GetParentYangName() string { return "ip-prefix-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath
// fib sh tbl path
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    BriefInterfaceHandle interface{}

    // Next hop prefix. The type is string with length: 0..52.
    BriefNextHopPrefix interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    ViaLabelToRecurse interface{}

    // P-node address. The type is string with length: 0..52.
    BriefPnodeAddress interface{}

    // Q-node address. The type is string with length: 0..52.
    BriefQnodeAddress interface{}

    // LFA protection type. The type is FibUpdatePathLfaProtection.
    BriefLfaProtectionType interface{}

    // Resolved path. The type is bool.
    ResolvedPath interface{}

    // Recursive path. The type is bool.
    RecursivePath interface{}

    // Packets received on this path. The type is bool.
    PacketsReceivedPath interface{}

    // Attached path. The type is bool.
    AttachedPath interface{}

    // Backup path. The type is bool.
    BackupPath interface{}

    // Best external path. The type is bool.
    BestExternalPath interface{}

    // Is protection ignored. The type is bool.
    ProtectIgnore interface{}

    // Is this the path used for DLB. The type is bool.
    PathDlb interface{}

    // Path flags. The type is interface{} with range: 0..4294967295.
    PathFlags interface{}

    // Path Info flags. The type is interface{} with range: 0..65535.
    PathInfoFlags interface{}

    // Path index. The type is interface{} with range: 0..255.
    PathIndex interface{}

    // Backup path index. The type is interface{} with range: 0..255.
    BackupIndex interface{}

    // Next Hop Index. The type is interface{} with range: 0..4294967295.
    NextHopIndex interface{}

    // Parent Interface Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceHandle interface{}

    // recursion via /N constraint. The type is interface{} with range: 0..255.
    RecursionviaLen interface{}

    // More detail about this path entry.
    MoreDetailAboutPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath

    // mpls info for this path entry.
    MplsInformationForPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetFilter() yfilter.YFilter { return fibShTblPath.YFilter }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) SetFilter(yf yfilter.YFilter) { fibShTblPath.YFilter = yf }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetGoName(yname string) string {
    if yname == "hardware-information" { return "HardwareInformation" }
    if yname == "brief-interface-handle" { return "BriefInterfaceHandle" }
    if yname == "brief-next-hop-prefix" { return "BriefNextHopPrefix" }
    if yname == "via-label-to-recurse" { return "ViaLabelToRecurse" }
    if yname == "brief-pnode-address" { return "BriefPnodeAddress" }
    if yname == "brief-qnode-address" { return "BriefQnodeAddress" }
    if yname == "brief-lfa-protection-type" { return "BriefLfaProtectionType" }
    if yname == "resolved-path" { return "ResolvedPath" }
    if yname == "recursive-path" { return "RecursivePath" }
    if yname == "packets-received-path" { return "PacketsReceivedPath" }
    if yname == "attached-path" { return "AttachedPath" }
    if yname == "backup-path" { return "BackupPath" }
    if yname == "best-external-path" { return "BestExternalPath" }
    if yname == "protect-ignore" { return "ProtectIgnore" }
    if yname == "path-dlb" { return "PathDlb" }
    if yname == "path-flags" { return "PathFlags" }
    if yname == "path-info-flags" { return "PathInfoFlags" }
    if yname == "path-index" { return "PathIndex" }
    if yname == "backup-index" { return "BackupIndex" }
    if yname == "next-hop-index" { return "NextHopIndex" }
    if yname == "parent-interface-handle" { return "ParentInterfaceHandle" }
    if yname == "recursionvia-len" { return "RecursionviaLen" }
    if yname == "more-detail-about-path" { return "MoreDetailAboutPath" }
    if yname == "mpls-information-for-path" { return "MplsInformationForPath" }
    return ""
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetSegmentPath() string {
    return "fib-sh-tbl-path"
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "more-detail-about-path" {
        return &fibShTblPath.MoreDetailAboutPath
    }
    if childYangName == "mpls-information-for-path" {
        return &fibShTblPath.MplsInformationForPath
    }
    return nil
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["more-detail-about-path"] = &fibShTblPath.MoreDetailAboutPath
    children["mpls-information-for-path"] = &fibShTblPath.MplsInformationForPath
    return children
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hardware-information"] = fibShTblPath.HardwareInformation
    leafs["brief-interface-handle"] = fibShTblPath.BriefInterfaceHandle
    leafs["brief-next-hop-prefix"] = fibShTblPath.BriefNextHopPrefix
    leafs["via-label-to-recurse"] = fibShTblPath.ViaLabelToRecurse
    leafs["brief-pnode-address"] = fibShTblPath.BriefPnodeAddress
    leafs["brief-qnode-address"] = fibShTblPath.BriefQnodeAddress
    leafs["brief-lfa-protection-type"] = fibShTblPath.BriefLfaProtectionType
    leafs["resolved-path"] = fibShTblPath.ResolvedPath
    leafs["recursive-path"] = fibShTblPath.RecursivePath
    leafs["packets-received-path"] = fibShTblPath.PacketsReceivedPath
    leafs["attached-path"] = fibShTblPath.AttachedPath
    leafs["backup-path"] = fibShTblPath.BackupPath
    leafs["best-external-path"] = fibShTblPath.BestExternalPath
    leafs["protect-ignore"] = fibShTblPath.ProtectIgnore
    leafs["path-dlb"] = fibShTblPath.PathDlb
    leafs["path-flags"] = fibShTblPath.PathFlags
    leafs["path-info-flags"] = fibShTblPath.PathInfoFlags
    leafs["path-index"] = fibShTblPath.PathIndex
    leafs["backup-index"] = fibShTblPath.BackupIndex
    leafs["next-hop-index"] = fibShTblPath.NextHopIndex
    leafs["parent-interface-handle"] = fibShTblPath.ParentInterfaceHandle
    leafs["recursionvia-len"] = fibShTblPath.RecursionviaLen
    return leafs
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetBundleName() string { return "cisco_ios_xr" }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetYangName() string { return "fib-sh-tbl-path" }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) SetParent(parent types.Entity) { fibShTblPath.parent = parent }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetParent() types.Entity { return fibShTblPath.parent }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath) GetParentYangName() string { return "fib-entry-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath
// More detail about this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address to recurse to. The type is string with length: 0..52.
    IpAddressToRecurse interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    LabelToRecurse interface{}

    // Next hop prefix. The type is string with length: 0..52.
    DetailNextHopPrefix interface{}

    // Next hop mask length. The type is interface{} with range: 0..255.
    NextHopMaskLength interface{}

    // Interface associated with this path. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceAssociatedPath interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // Next hop VRF. The type is string with length: 0..33.
    NextHopVrf interface{}

    // Tunnel endpoint id. The type is interface{} with range: 0..4294967295.
    TunnleEndpointId interface{}

    // LISP RLOC ID. The type is interface{} with range: 0..4294967295.
    Lisprlocid interface{}

    // No. of dependents for this path. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependenciesThisPath interface{}

    // Round robin reset value. The type is interface{} with range: 0..255.
    RobinResetValue interface{}

    // Is recursion object a leaf?. The type is bool.
    RecursePrefixObject interface{}

    // Next prefix recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion interface{}

    // Next prefix length. The type is interface{} with range: 0..255.
    NextPrefixLength interface{}

    // Recursion has two leaves (e.g. implicit-null path). The type is bool.
    RecursePrefixObject2 interface{}

    // Next prefix2 recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion2 interface{}

    // Next prefix2 length. The type is interface{} with range: 0..255.
    NextPrefixLength2 interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    DetailFibAdjacencyType interface{}

    // Current path flag. The type is bool.
    CurrentPathFlag interface{}

    // Recursive path information is available. The type is bool.
    RecursivePathInformation interface{}

    // Path is an external adjacency. The type is bool.
    ExternalAdjacency interface{}

    // FIB Nhinfo type. The type is FibNeh.
    FibPathNhInformationType interface{}

    // FIB Nhinfo type special. The type is FibNehSpecial.
    FibPathNhInformationTypeSpecial interface{}

    // Weight of the path. The type is interface{} with range: 0..4294967295.
    WeightOfPath interface{}

    // Tunnel class of the path. The type is interface{} with range: 0..255.
    TunnelClass interface{}

    // Tunnel is forward class. The type is bool.
    TunnelIsForwardClass interface{}

    // IP Encap. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap.
    SpdIpencap []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetFilter() yfilter.YFilter { return moreDetailAboutPath.YFilter }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) SetFilter(yf yfilter.YFilter) { moreDetailAboutPath.YFilter = yf }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetGoName(yname string) string {
    if yname == "ip-address-to-recurse" { return "IpAddressToRecurse" }
    if yname == "label-to-recurse" { return "LabelToRecurse" }
    if yname == "detail-next-hop-prefix" { return "DetailNextHopPrefix" }
    if yname == "next-hop-mask-length" { return "NextHopMaskLength" }
    if yname == "interface-associated-path" { return "InterfaceAssociatedPath" }
    if yname == "next-hop-interface" { return "NextHopInterface" }
    if yname == "next-hop-vrf" { return "NextHopVrf" }
    if yname == "tunnle-endpoint-id" { return "TunnleEndpointId" }
    if yname == "lisprlocid" { return "Lisprlocid" }
    if yname == "number-of-dependencies-this-path" { return "NumberOfDependenciesThisPath" }
    if yname == "robin-reset-value" { return "RobinResetValue" }
    if yname == "recurse-prefix-object" { return "RecursePrefixObject" }
    if yname == "next-prefix-recursion" { return "NextPrefixRecursion" }
    if yname == "next-prefix-length" { return "NextPrefixLength" }
    if yname == "recurse-prefix-object2" { return "RecursePrefixObject2" }
    if yname == "next-prefix-recursion2" { return "NextPrefixRecursion2" }
    if yname == "next-prefix-length2" { return "NextPrefixLength2" }
    if yname == "detail-fib-adjacency-type" { return "DetailFibAdjacencyType" }
    if yname == "current-path-flag" { return "CurrentPathFlag" }
    if yname == "recursive-path-information" { return "RecursivePathInformation" }
    if yname == "external-adjacency" { return "ExternalAdjacency" }
    if yname == "fib-path-nh-information-type" { return "FibPathNhInformationType" }
    if yname == "fib-path-nh-information-type-special" { return "FibPathNhInformationTypeSpecial" }
    if yname == "weight-of-path" { return "WeightOfPath" }
    if yname == "tunnel-class" { return "TunnelClass" }
    if yname == "tunnel-is-forward-class" { return "TunnelIsForwardClass" }
    if yname == "spd-ipencap" { return "SpdIpencap" }
    return ""
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetSegmentPath() string {
    return "more-detail-about-path"
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spd-ipencap" {
        for _, c := range moreDetailAboutPath.SpdIpencap {
            if moreDetailAboutPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap{}
        moreDetailAboutPath.SpdIpencap = append(moreDetailAboutPath.SpdIpencap, child)
        return &moreDetailAboutPath.SpdIpencap[len(moreDetailAboutPath.SpdIpencap)-1]
    }
    return nil
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range moreDetailAboutPath.SpdIpencap {
        children[moreDetailAboutPath.SpdIpencap[i].GetSegmentPath()] = &moreDetailAboutPath.SpdIpencap[i]
    }
    return children
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-address-to-recurse"] = moreDetailAboutPath.IpAddressToRecurse
    leafs["label-to-recurse"] = moreDetailAboutPath.LabelToRecurse
    leafs["detail-next-hop-prefix"] = moreDetailAboutPath.DetailNextHopPrefix
    leafs["next-hop-mask-length"] = moreDetailAboutPath.NextHopMaskLength
    leafs["interface-associated-path"] = moreDetailAboutPath.InterfaceAssociatedPath
    leafs["next-hop-interface"] = moreDetailAboutPath.NextHopInterface
    leafs["next-hop-vrf"] = moreDetailAboutPath.NextHopVrf
    leafs["tunnle-endpoint-id"] = moreDetailAboutPath.TunnleEndpointId
    leafs["lisprlocid"] = moreDetailAboutPath.Lisprlocid
    leafs["number-of-dependencies-this-path"] = moreDetailAboutPath.NumberOfDependenciesThisPath
    leafs["robin-reset-value"] = moreDetailAboutPath.RobinResetValue
    leafs["recurse-prefix-object"] = moreDetailAboutPath.RecursePrefixObject
    leafs["next-prefix-recursion"] = moreDetailAboutPath.NextPrefixRecursion
    leafs["next-prefix-length"] = moreDetailAboutPath.NextPrefixLength
    leafs["recurse-prefix-object2"] = moreDetailAboutPath.RecursePrefixObject2
    leafs["next-prefix-recursion2"] = moreDetailAboutPath.NextPrefixRecursion2
    leafs["next-prefix-length2"] = moreDetailAboutPath.NextPrefixLength2
    leafs["detail-fib-adjacency-type"] = moreDetailAboutPath.DetailFibAdjacencyType
    leafs["current-path-flag"] = moreDetailAboutPath.CurrentPathFlag
    leafs["recursive-path-information"] = moreDetailAboutPath.RecursivePathInformation
    leafs["external-adjacency"] = moreDetailAboutPath.ExternalAdjacency
    leafs["fib-path-nh-information-type"] = moreDetailAboutPath.FibPathNhInformationType
    leafs["fib-path-nh-information-type-special"] = moreDetailAboutPath.FibPathNhInformationTypeSpecial
    leafs["weight-of-path"] = moreDetailAboutPath.WeightOfPath
    leafs["tunnel-class"] = moreDetailAboutPath.TunnelClass
    leafs["tunnel-is-forward-class"] = moreDetailAboutPath.TunnelIsForwardClass
    return leafs
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetBundleName() string { return "cisco_ios_xr" }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetYangName() string { return "more-detail-about-path" }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) SetParent(parent types.Entity) { moreDetailAboutPath.parent = parent }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetParent() types.Entity { return moreDetailAboutPath.parent }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetParentYangName() string { return "fib-sh-tbl-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
// IP Encap
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Header Count. The type is interface{} with range: 0..255.
    IpEncapHdrCount interface{}

    // IPEncap Object Locks. The type is interface{} with range: 0..4294967295.
    IpEncapLocks interface{}

    // Transport Table. The type is interface{} with range: 0..4294967295.
    IpEncapTransportTbl interface{}

    // Transport VRF name. The type is string.
    IpeTransportVrfName interface{}

    // Transport AF. The type is interface{} with range: 0..4294967295.
    IpEncapTransportAf interface{}

    // Payload AF. The type is interface{} with range: 0..4294967295.
    IpEncapPayloadAf interface{}

    // Payload MTU. The type is interface{} with range: 0..65535.
    IpEncapPayloadMtu interface{}

    // Pointer to parent. The type is interface{} with range: 0..4294967295.
    IpEncapParent interface{}

    // Parent type enumeration. The type is interface{} with range: 0..4294967295.
    IpEncapParentType interface{}

    // Headers. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr.
    IpEncapHdr []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetFilter() yfilter.YFilter { return spdIpencap.YFilter }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) SetFilter(yf yfilter.YFilter) { spdIpencap.YFilter = yf }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetGoName(yname string) string {
    if yname == "ip-encap-hdr-count" { return "IpEncapHdrCount" }
    if yname == "ip-encap-locks" { return "IpEncapLocks" }
    if yname == "ip-encap-transport-tbl" { return "IpEncapTransportTbl" }
    if yname == "ipe-transport-vrf-name" { return "IpeTransportVrfName" }
    if yname == "ip-encap-transport-af" { return "IpEncapTransportAf" }
    if yname == "ip-encap-payload-af" { return "IpEncapPayloadAf" }
    if yname == "ip-encap-payload-mtu" { return "IpEncapPayloadMtu" }
    if yname == "ip-encap-parent" { return "IpEncapParent" }
    if yname == "ip-encap-parent-type" { return "IpEncapParentType" }
    if yname == "ip-encap-hdr" { return "IpEncapHdr" }
    return ""
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetSegmentPath() string {
    return "spd-ipencap"
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-encap-hdr" {
        for _, c := range spdIpencap.IpEncapHdr {
            if spdIpencap.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr{}
        spdIpencap.IpEncapHdr = append(spdIpencap.IpEncapHdr, child)
        return &spdIpencap.IpEncapHdr[len(spdIpencap.IpEncapHdr)-1]
    }
    return nil
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spdIpencap.IpEncapHdr {
        children[spdIpencap.IpEncapHdr[i].GetSegmentPath()] = &spdIpencap.IpEncapHdr[i]
    }
    return children
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-encap-hdr-count"] = spdIpencap.IpEncapHdrCount
    leafs["ip-encap-locks"] = spdIpencap.IpEncapLocks
    leafs["ip-encap-transport-tbl"] = spdIpencap.IpEncapTransportTbl
    leafs["ipe-transport-vrf-name"] = spdIpencap.IpeTransportVrfName
    leafs["ip-encap-transport-af"] = spdIpencap.IpEncapTransportAf
    leafs["ip-encap-payload-af"] = spdIpencap.IpEncapPayloadAf
    leafs["ip-encap-payload-mtu"] = spdIpencap.IpEncapPayloadMtu
    leafs["ip-encap-parent"] = spdIpencap.IpEncapParent
    leafs["ip-encap-parent-type"] = spdIpencap.IpEncapParentType
    return leafs
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetBundleName() string { return "cisco_ios_xr" }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetYangName() string { return "spd-ipencap" }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) SetParent(parent types.Entity) { spdIpencap.parent = parent }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetParent() types.Entity { return spdIpencap.parent }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetParentYangName() string { return "more-detail-about-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
// Headers
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Header Type. The type is FibShIpencapHdr.
    IpEncapHdrType interface{}

    // Static Header. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    IpEncapHdrp interface{}

    // Dynamic Header Fields. The type is interface{} with range: 0..4294967295.
    IpEncapHdrDyn interface{}
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetFilter() yfilter.YFilter { return ipEncapHdr.YFilter }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) SetFilter(yf yfilter.YFilter) { ipEncapHdr.YFilter = yf }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetGoName(yname string) string {
    if yname == "ip-encap-hdr-type" { return "IpEncapHdrType" }
    if yname == "ip-encap-hdrp" { return "IpEncapHdrp" }
    if yname == "ip-encap-hdr-dyn" { return "IpEncapHdrDyn" }
    return ""
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetSegmentPath() string {
    return "ip-encap-hdr"
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-encap-hdr-type"] = ipEncapHdr.IpEncapHdrType
    leafs["ip-encap-hdrp"] = ipEncapHdr.IpEncapHdrp
    leafs["ip-encap-hdr-dyn"] = ipEncapHdr.IpEncapHdrDyn
    return leafs
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetBundleName() string { return "cisco_ios_xr" }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetYangName() string { return "ip-encap-hdr" }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) SetParent(parent types.Entity) { ipEncapHdr.parent = parent }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetParent() types.Entity { return ipEncapHdr.parent }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetParentYangName() string { return "spd-ipencap" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath
// mpls info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LocalLable. The type is interface{} with range: 0..4294967295.
    LocalLable interface{}

    // RecursiveFwdChain. The type is bool.
    RecursiveFwdChain interface{}

    // NumberOfIGPPaths. The type is interface{} with range: 0..4294967295.
    NumberOfIgpPaths interface{}

    // RemoteBackupPath. The type is bool.
    RemoteBackup interface{}

    // Recursive Label(s). The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack.
    RecursiveLblStack []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack

    // igp label stack array. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray.
    IgpLabelStackArray []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetFilter() yfilter.YFilter { return mplsInformationForPath.YFilter }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) SetFilter(yf yfilter.YFilter) { mplsInformationForPath.YFilter = yf }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetGoName(yname string) string {
    if yname == "local-lable" { return "LocalLable" }
    if yname == "recursive-fwd-chain" { return "RecursiveFwdChain" }
    if yname == "number-of-igp-paths" { return "NumberOfIgpPaths" }
    if yname == "remote-backup" { return "RemoteBackup" }
    if yname == "recursive-lbl-stack" { return "RecursiveLblStack" }
    if yname == "igp-label-stack-array" { return "IgpLabelStackArray" }
    return ""
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetSegmentPath() string {
    return "mpls-information-for-path"
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "recursive-lbl-stack" {
        for _, c := range mplsInformationForPath.RecursiveLblStack {
            if mplsInformationForPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack{}
        mplsInformationForPath.RecursiveLblStack = append(mplsInformationForPath.RecursiveLblStack, child)
        return &mplsInformationForPath.RecursiveLblStack[len(mplsInformationForPath.RecursiveLblStack)-1]
    }
    if childYangName == "igp-label-stack-array" {
        for _, c := range mplsInformationForPath.IgpLabelStackArray {
            if mplsInformationForPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray{}
        mplsInformationForPath.IgpLabelStackArray = append(mplsInformationForPath.IgpLabelStackArray, child)
        return &mplsInformationForPath.IgpLabelStackArray[len(mplsInformationForPath.IgpLabelStackArray)-1]
    }
    return nil
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mplsInformationForPath.RecursiveLblStack {
        children[mplsInformationForPath.RecursiveLblStack[i].GetSegmentPath()] = &mplsInformationForPath.RecursiveLblStack[i]
    }
    for i := range mplsInformationForPath.IgpLabelStackArray {
        children[mplsInformationForPath.IgpLabelStackArray[i].GetSegmentPath()] = &mplsInformationForPath.IgpLabelStackArray[i]
    }
    return children
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-lable"] = mplsInformationForPath.LocalLable
    leafs["recursive-fwd-chain"] = mplsInformationForPath.RecursiveFwdChain
    leafs["number-of-igp-paths"] = mplsInformationForPath.NumberOfIgpPaths
    leafs["remote-backup"] = mplsInformationForPath.RemoteBackup
    return leafs
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetBundleName() string { return "cisco_ios_xr" }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetYangName() string { return "mpls-information-for-path" }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) SetParent(parent types.Entity) { mplsInformationForPath.parent = parent }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetParent() types.Entity { return mplsInformationForPath.parent }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath) GetParentYangName() string { return "fib-sh-tbl-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack
// Recursive Label(s)
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetFilter() yfilter.YFilter { return recursiveLblStack.YFilter }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) SetFilter(yf yfilter.YFilter) { recursiveLblStack.YFilter = yf }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetSegmentPath() string {
    return "recursive-lbl-stack"
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = recursiveLblStack.Entry
    return leafs
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetBundleName() string { return "cisco_ios_xr" }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetYangName() string { return "recursive-lbl-stack" }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) SetParent(parent types.Entity) { recursiveLblStack.parent = parent }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetParent() types.Entity { return recursiveLblStack.parent }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetParentYangName() string { return "mpls-information-for-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
// igp label stack array
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NumberOfLabels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}

    // OutInterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // NHAddress. The type is string with length: 0..52.
    NhAddress interface{}

    // lstack. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack.
    Lstack []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetFilter() yfilter.YFilter { return igpLabelStackArray.YFilter }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) SetFilter(yf yfilter.YFilter) { igpLabelStackArray.YFilter = yf }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetGoName(yname string) string {
    if yname == "number-of-labels" { return "NumberOfLabels" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "lstack" { return "Lstack" }
    return ""
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetSegmentPath() string {
    return "igp-label-stack-array"
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lstack" {
        for _, c := range igpLabelStackArray.Lstack {
            if igpLabelStackArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack{}
        igpLabelStackArray.Lstack = append(igpLabelStackArray.Lstack, child)
        return &igpLabelStackArray.Lstack[len(igpLabelStackArray.Lstack)-1]
    }
    return nil
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range igpLabelStackArray.Lstack {
        children[igpLabelStackArray.Lstack[i].GetSegmentPath()] = &igpLabelStackArray.Lstack[i]
    }
    return children
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-labels"] = igpLabelStackArray.NumberOfLabels
    leafs["out-interface"] = igpLabelStackArray.OutInterface
    leafs["nh-address"] = igpLabelStackArray.NhAddress
    return leafs
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetBundleName() string { return "cisco_ios_xr" }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetYangName() string { return "igp-label-stack-array" }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) SetParent(parent types.Entity) { igpLabelStackArray.parent = parent }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetParent() types.Entity { return igpLabelStackArray.parent }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetParentYangName() string { return "mpls-information-for-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
// lstack
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetFilter() yfilter.YFilter { return lstack.YFilter }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) SetFilter(yf yfilter.YFilter) { lstack.YFilter = yf }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetSegmentPath() string {
    return "lstack"
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = lstack.Entry
    return leafs
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetBundleName() string { return "cisco_ios_xr" }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetYangName() string { return "lstack" }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) SetParent(parent types.Entity) { lstack.parent = parent }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetParent() types.Entity { return lstack.parent }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetParentYangName() string { return "igp-label-stack-array" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information
// Information about IPv6 SR prefix
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route is an IPv6 Segment-Routing prefix. The type is bool.
    RouteIsSripv6Flag interface{}

    // Route is a SRv6 prefix resolved via Policy label. The type is bool.
    Srv6PfxResolvedViaPolicyLabel interface{}

    // Statistics are valid for this prefix. The type is bool.
    Sripv6StatsValidFlag interface{}

    // Statistics for a IPv6 SR prefix.
    Srv6Statistics Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetFilter() yfilter.YFilter { return srv6Information.YFilter }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) SetFilter(yf yfilter.YFilter) { srv6Information.YFilter = yf }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetGoName(yname string) string {
    if yname == "route-is-sripv6-flag" { return "RouteIsSripv6Flag" }
    if yname == "srv6-pfx-resolved-via-policy-label" { return "Srv6PfxResolvedViaPolicyLabel" }
    if yname == "sripv6-stats-valid-flag" { return "Sripv6StatsValidFlag" }
    if yname == "srv6-statistics" { return "Srv6Statistics" }
    return ""
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetSegmentPath() string {
    return "srv6-information"
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srv6-statistics" {
        return &srv6Information.Srv6Statistics
    }
    return nil
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["srv6-statistics"] = &srv6Information.Srv6Statistics
    return children
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-is-sripv6-flag"] = srv6Information.RouteIsSripv6Flag
    leafs["srv6-pfx-resolved-via-policy-label"] = srv6Information.Srv6PfxResolvedViaPolicyLabel
    leafs["sripv6-stats-valid-flag"] = srv6Information.Sripv6StatsValidFlag
    return leafs
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetBundleName() string { return "cisco_ios_xr" }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetYangName() string { return "srv6-information" }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) SetParent(parent types.Entity) { srv6Information.parent = parent }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetParent() types.Entity { return srv6Information.parent }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information) GetParentYangName() string { return "ip-prefix-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics
// Statistics for a IPv6 SR prefix
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRv6 packets forwarded for a prefix. The type is interface{} with range:
    // 0..18446744073709551615.
    Srv6PacketsForwarded interface{}

    // SRv6 Packets dropped for a prefix. The type is interface{} with range:
    // 0..18446744073709551615.
    Srv6PacketsDropped interface{}
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetFilter() yfilter.YFilter { return srv6Statistics.YFilter }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) SetFilter(yf yfilter.YFilter) { srv6Statistics.YFilter = yf }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetGoName(yname string) string {
    if yname == "srv6-packets-forwarded" { return "Srv6PacketsForwarded" }
    if yname == "srv6-packets-dropped" { return "Srv6PacketsDropped" }
    return ""
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetSegmentPath() string {
    return "srv6-statistics"
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srv6-packets-forwarded"] = srv6Statistics.Srv6PacketsForwarded
    leafs["srv6-packets-dropped"] = srv6Statistics.Srv6PacketsDropped
    return leafs
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetYangName() string { return "srv6-statistics" }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) SetParent(parent types.Entity) { srv6Statistics.parent = parent }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetParent() types.Entity { return srv6Statistics.parent }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_Srv6Information_Srv6Statistics) GetParentYangName() string { return "srv6-information" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject
// Leaf Extension Object List
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibShTblFibExtBag.
    Type interface{}

    // sfecd le.
    SfecdLe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetFilter() yfilter.YFilter { return extensionObject.YFilter }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) SetFilter(yf yfilter.YFilter) { extensionObject.YFilter = yf }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "sfecd-le" { return "SfecdLe" }
    return ""
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetSegmentPath() string {
    return "extension-object"
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sfecd-le" {
        return &extensionObject.SfecdLe
    }
    return nil
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sfecd-le"] = &extensionObject.SfecdLe
    return children
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extensionObject.Type
    return leafs
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetBundleName() string { return "cisco_ios_xr" }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetYangName() string { return "extension-object" }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) SetParent(parent types.Entity) { extensionObject.parent = parent }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetParent() types.Entity { return extensionObject.parent }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject) GetParentYangName() string { return "ip-prefix-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe
// sfecd le
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Context Label Exist. The type is bool.
    ContextLabelFlag interface{}

    // Context Label. The type is interface{} with range: 0..4294967295.
    ContextLabel interface{}
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetFilter() yfilter.YFilter { return sfecdLe.YFilter }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) SetFilter(yf yfilter.YFilter) { sfecdLe.YFilter = yf }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetGoName(yname string) string {
    if yname == "context-label-flag" { return "ContextLabelFlag" }
    if yname == "context-label" { return "ContextLabel" }
    return ""
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetSegmentPath() string {
    return "sfecd-le"
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["context-label-flag"] = sfecdLe.ContextLabelFlag
    leafs["context-label"] = sfecdLe.ContextLabel
    return leafs
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetBundleName() string { return "cisco_ios_xr" }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetYangName() string { return "sfecd-le" }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) SetParent(parent types.Entity) { sfecdLe.parent = parent }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetParent() types.Entity { return sfecdLe.parent }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixDetails_IpPrefixDetail_ExtensionObject_SfecdLe) GetParentYangName() string { return "extension-object" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local (non-remote) nhinfo.
    NhInfoLocalDetails Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails

    // Special nhinfo.
    NhInfoSpecialDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail

    // Detailed Remote NHInfo table.
    NhInfoRemoteDetails Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetFilter() yfilter.YFilter { return nhInfoDetail.YFilter }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) SetFilter(yf yfilter.YFilter) { nhInfoDetail.YFilter = yf }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetGoName(yname string) string {
    if yname == "nh-info-local-details" { return "NhInfoLocalDetails" }
    if yname == "nh-info-special-detail" { return "NhInfoSpecialDetail" }
    if yname == "nh-info-remote-details" { return "NhInfoRemoteDetails" }
    return ""
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetSegmentPath() string {
    return "nh-info-detail"
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-local-details" {
        return &nhInfoDetail.NhInfoLocalDetails
    }
    if childYangName == "nh-info-special-detail" {
        return &nhInfoDetail.NhInfoSpecialDetail
    }
    if childYangName == "nh-info-remote-details" {
        return &nhInfoDetail.NhInfoRemoteDetails
    }
    return nil
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-local-details"] = &nhInfoDetail.NhInfoLocalDetails
    children["nh-info-special-detail"] = &nhInfoDetail.NhInfoSpecialDetail
    children["nh-info-remote-details"] = &nhInfoDetail.NhInfoRemoteDetails
    return children
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetYangName() string { return "nh-info-detail" }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) SetParent(parent types.Entity) { nhInfoDetail.parent = parent }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetParent() types.Entity { return nhInfoDetail.parent }

func (nhInfoDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail.
    NhInfoLocalDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetFilter() yfilter.YFilter { return nhInfoLocalDetails.YFilter }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) SetFilter(yf yfilter.YFilter) { nhInfoLocalDetails.YFilter = yf }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetGoName(yname string) string {
    if yname == "nh-info-local-detail" { return "NhInfoLocalDetail" }
    return ""
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetSegmentPath() string {
    return "nh-info-local-details"
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-local-detail" {
        for _, c := range nhInfoLocalDetails.NhInfoLocalDetail {
            if nhInfoLocalDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail{}
        nhInfoLocalDetails.NhInfoLocalDetail = append(nhInfoLocalDetails.NhInfoLocalDetail, child)
        return &nhInfoLocalDetails.NhInfoLocalDetail[len(nhInfoLocalDetails.NhInfoLocalDetail)-1]
    }
    return nil
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoLocalDetails.NhInfoLocalDetail {
        children[nhInfoLocalDetails.NhInfoLocalDetail[i].GetSegmentPath()] = &nhInfoLocalDetails.NhInfoLocalDetail[i]
    }
    return children
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetYangName() string { return "nh-info-local-details" }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) SetParent(parent types.Entity) { nhInfoLocalDetails.parent = parent }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetParent() types.Entity { return nhInfoLocalDetails.parent }

func (nhInfoLocalDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails) GetParentYangName() string { return "nh-info-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail
// Detail NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetFilter() yfilter.YFilter { return nhInfoLocalDetail.YFilter }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) SetFilter(yf yfilter.YFilter) { nhInfoLocalDetail.YFilter = yf }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetSegmentPath() string {
    return "nh-info-local-detail"
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoLocalDetail.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoLocalDetail.NhInfoExtension
    }
    return nil
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoLocalDetail.SiPwhe
    children["nh-info-extension"] = &nhInfoLocalDetail.NhInfoExtension
    return children
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoLocalDetail.NhInterfaceName
    leafs["nh-address"] = nhInfoLocalDetail.NhAddress
    leafs["si-link-proto"] = nhInfoLocalDetail.SiLinkProto
    leafs["si-nhinfo"] = nhInfoLocalDetail.SiNhinfo
    leafs["si-nhtype"] = nhInfoLocalDetail.SiNhtype
    leafs["si-ifh"] = nhInfoLocalDetail.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoLocalDetail.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoLocalDetail.SiAdjPtr
    leafs["si-adj-present"] = nhInfoLocalDetail.SiAdjPresent
    leafs["si-special-type"] = nhInfoLocalDetail.SiSpecialType
    leafs["si-refcount"] = nhInfoLocalDetail.SiRefcount
    leafs["si-flags"] = nhInfoLocalDetail.SiFlags
    leafs["si-adj-if"] = nhInfoLocalDetail.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoLocalDetail.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoLocalDetail.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoLocalDetail.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoLocalDetail.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoLocalDetail.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoLocalDetail.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoLocalDetail.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoLocalDetail.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoLocalDetail.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoLocalDetail.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoLocalDetail.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoLocalDetail.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoLocalDetail.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoLocalDetail.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoLocalDetail.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoLocalDetail.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoLocalDetail.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoLocalDetail.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoLocalDetail.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoLocalDetail.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoLocalDetail.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoLocalDetail.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoLocalDetail.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoLocalDetail.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoLocalDetail.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoLocalDetail.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoLocalDetail.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoLocalDetail.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoLocalDetail.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoLocalDetail.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoLocalDetail.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoLocalDetail.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoLocalDetail.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoLocalDetail.SiGreDestAddr
    leafs["si-nhid"] = nhInfoLocalDetail.SiNhid
    leafs["si-upd-ts"] = nhInfoLocalDetail.SiUpdTs
    return leafs
}

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetYangName() string { return "nh-info-local-detail" }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) SetParent(parent types.Entity) { nhInfoLocalDetail.parent = parent }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetParent() types.Entity { return nhInfoLocalDetail.parent }

func (nhInfoLocalDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail) GetParentYangName() string { return "nh-info-local-details" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_SiPwhe) GetParentYangName() string { return "nh-info-local-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension) GetParentYangName() string { return "nh-info-local-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoLocalDetails_NhInfoLocalDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail
// Special nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail special-punt NHInfo entry.
    NhInfoSpecialPuntDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail

    // Detail special-drop NHInfo entry.
    NhInfoSpecialDropDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail

    // Detail special-null NHInfo entry.
    NhInfoSpecialNullDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail

    // Detail special-discard NHInfo entry.
    NhInfoSpecialDiscardDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetFilter() yfilter.YFilter { return nhInfoSpecialDetail.YFilter }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDetail.YFilter = yf }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetGoName(yname string) string {
    if yname == "nh-info-special-punt-detail" { return "NhInfoSpecialPuntDetail" }
    if yname == "nh-info-special-drop-detail" { return "NhInfoSpecialDropDetail" }
    if yname == "nh-info-special-null-detail" { return "NhInfoSpecialNullDetail" }
    if yname == "nh-info-special-discard-detail" { return "NhInfoSpecialDiscardDetail" }
    return ""
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetSegmentPath() string {
    return "nh-info-special-detail"
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-special-punt-detail" {
        return &nhInfoSpecialDetail.NhInfoSpecialPuntDetail
    }
    if childYangName == "nh-info-special-drop-detail" {
        return &nhInfoSpecialDetail.NhInfoSpecialDropDetail
    }
    if childYangName == "nh-info-special-null-detail" {
        return &nhInfoSpecialDetail.NhInfoSpecialNullDetail
    }
    if childYangName == "nh-info-special-discard-detail" {
        return &nhInfoSpecialDetail.NhInfoSpecialDiscardDetail
    }
    return nil
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-special-punt-detail"] = &nhInfoSpecialDetail.NhInfoSpecialPuntDetail
    children["nh-info-special-drop-detail"] = &nhInfoSpecialDetail.NhInfoSpecialDropDetail
    children["nh-info-special-null-detail"] = &nhInfoSpecialDetail.NhInfoSpecialNullDetail
    children["nh-info-special-discard-detail"] = &nhInfoSpecialDetail.NhInfoSpecialDiscardDetail
    return children
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetYangName() string { return "nh-info-special-detail" }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) SetParent(parent types.Entity) { nhInfoSpecialDetail.parent = parent }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetParent() types.Entity { return nhInfoSpecialDetail.parent }

func (nhInfoSpecialDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail) GetParentYangName() string { return "nh-info-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail
// Detail special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetFilter() yfilter.YFilter { return nhInfoSpecialPuntDetail.YFilter }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) SetFilter(yf yfilter.YFilter) { nhInfoSpecialPuntDetail.YFilter = yf }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetSegmentPath() string {
    return "nh-info-special-punt-detail"
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialPuntDetail.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialPuntDetail.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialPuntDetail.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialPuntDetail.NhInfoExtension
    return children
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialPuntDetail.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialPuntDetail.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialPuntDetail.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialPuntDetail.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialPuntDetail.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialPuntDetail.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialPuntDetail.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialPuntDetail.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialPuntDetail.SiRefcount
    leafs["si-flags"] = nhInfoSpecialPuntDetail.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialPuntDetail.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialPuntDetail.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialPuntDetail.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialPuntDetail.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialPuntDetail.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialPuntDetail.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialPuntDetail.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialPuntDetail.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialPuntDetail.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialPuntDetail.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialPuntDetail.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialPuntDetail.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialPuntDetail.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialPuntDetail.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialPuntDetail.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialPuntDetail.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialPuntDetail.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialPuntDetail.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialPuntDetail.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialPuntDetail.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialPuntDetail.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialPuntDetail.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialPuntDetail.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialPuntDetail.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialPuntDetail.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialPuntDetail.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialPuntDetail.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialPuntDetail.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialPuntDetail.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialPuntDetail.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialPuntDetail.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialPuntDetail.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialPuntDetail.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialPuntDetail.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialPuntDetail.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialPuntDetail.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialPuntDetail.SiUpdTs
    return leafs
}

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetYangName() string { return "nh-info-special-punt-detail" }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) SetParent(parent types.Entity) { nhInfoSpecialPuntDetail.parent = parent }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetParent() types.Entity { return nhInfoSpecialPuntDetail.parent }

func (nhInfoSpecialPuntDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail) GetParentYangName() string { return "nh-info-special-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_SiPwhe) GetParentYangName() string { return "nh-info-special-punt-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension) GetParentYangName() string { return "nh-info-special-punt-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialPuntDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail
// Detail special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetFilter() yfilter.YFilter { return nhInfoSpecialDropDetail.YFilter }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDropDetail.YFilter = yf }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetSegmentPath() string {
    return "nh-info-special-drop-detail"
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDropDetail.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDropDetail.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDropDetail.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDropDetail.NhInfoExtension
    return children
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDropDetail.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDropDetail.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDropDetail.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDropDetail.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDropDetail.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDropDetail.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDropDetail.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDropDetail.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDropDetail.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDropDetail.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDropDetail.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDropDetail.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDropDetail.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDropDetail.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDropDetail.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDropDetail.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDropDetail.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDropDetail.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDropDetail.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDropDetail.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDropDetail.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDropDetail.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDropDetail.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDropDetail.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDropDetail.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDropDetail.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDropDetail.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDropDetail.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDropDetail.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDropDetail.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDropDetail.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDropDetail.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDropDetail.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDropDetail.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDropDetail.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDropDetail.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDropDetail.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDropDetail.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDropDetail.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDropDetail.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDropDetail.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDropDetail.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDropDetail.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDropDetail.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDropDetail.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDropDetail.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDropDetail.SiUpdTs
    return leafs
}

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetYangName() string { return "nh-info-special-drop-detail" }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) SetParent(parent types.Entity) { nhInfoSpecialDropDetail.parent = parent }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetParent() types.Entity { return nhInfoSpecialDropDetail.parent }

func (nhInfoSpecialDropDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail) GetParentYangName() string { return "nh-info-special-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_SiPwhe) GetParentYangName() string { return "nh-info-special-drop-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension) GetParentYangName() string { return "nh-info-special-drop-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDropDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail
// Detail special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetFilter() yfilter.YFilter { return nhInfoSpecialNullDetail.YFilter }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) SetFilter(yf yfilter.YFilter) { nhInfoSpecialNullDetail.YFilter = yf }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetSegmentPath() string {
    return "nh-info-special-null-detail"
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialNullDetail.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialNullDetail.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialNullDetail.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialNullDetail.NhInfoExtension
    return children
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialNullDetail.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialNullDetail.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialNullDetail.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialNullDetail.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialNullDetail.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialNullDetail.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialNullDetail.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialNullDetail.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialNullDetail.SiRefcount
    leafs["si-flags"] = nhInfoSpecialNullDetail.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialNullDetail.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialNullDetail.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialNullDetail.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialNullDetail.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialNullDetail.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialNullDetail.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialNullDetail.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialNullDetail.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialNullDetail.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialNullDetail.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialNullDetail.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialNullDetail.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialNullDetail.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialNullDetail.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialNullDetail.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialNullDetail.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialNullDetail.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialNullDetail.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialNullDetail.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialNullDetail.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialNullDetail.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialNullDetail.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialNullDetail.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialNullDetail.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialNullDetail.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialNullDetail.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialNullDetail.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialNullDetail.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialNullDetail.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialNullDetail.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialNullDetail.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialNullDetail.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialNullDetail.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialNullDetail.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialNullDetail.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialNullDetail.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialNullDetail.SiUpdTs
    return leafs
}

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetYangName() string { return "nh-info-special-null-detail" }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) SetParent(parent types.Entity) { nhInfoSpecialNullDetail.parent = parent }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetParent() types.Entity { return nhInfoSpecialNullDetail.parent }

func (nhInfoSpecialNullDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail) GetParentYangName() string { return "nh-info-special-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_SiPwhe) GetParentYangName() string { return "nh-info-special-null-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension) GetParentYangName() string { return "nh-info-special-null-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialNullDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail
// Detail special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetFilter() yfilter.YFilter { return nhInfoSpecialDiscardDetail.YFilter }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDiscardDetail.YFilter = yf }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetSegmentPath() string {
    return "nh-info-special-discard-detail"
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDiscardDetail.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDiscardDetail.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDiscardDetail.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDiscardDetail.NhInfoExtension
    return children
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDiscardDetail.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDiscardDetail.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDiscardDetail.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDiscardDetail.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDiscardDetail.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDiscardDetail.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDiscardDetail.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDiscardDetail.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDiscardDetail.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDiscardDetail.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDiscardDetail.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDiscardDetail.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDiscardDetail.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDiscardDetail.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDiscardDetail.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDiscardDetail.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDiscardDetail.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDiscardDetail.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDiscardDetail.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDiscardDetail.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDiscardDetail.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDiscardDetail.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDiscardDetail.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDiscardDetail.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDiscardDetail.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDiscardDetail.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDiscardDetail.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDiscardDetail.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDiscardDetail.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDiscardDetail.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDiscardDetail.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDiscardDetail.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDiscardDetail.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDiscardDetail.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDiscardDetail.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDiscardDetail.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDiscardDetail.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDiscardDetail.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDiscardDetail.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDiscardDetail.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDiscardDetail.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDiscardDetail.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDiscardDetail.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDiscardDetail.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDiscardDetail.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDiscardDetail.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDiscardDetail.SiUpdTs
    return leafs
}

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetYangName() string { return "nh-info-special-discard-detail" }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) SetParent(parent types.Entity) { nhInfoSpecialDiscardDetail.parent = parent }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetParent() types.Entity { return nhInfoSpecialDiscardDetail.parent }

func (nhInfoSpecialDiscardDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail) GetParentYangName() string { return "nh-info-special-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_SiPwhe) GetParentYangName() string { return "nh-info-special-discard-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension) GetParentYangName() string { return "nh-info-special-discard-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoSpecialDetail_NhInfoSpecialDiscardDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails
// Detailed Remote NHInfo table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed remote NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail.
    NhInfoRemoteDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetFilter() yfilter.YFilter { return nhInfoRemoteDetails.YFilter }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) SetFilter(yf yfilter.YFilter) { nhInfoRemoteDetails.YFilter = yf }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetGoName(yname string) string {
    if yname == "nh-info-remote-detail" { return "NhInfoRemoteDetail" }
    return ""
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetSegmentPath() string {
    return "nh-info-remote-details"
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-remote-detail" {
        for _, c := range nhInfoRemoteDetails.NhInfoRemoteDetail {
            if nhInfoRemoteDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail{}
        nhInfoRemoteDetails.NhInfoRemoteDetail = append(nhInfoRemoteDetails.NhInfoRemoteDetail, child)
        return &nhInfoRemoteDetails.NhInfoRemoteDetail[len(nhInfoRemoteDetails.NhInfoRemoteDetail)-1]
    }
    return nil
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoRemoteDetails.NhInfoRemoteDetail {
        children[nhInfoRemoteDetails.NhInfoRemoteDetail[i].GetSegmentPath()] = &nhInfoRemoteDetails.NhInfoRemoteDetail[i]
    }
    return children
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetYangName() string { return "nh-info-remote-details" }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) SetParent(parent types.Entity) { nhInfoRemoteDetails.parent = parent }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetParent() types.Entity { return nhInfoRemoteDetails.parent }

func (nhInfoRemoteDetails *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails) GetParentYangName() string { return "nh-info-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail
// Detailed remote NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetFilter() yfilter.YFilter { return nhInfoRemoteDetail.YFilter }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) SetFilter(yf yfilter.YFilter) { nhInfoRemoteDetail.YFilter = yf }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetSegmentPath() string {
    return "nh-info-remote-detail"
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoRemoteDetail.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoRemoteDetail.NhInfoExtension
    }
    return nil
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoRemoteDetail.SiPwhe
    children["nh-info-extension"] = &nhInfoRemoteDetail.NhInfoExtension
    return children
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoRemoteDetail.NhInterfaceName
    leafs["nh-address"] = nhInfoRemoteDetail.NhAddress
    leafs["si-link-proto"] = nhInfoRemoteDetail.SiLinkProto
    leafs["si-nhinfo"] = nhInfoRemoteDetail.SiNhinfo
    leafs["si-nhtype"] = nhInfoRemoteDetail.SiNhtype
    leafs["si-ifh"] = nhInfoRemoteDetail.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoRemoteDetail.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoRemoteDetail.SiAdjPtr
    leafs["si-adj-present"] = nhInfoRemoteDetail.SiAdjPresent
    leafs["si-special-type"] = nhInfoRemoteDetail.SiSpecialType
    leafs["si-refcount"] = nhInfoRemoteDetail.SiRefcount
    leafs["si-flags"] = nhInfoRemoteDetail.SiFlags
    leafs["si-adj-if"] = nhInfoRemoteDetail.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoRemoteDetail.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoRemoteDetail.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoRemoteDetail.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoRemoteDetail.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoRemoteDetail.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoRemoteDetail.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoRemoteDetail.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoRemoteDetail.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoRemoteDetail.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoRemoteDetail.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoRemoteDetail.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoRemoteDetail.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoRemoteDetail.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoRemoteDetail.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoRemoteDetail.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoRemoteDetail.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoRemoteDetail.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoRemoteDetail.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoRemoteDetail.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoRemoteDetail.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoRemoteDetail.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoRemoteDetail.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoRemoteDetail.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoRemoteDetail.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoRemoteDetail.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoRemoteDetail.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoRemoteDetail.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoRemoteDetail.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoRemoteDetail.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoRemoteDetail.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoRemoteDetail.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoRemoteDetail.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoRemoteDetail.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoRemoteDetail.SiGreDestAddr
    leafs["si-nhid"] = nhInfoRemoteDetail.SiNhid
    leafs["si-upd-ts"] = nhInfoRemoteDetail.SiUpdTs
    return leafs
}

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetYangName() string { return "nh-info-remote-detail" }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) SetParent(parent types.Entity) { nhInfoRemoteDetail.parent = parent }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetParent() types.Entity { return nhInfoRemoteDetail.parent }

func (nhInfoRemoteDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail) GetParentYangName() string { return "nh-info-remote-details" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_SiPwhe) GetParentYangName() string { return "nh-info-remote-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension) GetParentYangName() string { return "nh-info-remote-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetail_NhInfoRemoteDetails_NhInfoRemoteDetail_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary
// Operational data for FIB Tablee
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The router-id. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Prefix interface{}

    // Table Id. The type is interface{} with range: 0..4294967295.
    SsTblId interface{}

    // Table Id Ptr. The type is interface{} with range: 0..4294967295.
    SsTblIdPtr interface{}

    // Virtual routing forwarding instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrfId interface{}

    // Virtual router instance Id. The type is interface{} with range:
    // 0..4294967295.
    SsVrId interface{}

    // LBA configuration state. The type is SsLbaState.
    LoadBalancing interface{}

    // Number of forwarding elements linked to the table. The type is interface{}
    // with range: 0..4294967295.
    ForwardingElements interface{}

    // Number of routes. The type is interface{} with range: 0..4294967295.
    Routes interface{}

    // Number of inplace modifications. The type is interface{} with range:
    // 0..4294967295.
    PrefixInPlaceModifications interface{}

    // Number of deleted stale leafs. The type is interface{} with range:
    // 0..4294967295.
    StalePrefixDeletes interface{}

    // Count of load sharing elements. The type is interface{} with range:
    // 0..4294967295.
    LoadSharingElements interface{}

    // Count of load sharing references. The type is interface{} with range:
    // 0..18446744073709551615.
    LoadSharingReferences interface{}

    // Total memory used by load sharing elements. The type is interface{} with
    // range: 0..4294967295.
    TotalLoadShareElementBytes interface{}

    // Total memory used by leaves. The type is interface{} with range:
    // 0..4294967295.
    LeavesUsedBytes interface{}

    // Number of reresolved entries. The type is interface{} with range:
    // 0..4294967295.
    ReresolveEntries interface{}

    // Number of old unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    OldUnresolveEntries interface{}

    // Number of new unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    NewUnresolveEntries interface{}

    // Number of total unresolved entries. The type is interface{} with range:
    // 0..4294967295.
    UnresolveEntries interface{}

    // Number of routes dropped by CEF. The type is interface{} with range:
    // 0..4294967295.
    CefRouteDrops interface{}

    // the number of routes dropped due to version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    CefVersionMismatchRouteDrops interface{}

    // Number of entries in the route delete cache. The type is interface{} with
    // range: 0..4294967295.
    DeleteCacheNumEntries interface{}

    // Number of entries present on addition. The type is interface{} with range:
    // 0..4294967295.
    ExistingLeavesRevisions interface{}

    // Default prefix. The type is interface{} with range: 0..4294967295.
    FibDefaultPrefix interface{}

    // Default prefix mask length. The type is interface{} with range:
    // 0..4294967295.
    FibDefaultPrefixMaskLength interface{}

    // Number of NHINFOS. The type is interface{} with range: 0..4294967295.
    NextHops interface{}

    // Number of incomplete NHINFOS. The type is interface{} with range:
    // 0..4294967295.
    IncompleteNextHops interface{}

    // IP CEF resolution timer in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ResolutionTimer interface{}

    // IP CEF slow processing time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    SlowProcessTimer interface{}

    // IP CEF max resolution time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaxResolutionTimer interface{}

    // Number of prefixes with imposition LDI. The type is interface{} with range:
    // 0..4294967295.
    ImpositionPrefixes interface{}

    // Number of prefixes with extended path-list. The type is interface{} with
    // range: 0..4294967295.
    ExtendedPrefixes interface{}

    // Number of routes updates with recycled label handled. The type is
    // interface{} with range: 0..4294967295.
    CeflBlRecycledRoutes interface{}

    // pd backwalks on LDI modify with backup path. The type is interface{} with
    // range: 0..4294967295.
    LdiBackwalks interface{}

    // Number of routes with FRR protection. The type is interface{} with range:
    // 0..4294967295.
    SsProtRouteCount interface{}

    // Number of lisp eid prefixes associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispEidPrefixes interface{}

    // Number of lisp eid prefixes eligible for forwarding. The type is
    // interface{} with range: 0..4294967295.
    LispEidValidPrefixes interface{}

    // Number of lisp rloc objects associated with table. The type is interface{}
    // with range: 0..4294967295.
    LispRlocObjects interface{}

    // VXLAN local Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    SsVxlanLtepIfh interface{}

    // Number of dropped pathlists. The type is interface{} with range:
    // 0..4294967295.
    SsDropPlCount interface{}

    // Exclusive load sharing element.
    ExclusiveLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement

    // Shared load sharing element.
    SharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement

    // Cross-table shared load sharing element.
    CrossSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement

    // Label-shared load sharing element.
    LabelSharedLoadSharingElement Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement

    // Distribution of prefix mask lengths.
    PrefixMasklenDistribution Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ss-tbl-id" { return "SsTblId" }
    if yname == "ss-tbl-id-ptr" { return "SsTblIdPtr" }
    if yname == "ss-vrf-id" { return "SsVrfId" }
    if yname == "ss-vr-id" { return "SsVrId" }
    if yname == "load-balancing" { return "LoadBalancing" }
    if yname == "forwarding-elements" { return "ForwardingElements" }
    if yname == "routes" { return "Routes" }
    if yname == "prefix-in-place-modifications" { return "PrefixInPlaceModifications" }
    if yname == "stale-prefix-deletes" { return "StalePrefixDeletes" }
    if yname == "load-sharing-elements" { return "LoadSharingElements" }
    if yname == "load-sharing-references" { return "LoadSharingReferences" }
    if yname == "total-load-share-element-bytes" { return "TotalLoadShareElementBytes" }
    if yname == "leaves-used-bytes" { return "LeavesUsedBytes" }
    if yname == "reresolve-entries" { return "ReresolveEntries" }
    if yname == "old-unresolve-entries" { return "OldUnresolveEntries" }
    if yname == "new-unresolve-entries" { return "NewUnresolveEntries" }
    if yname == "unresolve-entries" { return "UnresolveEntries" }
    if yname == "cef-route-drops" { return "CefRouteDrops" }
    if yname == "cef-version-mismatch-route-drops" { return "CefVersionMismatchRouteDrops" }
    if yname == "delete-cache-num-entries" { return "DeleteCacheNumEntries" }
    if yname == "existing-leaves-revisions" { return "ExistingLeavesRevisions" }
    if yname == "fib-default-prefix" { return "FibDefaultPrefix" }
    if yname == "fib-default-prefix-mask-length" { return "FibDefaultPrefixMaskLength" }
    if yname == "next-hops" { return "NextHops" }
    if yname == "incomplete-next-hops" { return "IncompleteNextHops" }
    if yname == "resolution-timer" { return "ResolutionTimer" }
    if yname == "slow-process-timer" { return "SlowProcessTimer" }
    if yname == "max-resolution-timer" { return "MaxResolutionTimer" }
    if yname == "imposition-prefixes" { return "ImpositionPrefixes" }
    if yname == "extended-prefixes" { return "ExtendedPrefixes" }
    if yname == "cefl-bl-recycled-routes" { return "CeflBlRecycledRoutes" }
    if yname == "ldi-backwalks" { return "LdiBackwalks" }
    if yname == "ss-prot-route-count" { return "SsProtRouteCount" }
    if yname == "lisp-eid-prefixes" { return "LispEidPrefixes" }
    if yname == "lisp-eid-valid-prefixes" { return "LispEidValidPrefixes" }
    if yname == "lisp-rloc-objects" { return "LispRlocObjects" }
    if yname == "ss-vxlan-ltep-ifh" { return "SsVxlanLtepIfh" }
    if yname == "ss-drop-pl-count" { return "SsDropPlCount" }
    if yname == "exclusive-load-sharing-element" { return "ExclusiveLoadSharingElement" }
    if yname == "shared-load-sharing-element" { return "SharedLoadSharingElement" }
    if yname == "cross-shared-load-sharing-element" { return "CrossSharedLoadSharingElement" }
    if yname == "label-shared-load-sharing-element" { return "LabelSharedLoadSharingElement" }
    if yname == "prefix-masklen-distribution" { return "PrefixMasklenDistribution" }
    return ""
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclusive-load-sharing-element" {
        return &summary.ExclusiveLoadSharingElement
    }
    if childYangName == "shared-load-sharing-element" {
        return &summary.SharedLoadSharingElement
    }
    if childYangName == "cross-shared-load-sharing-element" {
        return &summary.CrossSharedLoadSharingElement
    }
    if childYangName == "label-shared-load-sharing-element" {
        return &summary.LabelSharedLoadSharingElement
    }
    if childYangName == "prefix-masklen-distribution" {
        return &summary.PrefixMasklenDistribution
    }
    return nil
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["exclusive-load-sharing-element"] = &summary.ExclusiveLoadSharingElement
    children["shared-load-sharing-element"] = &summary.SharedLoadSharingElement
    children["cross-shared-load-sharing-element"] = &summary.CrossSharedLoadSharingElement
    children["label-shared-load-sharing-element"] = &summary.LabelSharedLoadSharingElement
    children["prefix-masklen-distribution"] = &summary.PrefixMasklenDistribution
    return children
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summary.Prefix
    leafs["ss-tbl-id"] = summary.SsTblId
    leafs["ss-tbl-id-ptr"] = summary.SsTblIdPtr
    leafs["ss-vrf-id"] = summary.SsVrfId
    leafs["ss-vr-id"] = summary.SsVrId
    leafs["load-balancing"] = summary.LoadBalancing
    leafs["forwarding-elements"] = summary.ForwardingElements
    leafs["routes"] = summary.Routes
    leafs["prefix-in-place-modifications"] = summary.PrefixInPlaceModifications
    leafs["stale-prefix-deletes"] = summary.StalePrefixDeletes
    leafs["load-sharing-elements"] = summary.LoadSharingElements
    leafs["load-sharing-references"] = summary.LoadSharingReferences
    leafs["total-load-share-element-bytes"] = summary.TotalLoadShareElementBytes
    leafs["leaves-used-bytes"] = summary.LeavesUsedBytes
    leafs["reresolve-entries"] = summary.ReresolveEntries
    leafs["old-unresolve-entries"] = summary.OldUnresolveEntries
    leafs["new-unresolve-entries"] = summary.NewUnresolveEntries
    leafs["unresolve-entries"] = summary.UnresolveEntries
    leafs["cef-route-drops"] = summary.CefRouteDrops
    leafs["cef-version-mismatch-route-drops"] = summary.CefVersionMismatchRouteDrops
    leafs["delete-cache-num-entries"] = summary.DeleteCacheNumEntries
    leafs["existing-leaves-revisions"] = summary.ExistingLeavesRevisions
    leafs["fib-default-prefix"] = summary.FibDefaultPrefix
    leafs["fib-default-prefix-mask-length"] = summary.FibDefaultPrefixMaskLength
    leafs["next-hops"] = summary.NextHops
    leafs["incomplete-next-hops"] = summary.IncompleteNextHops
    leafs["resolution-timer"] = summary.ResolutionTimer
    leafs["slow-process-timer"] = summary.SlowProcessTimer
    leafs["max-resolution-timer"] = summary.MaxResolutionTimer
    leafs["imposition-prefixes"] = summary.ImpositionPrefixes
    leafs["extended-prefixes"] = summary.ExtendedPrefixes
    leafs["cefl-bl-recycled-routes"] = summary.CeflBlRecycledRoutes
    leafs["ldi-backwalks"] = summary.LdiBackwalks
    leafs["ss-prot-route-count"] = summary.SsProtRouteCount
    leafs["lisp-eid-prefixes"] = summary.LispEidPrefixes
    leafs["lisp-eid-valid-prefixes"] = summary.LispEidValidPrefixes
    leafs["lisp-rloc-objects"] = summary.LispRlocObjects
    leafs["ss-vxlan-ltep-ifh"] = summary.SsVxlanLtepIfh
    leafs["ss-drop-pl-count"] = summary.SsDropPlCount
    return leafs
}

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetYangName() string { return "summary" }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement
// Exclusive load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetFilter() yfilter.YFilter { return exclusiveLoadSharingElement.YFilter }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) SetFilter(yf yfilter.YFilter) { exclusiveLoadSharingElement.YFilter = yf }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetSegmentPath() string {
    return "exclusive-load-sharing-element"
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = exclusiveLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = exclusiveLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = exclusiveLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = exclusiveLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = exclusiveLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = exclusiveLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = exclusiveLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = exclusiveLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = exclusiveLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = exclusiveLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetYangName() string { return "exclusive-load-sharing-element" }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) SetParent(parent types.Entity) { exclusiveLoadSharingElement.parent = parent }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetParent() types.Entity { return exclusiveLoadSharingElement.parent }

func (exclusiveLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_ExclusiveLoadSharingElement) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement
// Shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetFilter() yfilter.YFilter { return sharedLoadSharingElement.YFilter }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) SetFilter(yf yfilter.YFilter) { sharedLoadSharingElement.YFilter = yf }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetSegmentPath() string {
    return "shared-load-sharing-element"
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = sharedLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = sharedLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = sharedLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = sharedLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = sharedLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = sharedLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = sharedLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = sharedLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = sharedLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = sharedLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetYangName() string { return "shared-load-sharing-element" }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) SetParent(parent types.Entity) { sharedLoadSharingElement.parent = parent }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetParent() types.Entity { return sharedLoadSharingElement.parent }

func (sharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_SharedLoadSharingElement) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement
// Cross-table shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetFilter() yfilter.YFilter { return crossSharedLoadSharingElement.YFilter }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) SetFilter(yf yfilter.YFilter) { crossSharedLoadSharingElement.YFilter = yf }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetSegmentPath() string {
    return "cross-shared-load-sharing-element"
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = crossSharedLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = crossSharedLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = crossSharedLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = crossSharedLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = crossSharedLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = crossSharedLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = crossSharedLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = crossSharedLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = crossSharedLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = crossSharedLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetYangName() string { return "cross-shared-load-sharing-element" }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) SetParent(parent types.Entity) { crossSharedLoadSharingElement.parent = parent }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetParent() types.Entity { return crossSharedLoadSharingElement.parent }

func (crossSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_CrossSharedLoadSharingElement) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement
// Label-shared load sharing element
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total memory used by load sharing elements in bytes. The type is
    // interface{} with range: 0..4294967295. Units are byte.
    TotalLoadSharingElementBytes interface{}

    // Total count of references to load sharing elements. The type is interface{}
    // with range: 0..18446744073709551615.
    TotalLoadSharingElementReferences interface{}

    // Total count of Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    TotalPathListElements interface{}

    // Count of recursive Pathlist elements. The type is interface{} with range:
    // 0..4294967295.
    RecursivePathListElements interface{}

    // Count of platform shared Pathlist elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedPathListElements interface{}

    // Count of Pathlist elements in retry. The type is interface{} with range:
    // 0..4294967295.
    RetryPathListElements interface{}

    // Total count of Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    TotalLoadInfoElements interface{}

    // Count of recursive Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    RecursiveLoadInfoElements interface{}

    // Count of platform shared Loadinfo elements. The type is interface{} with
    // range: 0..4294967295.
    PlatformSharedLoadInfoElements interface{}

    // Count of XPL Loadinfo elements. The type is interface{} with range:
    // 0..4294967295.
    XplLoadInfoElements interface{}
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetFilter() yfilter.YFilter { return labelSharedLoadSharingElement.YFilter }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) SetFilter(yf yfilter.YFilter) { labelSharedLoadSharingElement.YFilter = yf }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetGoName(yname string) string {
    if yname == "total-load-sharing-element-bytes" { return "TotalLoadSharingElementBytes" }
    if yname == "total-load-sharing-element-references" { return "TotalLoadSharingElementReferences" }
    if yname == "total-path-list-elements" { return "TotalPathListElements" }
    if yname == "recursive-path-list-elements" { return "RecursivePathListElements" }
    if yname == "platform-shared-path-list-elements" { return "PlatformSharedPathListElements" }
    if yname == "retry-path-list-elements" { return "RetryPathListElements" }
    if yname == "total-load-info-elements" { return "TotalLoadInfoElements" }
    if yname == "recursive-load-info-elements" { return "RecursiveLoadInfoElements" }
    if yname == "platform-shared-load-info-elements" { return "PlatformSharedLoadInfoElements" }
    if yname == "xpl-load-info-elements" { return "XplLoadInfoElements" }
    return ""
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetSegmentPath() string {
    return "label-shared-load-sharing-element"
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-load-sharing-element-bytes"] = labelSharedLoadSharingElement.TotalLoadSharingElementBytes
    leafs["total-load-sharing-element-references"] = labelSharedLoadSharingElement.TotalLoadSharingElementReferences
    leafs["total-path-list-elements"] = labelSharedLoadSharingElement.TotalPathListElements
    leafs["recursive-path-list-elements"] = labelSharedLoadSharingElement.RecursivePathListElements
    leafs["platform-shared-path-list-elements"] = labelSharedLoadSharingElement.PlatformSharedPathListElements
    leafs["retry-path-list-elements"] = labelSharedLoadSharingElement.RetryPathListElements
    leafs["total-load-info-elements"] = labelSharedLoadSharingElement.TotalLoadInfoElements
    leafs["recursive-load-info-elements"] = labelSharedLoadSharingElement.RecursiveLoadInfoElements
    leafs["platform-shared-load-info-elements"] = labelSharedLoadSharingElement.PlatformSharedLoadInfoElements
    leafs["xpl-load-info-elements"] = labelSharedLoadSharingElement.XplLoadInfoElements
    return leafs
}

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetBundleName() string { return "cisco_ios_xr" }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetYangName() string { return "label-shared-load-sharing-element" }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) SetParent(parent types.Entity) { labelSharedLoadSharingElement.parent = parent }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetParent() types.Entity { return labelSharedLoadSharingElement.parent }

func (labelSharedLoadSharingElement *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_LabelSharedLoadSharingElement) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution
// Distribution of prefix mask lengths
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Masklength counts for unicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe.
    UnicastPrefixe []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe

    // Masklength counts for broadcast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe.
    BroadcastPrefixe []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe

    // Masklength counts for multicast prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix.
    MulticastPrefix []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetFilter() yfilter.YFilter { return prefixMasklenDistribution.YFilter }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) SetFilter(yf yfilter.YFilter) { prefixMasklenDistribution.YFilter = yf }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetGoName(yname string) string {
    if yname == "unicast-prefixe" { return "UnicastPrefixe" }
    if yname == "broadcast-prefixe" { return "BroadcastPrefixe" }
    if yname == "multicast-prefix" { return "MulticastPrefix" }
    return ""
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetSegmentPath() string {
    return "prefix-masklen-distribution"
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unicast-prefixe" {
        for _, c := range prefixMasklenDistribution.UnicastPrefixe {
            if prefixMasklenDistribution.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe{}
        prefixMasklenDistribution.UnicastPrefixe = append(prefixMasklenDistribution.UnicastPrefixe, child)
        return &prefixMasklenDistribution.UnicastPrefixe[len(prefixMasklenDistribution.UnicastPrefixe)-1]
    }
    if childYangName == "broadcast-prefixe" {
        for _, c := range prefixMasklenDistribution.BroadcastPrefixe {
            if prefixMasklenDistribution.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe{}
        prefixMasklenDistribution.BroadcastPrefixe = append(prefixMasklenDistribution.BroadcastPrefixe, child)
        return &prefixMasklenDistribution.BroadcastPrefixe[len(prefixMasklenDistribution.BroadcastPrefixe)-1]
    }
    if childYangName == "multicast-prefix" {
        for _, c := range prefixMasklenDistribution.MulticastPrefix {
            if prefixMasklenDistribution.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix{}
        prefixMasklenDistribution.MulticastPrefix = append(prefixMasklenDistribution.MulticastPrefix, child)
        return &prefixMasklenDistribution.MulticastPrefix[len(prefixMasklenDistribution.MulticastPrefix)-1]
    }
    return nil
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixMasklenDistribution.UnicastPrefixe {
        children[prefixMasklenDistribution.UnicastPrefixe[i].GetSegmentPath()] = &prefixMasklenDistribution.UnicastPrefixe[i]
    }
    for i := range prefixMasklenDistribution.BroadcastPrefixe {
        children[prefixMasklenDistribution.BroadcastPrefixe[i].GetSegmentPath()] = &prefixMasklenDistribution.BroadcastPrefixe[i]
    }
    for i := range prefixMasklenDistribution.MulticastPrefix {
        children[prefixMasklenDistribution.MulticastPrefix[i].GetSegmentPath()] = &prefixMasklenDistribution.MulticastPrefix[i]
    }
    return children
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetBundleName() string { return "cisco_ios_xr" }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetYangName() string { return "prefix-masklen-distribution" }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) SetParent(parent types.Entity) { prefixMasklenDistribution.parent = parent }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetParent() types.Entity { return prefixMasklenDistribution.parent }

func (prefixMasklenDistribution *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution) GetParentYangName() string { return "summary" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe
// Masklength counts for unicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetFilter() yfilter.YFilter { return unicastPrefixe.YFilter }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) SetFilter(yf yfilter.YFilter) { unicastPrefixe.YFilter = yf }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetGoName(yname string) string {
    if yname == "mask-length" { return "MaskLength" }
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    return ""
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetSegmentPath() string {
    return "unicast-prefixe"
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mask-length"] = unicastPrefixe.MaskLength
    leafs["number-of-prefixes"] = unicastPrefixe.NumberOfPrefixes
    return leafs
}

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetBundleName() string { return "cisco_ios_xr" }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetYangName() string { return "unicast-prefixe" }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) SetParent(parent types.Entity) { unicastPrefixe.parent = parent }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetParent() types.Entity { return unicastPrefixe.parent }

func (unicastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_UnicastPrefixe) GetParentYangName() string { return "prefix-masklen-distribution" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe
// Masklength counts for broadcast prefixes
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetFilter() yfilter.YFilter { return broadcastPrefixe.YFilter }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) SetFilter(yf yfilter.YFilter) { broadcastPrefixe.YFilter = yf }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetGoName(yname string) string {
    if yname == "mask-length" { return "MaskLength" }
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    return ""
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetSegmentPath() string {
    return "broadcast-prefixe"
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mask-length"] = broadcastPrefixe.MaskLength
    leafs["number-of-prefixes"] = broadcastPrefixe.NumberOfPrefixes
    return leafs
}

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetBundleName() string { return "cisco_ios_xr" }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetYangName() string { return "broadcast-prefixe" }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) SetParent(parent types.Entity) { broadcastPrefixe.parent = parent }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetParent() types.Entity { return broadcastPrefixe.parent }

func (broadcastPrefixe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_BroadcastPrefixe) GetParentYangName() string { return "prefix-masklen-distribution" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix
// Masklength counts for multicast prefixes
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mask length. The type is interface{} with range: 0..255.
    MaskLength interface{}

    // Number of prefixes with given mask length. The type is interface{} with
    // range: 0..4294967295.
    NumberOfPrefixes interface{}
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetFilter() yfilter.YFilter { return multicastPrefix.YFilter }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) SetFilter(yf yfilter.YFilter) { multicastPrefix.YFilter = yf }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetGoName(yname string) string {
    if yname == "mask-length" { return "MaskLength" }
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    return ""
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetSegmentPath() string {
    return "multicast-prefix"
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mask-length"] = multicastPrefix.MaskLength
    leafs["number-of-prefixes"] = multicastPrefix.NumberOfPrefixes
    return leafs
}

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetYangName() string { return "multicast-prefix" }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) SetParent(parent types.Entity) { multicastPrefix.parent = parent }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetParent() types.Entity { return multicastPrefix.parent }

func (multicastPrefix *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_Summary_PrefixMasklenDistribution_MulticastPrefix) GetParentYangName() string { return "prefix-masklen-distribution" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos
// Table of InterfaceInfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify link type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo.
    InterfaceInfo []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetFilter() yfilter.YFilter { return interfaceInfos.YFilter }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) SetFilter(yf yfilter.YFilter) { interfaceInfos.YFilter = yf }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetGoName(yname string) string {
    if yname == "interface-info" { return "InterfaceInfo" }
    return ""
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetSegmentPath() string {
    return "interface-infos"
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-info" {
        for _, c := range interfaceInfos.InterfaceInfo {
            if interfaceInfos.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo{}
        interfaceInfos.InterfaceInfo = append(interfaceInfos.InterfaceInfo, child)
        return &interfaceInfos.InterfaceInfo[len(interfaceInfos.InterfaceInfo)-1]
    }
    return nil
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceInfos.InterfaceInfo {
        children[interfaceInfos.InterfaceInfo[i].GetSegmentPath()] = &interfaceInfos.InterfaceInfo[i]
    }
    return children
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetYangName() string { return "interface-infos" }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) SetParent(parent types.Entity) { interfaceInfos.parent = parent }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetParent() types.Entity { return interfaceInfos.parent }

func (interfaceInfos *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo
// Specify link type
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Link type. The type is FibLink.
    LinkType interface{}

    // Table of interfaces.
    Interfaces Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetFilter() yfilter.YFilter { return interfaceInfo.YFilter }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) SetFilter(yf yfilter.YFilter) { interfaceInfo.YFilter = yf }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetSegmentPath() string {
    return "interface-info" + "[link-type='" + fmt.Sprintf("%v", interfaceInfo.LinkType) + "']"
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &interfaceInfo.Interfaces
    }
    return nil
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &interfaceInfo.Interfaces
    return children
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = interfaceInfo.LinkType
    return leafs
}

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetYangName() string { return "interface-info" }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) SetParent(parent types.Entity) { interfaceInfo.parent = parent }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetParent() types.Entity { return interfaceInfo.parent }

func (interfaceInfo *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo) GetParentYangName() string { return "interface-infos" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces
// Table of interfaces
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify Interface name. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface.
    Interface []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces) GetParentYangName() string { return "interface-info" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface
// Specify Interface name
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    PerInterface interface{}

    // FIB Interface type. The type is interface{} with range: 0..4294967295.
    FibInterfaceType interface{}

    // Pointer to fibidb. The type is interface{} with range: 0..4294967295.
    FibIdPointer interface{}

    // Flags on fibidb. The type is interface{} with range: 0..4294967295.
    FibIdFlags interface{}

    // Pointer to fibidb extension. The type is interface{} with range:
    // 0..4294967295.
    FibIdExtensionPointer interface{}

    // Flags on fibidb extension. The type is interface{} with range:
    // 0..4294967295.
    FibIdExtensionFlags interface{}

    // Number of dependent nhinfo's. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependentNextHopInformation interface{}

    // Vrf local cef info ptr. The type is interface{} with range: 0..4294967295.
    VrfLocalCefInformationPointer interface{}

    // Reference count. The type is interface{} with range: 0..65535.
    ReferenceCount interface{}

    // Time last modified. The type is interface{} with range: 0..4294967295.
    LastModifiedTime interface{}

    // Last Oper. The type is FibidbOper.
    LastOperation interface{}

    // Is the protocol configured?. The type is bool.
    ProtocolEnabled interface{}

    // Reference count for the protocol. The type is interface{} with range:
    // 0..4294967295.
    ReferanceCountForProtocol interface{}

    // Number of input packets. The type is interface{} with range:
    // 0..18446744073709551615.
    NumberOfInputPackets interface{}

    // Number of input bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    NumberOfInputBytes interface{}

    // Number of output packets. The type is interface{} with range:
    // 0..18446744073709551615.
    NumberOfOutputPackets interface{}

    // Number of output bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    NumberOfOutputBytes interface{}

    // Interface up flag. The type is bool.
    InterfaceUpFlag interface{}

    // Per packet loadbalancing flag. The type is bool.
    PerPacketLoadBalancingFlag interface{}

    // P2P interface flag. The type is bool.
    P2PInterfaceFlag interface{}

    // Loopback interface flag. The type is bool.
    LoopbackInterfaceFlag interface{}

    // Null interface flag. The type is bool.
    NullInterfaceFlag interface{}

    // Tunnel interface flag. The type is bool.
    TunnelInterfaceFlag interface{}

    // GRE Tunnel interface flag. The type is bool.
    GreTunnelInterfaceFlag interface{}

    // Punt packets from FIB switching flag. The type is bool.
    PuntPacketsFromFibSwitchingFlag interface{}

    // Drop packets while FIB switching flag. The type is bool.
    DropPacketsWhileFibSwitchingFlag interface{}

    // Punt packets from linecard flag. The type is bool.
    PuntPacketsFromLinecardFlag interface{}

    // Pimary local v4 address for the interface. The type is string with length:
    // 0..52.
    PrimaryIpv4Address interface{}

    // Pimary local v6 address for the interface. The type is string with length:
    // 0..52.
    PrimaryIpv6Address interface{}

    // Detailed FIB interface information.
    DetailFibIntInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation

    // Internal Information.
    SiInternal Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "per-interface" { return "PerInterface" }
    if yname == "fib-interface-type" { return "FibInterfaceType" }
    if yname == "fib-id-pointer" { return "FibIdPointer" }
    if yname == "fib-id-flags" { return "FibIdFlags" }
    if yname == "fib-id-extension-pointer" { return "FibIdExtensionPointer" }
    if yname == "fib-id-extension-flags" { return "FibIdExtensionFlags" }
    if yname == "number-of-dependent-next-hop-information" { return "NumberOfDependentNextHopInformation" }
    if yname == "vrf-local-cef-information-pointer" { return "VrfLocalCefInformationPointer" }
    if yname == "reference-count" { return "ReferenceCount" }
    if yname == "last-modified-time" { return "LastModifiedTime" }
    if yname == "last-operation" { return "LastOperation" }
    if yname == "protocol-enabled" { return "ProtocolEnabled" }
    if yname == "referance-count-for-protocol" { return "ReferanceCountForProtocol" }
    if yname == "number-of-input-packets" { return "NumberOfInputPackets" }
    if yname == "number-of-input-bytes" { return "NumberOfInputBytes" }
    if yname == "number-of-output-packets" { return "NumberOfOutputPackets" }
    if yname == "number-of-output-bytes" { return "NumberOfOutputBytes" }
    if yname == "interface-up-flag" { return "InterfaceUpFlag" }
    if yname == "per-packet-load-balancing-flag" { return "PerPacketLoadBalancingFlag" }
    if yname == "p2p-interface-flag" { return "P2PInterfaceFlag" }
    if yname == "loopback-interface-flag" { return "LoopbackInterfaceFlag" }
    if yname == "null-interface-flag" { return "NullInterfaceFlag" }
    if yname == "tunnel-interface-flag" { return "TunnelInterfaceFlag" }
    if yname == "gre-tunnel-interface-flag" { return "GreTunnelInterfaceFlag" }
    if yname == "punt-packets-from-fib-switching-flag" { return "PuntPacketsFromFibSwitchingFlag" }
    if yname == "drop-packets-while-fib-switching-flag" { return "DropPacketsWhileFibSwitchingFlag" }
    if yname == "punt-packets-from-linecard-flag" { return "PuntPacketsFromLinecardFlag" }
    if yname == "primary-ipv4-address" { return "PrimaryIpv4Address" }
    if yname == "primary-ipv6-address" { return "PrimaryIpv6Address" }
    if yname == "detail-fib-int-information" { return "DetailFibIntInformation" }
    if yname == "si-internal" { return "SiInternal" }
    return ""
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-fib-int-information" {
        return &self.DetailFibIntInformation
    }
    if childYangName == "si-internal" {
        return &self.SiInternal
    }
    return nil
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["detail-fib-int-information"] = &self.DetailFibIntInformation
    children["si-internal"] = &self.SiInternal
    return children
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["per-interface"] = self.PerInterface
    leafs["fib-interface-type"] = self.FibInterfaceType
    leafs["fib-id-pointer"] = self.FibIdPointer
    leafs["fib-id-flags"] = self.FibIdFlags
    leafs["fib-id-extension-pointer"] = self.FibIdExtensionPointer
    leafs["fib-id-extension-flags"] = self.FibIdExtensionFlags
    leafs["number-of-dependent-next-hop-information"] = self.NumberOfDependentNextHopInformation
    leafs["vrf-local-cef-information-pointer"] = self.VrfLocalCefInformationPointer
    leafs["reference-count"] = self.ReferenceCount
    leafs["last-modified-time"] = self.LastModifiedTime
    leafs["last-operation"] = self.LastOperation
    leafs["protocol-enabled"] = self.ProtocolEnabled
    leafs["referance-count-for-protocol"] = self.ReferanceCountForProtocol
    leafs["number-of-input-packets"] = self.NumberOfInputPackets
    leafs["number-of-input-bytes"] = self.NumberOfInputBytes
    leafs["number-of-output-packets"] = self.NumberOfOutputPackets
    leafs["number-of-output-bytes"] = self.NumberOfOutputBytes
    leafs["interface-up-flag"] = self.InterfaceUpFlag
    leafs["per-packet-load-balancing-flag"] = self.PerPacketLoadBalancingFlag
    leafs["p2p-interface-flag"] = self.P2PInterfaceFlag
    leafs["loopback-interface-flag"] = self.LoopbackInterfaceFlag
    leafs["null-interface-flag"] = self.NullInterfaceFlag
    leafs["tunnel-interface-flag"] = self.TunnelInterfaceFlag
    leafs["gre-tunnel-interface-flag"] = self.GreTunnelInterfaceFlag
    leafs["punt-packets-from-fib-switching-flag"] = self.PuntPacketsFromFibSwitchingFlag
    leafs["drop-packets-while-fib-switching-flag"] = self.DropPacketsWhileFibSwitchingFlag
    leafs["punt-packets-from-linecard-flag"] = self.PuntPacketsFromLinecardFlag
    leafs["primary-ipv4-address"] = self.PrimaryIpv4Address
    leafs["primary-ipv6-address"] = self.PrimaryIpv6Address
    return leafs
}

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation
// Detailed FIB interface information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Protocol MTU. The type is interface{} with range: 0..65535.
    InterfaceMtu interface{}

    // Forwarding enabled/disabled flag. The type is bool.
    ForwardingFlag interface{}

    // RPF configured flag. The type is bool.
    RpfConfiguredFlag interface{}

    // RPF mode. The type is FibRpfMode.
    RpfMode interface{}

    // Allow default route with RPF. The type is bool.
    DefaultRouteWithRpf interface{}

    // Allow selfping with RPF. The type is bool.
    SelfPingWithRpf interface{}

    // BGP PA configured flag. The type is bool.
    BgpPaInputConfiguredFlag interface{}

    // src BGP PA configured flag. The type is bool.
    SourceBgpPaInputConfiguredFlag interface{}

    // dst BGP PA configured flag. The type is bool.
    DestinationBgpPaInputConfiguredFlag interface{}

    // BGP PA configured flag. The type is bool.
    BgpPaOutputConfiguredFlag interface{}

    // src BGP PA configured flag. The type is bool.
    SourceBgpPaOutputConfiguredFlag interface{}

    // dst BGP PA configured flag. The type is bool.
    DestinationBgpPaOutputConfiguredFlag interface{}

    // ICMP  configured flag. The type is interface{} with range: 0..4294967295.
    IcmpFlag interface{}

    // Drop packets with multiple-label-stack if set. The type is bool.
    MultiLabelDropFlag interface{}
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetFilter() yfilter.YFilter { return detailFibIntInformation.YFilter }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) SetFilter(yf yfilter.YFilter) { detailFibIntInformation.YFilter = yf }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetGoName(yname string) string {
    if yname == "interface-mtu" { return "InterfaceMtu" }
    if yname == "forwarding-flag" { return "ForwardingFlag" }
    if yname == "rpf-configured-flag" { return "RpfConfiguredFlag" }
    if yname == "rpf-mode" { return "RpfMode" }
    if yname == "default-route-with-rpf" { return "DefaultRouteWithRpf" }
    if yname == "self-ping-with-rpf" { return "SelfPingWithRpf" }
    if yname == "bgp-pa-input-configured-flag" { return "BgpPaInputConfiguredFlag" }
    if yname == "source-bgp-pa-input-configured-flag" { return "SourceBgpPaInputConfiguredFlag" }
    if yname == "destination-bgp-pa-input-configured-flag" { return "DestinationBgpPaInputConfiguredFlag" }
    if yname == "bgp-pa-output-configured-flag" { return "BgpPaOutputConfiguredFlag" }
    if yname == "source-bgp-pa-output-configured-flag" { return "SourceBgpPaOutputConfiguredFlag" }
    if yname == "destination-bgp-pa-output-configured-flag" { return "DestinationBgpPaOutputConfiguredFlag" }
    if yname == "icmp-flag" { return "IcmpFlag" }
    if yname == "multi-label-drop-flag" { return "MultiLabelDropFlag" }
    return ""
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetSegmentPath() string {
    return "detail-fib-int-information"
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-mtu"] = detailFibIntInformation.InterfaceMtu
    leafs["forwarding-flag"] = detailFibIntInformation.ForwardingFlag
    leafs["rpf-configured-flag"] = detailFibIntInformation.RpfConfiguredFlag
    leafs["rpf-mode"] = detailFibIntInformation.RpfMode
    leafs["default-route-with-rpf"] = detailFibIntInformation.DefaultRouteWithRpf
    leafs["self-ping-with-rpf"] = detailFibIntInformation.SelfPingWithRpf
    leafs["bgp-pa-input-configured-flag"] = detailFibIntInformation.BgpPaInputConfiguredFlag
    leafs["source-bgp-pa-input-configured-flag"] = detailFibIntInformation.SourceBgpPaInputConfiguredFlag
    leafs["destination-bgp-pa-input-configured-flag"] = detailFibIntInformation.DestinationBgpPaInputConfiguredFlag
    leafs["bgp-pa-output-configured-flag"] = detailFibIntInformation.BgpPaOutputConfiguredFlag
    leafs["source-bgp-pa-output-configured-flag"] = detailFibIntInformation.SourceBgpPaOutputConfiguredFlag
    leafs["destination-bgp-pa-output-configured-flag"] = detailFibIntInformation.DestinationBgpPaOutputConfiguredFlag
    leafs["icmp-flag"] = detailFibIntInformation.IcmpFlag
    leafs["multi-label-drop-flag"] = detailFibIntInformation.MultiLabelDropFlag
    return leafs
}

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetBundleName() string { return "cisco_ios_xr" }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetYangName() string { return "detail-fib-int-information" }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) SetParent(parent types.Entity) { detailFibIntInformation.parent = parent }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetParent() types.Entity { return detailFibIntInformation.parent }

func (detailFibIntInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_DetailFibIntInformation) GetParentYangName() string { return "interface" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal
// Internal Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event History for IDB.
    FibIdbHist Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist

    // Event History for Srtehead.
    FibSrteHeadHist Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetFilter() yfilter.YFilter { return siInternal.YFilter }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) SetFilter(yf yfilter.YFilter) { siInternal.YFilter = yf }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetGoName(yname string) string {
    if yname == "fib-idb-hist" { return "FibIdbHist" }
    if yname == "fib-srte-head-hist" { return "FibSrteHeadHist" }
    return ""
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetSegmentPath() string {
    return "si-internal"
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-idb-hist" {
        return &siInternal.FibIdbHist
    }
    if childYangName == "fib-srte-head-hist" {
        return &siInternal.FibSrteHeadHist
    }
    return nil
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-idb-hist"] = &siInternal.FibIdbHist
    children["fib-srte-head-hist"] = &siInternal.FibSrteHeadHist
    return children
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetBundleName() string { return "cisco_ios_xr" }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetYangName() string { return "si-internal" }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) SetParent(parent types.Entity) { siInternal.parent = parent }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetParent() types.Entity { return siInternal.parent }

func (siInternal *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal) GetParentYangName() string { return "interface" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist
// Event History for IDB
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class name string. The type is string.
    EvtClassName interface{}

    // Array of event entries. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry.
    EvtEntry []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetFilter() yfilter.YFilter { return fibIdbHist.YFilter }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) SetFilter(yf yfilter.YFilter) { fibIdbHist.YFilter = yf }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetGoName(yname string) string {
    if yname == "evt-class-name" { return "EvtClassName" }
    if yname == "evt-entry" { return "EvtEntry" }
    return ""
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetSegmentPath() string {
    return "fib-idb-hist"
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evt-entry" {
        for _, c := range fibIdbHist.EvtEntry {
            if fibIdbHist.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry{}
        fibIdbHist.EvtEntry = append(fibIdbHist.EvtEntry, child)
        return &fibIdbHist.EvtEntry[len(fibIdbHist.EvtEntry)-1]
    }
    return nil
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fibIdbHist.EvtEntry {
        children[fibIdbHist.EvtEntry[i].GetSegmentPath()] = &fibIdbHist.EvtEntry[i]
    }
    return children
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evt-class-name"] = fibIdbHist.EvtClassName
    return leafs
}

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetBundleName() string { return "cisco_ios_xr" }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetYangName() string { return "fib-idb-hist" }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) SetParent(parent types.Entity) { fibIdbHist.parent = parent }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetParent() types.Entity { return fibIdbHist.parent }

func (fibIdbHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist) GetParentYangName() string { return "si-internal" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry
// Array of event entries
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The timestamp of the event. The type is string.
    EvtTimestamp interface{}

    // Event name. The type is string.
    EvtName interface{}

    // Event type. The type is interface{} with range: 0..255.
    EvtType interface{}

    // Multiple instance flag. The type is bool.
    EvtMany interface{}

    // Sticky flag. The type is bool.
    EvtSticky interface{}

    // Optional data. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData.
    EvtData []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetFilter() yfilter.YFilter { return evtEntry.YFilter }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) SetFilter(yf yfilter.YFilter) { evtEntry.YFilter = yf }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetGoName(yname string) string {
    if yname == "evt-timestamp" { return "EvtTimestamp" }
    if yname == "evt-name" { return "EvtName" }
    if yname == "evt-type" { return "EvtType" }
    if yname == "evt-many" { return "EvtMany" }
    if yname == "evt-sticky" { return "EvtSticky" }
    if yname == "evt-data" { return "EvtData" }
    return ""
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetSegmentPath() string {
    return "evt-entry"
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evt-data" {
        for _, c := range evtEntry.EvtData {
            if evtEntry.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData{}
        evtEntry.EvtData = append(evtEntry.EvtData, child)
        return &evtEntry.EvtData[len(evtEntry.EvtData)-1]
    }
    return nil
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evtEntry.EvtData {
        children[evtEntry.EvtData[i].GetSegmentPath()] = &evtEntry.EvtData[i]
    }
    return children
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evt-timestamp"] = evtEntry.EvtTimestamp
    leafs["evt-name"] = evtEntry.EvtName
    leafs["evt-type"] = evtEntry.EvtType
    leafs["evt-many"] = evtEntry.EvtMany
    leafs["evt-sticky"] = evtEntry.EvtSticky
    return leafs
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetBundleName() string { return "cisco_ios_xr" }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetYangName() string { return "evt-entry" }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) SetParent(parent types.Entity) { evtEntry.parent = parent }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetParent() types.Entity { return evtEntry.parent }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry) GetParentYangName() string { return "fib-idb-hist" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData
// Optional data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetFilter() yfilter.YFilter { return evtData.YFilter }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) SetFilter(yf yfilter.YFilter) { evtData.YFilter = yf }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetSegmentPath() string {
    return "evt-data"
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = evtData.Entry
    return leafs
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetBundleName() string { return "cisco_ios_xr" }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetYangName() string { return "evt-data" }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) SetParent(parent types.Entity) { evtData.parent = parent }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetParent() types.Entity { return evtData.parent }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibIdbHist_EvtEntry_EvtData) GetParentYangName() string { return "evt-entry" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist
// Event History for Srtehead
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class name string. The type is string.
    EvtClassName interface{}

    // Array of event entries. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry.
    EvtEntry []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetFilter() yfilter.YFilter { return fibSrteHeadHist.YFilter }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) SetFilter(yf yfilter.YFilter) { fibSrteHeadHist.YFilter = yf }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetGoName(yname string) string {
    if yname == "evt-class-name" { return "EvtClassName" }
    if yname == "evt-entry" { return "EvtEntry" }
    return ""
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetSegmentPath() string {
    return "fib-srte-head-hist"
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evt-entry" {
        for _, c := range fibSrteHeadHist.EvtEntry {
            if fibSrteHeadHist.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry{}
        fibSrteHeadHist.EvtEntry = append(fibSrteHeadHist.EvtEntry, child)
        return &fibSrteHeadHist.EvtEntry[len(fibSrteHeadHist.EvtEntry)-1]
    }
    return nil
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fibSrteHeadHist.EvtEntry {
        children[fibSrteHeadHist.EvtEntry[i].GetSegmentPath()] = &fibSrteHeadHist.EvtEntry[i]
    }
    return children
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evt-class-name"] = fibSrteHeadHist.EvtClassName
    return leafs
}

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetBundleName() string { return "cisco_ios_xr" }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetYangName() string { return "fib-srte-head-hist" }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) SetParent(parent types.Entity) { fibSrteHeadHist.parent = parent }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetParent() types.Entity { return fibSrteHeadHist.parent }

func (fibSrteHeadHist *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist) GetParentYangName() string { return "si-internal" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry
// Array of event entries
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The timestamp of the event. The type is string.
    EvtTimestamp interface{}

    // Event name. The type is string.
    EvtName interface{}

    // Event type. The type is interface{} with range: 0..255.
    EvtType interface{}

    // Multiple instance flag. The type is bool.
    EvtMany interface{}

    // Sticky flag. The type is bool.
    EvtSticky interface{}

    // Optional data. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData.
    EvtData []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetFilter() yfilter.YFilter { return evtEntry.YFilter }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) SetFilter(yf yfilter.YFilter) { evtEntry.YFilter = yf }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetGoName(yname string) string {
    if yname == "evt-timestamp" { return "EvtTimestamp" }
    if yname == "evt-name" { return "EvtName" }
    if yname == "evt-type" { return "EvtType" }
    if yname == "evt-many" { return "EvtMany" }
    if yname == "evt-sticky" { return "EvtSticky" }
    if yname == "evt-data" { return "EvtData" }
    return ""
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetSegmentPath() string {
    return "evt-entry"
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evt-data" {
        for _, c := range evtEntry.EvtData {
            if evtEntry.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData{}
        evtEntry.EvtData = append(evtEntry.EvtData, child)
        return &evtEntry.EvtData[len(evtEntry.EvtData)-1]
    }
    return nil
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evtEntry.EvtData {
        children[evtEntry.EvtData[i].GetSegmentPath()] = &evtEntry.EvtData[i]
    }
    return children
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evt-timestamp"] = evtEntry.EvtTimestamp
    leafs["evt-name"] = evtEntry.EvtName
    leafs["evt-type"] = evtEntry.EvtType
    leafs["evt-many"] = evtEntry.EvtMany
    leafs["evt-sticky"] = evtEntry.EvtSticky
    return leafs
}

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetBundleName() string { return "cisco_ios_xr" }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetYangName() string { return "evt-entry" }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) SetParent(parent types.Entity) { evtEntry.parent = parent }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetParent() types.Entity { return evtEntry.parent }

func (evtEntry *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry) GetParentYangName() string { return "fib-srte-head-hist" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData
// Optional data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetFilter() yfilter.YFilter { return evtData.YFilter }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) SetFilter(yf yfilter.YFilter) { evtData.YFilter = yf }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetSegmentPath() string {
    return "evt-data"
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = evtData.Entry
    return leafs
}

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetBundleName() string { return "cisco_ios_xr" }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetYangName() string { return "evt-data" }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) SetParent(parent types.Entity) { evtData.parent = parent }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetParent() types.Entity { return evtData.parent }

func (evtData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_InterfaceInfos_InterfaceInfo_Interfaces_Interface_SiInternal_FibSrteHeadHist_EvtEntry_EvtData) GetParentYangName() string { return "evt-entry" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs
// IP FIB prefix brief table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP FIB prefix brief table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief.
    IpPrefixBrief []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetFilter() yfilter.YFilter { return ipPrefixBriefs.YFilter }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) SetFilter(yf yfilter.YFilter) { ipPrefixBriefs.YFilter = yf }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetGoName(yname string) string {
    if yname == "ip-prefix-brief" { return "IpPrefixBrief" }
    return ""
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetSegmentPath() string {
    return "ip-prefix-briefs"
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-prefix-brief" {
        for _, c := range ipPrefixBriefs.IpPrefixBrief {
            if ipPrefixBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief{}
        ipPrefixBriefs.IpPrefixBrief = append(ipPrefixBriefs.IpPrefixBrief, child)
        return &ipPrefixBriefs.IpPrefixBrief[len(ipPrefixBriefs.IpPrefixBrief)-1]
    }
    return nil
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipPrefixBriefs.IpPrefixBrief {
        children[ipPrefixBriefs.IpPrefixBrief[i].GetSegmentPath()] = &ipPrefixBriefs.IpPrefixBrief[i]
    }
    return children
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetYangName() string { return "ip-prefix-briefs" }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) SetParent(parent types.Entity) { ipPrefixBriefs.parent = parent }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetParent() types.Entity { return ipPrefixBriefs.parent }

func (ipPrefixBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief
// IP FIB prefix brief table entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination IP address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IP prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Proto type for this entry. The type is interface{} with range:
    // 0..4294967295.
    ProtocolTypeFibEntry interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardware interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToPathList interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // The pathlist source. The type is interface{} with range: 0..4294967295.
    PathListSource interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToLdi interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The flags of ext assocaited with LDI . The type is interface{} with range:
    // 0..4294967295.
    FlagsExternalLdi interface{}

    // The pointer to the ext assocaited with LDI. The type is interface{} with
    // range: 0..4294967295.
    PointerExternalLdi interface{}

    // exact-path interface handle. The type is interface{} with range:
    // 0..4294967295.
    ExactPathInterfaceHandle interface{}

    // exact-path GRE physical interface handle. The type is interface{} with
    // range: 0..4294967295.
    ExactPathGreInterfaceHandle interface{}

    // exact-route GRE phy ifh available. The type is bool.
    ExactRouteGrePhysIfhAvail interface{}

    // exact-route result. The type is bool.
    ExactRouteResult interface{}

    // Prefix is static or connected. The type is bool.
    PrefixIsStaticOrConnected interface{}

    // Packet should always be received. The type is bool.
    PacketShouldRecieve interface{}

    // Prefix is connected. The type is bool.
    PrefixConnected interface{}

    // Prefix is for an adjacency. The type is bool.
    PrefixForAdjancency interface{}

    // Prefix is for a PIC nexthop. The type is bool.
    PrefixForPicNextHop interface{}

    // Purgable after the purge interval. The type is bool.
    PurgableAfterPurgeInterval interface{}

    // Broadcast receive flag. The type is bool.
    BroadcastReciveFlag interface{}

    // Broadcast forward flag. The type is bool.
    BroadcastForwardFlag interface{}

    // 0/0 route added as default route. The type is bool.
    ZeroByZeroRouteAsDefault interface{}

    // External switch function triggered. The type is bool.
    ExternalSwitchTriggered interface{}

    // Route attributes summary flag. The type is bool.
    RouteAttributeFlag interface{}

    // Dummy real zero route. The type is bool.
    DummyRealZeroRoute interface{}

    // The LDI LW flags. The type is interface{} with range: 0..4294967295.
    LdiLwFlag interface{}

    // The refcounter of LDI LW LDI. The type is interface{} with range:
    // 0..4294967295.
    RefCounterOfLdiLwLdi interface{}

    // The type of LDI LW LDI. The type is interface{} with range: 0..4294967295.
    TypeOfLdiLwLdi interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    VersionOfRoute interface{}

    // Priority at which the route was downloaded. The type is interface{} with
    // range: 0..4294967295.
    FibRouteDownloadPriority interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}

    // Is L2 Subscriber route. The type is bool.
    L2SubscriberRoute interface{}

    // XConnect-id associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberXconnectId interface{}

    // IP protocol associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberIpProtocol interface{}

    // L2TPv3 cookie length for L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2Tpv3CookieLengthBits interface{}

    // Route destined for Line Card that support External Reach only. The type is
    // bool.
    RouteForExternalReachLinecardFlag interface{}

    // Route is a MPLS Segment-Routing prefix. The type is bool.
    RouteIsSrFlag interface{}

    // Detailed FIB entry information.
    DetailFibEntryInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation

    // FIB entry path details.
    FibEntryPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath

    // Information about IPv6 SR prefix.
    Srv6Information Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information

    // Leaf Extension Object List. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject.
    ExtensionObject []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetFilter() yfilter.YFilter { return ipPrefixBrief.YFilter }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) SetFilter(yf yfilter.YFilter) { ipPrefixBrief.YFilter = yf }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol-type-fib-entry" { return "ProtocolTypeFibEntry" }
    if yname == "platform-hardware" { return "PlatformHardware" }
    if yname == "number-of-referances-to-path-list" { return "NumberOfReferancesToPathList" }
    if yname == "path-list-flags" { return "PathListFlags" }
    if yname == "path-list-source" { return "PathListSource" }
    if yname == "number-of-referances-to-ldi" { return "NumberOfReferancesToLdi" }
    if yname == "ldi-flags" { return "LdiFlags" }
    if yname == "flags-external-ldi" { return "FlagsExternalLdi" }
    if yname == "pointer-external-ldi" { return "PointerExternalLdi" }
    if yname == "exact-path-interface-handle" { return "ExactPathInterfaceHandle" }
    if yname == "exact-path-gre-interface-handle" { return "ExactPathGreInterfaceHandle" }
    if yname == "exact-route-gre-phys-ifh-avail" { return "ExactRouteGrePhysIfhAvail" }
    if yname == "exact-route-result" { return "ExactRouteResult" }
    if yname == "prefix-is-static-or-connected" { return "PrefixIsStaticOrConnected" }
    if yname == "packet-should-recieve" { return "PacketShouldRecieve" }
    if yname == "prefix-connected" { return "PrefixConnected" }
    if yname == "prefix-for-adjancency" { return "PrefixForAdjancency" }
    if yname == "prefix-for-pic-next-hop" { return "PrefixForPicNextHop" }
    if yname == "purgable-after-purge-interval" { return "PurgableAfterPurgeInterval" }
    if yname == "broadcast-recive-flag" { return "BroadcastReciveFlag" }
    if yname == "broadcast-forward-flag" { return "BroadcastForwardFlag" }
    if yname == "zero-by-zero-route-as-default" { return "ZeroByZeroRouteAsDefault" }
    if yname == "external-switch-triggered" { return "ExternalSwitchTriggered" }
    if yname == "route-attribute-flag" { return "RouteAttributeFlag" }
    if yname == "dummy-real-zero-route" { return "DummyRealZeroRoute" }
    if yname == "ldi-lw-flag" { return "LdiLwFlag" }
    if yname == "ref-counter-of-ldi-lw-ldi" { return "RefCounterOfLdiLwLdi" }
    if yname == "type-of-ldi-lw-ldi" { return "TypeOfLdiLwLdi" }
    if yname == "lspa-flags" { return "LspaFlags" }
    if yname == "version-of-route" { return "VersionOfRoute" }
    if yname == "fib-route-download-priority" { return "FibRouteDownloadPriority" }
    if yname == "time-of-last-update-in-msec" { return "TimeOfLastUpdateInMsec" }
    if yname == "l2-subscriber-route" { return "L2SubscriberRoute" }
    if yname == "l2-subscriber-xconnect-id" { return "L2SubscriberXconnectId" }
    if yname == "l2-subscriber-ip-protocol" { return "L2SubscriberIpProtocol" }
    if yname == "l2tpv3-cookie-length-bits" { return "L2Tpv3CookieLengthBits" }
    if yname == "route-for-external-reach-linecard-flag" { return "RouteForExternalReachLinecardFlag" }
    if yname == "route-is-sr-flag" { return "RouteIsSrFlag" }
    if yname == "detail-fib-entry-information" { return "DetailFibEntryInformation" }
    if yname == "fib-entry-path" { return "FibEntryPath" }
    if yname == "srv6-information" { return "Srv6Information" }
    if yname == "extension-object" { return "ExtensionObject" }
    return ""
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetSegmentPath() string {
    return "ip-prefix-brief"
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-fib-entry-information" {
        return &ipPrefixBrief.DetailFibEntryInformation
    }
    if childYangName == "fib-entry-path" {
        return &ipPrefixBrief.FibEntryPath
    }
    if childYangName == "srv6-information" {
        return &ipPrefixBrief.Srv6Information
    }
    if childYangName == "extension-object" {
        for _, c := range ipPrefixBrief.ExtensionObject {
            if ipPrefixBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject{}
        ipPrefixBrief.ExtensionObject = append(ipPrefixBrief.ExtensionObject, child)
        return &ipPrefixBrief.ExtensionObject[len(ipPrefixBrief.ExtensionObject)-1]
    }
    return nil
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["detail-fib-entry-information"] = &ipPrefixBrief.DetailFibEntryInformation
    children["fib-entry-path"] = &ipPrefixBrief.FibEntryPath
    children["srv6-information"] = &ipPrefixBrief.Srv6Information
    for i := range ipPrefixBrief.ExtensionObject {
        children[ipPrefixBrief.ExtensionObject[i].GetSegmentPath()] = &ipPrefixBrief.ExtensionObject[i]
    }
    return children
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipPrefixBrief.Prefix
    leafs["prefix-length"] = ipPrefixBrief.PrefixLength
    leafs["protocol-type-fib-entry"] = ipPrefixBrief.ProtocolTypeFibEntry
    leafs["platform-hardware"] = ipPrefixBrief.PlatformHardware
    leafs["number-of-referances-to-path-list"] = ipPrefixBrief.NumberOfReferancesToPathList
    leafs["path-list-flags"] = ipPrefixBrief.PathListFlags
    leafs["path-list-source"] = ipPrefixBrief.PathListSource
    leafs["number-of-referances-to-ldi"] = ipPrefixBrief.NumberOfReferancesToLdi
    leafs["ldi-flags"] = ipPrefixBrief.LdiFlags
    leafs["flags-external-ldi"] = ipPrefixBrief.FlagsExternalLdi
    leafs["pointer-external-ldi"] = ipPrefixBrief.PointerExternalLdi
    leafs["exact-path-interface-handle"] = ipPrefixBrief.ExactPathInterfaceHandle
    leafs["exact-path-gre-interface-handle"] = ipPrefixBrief.ExactPathGreInterfaceHandle
    leafs["exact-route-gre-phys-ifh-avail"] = ipPrefixBrief.ExactRouteGrePhysIfhAvail
    leafs["exact-route-result"] = ipPrefixBrief.ExactRouteResult
    leafs["prefix-is-static-or-connected"] = ipPrefixBrief.PrefixIsStaticOrConnected
    leafs["packet-should-recieve"] = ipPrefixBrief.PacketShouldRecieve
    leafs["prefix-connected"] = ipPrefixBrief.PrefixConnected
    leafs["prefix-for-adjancency"] = ipPrefixBrief.PrefixForAdjancency
    leafs["prefix-for-pic-next-hop"] = ipPrefixBrief.PrefixForPicNextHop
    leafs["purgable-after-purge-interval"] = ipPrefixBrief.PurgableAfterPurgeInterval
    leafs["broadcast-recive-flag"] = ipPrefixBrief.BroadcastReciveFlag
    leafs["broadcast-forward-flag"] = ipPrefixBrief.BroadcastForwardFlag
    leafs["zero-by-zero-route-as-default"] = ipPrefixBrief.ZeroByZeroRouteAsDefault
    leafs["external-switch-triggered"] = ipPrefixBrief.ExternalSwitchTriggered
    leafs["route-attribute-flag"] = ipPrefixBrief.RouteAttributeFlag
    leafs["dummy-real-zero-route"] = ipPrefixBrief.DummyRealZeroRoute
    leafs["ldi-lw-flag"] = ipPrefixBrief.LdiLwFlag
    leafs["ref-counter-of-ldi-lw-ldi"] = ipPrefixBrief.RefCounterOfLdiLwLdi
    leafs["type-of-ldi-lw-ldi"] = ipPrefixBrief.TypeOfLdiLwLdi
    leafs["lspa-flags"] = ipPrefixBrief.LspaFlags
    leafs["version-of-route"] = ipPrefixBrief.VersionOfRoute
    leafs["fib-route-download-priority"] = ipPrefixBrief.FibRouteDownloadPriority
    leafs["time-of-last-update-in-msec"] = ipPrefixBrief.TimeOfLastUpdateInMsec
    leafs["l2-subscriber-route"] = ipPrefixBrief.L2SubscriberRoute
    leafs["l2-subscriber-xconnect-id"] = ipPrefixBrief.L2SubscriberXconnectId
    leafs["l2-subscriber-ip-protocol"] = ipPrefixBrief.L2SubscriberIpProtocol
    leafs["l2tpv3-cookie-length-bits"] = ipPrefixBrief.L2Tpv3CookieLengthBits
    leafs["route-for-external-reach-linecard-flag"] = ipPrefixBrief.RouteForExternalReachLinecardFlag
    leafs["route-is-sr-flag"] = ipPrefixBrief.RouteIsSrFlag
    return leafs
}

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetYangName() string { return "ip-prefix-brief" }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) SetParent(parent types.Entity) { ipPrefixBrief.parent = parent }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetParent() types.Entity { return ipPrefixBrief.parent }

func (ipPrefixBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief) GetParentYangName() string { return "ip-prefix-briefs" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation
// Detailed FIB entry information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB entry version number. The type is interface{} with range:
    // 0..4294967295.
    FibEntryVersion interface{}

    // Per Prefix Accounting. The type is interface{} with range: 0..255.
    PerPrefixAccounting interface{}

    // Load sharing type. The type is FibLoadshareShow.
    LoadSharingType interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    FibEntryAdjacencyType interface{}

    // FIB Protocol type. The type is interface{} with range: 0..4294967295.
    FibProtocolType interface{}

    // AFI FIB protocol type. The type is interface{} with range: 0..4294967295.
    AfiFibProtocolType interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    AibL3Address interface{}

    // ADJ ADDR LEN. The type is interface{} with range: 0..4294967295.
    AdjacencyAddressLength interface{}

    // ADJ IFH. The type is interface{} with range: 0..4294967295.
    AdjacencyInterface interface{}

    // FIB Special NHINFO Type. The type is interface{} with range: 0..4294967295.
    FibSpecialNhInformationType interface{}

    // FIB entry adj address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    FibEntryAdjacencyAddress interface{}

    // FIB entry adjacency interface. The type is interface{} with range:
    // 0..4294967295.
    FibEntryAdjacencyInterface interface{}

    // Packets through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughFibEntry interface{}

    // Bytes through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughFibEntry interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    DetailedPrefixLength interface{}

    // Prefix protocol. The type is interface{} with range: 0..4294967295.
    PrefixProtocol interface{}

    // Precedence for packets to this entry. The type is interface{} with range:
    // 0..255.
    PrecedenceForpackets interface{}

    // Traffic index for packets to this entry. The type is interface{} with
    // range: 0..255.
    TrafficIndexForPackets interface{}

    // Switch function compontent ID. The type is interface{} with range:
    // 0..4294967295.
    SwitchCompontentId interface{}

    // Fast adjacency flag. The type is bool.
    FastAdjacencyFlag interface{}

    // Illegal fast adjacency flag. The type is bool.
    IllegalFastAdjacencyFlag interface{}

    // Remote adjacency flag. The type is bool.
    RemoteAdjacencyFlag interface{}

    // BGP attribute id. The type is interface{} with range: 0..4294967295.
    BgpAttributeId interface{}

    // BGP local attribute id. The type is interface{} with range: 0..4294967295.
    BgpLocalAttributeId interface{}

    // BGP attribute origin as. The type is interface{} with range: 0..4294967295.
    BgpAttributeOriginAs interface{}

    // BGP attribute next hop as. The type is interface{} with range:
    // 0..4294967295.
    BgpAttributeNextHopAs interface{}

    // As path string. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathString interface{}

    // extcom st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtcomString interface{}

    // com st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ComString interface{}

    // extended community. The type is interface{} with range: 0..4294967295.
    ExtendedCommunity interface{}

    // qos group. The type is interface{} with range: 0..4294967295.
    QosGroup interface{}

    // mpls fec. The type is interface{} with range: 0..4294967295.
    MplsFec interface{}

    // qppb QOS group and IP precedence. The type is interface{} with range:
    // 0..4294967295.
    QppbQosGroupAndIpPrecedence interface{}

    // PBR flow-tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // SPP forwarding class ID. The type is interface{} with range: 0..255.
    ForwardClass interface{}

    // The time of last update for PL in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    PlTimeOfLastUpdateInMsec interface{}

    // The time of last update for LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LdiTimeOfLastUpdateInMsec interface{}

    // The time of last update for LW-LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LwldiTimeOfLastUpdateInMsec interface{}

    // The type of time-stamp on PL. The type is interface{} with range:
    // 0..4294967295.
    PlTimeStampType interface{}

    // Detailed Loadshare info.
    LoadshareInformation Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetFilter() yfilter.YFilter { return detailFibEntryInformation.YFilter }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) SetFilter(yf yfilter.YFilter) { detailFibEntryInformation.YFilter = yf }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetGoName(yname string) string {
    if yname == "fib-entry-version" { return "FibEntryVersion" }
    if yname == "per-prefix-accounting" { return "PerPrefixAccounting" }
    if yname == "load-sharing-type" { return "LoadSharingType" }
    if yname == "fib-entry-adjacency-type" { return "FibEntryAdjacencyType" }
    if yname == "fib-protocol-type" { return "FibProtocolType" }
    if yname == "afi-fib-protocol-type" { return "AfiFibProtocolType" }
    if yname == "aib-l3-address" { return "AibL3Address" }
    if yname == "adjacency-address-length" { return "AdjacencyAddressLength" }
    if yname == "adjacency-interface" { return "AdjacencyInterface" }
    if yname == "fib-special-nh-information-type" { return "FibSpecialNhInformationType" }
    if yname == "fib-entry-adjacency-address" { return "FibEntryAdjacencyAddress" }
    if yname == "fib-entry-adjacency-interface" { return "FibEntryAdjacencyInterface" }
    if yname == "packets-through-fib-entry" { return "PacketsThroughFibEntry" }
    if yname == "bytes-through-fib-entry" { return "BytesThroughFibEntry" }
    if yname == "detailed-prefix-length" { return "DetailedPrefixLength" }
    if yname == "prefix-protocol" { return "PrefixProtocol" }
    if yname == "precedence-forpackets" { return "PrecedenceForpackets" }
    if yname == "traffic-index-for-packets" { return "TrafficIndexForPackets" }
    if yname == "switch-compontent-id" { return "SwitchCompontentId" }
    if yname == "fast-adjacency-flag" { return "FastAdjacencyFlag" }
    if yname == "illegal-fast-adjacency-flag" { return "IllegalFastAdjacencyFlag" }
    if yname == "remote-adjacency-flag" { return "RemoteAdjacencyFlag" }
    if yname == "bgp-attribute-id" { return "BgpAttributeId" }
    if yname == "bgp-local-attribute-id" { return "BgpLocalAttributeId" }
    if yname == "bgp-attribute-origin-as" { return "BgpAttributeOriginAs" }
    if yname == "bgp-attribute-next-hop-as" { return "BgpAttributeNextHopAs" }
    if yname == "path-string" { return "PathString" }
    if yname == "extcom-string" { return "ExtcomString" }
    if yname == "com-string" { return "ComString" }
    if yname == "extended-community" { return "ExtendedCommunity" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "mpls-fec" { return "MplsFec" }
    if yname == "qppb-qos-group-and-ip-precedence" { return "QppbQosGroupAndIpPrecedence" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "forward-class" { return "ForwardClass" }
    if yname == "pl-time-of-last-update-in-msec" { return "PlTimeOfLastUpdateInMsec" }
    if yname == "ldi-time-of-last-update-in-msec" { return "LdiTimeOfLastUpdateInMsec" }
    if yname == "lwldi-time-of-last-update-in-msec" { return "LwldiTimeOfLastUpdateInMsec" }
    if yname == "pl-time-stamp-type" { return "PlTimeStampType" }
    if yname == "loadshare-information" { return "LoadshareInformation" }
    return ""
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetSegmentPath() string {
    return "detail-fib-entry-information"
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loadshare-information" {
        return &detailFibEntryInformation.LoadshareInformation
    }
    return nil
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["loadshare-information"] = &detailFibEntryInformation.LoadshareInformation
    return children
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fib-entry-version"] = detailFibEntryInformation.FibEntryVersion
    leafs["per-prefix-accounting"] = detailFibEntryInformation.PerPrefixAccounting
    leafs["load-sharing-type"] = detailFibEntryInformation.LoadSharingType
    leafs["fib-entry-adjacency-type"] = detailFibEntryInformation.FibEntryAdjacencyType
    leafs["fib-protocol-type"] = detailFibEntryInformation.FibProtocolType
    leafs["afi-fib-protocol-type"] = detailFibEntryInformation.AfiFibProtocolType
    leafs["aib-l3-address"] = detailFibEntryInformation.AibL3Address
    leafs["adjacency-address-length"] = detailFibEntryInformation.AdjacencyAddressLength
    leafs["adjacency-interface"] = detailFibEntryInformation.AdjacencyInterface
    leafs["fib-special-nh-information-type"] = detailFibEntryInformation.FibSpecialNhInformationType
    leafs["fib-entry-adjacency-address"] = detailFibEntryInformation.FibEntryAdjacencyAddress
    leafs["fib-entry-adjacency-interface"] = detailFibEntryInformation.FibEntryAdjacencyInterface
    leafs["packets-through-fib-entry"] = detailFibEntryInformation.PacketsThroughFibEntry
    leafs["bytes-through-fib-entry"] = detailFibEntryInformation.BytesThroughFibEntry
    leafs["detailed-prefix-length"] = detailFibEntryInformation.DetailedPrefixLength
    leafs["prefix-protocol"] = detailFibEntryInformation.PrefixProtocol
    leafs["precedence-forpackets"] = detailFibEntryInformation.PrecedenceForpackets
    leafs["traffic-index-for-packets"] = detailFibEntryInformation.TrafficIndexForPackets
    leafs["switch-compontent-id"] = detailFibEntryInformation.SwitchCompontentId
    leafs["fast-adjacency-flag"] = detailFibEntryInformation.FastAdjacencyFlag
    leafs["illegal-fast-adjacency-flag"] = detailFibEntryInformation.IllegalFastAdjacencyFlag
    leafs["remote-adjacency-flag"] = detailFibEntryInformation.RemoteAdjacencyFlag
    leafs["bgp-attribute-id"] = detailFibEntryInformation.BgpAttributeId
    leafs["bgp-local-attribute-id"] = detailFibEntryInformation.BgpLocalAttributeId
    leafs["bgp-attribute-origin-as"] = detailFibEntryInformation.BgpAttributeOriginAs
    leafs["bgp-attribute-next-hop-as"] = detailFibEntryInformation.BgpAttributeNextHopAs
    leafs["path-string"] = detailFibEntryInformation.PathString
    leafs["extcom-string"] = detailFibEntryInformation.ExtcomString
    leafs["com-string"] = detailFibEntryInformation.ComString
    leafs["extended-community"] = detailFibEntryInformation.ExtendedCommunity
    leafs["qos-group"] = detailFibEntryInformation.QosGroup
    leafs["mpls-fec"] = detailFibEntryInformation.MplsFec
    leafs["qppb-qos-group-and-ip-precedence"] = detailFibEntryInformation.QppbQosGroupAndIpPrecedence
    leafs["flow-tag"] = detailFibEntryInformation.FlowTag
    leafs["forward-class"] = detailFibEntryInformation.ForwardClass
    leafs["pl-time-of-last-update-in-msec"] = detailFibEntryInformation.PlTimeOfLastUpdateInMsec
    leafs["ldi-time-of-last-update-in-msec"] = detailFibEntryInformation.LdiTimeOfLastUpdateInMsec
    leafs["lwldi-time-of-last-update-in-msec"] = detailFibEntryInformation.LwldiTimeOfLastUpdateInMsec
    leafs["pl-time-stamp-type"] = detailFibEntryInformation.PlTimeStampType
    return leafs
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetBundleName() string { return "cisco_ios_xr" }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetYangName() string { return "detail-fib-entry-information" }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) SetParent(parent types.Entity) { detailFibEntryInformation.parent = parent }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetParent() types.Entity { return detailFibEntryInformation.parent }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation) GetParentYangName() string { return "ip-prefix-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation
// Detailed Loadshare info
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughLoadInformation interface{}

    // Bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughLoadInformation interface{}

    // Total packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalPacketsThroughLoadInformation interface{}

    // Total bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TotalBytesThroughLoadInformation interface{}

    // Prefix of the owner. The type is interface{} with range: 0..4294967295.
    PrefixOfOwner interface{}

    // Mask length of the owner. The type is interface{} with range:
    // 0..4294967295.
    MaskLengthOfOwner interface{}

    // Loadinfo reference count. The type is interface{} with range: 0..65535.
    LoadInformationReferenceCount interface{}

    // Per destination load sharing flag. The type is bool.
    PerDestLoadSharingFlag interface{}

    // Loadinfo owner deleted flag. The type is bool.
    LoadInformationOwnerDeletedFlag interface{}

    // Loadinfo sanity flag. The type is bool.
    LoadinfoSanityFlag interface{}

    // Owner flag. The type is bool.
    IsOwner interface{}

    // Loadinfo internal data.
    LoadInformtionInternalData Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetFilter() yfilter.YFilter { return loadshareInformation.YFilter }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) SetFilter(yf yfilter.YFilter) { loadshareInformation.YFilter = yf }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetGoName(yname string) string {
    if yname == "packets-through-load-information" { return "PacketsThroughLoadInformation" }
    if yname == "bytes-through-load-information" { return "BytesThroughLoadInformation" }
    if yname == "total-packets-through-load-information" { return "TotalPacketsThroughLoadInformation" }
    if yname == "total-bytes-through-load-information" { return "TotalBytesThroughLoadInformation" }
    if yname == "prefix-of-owner" { return "PrefixOfOwner" }
    if yname == "mask-length-of-owner" { return "MaskLengthOfOwner" }
    if yname == "load-information-reference-count" { return "LoadInformationReferenceCount" }
    if yname == "per-dest-load-sharing-flag" { return "PerDestLoadSharingFlag" }
    if yname == "load-information-owner-deleted-flag" { return "LoadInformationOwnerDeletedFlag" }
    if yname == "loadinfo-sanity-flag" { return "LoadinfoSanityFlag" }
    if yname == "is-owner" { return "IsOwner" }
    if yname == "load-informtion-internal-data" { return "LoadInformtionInternalData" }
    return ""
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetSegmentPath() string {
    return "loadshare-information"
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "load-informtion-internal-data" {
        return &loadshareInformation.LoadInformtionInternalData
    }
    return nil
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["load-informtion-internal-data"] = &loadshareInformation.LoadInformtionInternalData
    return children
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["packets-through-load-information"] = loadshareInformation.PacketsThroughLoadInformation
    leafs["bytes-through-load-information"] = loadshareInformation.BytesThroughLoadInformation
    leafs["total-packets-through-load-information"] = loadshareInformation.TotalPacketsThroughLoadInformation
    leafs["total-bytes-through-load-information"] = loadshareInformation.TotalBytesThroughLoadInformation
    leafs["prefix-of-owner"] = loadshareInformation.PrefixOfOwner
    leafs["mask-length-of-owner"] = loadshareInformation.MaskLengthOfOwner
    leafs["load-information-reference-count"] = loadshareInformation.LoadInformationReferenceCount
    leafs["per-dest-load-sharing-flag"] = loadshareInformation.PerDestLoadSharingFlag
    leafs["load-information-owner-deleted-flag"] = loadshareInformation.LoadInformationOwnerDeletedFlag
    leafs["loadinfo-sanity-flag"] = loadshareInformation.LoadinfoSanityFlag
    leafs["is-owner"] = loadshareInformation.IsOwner
    return leafs
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetBundleName() string { return "cisco_ios_xr" }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetYangName() string { return "loadshare-information" }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) SetParent(parent types.Entity) { loadshareInformation.parent = parent }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetParent() types.Entity { return loadshareInformation.parent }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation) GetParentYangName() string { return "detail-fib-entry-information" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
// Loadinfo internal data
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // level of ldis. The type is interface{} with range: 0..255.
    LevelOfldis interface{}

    // no. of ldis. The type is interface{} with range: 0..255.
    NumberOfLdis interface{}

    // Maximum index of the arrays. The type is interface{} with range:
    // 0..4294967295.
    MaximumIndexArrays interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathIndices interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathLdiNumbers interface{}

    // Maximum slots. The type is interface{} with range: 0..4294967295.
    MaximumSlots interface{}

    // Normalized weights. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NormalizedWeights interface{}

    // Tunnel class value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TunnelClassValue interface{}

    // PBTS info valid flag. The type is bool.
    IsPbtsInfoValid interface{}

    // PBTS class offset. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassOffset interface{}

    // PBTS class num paths. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassNumPaths interface{}

    // PBTS class falls back to class. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsFallbackMappedClass interface{}

    // Round Robin Disable. The type is bool.
    RoundRobinDisable interface{}

    // Number of LDI next hop buckets. The type is interface{} with range: 0..255.
    LdiNextHopBuckets interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardwareInformation interface{}

    // Sanity flag. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag.
    SanityFlag []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag

    // Interface handle. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle.
    InterfaceHandle []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle

    // Weights of paths. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath.
    WeightsOfPath []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath

    // Adjacency address. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress.
    AdjacencyAddress []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress

    // Does PBTS class fall back to drop or any class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped.
    PbtsClassIsFallbackMapped []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped

    // PBTS class falls back to drop. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop.
    PbtsFallbackToDrop []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop

    // Tunnel is forward class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass.
    TunnelIsForwardClass []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetFilter() yfilter.YFilter { return loadInformtionInternalData.YFilter }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) SetFilter(yf yfilter.YFilter) { loadInformtionInternalData.YFilter = yf }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetGoName(yname string) string {
    if yname == "level-ofldis" { return "LevelOfldis" }
    if yname == "number-of-ldis" { return "NumberOfLdis" }
    if yname == "maximum-index-arrays" { return "MaximumIndexArrays" }
    if yname == "path-indices" { return "PathIndices" }
    if yname == "path-ldi-numbers" { return "PathLdiNumbers" }
    if yname == "maximum-slots" { return "MaximumSlots" }
    if yname == "normalized-weights" { return "NormalizedWeights" }
    if yname == "tunnel-class-value" { return "TunnelClassValue" }
    if yname == "is-pbts-info-valid" { return "IsPbtsInfoValid" }
    if yname == "pbts-class-offset" { return "PbtsClassOffset" }
    if yname == "pbts-class-num-paths" { return "PbtsClassNumPaths" }
    if yname == "pbts-fallback-mapped-class" { return "PbtsFallbackMappedClass" }
    if yname == "round-robin-disable" { return "RoundRobinDisable" }
    if yname == "ldi-next-hop-buckets" { return "LdiNextHopBuckets" }
    if yname == "platform-hardware-information" { return "PlatformHardwareInformation" }
    if yname == "sanity-flag" { return "SanityFlag" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "weights-of-path" { return "WeightsOfPath" }
    if yname == "adjacency-address" { return "AdjacencyAddress" }
    if yname == "pbts-class-is-fallback-mapped" { return "PbtsClassIsFallbackMapped" }
    if yname == "pbts-fallback-to-drop" { return "PbtsFallbackToDrop" }
    if yname == "tunnel-is-forward-class" { return "TunnelIsForwardClass" }
    return ""
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetSegmentPath() string {
    return "load-informtion-internal-data"
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sanity-flag" {
        for _, c := range loadInformtionInternalData.SanityFlag {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag{}
        loadInformtionInternalData.SanityFlag = append(loadInformtionInternalData.SanityFlag, child)
        return &loadInformtionInternalData.SanityFlag[len(loadInformtionInternalData.SanityFlag)-1]
    }
    if childYangName == "interface-handle" {
        for _, c := range loadInformtionInternalData.InterfaceHandle {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle{}
        loadInformtionInternalData.InterfaceHandle = append(loadInformtionInternalData.InterfaceHandle, child)
        return &loadInformtionInternalData.InterfaceHandle[len(loadInformtionInternalData.InterfaceHandle)-1]
    }
    if childYangName == "weights-of-path" {
        for _, c := range loadInformtionInternalData.WeightsOfPath {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath{}
        loadInformtionInternalData.WeightsOfPath = append(loadInformtionInternalData.WeightsOfPath, child)
        return &loadInformtionInternalData.WeightsOfPath[len(loadInformtionInternalData.WeightsOfPath)-1]
    }
    if childYangName == "adjacency-address" {
        for _, c := range loadInformtionInternalData.AdjacencyAddress {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress{}
        loadInformtionInternalData.AdjacencyAddress = append(loadInformtionInternalData.AdjacencyAddress, child)
        return &loadInformtionInternalData.AdjacencyAddress[len(loadInformtionInternalData.AdjacencyAddress)-1]
    }
    if childYangName == "pbts-class-is-fallback-mapped" {
        for _, c := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped{}
        loadInformtionInternalData.PbtsClassIsFallbackMapped = append(loadInformtionInternalData.PbtsClassIsFallbackMapped, child)
        return &loadInformtionInternalData.PbtsClassIsFallbackMapped[len(loadInformtionInternalData.PbtsClassIsFallbackMapped)-1]
    }
    if childYangName == "pbts-fallback-to-drop" {
        for _, c := range loadInformtionInternalData.PbtsFallbackToDrop {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop{}
        loadInformtionInternalData.PbtsFallbackToDrop = append(loadInformtionInternalData.PbtsFallbackToDrop, child)
        return &loadInformtionInternalData.PbtsFallbackToDrop[len(loadInformtionInternalData.PbtsFallbackToDrop)-1]
    }
    if childYangName == "tunnel-is-forward-class" {
        for _, c := range loadInformtionInternalData.TunnelIsForwardClass {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass{}
        loadInformtionInternalData.TunnelIsForwardClass = append(loadInformtionInternalData.TunnelIsForwardClass, child)
        return &loadInformtionInternalData.TunnelIsForwardClass[len(loadInformtionInternalData.TunnelIsForwardClass)-1]
    }
    return nil
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range loadInformtionInternalData.SanityFlag {
        children[loadInformtionInternalData.SanityFlag[i].GetSegmentPath()] = &loadInformtionInternalData.SanityFlag[i]
    }
    for i := range loadInformtionInternalData.InterfaceHandle {
        children[loadInformtionInternalData.InterfaceHandle[i].GetSegmentPath()] = &loadInformtionInternalData.InterfaceHandle[i]
    }
    for i := range loadInformtionInternalData.WeightsOfPath {
        children[loadInformtionInternalData.WeightsOfPath[i].GetSegmentPath()] = &loadInformtionInternalData.WeightsOfPath[i]
    }
    for i := range loadInformtionInternalData.AdjacencyAddress {
        children[loadInformtionInternalData.AdjacencyAddress[i].GetSegmentPath()] = &loadInformtionInternalData.AdjacencyAddress[i]
    }
    for i := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
        children[loadInformtionInternalData.PbtsClassIsFallbackMapped[i].GetSegmentPath()] = &loadInformtionInternalData.PbtsClassIsFallbackMapped[i]
    }
    for i := range loadInformtionInternalData.PbtsFallbackToDrop {
        children[loadInformtionInternalData.PbtsFallbackToDrop[i].GetSegmentPath()] = &loadInformtionInternalData.PbtsFallbackToDrop[i]
    }
    for i := range loadInformtionInternalData.TunnelIsForwardClass {
        children[loadInformtionInternalData.TunnelIsForwardClass[i].GetSegmentPath()] = &loadInformtionInternalData.TunnelIsForwardClass[i]
    }
    return children
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level-ofldis"] = loadInformtionInternalData.LevelOfldis
    leafs["number-of-ldis"] = loadInformtionInternalData.NumberOfLdis
    leafs["maximum-index-arrays"] = loadInformtionInternalData.MaximumIndexArrays
    leafs["path-indices"] = loadInformtionInternalData.PathIndices
    leafs["path-ldi-numbers"] = loadInformtionInternalData.PathLdiNumbers
    leafs["maximum-slots"] = loadInformtionInternalData.MaximumSlots
    leafs["normalized-weights"] = loadInformtionInternalData.NormalizedWeights
    leafs["tunnel-class-value"] = loadInformtionInternalData.TunnelClassValue
    leafs["is-pbts-info-valid"] = loadInformtionInternalData.IsPbtsInfoValid
    leafs["pbts-class-offset"] = loadInformtionInternalData.PbtsClassOffset
    leafs["pbts-class-num-paths"] = loadInformtionInternalData.PbtsClassNumPaths
    leafs["pbts-fallback-mapped-class"] = loadInformtionInternalData.PbtsFallbackMappedClass
    leafs["round-robin-disable"] = loadInformtionInternalData.RoundRobinDisable
    leafs["ldi-next-hop-buckets"] = loadInformtionInternalData.LdiNextHopBuckets
    leafs["platform-hardware-information"] = loadInformtionInternalData.PlatformHardwareInformation
    return leafs
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetBundleName() string { return "cisco_ios_xr" }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetYangName() string { return "load-informtion-internal-data" }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) SetParent(parent types.Entity) { loadInformtionInternalData.parent = parent }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetParent() types.Entity { return loadInformtionInternalData.parent }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetParentYangName() string { return "loadshare-information" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag
// Sanity flag
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is bool.
    Entry interface{}
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetFilter() yfilter.YFilter { return sanityFlag.YFilter }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) SetFilter(yf yfilter.YFilter) { sanityFlag.YFilter = yf }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetSegmentPath() string {
    return "sanity-flag"
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = sanityFlag.Entry
    return leafs
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetBundleName() string { return "cisco_ios_xr" }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetYangName() string { return "sanity-flag" }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) SetParent(parent types.Entity) { sanityFlag.parent = parent }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetParent() types.Entity { return sanityFlag.parent }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle
// Interface handle
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-zA-Z0-9./-]+.
    Entry interface{}
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetFilter() yfilter.YFilter { return interfaceHandle.YFilter }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) SetFilter(yf yfilter.YFilter) { interfaceHandle.YFilter = yf }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetSegmentPath() string {
    return "interface-handle"
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceHandle.Entry
    return leafs
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetYangName() string { return "interface-handle" }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) SetParent(parent types.Entity) { interfaceHandle.parent = parent }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetParent() types.Entity { return interfaceHandle.parent }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath
// Weights of paths
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetFilter() yfilter.YFilter { return weightsOfPath.YFilter }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) SetFilter(yf yfilter.YFilter) { weightsOfPath.YFilter = yf }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetSegmentPath() string {
    return "weights-of-path"
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = weightsOfPath.Entry
    return leafs
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetBundleName() string { return "cisco_ios_xr" }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetYangName() string { return "weights-of-path" }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) SetParent(parent types.Entity) { weightsOfPath.parent = parent }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetParent() types.Entity { return weightsOfPath.parent }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress
// Adjacency address
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // address. The type is string with length: 0..60.
    Address interface{}
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetFilter() yfilter.YFilter { return adjacencyAddress.YFilter }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) SetFilter(yf yfilter.YFilter) { adjacencyAddress.YFilter = yf }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetSegmentPath() string {
    return "adjacency-address"
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = adjacencyAddress.Address
    return leafs
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetYangName() string { return "adjacency-address" }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) SetParent(parent types.Entity) { adjacencyAddress.parent = parent }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetParent() types.Entity { return adjacencyAddress.parent }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped
// Does PBTS class fall back to drop or any class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetFilter() yfilter.YFilter { return pbtsClassIsFallbackMapped.YFilter }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) SetFilter(yf yfilter.YFilter) { pbtsClassIsFallbackMapped.YFilter = yf }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetSegmentPath() string {
    return "pbts-class-is-fallback-mapped"
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = pbtsClassIsFallbackMapped.Entry
    return leafs
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetBundleName() string { return "cisco_ios_xr" }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetYangName() string { return "pbts-class-is-fallback-mapped" }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) SetParent(parent types.Entity) { pbtsClassIsFallbackMapped.parent = parent }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetParent() types.Entity { return pbtsClassIsFallbackMapped.parent }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop
// PBTS class falls back to drop
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetFilter() yfilter.YFilter { return pbtsFallbackToDrop.YFilter }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) SetFilter(yf yfilter.YFilter) { pbtsFallbackToDrop.YFilter = yf }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetSegmentPath() string {
    return "pbts-fallback-to-drop"
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = pbtsFallbackToDrop.Entry
    return leafs
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetBundleName() string { return "cisco_ios_xr" }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetYangName() string { return "pbts-fallback-to-drop" }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) SetParent(parent types.Entity) { pbtsFallbackToDrop.parent = parent }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetParent() types.Entity { return pbtsFallbackToDrop.parent }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
// Tunnel is forward class
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetFilter() yfilter.YFilter { return tunnelIsForwardClass.YFilter }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) SetFilter(yf yfilter.YFilter) { tunnelIsForwardClass.YFilter = yf }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetSegmentPath() string {
    return "tunnel-is-forward-class"
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tunnelIsForwardClass.Entry
    return leafs
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetYangName() string { return "tunnel-is-forward-class" }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) SetParent(parent types.Entity) { tunnelIsForwardClass.parent = parent }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetParent() types.Entity { return tunnelIsForwardClass.parent }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath
// FIB entry path details
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // fib sh tbl path. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath.
    FibShTblPath []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetFilter() yfilter.YFilter { return fibEntryPath.YFilter }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) SetFilter(yf yfilter.YFilter) { fibEntryPath.YFilter = yf }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetGoName(yname string) string {
    if yname == "fib-sh-tbl-path" { return "FibShTblPath" }
    return ""
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetSegmentPath() string {
    return "fib-entry-path"
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-sh-tbl-path" {
        for _, c := range fibEntryPath.FibShTblPath {
            if fibEntryPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath{}
        fibEntryPath.FibShTblPath = append(fibEntryPath.FibShTblPath, child)
        return &fibEntryPath.FibShTblPath[len(fibEntryPath.FibShTblPath)-1]
    }
    return nil
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fibEntryPath.FibShTblPath {
        children[fibEntryPath.FibShTblPath[i].GetSegmentPath()] = &fibEntryPath.FibShTblPath[i]
    }
    return children
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetBundleName() string { return "cisco_ios_xr" }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetYangName() string { return "fib-entry-path" }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) SetParent(parent types.Entity) { fibEntryPath.parent = parent }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetParent() types.Entity { return fibEntryPath.parent }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath) GetParentYangName() string { return "ip-prefix-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath
// fib sh tbl path
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    BriefInterfaceHandle interface{}

    // Next hop prefix. The type is string with length: 0..52.
    BriefNextHopPrefix interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    ViaLabelToRecurse interface{}

    // P-node address. The type is string with length: 0..52.
    BriefPnodeAddress interface{}

    // Q-node address. The type is string with length: 0..52.
    BriefQnodeAddress interface{}

    // LFA protection type. The type is FibUpdatePathLfaProtection.
    BriefLfaProtectionType interface{}

    // Resolved path. The type is bool.
    ResolvedPath interface{}

    // Recursive path. The type is bool.
    RecursivePath interface{}

    // Packets received on this path. The type is bool.
    PacketsReceivedPath interface{}

    // Attached path. The type is bool.
    AttachedPath interface{}

    // Backup path. The type is bool.
    BackupPath interface{}

    // Best external path. The type is bool.
    BestExternalPath interface{}

    // Is protection ignored. The type is bool.
    ProtectIgnore interface{}

    // Is this the path used for DLB. The type is bool.
    PathDlb interface{}

    // Path flags. The type is interface{} with range: 0..4294967295.
    PathFlags interface{}

    // Path Info flags. The type is interface{} with range: 0..65535.
    PathInfoFlags interface{}

    // Path index. The type is interface{} with range: 0..255.
    PathIndex interface{}

    // Backup path index. The type is interface{} with range: 0..255.
    BackupIndex interface{}

    // Next Hop Index. The type is interface{} with range: 0..4294967295.
    NextHopIndex interface{}

    // Parent Interface Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceHandle interface{}

    // recursion via /N constraint. The type is interface{} with range: 0..255.
    RecursionviaLen interface{}

    // More detail about this path entry.
    MoreDetailAboutPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath

    // mpls info for this path entry.
    MplsInformationForPath Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetFilter() yfilter.YFilter { return fibShTblPath.YFilter }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) SetFilter(yf yfilter.YFilter) { fibShTblPath.YFilter = yf }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetGoName(yname string) string {
    if yname == "hardware-information" { return "HardwareInformation" }
    if yname == "brief-interface-handle" { return "BriefInterfaceHandle" }
    if yname == "brief-next-hop-prefix" { return "BriefNextHopPrefix" }
    if yname == "via-label-to-recurse" { return "ViaLabelToRecurse" }
    if yname == "brief-pnode-address" { return "BriefPnodeAddress" }
    if yname == "brief-qnode-address" { return "BriefQnodeAddress" }
    if yname == "brief-lfa-protection-type" { return "BriefLfaProtectionType" }
    if yname == "resolved-path" { return "ResolvedPath" }
    if yname == "recursive-path" { return "RecursivePath" }
    if yname == "packets-received-path" { return "PacketsReceivedPath" }
    if yname == "attached-path" { return "AttachedPath" }
    if yname == "backup-path" { return "BackupPath" }
    if yname == "best-external-path" { return "BestExternalPath" }
    if yname == "protect-ignore" { return "ProtectIgnore" }
    if yname == "path-dlb" { return "PathDlb" }
    if yname == "path-flags" { return "PathFlags" }
    if yname == "path-info-flags" { return "PathInfoFlags" }
    if yname == "path-index" { return "PathIndex" }
    if yname == "backup-index" { return "BackupIndex" }
    if yname == "next-hop-index" { return "NextHopIndex" }
    if yname == "parent-interface-handle" { return "ParentInterfaceHandle" }
    if yname == "recursionvia-len" { return "RecursionviaLen" }
    if yname == "more-detail-about-path" { return "MoreDetailAboutPath" }
    if yname == "mpls-information-for-path" { return "MplsInformationForPath" }
    return ""
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetSegmentPath() string {
    return "fib-sh-tbl-path"
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "more-detail-about-path" {
        return &fibShTblPath.MoreDetailAboutPath
    }
    if childYangName == "mpls-information-for-path" {
        return &fibShTblPath.MplsInformationForPath
    }
    return nil
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["more-detail-about-path"] = &fibShTblPath.MoreDetailAboutPath
    children["mpls-information-for-path"] = &fibShTblPath.MplsInformationForPath
    return children
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hardware-information"] = fibShTblPath.HardwareInformation
    leafs["brief-interface-handle"] = fibShTblPath.BriefInterfaceHandle
    leafs["brief-next-hop-prefix"] = fibShTblPath.BriefNextHopPrefix
    leafs["via-label-to-recurse"] = fibShTblPath.ViaLabelToRecurse
    leafs["brief-pnode-address"] = fibShTblPath.BriefPnodeAddress
    leafs["brief-qnode-address"] = fibShTblPath.BriefQnodeAddress
    leafs["brief-lfa-protection-type"] = fibShTblPath.BriefLfaProtectionType
    leafs["resolved-path"] = fibShTblPath.ResolvedPath
    leafs["recursive-path"] = fibShTblPath.RecursivePath
    leafs["packets-received-path"] = fibShTblPath.PacketsReceivedPath
    leafs["attached-path"] = fibShTblPath.AttachedPath
    leafs["backup-path"] = fibShTblPath.BackupPath
    leafs["best-external-path"] = fibShTblPath.BestExternalPath
    leafs["protect-ignore"] = fibShTblPath.ProtectIgnore
    leafs["path-dlb"] = fibShTblPath.PathDlb
    leafs["path-flags"] = fibShTblPath.PathFlags
    leafs["path-info-flags"] = fibShTblPath.PathInfoFlags
    leafs["path-index"] = fibShTblPath.PathIndex
    leafs["backup-index"] = fibShTblPath.BackupIndex
    leafs["next-hop-index"] = fibShTblPath.NextHopIndex
    leafs["parent-interface-handle"] = fibShTblPath.ParentInterfaceHandle
    leafs["recursionvia-len"] = fibShTblPath.RecursionviaLen
    return leafs
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetBundleName() string { return "cisco_ios_xr" }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetYangName() string { return "fib-sh-tbl-path" }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) SetParent(parent types.Entity) { fibShTblPath.parent = parent }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetParent() types.Entity { return fibShTblPath.parent }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath) GetParentYangName() string { return "fib-entry-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath
// More detail about this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address to recurse to. The type is string with length: 0..52.
    IpAddressToRecurse interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    LabelToRecurse interface{}

    // Next hop prefix. The type is string with length: 0..52.
    DetailNextHopPrefix interface{}

    // Next hop mask length. The type is interface{} with range: 0..255.
    NextHopMaskLength interface{}

    // Interface associated with this path. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceAssociatedPath interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // Next hop VRF. The type is string with length: 0..33.
    NextHopVrf interface{}

    // Tunnel endpoint id. The type is interface{} with range: 0..4294967295.
    TunnleEndpointId interface{}

    // LISP RLOC ID. The type is interface{} with range: 0..4294967295.
    Lisprlocid interface{}

    // No. of dependents for this path. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependenciesThisPath interface{}

    // Round robin reset value. The type is interface{} with range: 0..255.
    RobinResetValue interface{}

    // Is recursion object a leaf?. The type is bool.
    RecursePrefixObject interface{}

    // Next prefix recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion interface{}

    // Next prefix length. The type is interface{} with range: 0..255.
    NextPrefixLength interface{}

    // Recursion has two leaves (e.g. implicit-null path). The type is bool.
    RecursePrefixObject2 interface{}

    // Next prefix2 recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion2 interface{}

    // Next prefix2 length. The type is interface{} with range: 0..255.
    NextPrefixLength2 interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    DetailFibAdjacencyType interface{}

    // Current path flag. The type is bool.
    CurrentPathFlag interface{}

    // Recursive path information is available. The type is bool.
    RecursivePathInformation interface{}

    // Path is an external adjacency. The type is bool.
    ExternalAdjacency interface{}

    // FIB Nhinfo type. The type is FibNeh.
    FibPathNhInformationType interface{}

    // FIB Nhinfo type special. The type is FibNehSpecial.
    FibPathNhInformationTypeSpecial interface{}

    // Weight of the path. The type is interface{} with range: 0..4294967295.
    WeightOfPath interface{}

    // Tunnel class of the path. The type is interface{} with range: 0..255.
    TunnelClass interface{}

    // Tunnel is forward class. The type is bool.
    TunnelIsForwardClass interface{}

    // IP Encap. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap.
    SpdIpencap []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetFilter() yfilter.YFilter { return moreDetailAboutPath.YFilter }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) SetFilter(yf yfilter.YFilter) { moreDetailAboutPath.YFilter = yf }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetGoName(yname string) string {
    if yname == "ip-address-to-recurse" { return "IpAddressToRecurse" }
    if yname == "label-to-recurse" { return "LabelToRecurse" }
    if yname == "detail-next-hop-prefix" { return "DetailNextHopPrefix" }
    if yname == "next-hop-mask-length" { return "NextHopMaskLength" }
    if yname == "interface-associated-path" { return "InterfaceAssociatedPath" }
    if yname == "next-hop-interface" { return "NextHopInterface" }
    if yname == "next-hop-vrf" { return "NextHopVrf" }
    if yname == "tunnle-endpoint-id" { return "TunnleEndpointId" }
    if yname == "lisprlocid" { return "Lisprlocid" }
    if yname == "number-of-dependencies-this-path" { return "NumberOfDependenciesThisPath" }
    if yname == "robin-reset-value" { return "RobinResetValue" }
    if yname == "recurse-prefix-object" { return "RecursePrefixObject" }
    if yname == "next-prefix-recursion" { return "NextPrefixRecursion" }
    if yname == "next-prefix-length" { return "NextPrefixLength" }
    if yname == "recurse-prefix-object2" { return "RecursePrefixObject2" }
    if yname == "next-prefix-recursion2" { return "NextPrefixRecursion2" }
    if yname == "next-prefix-length2" { return "NextPrefixLength2" }
    if yname == "detail-fib-adjacency-type" { return "DetailFibAdjacencyType" }
    if yname == "current-path-flag" { return "CurrentPathFlag" }
    if yname == "recursive-path-information" { return "RecursivePathInformation" }
    if yname == "external-adjacency" { return "ExternalAdjacency" }
    if yname == "fib-path-nh-information-type" { return "FibPathNhInformationType" }
    if yname == "fib-path-nh-information-type-special" { return "FibPathNhInformationTypeSpecial" }
    if yname == "weight-of-path" { return "WeightOfPath" }
    if yname == "tunnel-class" { return "TunnelClass" }
    if yname == "tunnel-is-forward-class" { return "TunnelIsForwardClass" }
    if yname == "spd-ipencap" { return "SpdIpencap" }
    return ""
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetSegmentPath() string {
    return "more-detail-about-path"
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spd-ipencap" {
        for _, c := range moreDetailAboutPath.SpdIpencap {
            if moreDetailAboutPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap{}
        moreDetailAboutPath.SpdIpencap = append(moreDetailAboutPath.SpdIpencap, child)
        return &moreDetailAboutPath.SpdIpencap[len(moreDetailAboutPath.SpdIpencap)-1]
    }
    return nil
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range moreDetailAboutPath.SpdIpencap {
        children[moreDetailAboutPath.SpdIpencap[i].GetSegmentPath()] = &moreDetailAboutPath.SpdIpencap[i]
    }
    return children
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-address-to-recurse"] = moreDetailAboutPath.IpAddressToRecurse
    leafs["label-to-recurse"] = moreDetailAboutPath.LabelToRecurse
    leafs["detail-next-hop-prefix"] = moreDetailAboutPath.DetailNextHopPrefix
    leafs["next-hop-mask-length"] = moreDetailAboutPath.NextHopMaskLength
    leafs["interface-associated-path"] = moreDetailAboutPath.InterfaceAssociatedPath
    leafs["next-hop-interface"] = moreDetailAboutPath.NextHopInterface
    leafs["next-hop-vrf"] = moreDetailAboutPath.NextHopVrf
    leafs["tunnle-endpoint-id"] = moreDetailAboutPath.TunnleEndpointId
    leafs["lisprlocid"] = moreDetailAboutPath.Lisprlocid
    leafs["number-of-dependencies-this-path"] = moreDetailAboutPath.NumberOfDependenciesThisPath
    leafs["robin-reset-value"] = moreDetailAboutPath.RobinResetValue
    leafs["recurse-prefix-object"] = moreDetailAboutPath.RecursePrefixObject
    leafs["next-prefix-recursion"] = moreDetailAboutPath.NextPrefixRecursion
    leafs["next-prefix-length"] = moreDetailAboutPath.NextPrefixLength
    leafs["recurse-prefix-object2"] = moreDetailAboutPath.RecursePrefixObject2
    leafs["next-prefix-recursion2"] = moreDetailAboutPath.NextPrefixRecursion2
    leafs["next-prefix-length2"] = moreDetailAboutPath.NextPrefixLength2
    leafs["detail-fib-adjacency-type"] = moreDetailAboutPath.DetailFibAdjacencyType
    leafs["current-path-flag"] = moreDetailAboutPath.CurrentPathFlag
    leafs["recursive-path-information"] = moreDetailAboutPath.RecursivePathInformation
    leafs["external-adjacency"] = moreDetailAboutPath.ExternalAdjacency
    leafs["fib-path-nh-information-type"] = moreDetailAboutPath.FibPathNhInformationType
    leafs["fib-path-nh-information-type-special"] = moreDetailAboutPath.FibPathNhInformationTypeSpecial
    leafs["weight-of-path"] = moreDetailAboutPath.WeightOfPath
    leafs["tunnel-class"] = moreDetailAboutPath.TunnelClass
    leafs["tunnel-is-forward-class"] = moreDetailAboutPath.TunnelIsForwardClass
    return leafs
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetBundleName() string { return "cisco_ios_xr" }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetYangName() string { return "more-detail-about-path" }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) SetParent(parent types.Entity) { moreDetailAboutPath.parent = parent }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetParent() types.Entity { return moreDetailAboutPath.parent }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetParentYangName() string { return "fib-sh-tbl-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
// IP Encap
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Header Count. The type is interface{} with range: 0..255.
    IpEncapHdrCount interface{}

    // IPEncap Object Locks. The type is interface{} with range: 0..4294967295.
    IpEncapLocks interface{}

    // Transport Table. The type is interface{} with range: 0..4294967295.
    IpEncapTransportTbl interface{}

    // Transport VRF name. The type is string.
    IpeTransportVrfName interface{}

    // Transport AF. The type is interface{} with range: 0..4294967295.
    IpEncapTransportAf interface{}

    // Payload AF. The type is interface{} with range: 0..4294967295.
    IpEncapPayloadAf interface{}

    // Payload MTU. The type is interface{} with range: 0..65535.
    IpEncapPayloadMtu interface{}

    // Pointer to parent. The type is interface{} with range: 0..4294967295.
    IpEncapParent interface{}

    // Parent type enumeration. The type is interface{} with range: 0..4294967295.
    IpEncapParentType interface{}

    // Headers. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr.
    IpEncapHdr []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetFilter() yfilter.YFilter { return spdIpencap.YFilter }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) SetFilter(yf yfilter.YFilter) { spdIpencap.YFilter = yf }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetGoName(yname string) string {
    if yname == "ip-encap-hdr-count" { return "IpEncapHdrCount" }
    if yname == "ip-encap-locks" { return "IpEncapLocks" }
    if yname == "ip-encap-transport-tbl" { return "IpEncapTransportTbl" }
    if yname == "ipe-transport-vrf-name" { return "IpeTransportVrfName" }
    if yname == "ip-encap-transport-af" { return "IpEncapTransportAf" }
    if yname == "ip-encap-payload-af" { return "IpEncapPayloadAf" }
    if yname == "ip-encap-payload-mtu" { return "IpEncapPayloadMtu" }
    if yname == "ip-encap-parent" { return "IpEncapParent" }
    if yname == "ip-encap-parent-type" { return "IpEncapParentType" }
    if yname == "ip-encap-hdr" { return "IpEncapHdr" }
    return ""
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetSegmentPath() string {
    return "spd-ipencap"
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-encap-hdr" {
        for _, c := range spdIpencap.IpEncapHdr {
            if spdIpencap.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr{}
        spdIpencap.IpEncapHdr = append(spdIpencap.IpEncapHdr, child)
        return &spdIpencap.IpEncapHdr[len(spdIpencap.IpEncapHdr)-1]
    }
    return nil
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spdIpencap.IpEncapHdr {
        children[spdIpencap.IpEncapHdr[i].GetSegmentPath()] = &spdIpencap.IpEncapHdr[i]
    }
    return children
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-encap-hdr-count"] = spdIpencap.IpEncapHdrCount
    leafs["ip-encap-locks"] = spdIpencap.IpEncapLocks
    leafs["ip-encap-transport-tbl"] = spdIpencap.IpEncapTransportTbl
    leafs["ipe-transport-vrf-name"] = spdIpencap.IpeTransportVrfName
    leafs["ip-encap-transport-af"] = spdIpencap.IpEncapTransportAf
    leafs["ip-encap-payload-af"] = spdIpencap.IpEncapPayloadAf
    leafs["ip-encap-payload-mtu"] = spdIpencap.IpEncapPayloadMtu
    leafs["ip-encap-parent"] = spdIpencap.IpEncapParent
    leafs["ip-encap-parent-type"] = spdIpencap.IpEncapParentType
    return leafs
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetBundleName() string { return "cisco_ios_xr" }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetYangName() string { return "spd-ipencap" }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) SetParent(parent types.Entity) { spdIpencap.parent = parent }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetParent() types.Entity { return spdIpencap.parent }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetParentYangName() string { return "more-detail-about-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
// Headers
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Header Type. The type is FibShIpencapHdr.
    IpEncapHdrType interface{}

    // Static Header. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    IpEncapHdrp interface{}

    // Dynamic Header Fields. The type is interface{} with range: 0..4294967295.
    IpEncapHdrDyn interface{}
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetFilter() yfilter.YFilter { return ipEncapHdr.YFilter }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) SetFilter(yf yfilter.YFilter) { ipEncapHdr.YFilter = yf }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetGoName(yname string) string {
    if yname == "ip-encap-hdr-type" { return "IpEncapHdrType" }
    if yname == "ip-encap-hdrp" { return "IpEncapHdrp" }
    if yname == "ip-encap-hdr-dyn" { return "IpEncapHdrDyn" }
    return ""
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetSegmentPath() string {
    return "ip-encap-hdr"
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-encap-hdr-type"] = ipEncapHdr.IpEncapHdrType
    leafs["ip-encap-hdrp"] = ipEncapHdr.IpEncapHdrp
    leafs["ip-encap-hdr-dyn"] = ipEncapHdr.IpEncapHdrDyn
    return leafs
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetBundleName() string { return "cisco_ios_xr" }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetYangName() string { return "ip-encap-hdr" }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) SetParent(parent types.Entity) { ipEncapHdr.parent = parent }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetParent() types.Entity { return ipEncapHdr.parent }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetParentYangName() string { return "spd-ipencap" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath
// mpls info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LocalLable. The type is interface{} with range: 0..4294967295.
    LocalLable interface{}

    // RecursiveFwdChain. The type is bool.
    RecursiveFwdChain interface{}

    // NumberOfIGPPaths. The type is interface{} with range: 0..4294967295.
    NumberOfIgpPaths interface{}

    // RemoteBackupPath. The type is bool.
    RemoteBackup interface{}

    // Recursive Label(s). The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack.
    RecursiveLblStack []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack

    // igp label stack array. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray.
    IgpLabelStackArray []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetFilter() yfilter.YFilter { return mplsInformationForPath.YFilter }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) SetFilter(yf yfilter.YFilter) { mplsInformationForPath.YFilter = yf }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetGoName(yname string) string {
    if yname == "local-lable" { return "LocalLable" }
    if yname == "recursive-fwd-chain" { return "RecursiveFwdChain" }
    if yname == "number-of-igp-paths" { return "NumberOfIgpPaths" }
    if yname == "remote-backup" { return "RemoteBackup" }
    if yname == "recursive-lbl-stack" { return "RecursiveLblStack" }
    if yname == "igp-label-stack-array" { return "IgpLabelStackArray" }
    return ""
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetSegmentPath() string {
    return "mpls-information-for-path"
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "recursive-lbl-stack" {
        for _, c := range mplsInformationForPath.RecursiveLblStack {
            if mplsInformationForPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack{}
        mplsInformationForPath.RecursiveLblStack = append(mplsInformationForPath.RecursiveLblStack, child)
        return &mplsInformationForPath.RecursiveLblStack[len(mplsInformationForPath.RecursiveLblStack)-1]
    }
    if childYangName == "igp-label-stack-array" {
        for _, c := range mplsInformationForPath.IgpLabelStackArray {
            if mplsInformationForPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray{}
        mplsInformationForPath.IgpLabelStackArray = append(mplsInformationForPath.IgpLabelStackArray, child)
        return &mplsInformationForPath.IgpLabelStackArray[len(mplsInformationForPath.IgpLabelStackArray)-1]
    }
    return nil
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mplsInformationForPath.RecursiveLblStack {
        children[mplsInformationForPath.RecursiveLblStack[i].GetSegmentPath()] = &mplsInformationForPath.RecursiveLblStack[i]
    }
    for i := range mplsInformationForPath.IgpLabelStackArray {
        children[mplsInformationForPath.IgpLabelStackArray[i].GetSegmentPath()] = &mplsInformationForPath.IgpLabelStackArray[i]
    }
    return children
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-lable"] = mplsInformationForPath.LocalLable
    leafs["recursive-fwd-chain"] = mplsInformationForPath.RecursiveFwdChain
    leafs["number-of-igp-paths"] = mplsInformationForPath.NumberOfIgpPaths
    leafs["remote-backup"] = mplsInformationForPath.RemoteBackup
    return leafs
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetBundleName() string { return "cisco_ios_xr" }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetYangName() string { return "mpls-information-for-path" }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) SetParent(parent types.Entity) { mplsInformationForPath.parent = parent }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetParent() types.Entity { return mplsInformationForPath.parent }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath) GetParentYangName() string { return "fib-sh-tbl-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack
// Recursive Label(s)
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetFilter() yfilter.YFilter { return recursiveLblStack.YFilter }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) SetFilter(yf yfilter.YFilter) { recursiveLblStack.YFilter = yf }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetSegmentPath() string {
    return "recursive-lbl-stack"
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = recursiveLblStack.Entry
    return leafs
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetBundleName() string { return "cisco_ios_xr" }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetYangName() string { return "recursive-lbl-stack" }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) SetParent(parent types.Entity) { recursiveLblStack.parent = parent }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetParent() types.Entity { return recursiveLblStack.parent }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetParentYangName() string { return "mpls-information-for-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
// igp label stack array
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NumberOfLabels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}

    // OutInterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // NHAddress. The type is string with length: 0..52.
    NhAddress interface{}

    // lstack. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack.
    Lstack []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetFilter() yfilter.YFilter { return igpLabelStackArray.YFilter }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) SetFilter(yf yfilter.YFilter) { igpLabelStackArray.YFilter = yf }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetGoName(yname string) string {
    if yname == "number-of-labels" { return "NumberOfLabels" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "lstack" { return "Lstack" }
    return ""
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetSegmentPath() string {
    return "igp-label-stack-array"
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lstack" {
        for _, c := range igpLabelStackArray.Lstack {
            if igpLabelStackArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack{}
        igpLabelStackArray.Lstack = append(igpLabelStackArray.Lstack, child)
        return &igpLabelStackArray.Lstack[len(igpLabelStackArray.Lstack)-1]
    }
    return nil
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range igpLabelStackArray.Lstack {
        children[igpLabelStackArray.Lstack[i].GetSegmentPath()] = &igpLabelStackArray.Lstack[i]
    }
    return children
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-labels"] = igpLabelStackArray.NumberOfLabels
    leafs["out-interface"] = igpLabelStackArray.OutInterface
    leafs["nh-address"] = igpLabelStackArray.NhAddress
    return leafs
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetBundleName() string { return "cisco_ios_xr" }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetYangName() string { return "igp-label-stack-array" }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) SetParent(parent types.Entity) { igpLabelStackArray.parent = parent }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetParent() types.Entity { return igpLabelStackArray.parent }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetParentYangName() string { return "mpls-information-for-path" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
// lstack
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetFilter() yfilter.YFilter { return lstack.YFilter }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) SetFilter(yf yfilter.YFilter) { lstack.YFilter = yf }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetSegmentPath() string {
    return "lstack"
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = lstack.Entry
    return leafs
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetBundleName() string { return "cisco_ios_xr" }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetYangName() string { return "lstack" }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) SetParent(parent types.Entity) { lstack.parent = parent }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetParent() types.Entity { return lstack.parent }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetParentYangName() string { return "igp-label-stack-array" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information
// Information about IPv6 SR prefix
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route is an IPv6 Segment-Routing prefix. The type is bool.
    RouteIsSripv6Flag interface{}

    // Route is a SRv6 prefix resolved via Policy label. The type is bool.
    Srv6PfxResolvedViaPolicyLabel interface{}

    // Statistics are valid for this prefix. The type is bool.
    Sripv6StatsValidFlag interface{}

    // Statistics for a IPv6 SR prefix.
    Srv6Statistics Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetFilter() yfilter.YFilter { return srv6Information.YFilter }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) SetFilter(yf yfilter.YFilter) { srv6Information.YFilter = yf }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetGoName(yname string) string {
    if yname == "route-is-sripv6-flag" { return "RouteIsSripv6Flag" }
    if yname == "srv6-pfx-resolved-via-policy-label" { return "Srv6PfxResolvedViaPolicyLabel" }
    if yname == "sripv6-stats-valid-flag" { return "Sripv6StatsValidFlag" }
    if yname == "srv6-statistics" { return "Srv6Statistics" }
    return ""
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetSegmentPath() string {
    return "srv6-information"
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srv6-statistics" {
        return &srv6Information.Srv6Statistics
    }
    return nil
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["srv6-statistics"] = &srv6Information.Srv6Statistics
    return children
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-is-sripv6-flag"] = srv6Information.RouteIsSripv6Flag
    leafs["srv6-pfx-resolved-via-policy-label"] = srv6Information.Srv6PfxResolvedViaPolicyLabel
    leafs["sripv6-stats-valid-flag"] = srv6Information.Sripv6StatsValidFlag
    return leafs
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetBundleName() string { return "cisco_ios_xr" }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetYangName() string { return "srv6-information" }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) SetParent(parent types.Entity) { srv6Information.parent = parent }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetParent() types.Entity { return srv6Information.parent }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information) GetParentYangName() string { return "ip-prefix-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics
// Statistics for a IPv6 SR prefix
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRv6 packets forwarded for a prefix. The type is interface{} with range:
    // 0..18446744073709551615.
    Srv6PacketsForwarded interface{}

    // SRv6 Packets dropped for a prefix. The type is interface{} with range:
    // 0..18446744073709551615.
    Srv6PacketsDropped interface{}
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetFilter() yfilter.YFilter { return srv6Statistics.YFilter }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) SetFilter(yf yfilter.YFilter) { srv6Statistics.YFilter = yf }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetGoName(yname string) string {
    if yname == "srv6-packets-forwarded" { return "Srv6PacketsForwarded" }
    if yname == "srv6-packets-dropped" { return "Srv6PacketsDropped" }
    return ""
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetSegmentPath() string {
    return "srv6-statistics"
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srv6-packets-forwarded"] = srv6Statistics.Srv6PacketsForwarded
    leafs["srv6-packets-dropped"] = srv6Statistics.Srv6PacketsDropped
    return leafs
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetYangName() string { return "srv6-statistics" }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) SetParent(parent types.Entity) { srv6Statistics.parent = parent }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetParent() types.Entity { return srv6Statistics.parent }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_Srv6Information_Srv6Statistics) GetParentYangName() string { return "srv6-information" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject
// Leaf Extension Object List
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibShTblFibExtBag.
    Type interface{}

    // sfecd le.
    SfecdLe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetFilter() yfilter.YFilter { return extensionObject.YFilter }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) SetFilter(yf yfilter.YFilter) { extensionObject.YFilter = yf }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "sfecd-le" { return "SfecdLe" }
    return ""
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetSegmentPath() string {
    return "extension-object"
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sfecd-le" {
        return &extensionObject.SfecdLe
    }
    return nil
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sfecd-le"] = &extensionObject.SfecdLe
    return children
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extensionObject.Type
    return leafs
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetBundleName() string { return "cisco_ios_xr" }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetYangName() string { return "extension-object" }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) SetParent(parent types.Entity) { extensionObject.parent = parent }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetParent() types.Entity { return extensionObject.parent }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject) GetParentYangName() string { return "ip-prefix-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe
// sfecd le
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Context Label Exist. The type is bool.
    ContextLabelFlag interface{}

    // Context Label. The type is interface{} with range: 0..4294967295.
    ContextLabel interface{}
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetFilter() yfilter.YFilter { return sfecdLe.YFilter }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) SetFilter(yf yfilter.YFilter) { sfecdLe.YFilter = yf }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetGoName(yname string) string {
    if yname == "context-label-flag" { return "ContextLabelFlag" }
    if yname == "context-label" { return "ContextLabel" }
    return ""
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetSegmentPath() string {
    return "sfecd-le"
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["context-label-flag"] = sfecdLe.ContextLabelFlag
    leafs["context-label"] = sfecdLe.ContextLabel
    return leafs
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetBundleName() string { return "cisco_ios_xr" }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetYangName() string { return "sfecd-le" }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) SetParent(parent types.Entity) { sfecdLe.parent = parent }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetParent() types.Entity { return sfecdLe.parent }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_IpPrefixBriefs_IpPrefixBrief_ExtensionObject_SfecdLe) GetParentYangName() string { return "extension-object" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed hardware ingress info for remote NHInfo table.
    NhInfoRemoteDetailHardwareIngresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses

    // Local (non-remote) nhinfo.
    NhInfoLocalDetailHardwareIngresses Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses

    // Special nhinfo.
    NhInfoSpecialDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoDetailHardwareIngress.YFilter }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoDetailHardwareIngress.YFilter = yf }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "nh-info-remote-detail-hardware-ingresses" { return "NhInfoRemoteDetailHardwareIngresses" }
    if yname == "nh-info-local-detail-hardware-ingresses" { return "NhInfoLocalDetailHardwareIngresses" }
    if yname == "nh-info-special-detail-hardware-ingress" { return "NhInfoSpecialDetailHardwareIngress" }
    return ""
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-detail-hardware-ingress"
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-remote-detail-hardware-ingresses" {
        return &nhInfoDetailHardwareIngress.NhInfoRemoteDetailHardwareIngresses
    }
    if childYangName == "nh-info-local-detail-hardware-ingresses" {
        return &nhInfoDetailHardwareIngress.NhInfoLocalDetailHardwareIngresses
    }
    if childYangName == "nh-info-special-detail-hardware-ingress" {
        return &nhInfoDetailHardwareIngress.NhInfoSpecialDetailHardwareIngress
    }
    return nil
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-remote-detail-hardware-ingresses"] = &nhInfoDetailHardwareIngress.NhInfoRemoteDetailHardwareIngresses
    children["nh-info-local-detail-hardware-ingresses"] = &nhInfoDetailHardwareIngress.NhInfoLocalDetailHardwareIngresses
    children["nh-info-special-detail-hardware-ingress"] = &nhInfoDetailHardwareIngress.NhInfoSpecialDetailHardwareIngress
    return children
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetYangName() string { return "nh-info-detail-hardware-ingress" }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoDetailHardwareIngress.parent = parent }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetParent() types.Entity { return nhInfoDetailHardwareIngress.parent }

func (nhInfoDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses
// Detailed hardware ingress info for remote
// NHInfo table
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware ingress info for remote NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress.
    NhInfoRemoteDetailHardwareIngress []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetFilter() yfilter.YFilter { return nhInfoRemoteDetailHardwareIngresses.YFilter }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) SetFilter(yf yfilter.YFilter) { nhInfoRemoteDetailHardwareIngresses.YFilter = yf }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetGoName(yname string) string {
    if yname == "nh-info-remote-detail-hardware-ingress" { return "NhInfoRemoteDetailHardwareIngress" }
    return ""
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetSegmentPath() string {
    return "nh-info-remote-detail-hardware-ingresses"
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-remote-detail-hardware-ingress" {
        for _, c := range nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress {
            if nhInfoRemoteDetailHardwareIngresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress{}
        nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress = append(nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress, child)
        return &nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress[len(nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress)-1]
    }
    return nil
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress {
        children[nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress[i].GetSegmentPath()] = &nhInfoRemoteDetailHardwareIngresses.NhInfoRemoteDetailHardwareIngress[i]
    }
    return children
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetYangName() string { return "nh-info-remote-detail-hardware-ingresses" }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) SetParent(parent types.Entity) { nhInfoRemoteDetailHardwareIngresses.parent = parent }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetParent() types.Entity { return nhInfoRemoteDetailHardwareIngresses.parent }

func (nhInfoRemoteDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses) GetParentYangName() string { return "nh-info-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress
// Detail hardware ingress info for remote
// NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoRemoteDetailHardwareIngress.YFilter }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoRemoteDetailHardwareIngress.YFilter = yf }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-remote-detail-hardware-ingress"
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoRemoteDetailHardwareIngress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoRemoteDetailHardwareIngress.NhInfoExtension
    }
    return nil
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoRemoteDetailHardwareIngress.SiPwhe
    children["nh-info-extension"] = &nhInfoRemoteDetailHardwareIngress.NhInfoExtension
    return children
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoRemoteDetailHardwareIngress.NhInterfaceName
    leafs["nh-address"] = nhInfoRemoteDetailHardwareIngress.NhAddress
    leafs["si-link-proto"] = nhInfoRemoteDetailHardwareIngress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoRemoteDetailHardwareIngress.SiNhinfo
    leafs["si-nhtype"] = nhInfoRemoteDetailHardwareIngress.SiNhtype
    leafs["si-ifh"] = nhInfoRemoteDetailHardwareIngress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoRemoteDetailHardwareIngress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoRemoteDetailHardwareIngress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoRemoteDetailHardwareIngress.SiAdjPresent
    leafs["si-special-type"] = nhInfoRemoteDetailHardwareIngress.SiSpecialType
    leafs["si-refcount"] = nhInfoRemoteDetailHardwareIngress.SiRefcount
    leafs["si-flags"] = nhInfoRemoteDetailHardwareIngress.SiFlags
    leafs["si-adj-if"] = nhInfoRemoteDetailHardwareIngress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoRemoteDetailHardwareIngress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoRemoteDetailHardwareIngress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoRemoteDetailHardwareIngress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoRemoteDetailHardwareIngress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoRemoteDetailHardwareIngress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoRemoteDetailHardwareIngress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoRemoteDetailHardwareIngress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoRemoteDetailHardwareIngress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoRemoteDetailHardwareIngress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoRemoteDetailHardwareIngress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoRemoteDetailHardwareIngress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoRemoteDetailHardwareIngress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoRemoteDetailHardwareIngress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoRemoteDetailHardwareIngress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoRemoteDetailHardwareIngress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoRemoteDetailHardwareIngress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoRemoteDetailHardwareIngress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoRemoteDetailHardwareIngress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoRemoteDetailHardwareIngress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoRemoteDetailHardwareIngress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoRemoteDetailHardwareIngress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoRemoteDetailHardwareIngress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoRemoteDetailHardwareIngress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoRemoteDetailHardwareIngress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoRemoteDetailHardwareIngress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoRemoteDetailHardwareIngress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoRemoteDetailHardwareIngress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoRemoteDetailHardwareIngress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoRemoteDetailHardwareIngress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoRemoteDetailHardwareIngress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoRemoteDetailHardwareIngress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoRemoteDetailHardwareIngress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoRemoteDetailHardwareIngress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoRemoteDetailHardwareIngress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoRemoteDetailHardwareIngress.SiNhid
    leafs["si-upd-ts"] = nhInfoRemoteDetailHardwareIngress.SiUpdTs
    return leafs
}

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetYangName() string { return "nh-info-remote-detail-hardware-ingress" }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoRemoteDetailHardwareIngress.parent = parent }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetParent() types.Entity { return nhInfoRemoteDetailHardwareIngress.parent }

func (nhInfoRemoteDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress) GetParentYangName() string { return "nh-info-remote-detail-hardware-ingresses" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_SiPwhe) GetParentYangName() string { return "nh-info-remote-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension) GetParentYangName() string { return "nh-info-remote-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoRemoteDetailHardwareIngresses_NhInfoRemoteDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware ingress NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress.
    NhInfoLocalDetailHardwareIngress []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetFilter() yfilter.YFilter { return nhInfoLocalDetailHardwareIngresses.YFilter }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) SetFilter(yf yfilter.YFilter) { nhInfoLocalDetailHardwareIngresses.YFilter = yf }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetGoName(yname string) string {
    if yname == "nh-info-local-detail-hardware-ingress" { return "NhInfoLocalDetailHardwareIngress" }
    return ""
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetSegmentPath() string {
    return "nh-info-local-detail-hardware-ingresses"
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-local-detail-hardware-ingress" {
        for _, c := range nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress {
            if nhInfoLocalDetailHardwareIngresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress{}
        nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress = append(nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress, child)
        return &nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress[len(nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress)-1]
    }
    return nil
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress {
        children[nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress[i].GetSegmentPath()] = &nhInfoLocalDetailHardwareIngresses.NhInfoLocalDetailHardwareIngress[i]
    }
    return children
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetYangName() string { return "nh-info-local-detail-hardware-ingresses" }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) SetParent(parent types.Entity) { nhInfoLocalDetailHardwareIngresses.parent = parent }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetParent() types.Entity { return nhInfoLocalDetailHardwareIngresses.parent }

func (nhInfoLocalDetailHardwareIngresses *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses) GetParentYangName() string { return "nh-info-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress
// Detail hardware ingress NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoLocalDetailHardwareIngress.YFilter }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoLocalDetailHardwareIngress.YFilter = yf }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-local-detail-hardware-ingress"
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoLocalDetailHardwareIngress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoLocalDetailHardwareIngress.NhInfoExtension
    }
    return nil
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoLocalDetailHardwareIngress.SiPwhe
    children["nh-info-extension"] = &nhInfoLocalDetailHardwareIngress.NhInfoExtension
    return children
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoLocalDetailHardwareIngress.NhInterfaceName
    leafs["nh-address"] = nhInfoLocalDetailHardwareIngress.NhAddress
    leafs["si-link-proto"] = nhInfoLocalDetailHardwareIngress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoLocalDetailHardwareIngress.SiNhinfo
    leafs["si-nhtype"] = nhInfoLocalDetailHardwareIngress.SiNhtype
    leafs["si-ifh"] = nhInfoLocalDetailHardwareIngress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoLocalDetailHardwareIngress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoLocalDetailHardwareIngress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoLocalDetailHardwareIngress.SiAdjPresent
    leafs["si-special-type"] = nhInfoLocalDetailHardwareIngress.SiSpecialType
    leafs["si-refcount"] = nhInfoLocalDetailHardwareIngress.SiRefcount
    leafs["si-flags"] = nhInfoLocalDetailHardwareIngress.SiFlags
    leafs["si-adj-if"] = nhInfoLocalDetailHardwareIngress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoLocalDetailHardwareIngress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoLocalDetailHardwareIngress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoLocalDetailHardwareIngress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoLocalDetailHardwareIngress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoLocalDetailHardwareIngress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoLocalDetailHardwareIngress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoLocalDetailHardwareIngress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoLocalDetailHardwareIngress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoLocalDetailHardwareIngress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoLocalDetailHardwareIngress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoLocalDetailHardwareIngress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoLocalDetailHardwareIngress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoLocalDetailHardwareIngress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoLocalDetailHardwareIngress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoLocalDetailHardwareIngress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoLocalDetailHardwareIngress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoLocalDetailHardwareIngress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoLocalDetailHardwareIngress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoLocalDetailHardwareIngress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoLocalDetailHardwareIngress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoLocalDetailHardwareIngress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoLocalDetailHardwareIngress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoLocalDetailHardwareIngress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoLocalDetailHardwareIngress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoLocalDetailHardwareIngress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoLocalDetailHardwareIngress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoLocalDetailHardwareIngress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoLocalDetailHardwareIngress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoLocalDetailHardwareIngress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoLocalDetailHardwareIngress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoLocalDetailHardwareIngress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoLocalDetailHardwareIngress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoLocalDetailHardwareIngress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoLocalDetailHardwareIngress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoLocalDetailHardwareIngress.SiNhid
    leafs["si-upd-ts"] = nhInfoLocalDetailHardwareIngress.SiUpdTs
    return leafs
}

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetYangName() string { return "nh-info-local-detail-hardware-ingress" }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoLocalDetailHardwareIngress.parent = parent }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetParent() types.Entity { return nhInfoLocalDetailHardwareIngress.parent }

func (nhInfoLocalDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress) GetParentYangName() string { return "nh-info-local-detail-hardware-ingresses" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_SiPwhe) GetParentYangName() string { return "nh-info-local-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension) GetParentYangName() string { return "nh-info-local-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoLocalDetailHardwareIngresses_NhInfoLocalDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress
// Special nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail hardware ingress info for special-punt NHInfo entry.
    NhInfoSpecialPuntDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress

    // Detail hardware ingress info for special-null NHInfo entry.
    NhInfoSpecialNullDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress

    // Detail hardware ingress info for special-drop NHInfo entry.
    NhInfoSpecialDropDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress

    // Detail hardware ingress info for special-discard NHInfo entry.
    NhInfoSpecialDiscardDetailHardwareIngress Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoSpecialDetailHardwareIngress.YFilter }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDetailHardwareIngress.YFilter = yf }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "nh-info-special-punt-detail-hardware-ingress" { return "NhInfoSpecialPuntDetailHardwareIngress" }
    if yname == "nh-info-special-null-detail-hardware-ingress" { return "NhInfoSpecialNullDetailHardwareIngress" }
    if yname == "nh-info-special-drop-detail-hardware-ingress" { return "NhInfoSpecialDropDetailHardwareIngress" }
    if yname == "nh-info-special-discard-detail-hardware-ingress" { return "NhInfoSpecialDiscardDetailHardwareIngress" }
    return ""
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-special-detail-hardware-ingress"
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-special-punt-detail-hardware-ingress" {
        return &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialPuntDetailHardwareIngress
    }
    if childYangName == "nh-info-special-null-detail-hardware-ingress" {
        return &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialNullDetailHardwareIngress
    }
    if childYangName == "nh-info-special-drop-detail-hardware-ingress" {
        return &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialDropDetailHardwareIngress
    }
    if childYangName == "nh-info-special-discard-detail-hardware-ingress" {
        return &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialDiscardDetailHardwareIngress
    }
    return nil
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-special-punt-detail-hardware-ingress"] = &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialPuntDetailHardwareIngress
    children["nh-info-special-null-detail-hardware-ingress"] = &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialNullDetailHardwareIngress
    children["nh-info-special-drop-detail-hardware-ingress"] = &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialDropDetailHardwareIngress
    children["nh-info-special-discard-detail-hardware-ingress"] = &nhInfoSpecialDetailHardwareIngress.NhInfoSpecialDiscardDetailHardwareIngress
    return children
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetYangName() string { return "nh-info-special-detail-hardware-ingress" }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoSpecialDetailHardwareIngress.parent = parent }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetParent() types.Entity { return nhInfoSpecialDetailHardwareIngress.parent }

func (nhInfoSpecialDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress) GetParentYangName() string { return "nh-info-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress
// Detail hardware ingress info for
// special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoSpecialPuntDetailHardwareIngress.YFilter }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialPuntDetailHardwareIngress.YFilter = yf }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-special-punt-detail-hardware-ingress"
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialPuntDetailHardwareIngress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialPuntDetailHardwareIngress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialPuntDetailHardwareIngress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialPuntDetailHardwareIngress.NhInfoExtension
    return children
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialPuntDetailHardwareIngress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialPuntDetailHardwareIngress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialPuntDetailHardwareIngress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialPuntDetailHardwareIngress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialPuntDetailHardwareIngress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialPuntDetailHardwareIngress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialPuntDetailHardwareIngress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialPuntDetailHardwareIngress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialPuntDetailHardwareIngress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialPuntDetailHardwareIngress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialPuntDetailHardwareIngress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialPuntDetailHardwareIngress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialPuntDetailHardwareIngress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialPuntDetailHardwareIngress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialPuntDetailHardwareIngress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialPuntDetailHardwareIngress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialPuntDetailHardwareIngress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialPuntDetailHardwareIngress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialPuntDetailHardwareIngress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialPuntDetailHardwareIngress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialPuntDetailHardwareIngress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialPuntDetailHardwareIngress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialPuntDetailHardwareIngress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialPuntDetailHardwareIngress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialPuntDetailHardwareIngress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialPuntDetailHardwareIngress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialPuntDetailHardwareIngress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialPuntDetailHardwareIngress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialPuntDetailHardwareIngress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialPuntDetailHardwareIngress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialPuntDetailHardwareIngress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialPuntDetailHardwareIngress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialPuntDetailHardwareIngress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialPuntDetailHardwareIngress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialPuntDetailHardwareIngress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialPuntDetailHardwareIngress.SiUpdTs
    return leafs
}

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetYangName() string { return "nh-info-special-punt-detail-hardware-ingress" }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoSpecialPuntDetailHardwareIngress.parent = parent }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetParent() types.Entity { return nhInfoSpecialPuntDetailHardwareIngress.parent }

func (nhInfoSpecialPuntDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress) GetParentYangName() string { return "nh-info-special-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_SiPwhe) GetParentYangName() string { return "nh-info-special-punt-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-punt-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialPuntDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress
// Detail hardware ingress info for
// special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoSpecialNullDetailHardwareIngress.YFilter }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialNullDetailHardwareIngress.YFilter = yf }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-special-null-detail-hardware-ingress"
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialNullDetailHardwareIngress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialNullDetailHardwareIngress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialNullDetailHardwareIngress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialNullDetailHardwareIngress.NhInfoExtension
    return children
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialNullDetailHardwareIngress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialNullDetailHardwareIngress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialNullDetailHardwareIngress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialNullDetailHardwareIngress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialNullDetailHardwareIngress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialNullDetailHardwareIngress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialNullDetailHardwareIngress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialNullDetailHardwareIngress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialNullDetailHardwareIngress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialNullDetailHardwareIngress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialNullDetailHardwareIngress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialNullDetailHardwareIngress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialNullDetailHardwareIngress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialNullDetailHardwareIngress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialNullDetailHardwareIngress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialNullDetailHardwareIngress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialNullDetailHardwareIngress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialNullDetailHardwareIngress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialNullDetailHardwareIngress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialNullDetailHardwareIngress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialNullDetailHardwareIngress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialNullDetailHardwareIngress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialNullDetailHardwareIngress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialNullDetailHardwareIngress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialNullDetailHardwareIngress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialNullDetailHardwareIngress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialNullDetailHardwareIngress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialNullDetailHardwareIngress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialNullDetailHardwareIngress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialNullDetailHardwareIngress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialNullDetailHardwareIngress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialNullDetailHardwareIngress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialNullDetailHardwareIngress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialNullDetailHardwareIngress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialNullDetailHardwareIngress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialNullDetailHardwareIngress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialNullDetailHardwareIngress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialNullDetailHardwareIngress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialNullDetailHardwareIngress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialNullDetailHardwareIngress.SiUpdTs
    return leafs
}

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetYangName() string { return "nh-info-special-null-detail-hardware-ingress" }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoSpecialNullDetailHardwareIngress.parent = parent }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetParent() types.Entity { return nhInfoSpecialNullDetailHardwareIngress.parent }

func (nhInfoSpecialNullDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress) GetParentYangName() string { return "nh-info-special-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_SiPwhe) GetParentYangName() string { return "nh-info-special-null-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-null-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialNullDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress
// Detail hardware ingress info for
// special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoSpecialDropDetailHardwareIngress.YFilter }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDropDetailHardwareIngress.YFilter = yf }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-special-drop-detail-hardware-ingress"
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDropDetailHardwareIngress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDropDetailHardwareIngress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDropDetailHardwareIngress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDropDetailHardwareIngress.NhInfoExtension
    return children
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDropDetailHardwareIngress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDropDetailHardwareIngress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDropDetailHardwareIngress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDropDetailHardwareIngress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDropDetailHardwareIngress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDropDetailHardwareIngress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDropDetailHardwareIngress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDropDetailHardwareIngress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDropDetailHardwareIngress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDropDetailHardwareIngress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDropDetailHardwareIngress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDropDetailHardwareIngress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDropDetailHardwareIngress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDropDetailHardwareIngress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDropDetailHardwareIngress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDropDetailHardwareIngress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDropDetailHardwareIngress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDropDetailHardwareIngress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDropDetailHardwareIngress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDropDetailHardwareIngress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDropDetailHardwareIngress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDropDetailHardwareIngress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDropDetailHardwareIngress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDropDetailHardwareIngress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDropDetailHardwareIngress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDropDetailHardwareIngress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDropDetailHardwareIngress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDropDetailHardwareIngress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDropDetailHardwareIngress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDropDetailHardwareIngress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDropDetailHardwareIngress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDropDetailHardwareIngress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDropDetailHardwareIngress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDropDetailHardwareIngress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDropDetailHardwareIngress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDropDetailHardwareIngress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDropDetailHardwareIngress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDropDetailHardwareIngress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDropDetailHardwareIngress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDropDetailHardwareIngress.SiUpdTs
    return leafs
}

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetYangName() string { return "nh-info-special-drop-detail-hardware-ingress" }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoSpecialDropDetailHardwareIngress.parent = parent }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetParent() types.Entity { return nhInfoSpecialDropDetailHardwareIngress.parent }

func (nhInfoSpecialDropDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress) GetParentYangName() string { return "nh-info-special-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_SiPwhe) GetParentYangName() string { return "nh-info-special-drop-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-drop-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDropDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress
// Detail hardware ingress info for
// special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetFilter() yfilter.YFilter { return nhInfoSpecialDiscardDetailHardwareIngress.YFilter }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDiscardDetailHardwareIngress.YFilter = yf }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetSegmentPath() string {
    return "nh-info-special-discard-detail-hardware-ingress"
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDiscardDetailHardwareIngress.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDiscardDetailHardwareIngress.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDiscardDetailHardwareIngress.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDiscardDetailHardwareIngress.NhInfoExtension
    return children
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDiscardDetailHardwareIngress.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDiscardDetailHardwareIngress.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDiscardDetailHardwareIngress.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDiscardDetailHardwareIngress.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDiscardDetailHardwareIngress.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDiscardDetailHardwareIngress.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDiscardDetailHardwareIngress.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDiscardDetailHardwareIngress.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDiscardDetailHardwareIngress.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDiscardDetailHardwareIngress.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDiscardDetailHardwareIngress.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDiscardDetailHardwareIngress.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDiscardDetailHardwareIngress.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDiscardDetailHardwareIngress.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDiscardDetailHardwareIngress.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDiscardDetailHardwareIngress.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDiscardDetailHardwareIngress.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDiscardDetailHardwareIngress.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDiscardDetailHardwareIngress.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDiscardDetailHardwareIngress.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDiscardDetailHardwareIngress.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDiscardDetailHardwareIngress.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDiscardDetailHardwareIngress.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDiscardDetailHardwareIngress.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDiscardDetailHardwareIngress.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDiscardDetailHardwareIngress.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDiscardDetailHardwareIngress.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDiscardDetailHardwareIngress.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDiscardDetailHardwareIngress.SiUpdTs
    return leafs
}

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetYangName() string { return "nh-info-special-discard-detail-hardware-ingress" }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) SetParent(parent types.Entity) { nhInfoSpecialDiscardDetailHardwareIngress.parent = parent }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetParent() types.Entity { return nhInfoSpecialDiscardDetailHardwareIngress.parent }

func (nhInfoSpecialDiscardDetailHardwareIngress *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress) GetParentYangName() string { return "nh-info-special-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_SiPwhe) GetParentYangName() string { return "nh-info-special-discard-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension) GetParentYangName() string { return "nh-info-special-discard-detail-hardware-ingress" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoDetailHardwareIngress_NhInfoSpecialDetailHardwareIngress_NhInfoSpecialDiscardDetailHardwareIngress_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief
// NHInfoTable is accessed by two keys;
// {NHInterface,NHAddress}
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Special nhinfo.
    NhInfoSpecialBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief

    // remote nhinfo.
    NhInfoRemoteBriefs Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs

    // Local (non-remote) nhinfo.
    NhInfoLocalBriefs Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetFilter() yfilter.YFilter { return nhInfoBrief.YFilter }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) SetFilter(yf yfilter.YFilter) { nhInfoBrief.YFilter = yf }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetGoName(yname string) string {
    if yname == "nh-info-special-brief" { return "NhInfoSpecialBrief" }
    if yname == "nh-info-remote-briefs" { return "NhInfoRemoteBriefs" }
    if yname == "nh-info-local-briefs" { return "NhInfoLocalBriefs" }
    return ""
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetSegmentPath() string {
    return "nh-info-brief"
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-special-brief" {
        return &nhInfoBrief.NhInfoSpecialBrief
    }
    if childYangName == "nh-info-remote-briefs" {
        return &nhInfoBrief.NhInfoRemoteBriefs
    }
    if childYangName == "nh-info-local-briefs" {
        return &nhInfoBrief.NhInfoLocalBriefs
    }
    return nil
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-special-brief"] = &nhInfoBrief.NhInfoSpecialBrief
    children["nh-info-remote-briefs"] = &nhInfoBrief.NhInfoRemoteBriefs
    children["nh-info-local-briefs"] = &nhInfoBrief.NhInfoLocalBriefs
    return children
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetYangName() string { return "nh-info-brief" }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) SetParent(parent types.Entity) { nhInfoBrief.parent = parent }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetParent() types.Entity { return nhInfoBrief.parent }

func (nhInfoBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief) GetParentYangName() string { return "vrf" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief
// Special nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief special-discard NHInfo entry.
    NhInfoSpecialDiscardBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief

    // Brief special-null NHInfo entry.
    NhInfoSpecialNullBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief

    // Brief special-punt NHInfo entry.
    NhInfoSpecialPuntBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief

    // Brief special-drop NHInfo entry.
    NhInfoSpecialDropBrief Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetFilter() yfilter.YFilter { return nhInfoSpecialBrief.YFilter }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) SetFilter(yf yfilter.YFilter) { nhInfoSpecialBrief.YFilter = yf }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetGoName(yname string) string {
    if yname == "nh-info-special-discard-brief" { return "NhInfoSpecialDiscardBrief" }
    if yname == "nh-info-special-null-brief" { return "NhInfoSpecialNullBrief" }
    if yname == "nh-info-special-punt-brief" { return "NhInfoSpecialPuntBrief" }
    if yname == "nh-info-special-drop-brief" { return "NhInfoSpecialDropBrief" }
    return ""
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetSegmentPath() string {
    return "nh-info-special-brief"
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-special-discard-brief" {
        return &nhInfoSpecialBrief.NhInfoSpecialDiscardBrief
    }
    if childYangName == "nh-info-special-null-brief" {
        return &nhInfoSpecialBrief.NhInfoSpecialNullBrief
    }
    if childYangName == "nh-info-special-punt-brief" {
        return &nhInfoSpecialBrief.NhInfoSpecialPuntBrief
    }
    if childYangName == "nh-info-special-drop-brief" {
        return &nhInfoSpecialBrief.NhInfoSpecialDropBrief
    }
    return nil
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-special-discard-brief"] = &nhInfoSpecialBrief.NhInfoSpecialDiscardBrief
    children["nh-info-special-null-brief"] = &nhInfoSpecialBrief.NhInfoSpecialNullBrief
    children["nh-info-special-punt-brief"] = &nhInfoSpecialBrief.NhInfoSpecialPuntBrief
    children["nh-info-special-drop-brief"] = &nhInfoSpecialBrief.NhInfoSpecialDropBrief
    return children
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetYangName() string { return "nh-info-special-brief" }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) SetParent(parent types.Entity) { nhInfoSpecialBrief.parent = parent }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetParent() types.Entity { return nhInfoSpecialBrief.parent }

func (nhInfoSpecialBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief) GetParentYangName() string { return "nh-info-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief
// Brief special-discard NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetFilter() yfilter.YFilter { return nhInfoSpecialDiscardBrief.YFilter }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDiscardBrief.YFilter = yf }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetSegmentPath() string {
    return "nh-info-special-discard-brief"
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDiscardBrief.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDiscardBrief.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDiscardBrief.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDiscardBrief.NhInfoExtension
    return children
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDiscardBrief.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDiscardBrief.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDiscardBrief.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDiscardBrief.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDiscardBrief.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDiscardBrief.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDiscardBrief.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDiscardBrief.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDiscardBrief.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDiscardBrief.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDiscardBrief.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDiscardBrief.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDiscardBrief.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDiscardBrief.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDiscardBrief.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDiscardBrief.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDiscardBrief.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDiscardBrief.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDiscardBrief.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDiscardBrief.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDiscardBrief.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDiscardBrief.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDiscardBrief.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDiscardBrief.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDiscardBrief.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDiscardBrief.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDiscardBrief.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDiscardBrief.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDiscardBrief.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDiscardBrief.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDiscardBrief.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDiscardBrief.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDiscardBrief.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDiscardBrief.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDiscardBrief.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDiscardBrief.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDiscardBrief.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDiscardBrief.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDiscardBrief.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDiscardBrief.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDiscardBrief.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDiscardBrief.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDiscardBrief.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDiscardBrief.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDiscardBrief.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDiscardBrief.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDiscardBrief.SiUpdTs
    return leafs
}

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetYangName() string { return "nh-info-special-discard-brief" }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) SetParent(parent types.Entity) { nhInfoSpecialDiscardBrief.parent = parent }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetParent() types.Entity { return nhInfoSpecialDiscardBrief.parent }

func (nhInfoSpecialDiscardBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief) GetParentYangName() string { return "nh-info-special-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_SiPwhe) GetParentYangName() string { return "nh-info-special-discard-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension) GetParentYangName() string { return "nh-info-special-discard-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDiscardBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief
// Brief special-null NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetFilter() yfilter.YFilter { return nhInfoSpecialNullBrief.YFilter }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) SetFilter(yf yfilter.YFilter) { nhInfoSpecialNullBrief.YFilter = yf }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetSegmentPath() string {
    return "nh-info-special-null-brief"
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialNullBrief.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialNullBrief.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialNullBrief.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialNullBrief.NhInfoExtension
    return children
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialNullBrief.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialNullBrief.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialNullBrief.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialNullBrief.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialNullBrief.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialNullBrief.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialNullBrief.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialNullBrief.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialNullBrief.SiRefcount
    leafs["si-flags"] = nhInfoSpecialNullBrief.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialNullBrief.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialNullBrief.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialNullBrief.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialNullBrief.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialNullBrief.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialNullBrief.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialNullBrief.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialNullBrief.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialNullBrief.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialNullBrief.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialNullBrief.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialNullBrief.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialNullBrief.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialNullBrief.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialNullBrief.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialNullBrief.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialNullBrief.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialNullBrief.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialNullBrief.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialNullBrief.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialNullBrief.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialNullBrief.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialNullBrief.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialNullBrief.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialNullBrief.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialNullBrief.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialNullBrief.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialNullBrief.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialNullBrief.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialNullBrief.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialNullBrief.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialNullBrief.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialNullBrief.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialNullBrief.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialNullBrief.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialNullBrief.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialNullBrief.SiUpdTs
    return leafs
}

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetYangName() string { return "nh-info-special-null-brief" }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) SetParent(parent types.Entity) { nhInfoSpecialNullBrief.parent = parent }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetParent() types.Entity { return nhInfoSpecialNullBrief.parent }

func (nhInfoSpecialNullBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief) GetParentYangName() string { return "nh-info-special-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_SiPwhe) GetParentYangName() string { return "nh-info-special-null-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension) GetParentYangName() string { return "nh-info-special-null-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialNullBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief
// Brief special-punt NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetFilter() yfilter.YFilter { return nhInfoSpecialPuntBrief.YFilter }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) SetFilter(yf yfilter.YFilter) { nhInfoSpecialPuntBrief.YFilter = yf }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetSegmentPath() string {
    return "nh-info-special-punt-brief"
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialPuntBrief.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialPuntBrief.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialPuntBrief.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialPuntBrief.NhInfoExtension
    return children
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialPuntBrief.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialPuntBrief.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialPuntBrief.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialPuntBrief.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialPuntBrief.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialPuntBrief.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialPuntBrief.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialPuntBrief.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialPuntBrief.SiRefcount
    leafs["si-flags"] = nhInfoSpecialPuntBrief.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialPuntBrief.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialPuntBrief.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialPuntBrief.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialPuntBrief.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialPuntBrief.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialPuntBrief.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialPuntBrief.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialPuntBrief.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialPuntBrief.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialPuntBrief.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialPuntBrief.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialPuntBrief.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialPuntBrief.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialPuntBrief.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialPuntBrief.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialPuntBrief.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialPuntBrief.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialPuntBrief.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialPuntBrief.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialPuntBrief.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialPuntBrief.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialPuntBrief.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialPuntBrief.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialPuntBrief.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialPuntBrief.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialPuntBrief.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialPuntBrief.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialPuntBrief.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialPuntBrief.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialPuntBrief.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialPuntBrief.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialPuntBrief.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialPuntBrief.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialPuntBrief.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialPuntBrief.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialPuntBrief.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialPuntBrief.SiUpdTs
    return leafs
}

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetYangName() string { return "nh-info-special-punt-brief" }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) SetParent(parent types.Entity) { nhInfoSpecialPuntBrief.parent = parent }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetParent() types.Entity { return nhInfoSpecialPuntBrief.parent }

func (nhInfoSpecialPuntBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief) GetParentYangName() string { return "nh-info-special-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_SiPwhe) GetParentYangName() string { return "nh-info-special-punt-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension) GetParentYangName() string { return "nh-info-special-punt-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialPuntBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief
// Brief special-drop NHInfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetFilter() yfilter.YFilter { return nhInfoSpecialDropBrief.YFilter }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) SetFilter(yf yfilter.YFilter) { nhInfoSpecialDropBrief.YFilter = yf }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetGoName(yname string) string {
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetSegmentPath() string {
    return "nh-info-special-drop-brief"
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoSpecialDropBrief.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoSpecialDropBrief.NhInfoExtension
    }
    return nil
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoSpecialDropBrief.SiPwhe
    children["nh-info-extension"] = &nhInfoSpecialDropBrief.NhInfoExtension
    return children
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["si-link-proto"] = nhInfoSpecialDropBrief.SiLinkProto
    leafs["si-nhinfo"] = nhInfoSpecialDropBrief.SiNhinfo
    leafs["si-nhtype"] = nhInfoSpecialDropBrief.SiNhtype
    leafs["si-ifh"] = nhInfoSpecialDropBrief.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoSpecialDropBrief.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoSpecialDropBrief.SiAdjPtr
    leafs["si-adj-present"] = nhInfoSpecialDropBrief.SiAdjPresent
    leafs["si-special-type"] = nhInfoSpecialDropBrief.SiSpecialType
    leafs["si-refcount"] = nhInfoSpecialDropBrief.SiRefcount
    leafs["si-flags"] = nhInfoSpecialDropBrief.SiFlags
    leafs["si-adj-if"] = nhInfoSpecialDropBrief.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoSpecialDropBrief.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoSpecialDropBrief.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoSpecialDropBrief.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoSpecialDropBrief.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoSpecialDropBrief.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoSpecialDropBrief.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoSpecialDropBrief.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoSpecialDropBrief.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoSpecialDropBrief.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoSpecialDropBrief.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoSpecialDropBrief.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoSpecialDropBrief.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoSpecialDropBrief.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoSpecialDropBrief.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoSpecialDropBrief.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoSpecialDropBrief.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoSpecialDropBrief.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoSpecialDropBrief.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoSpecialDropBrief.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoSpecialDropBrief.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoSpecialDropBrief.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoSpecialDropBrief.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoSpecialDropBrief.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoSpecialDropBrief.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoSpecialDropBrief.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoSpecialDropBrief.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoSpecialDropBrief.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoSpecialDropBrief.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoSpecialDropBrief.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoSpecialDropBrief.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoSpecialDropBrief.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoSpecialDropBrief.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoSpecialDropBrief.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoSpecialDropBrief.SiGreDestAddr
    leafs["si-nhid"] = nhInfoSpecialDropBrief.SiNhid
    leafs["si-upd-ts"] = nhInfoSpecialDropBrief.SiUpdTs
    return leafs
}

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetYangName() string { return "nh-info-special-drop-brief" }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) SetParent(parent types.Entity) { nhInfoSpecialDropBrief.parent = parent }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetParent() types.Entity { return nhInfoSpecialDropBrief.parent }

func (nhInfoSpecialDropBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief) GetParentYangName() string { return "nh-info-special-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_SiPwhe) GetParentYangName() string { return "nh-info-special-drop-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension) GetParentYangName() string { return "nh-info-special-drop-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoSpecialBrief_NhInfoSpecialDropBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs
// remote nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief remote NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief.
    NhInfoRemoteBrief []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetFilter() yfilter.YFilter { return nhInfoRemoteBriefs.YFilter }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) SetFilter(yf yfilter.YFilter) { nhInfoRemoteBriefs.YFilter = yf }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetGoName(yname string) string {
    if yname == "nh-info-remote-brief" { return "NhInfoRemoteBrief" }
    return ""
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetSegmentPath() string {
    return "nh-info-remote-briefs"
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-remote-brief" {
        for _, c := range nhInfoRemoteBriefs.NhInfoRemoteBrief {
            if nhInfoRemoteBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief{}
        nhInfoRemoteBriefs.NhInfoRemoteBrief = append(nhInfoRemoteBriefs.NhInfoRemoteBrief, child)
        return &nhInfoRemoteBriefs.NhInfoRemoteBrief[len(nhInfoRemoteBriefs.NhInfoRemoteBrief)-1]
    }
    return nil
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoRemoteBriefs.NhInfoRemoteBrief {
        children[nhInfoRemoteBriefs.NhInfoRemoteBrief[i].GetSegmentPath()] = &nhInfoRemoteBriefs.NhInfoRemoteBrief[i]
    }
    return children
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetYangName() string { return "nh-info-remote-briefs" }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) SetParent(parent types.Entity) { nhInfoRemoteBriefs.parent = parent }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetParent() types.Entity { return nhInfoRemoteBriefs.parent }

func (nhInfoRemoteBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs) GetParentYangName() string { return "nh-info-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief
// Brief remote NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetFilter() yfilter.YFilter { return nhInfoRemoteBrief.YFilter }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) SetFilter(yf yfilter.YFilter) { nhInfoRemoteBrief.YFilter = yf }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetSegmentPath() string {
    return "nh-info-remote-brief"
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoRemoteBrief.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoRemoteBrief.NhInfoExtension
    }
    return nil
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoRemoteBrief.SiPwhe
    children["nh-info-extension"] = &nhInfoRemoteBrief.NhInfoExtension
    return children
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoRemoteBrief.NhInterfaceName
    leafs["nh-address"] = nhInfoRemoteBrief.NhAddress
    leafs["si-link-proto"] = nhInfoRemoteBrief.SiLinkProto
    leafs["si-nhinfo"] = nhInfoRemoteBrief.SiNhinfo
    leafs["si-nhtype"] = nhInfoRemoteBrief.SiNhtype
    leafs["si-ifh"] = nhInfoRemoteBrief.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoRemoteBrief.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoRemoteBrief.SiAdjPtr
    leafs["si-adj-present"] = nhInfoRemoteBrief.SiAdjPresent
    leafs["si-special-type"] = nhInfoRemoteBrief.SiSpecialType
    leafs["si-refcount"] = nhInfoRemoteBrief.SiRefcount
    leafs["si-flags"] = nhInfoRemoteBrief.SiFlags
    leafs["si-adj-if"] = nhInfoRemoteBrief.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoRemoteBrief.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoRemoteBrief.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoRemoteBrief.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoRemoteBrief.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoRemoteBrief.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoRemoteBrief.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoRemoteBrief.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoRemoteBrief.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoRemoteBrief.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoRemoteBrief.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoRemoteBrief.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoRemoteBrief.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoRemoteBrief.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoRemoteBrief.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoRemoteBrief.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoRemoteBrief.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoRemoteBrief.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoRemoteBrief.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoRemoteBrief.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoRemoteBrief.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoRemoteBrief.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoRemoteBrief.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoRemoteBrief.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoRemoteBrief.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoRemoteBrief.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoRemoteBrief.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoRemoteBrief.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoRemoteBrief.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoRemoteBrief.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoRemoteBrief.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoRemoteBrief.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoRemoteBrief.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoRemoteBrief.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoRemoteBrief.SiGreDestAddr
    leafs["si-nhid"] = nhInfoRemoteBrief.SiNhid
    leafs["si-upd-ts"] = nhInfoRemoteBrief.SiUpdTs
    return leafs
}

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetYangName() string { return "nh-info-remote-brief" }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) SetParent(parent types.Entity) { nhInfoRemoteBrief.parent = parent }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetParent() types.Entity { return nhInfoRemoteBrief.parent }

func (nhInfoRemoteBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief) GetParentYangName() string { return "nh-info-remote-briefs" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_SiPwhe) GetParentYangName() string { return "nh-info-remote-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension) GetParentYangName() string { return "nh-info-remote-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoRemoteBriefs_NhInfoRemoteBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs
// Local (non-remote) nhinfo
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief NHinfo entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief.
    NhInfoLocalBrief []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetFilter() yfilter.YFilter { return nhInfoLocalBriefs.YFilter }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) SetFilter(yf yfilter.YFilter) { nhInfoLocalBriefs.YFilter = yf }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetGoName(yname string) string {
    if yname == "nh-info-local-brief" { return "NhInfoLocalBrief" }
    return ""
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetSegmentPath() string {
    return "nh-info-local-briefs"
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-local-brief" {
        for _, c := range nhInfoLocalBriefs.NhInfoLocalBrief {
            if nhInfoLocalBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief{}
        nhInfoLocalBriefs.NhInfoLocalBrief = append(nhInfoLocalBriefs.NhInfoLocalBrief, child)
        return &nhInfoLocalBriefs.NhInfoLocalBrief[len(nhInfoLocalBriefs.NhInfoLocalBrief)-1]
    }
    return nil
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoLocalBriefs.NhInfoLocalBrief {
        children[nhInfoLocalBriefs.NhInfoLocalBrief[i].GetSegmentPath()] = &nhInfoLocalBriefs.NhInfoLocalBrief[i]
    }
    return children
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetYangName() string { return "nh-info-local-briefs" }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) SetParent(parent types.Entity) { nhInfoLocalBriefs.parent = parent }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetParent() types.Entity { return nhInfoLocalBriefs.parent }

func (nhInfoLocalBriefs *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs) GetParentYangName() string { return "nh-info-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief
// Brief NHinfo entry
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // FIB Protocol Type for NHINFO linktype. The type is interface{} with range:
    // 0..4294967295.
    SiLinkProto interface{}

    // NHinfo object. The type is interface{} with range: 0..4294967295.
    SiNhinfo interface{}

    // NHinfo Type. The type is interface{} with range: 0..4294967295.
    SiNhtype interface{}

    // Ifhndl assoc w nhinfo. The type is interface{} with range: 0..4294967295.
    SiIfh interface{}

    // Pamna Interface Type. The type is interface{} with range: 0..4294967295.
    SiPfiInterfaceType interface{}

    // Adj Ptr. The type is interface{} with range: 0..4294967295.
    SiAdjPtr interface{}

    // nhinfo point to adj. The type is bool.
    SiAdjPresent interface{}

    // nature of special nhinfo. The type is interface{} with range:
    // 0..4294967295.
    SiSpecialType interface{}

    // refcount. The type is interface{} with range: 0..4294967295.
    SiRefcount interface{}

    // nhinfo flags. The type is interface{} with range: 0..4294967295.
    SiFlags interface{}

    // ADJ Interface. The type is interface{} with range: 0..4294967295.
    SiAdjIf interface{}

    // Extension Prefix. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiExtPfx interface{}

    // Extension Prefix Len. The type is interface{} with range: 0..4294967295.
    SiExtPfxLen interface{}

    // Extension Prefix Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiExtPfxProto interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjAddress interface{}

    // ADJ L3 address length. The type is interface{} with range: 0..4294967295.
    SiAdjAddrlen interface{}

    // ADJ L3 address Protocol. The type is interface{} with range: 0..4294967295.
    SiAdjAddrProto interface{}

    // Length of Macstring. The type is interface{} with range: 0..4294967295.
    SiAdjRwLen interface{}

    // Macstring for Adjacency. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiAdjRw interface{}

    // Depenedent nhinfo type. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoType interface{}

    // Dependent nhinfo. The type is interface{} with range: 0..4294967295.
    SiDepNhinfo interface{}

    // Dependent nhinfo ifhndl. The type is interface{} with range: 0..4294967295.
    SiDepNhinfoIfh interface{}

    // pointer to Backup FRR obj. The type is interface{} with range:
    // 0..4294967295.
    SiBkupFrr interface{}

    // pointer to protect FRR object. The type is interface{} with range:
    // 0..4294967295.
    SiProtectFrr interface{}

    // Bacckup NHINFO obj. The type is interface{} with range: 0..4294967295.
    SiBkupNhinfo interface{}

    // Bacckup IFH. The type is interface{} with range: 0..4294967295.
    SiBkupIfh interface{}

    // Bkup L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiBkupAddr interface{}

    // BKup L3 address length. The type is interface{} with range: 0..4294967295.
    SiBkupAddrlen interface{}

    // BKup L3 address Protocol. The type is interface{} with range:
    // 0..4294967295.
    SiBkupAddrProto interface{}

    // is FRR currently active. The type is bool.
    SiFrrActive interface{}

    // NH is externally managed. The type is bool.
    SiAttrIsExtMgd interface{}

    // NH is incomplete. The type is bool.
    SiAttrIsIncomp interface{}

    // NH is assoc w a TE tunnel. The type is bool.
    SiAttrIsTunnel interface{}

    // NH is assoc w a SRTE tunnel. The type is bool.
    SiAttrIsTunnelSrte interface{}

    // NH is assoc w a GRE tunnel. The type is bool.
    SiAttrIsGreTunnel interface{}

    // GRE tunnel info. The type is interface{} with range: 0..4294967295.
    SiGreTi interface{}

    // Flags on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiFlags interface{}

    // Refcount on GRE tunnel info. The type is interface{} with range:
    // 0..4294967295.
    SiGreTiRefcnt interface{}

    // Is GRE TOS propagate set. The type is bool.
    SiGreTosPropagate interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiHardware interface{}

    // nhinfo pointer. The type is interface{} with range: 0..4294967295.
    SiNhinfoPtr interface{}

    // pointer to idb. The type is interface{} with range: 0..4294967295.
    SiFnbIdbPtr interface{}

    // Ancestor IFH. The type is interface{} with range: 0..4294967295.
    SiAncIfh interface{}

    // GRE resolving ip-leaf. The type is interface{} with range: 0..4294967295.
    SiGreTiResolvingLeafp interface{}

    // GRE dest address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SiGreDestAddr interface{}

    // NHID value in the TX NH. The type is interface{} with range: 0..4294967295.
    SiNhid interface{}

    // NH update timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SiUpdTs interface{}

    // PW-HE interface extension.
    SiPwhe Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe

    // NHinfo Extensions.
    NhInfoExtension Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetFilter() yfilter.YFilter { return nhInfoLocalBrief.YFilter }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) SetFilter(yf yfilter.YFilter) { nhInfoLocalBrief.YFilter = yf }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetGoName(yname string) string {
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "si-link-proto" { return "SiLinkProto" }
    if yname == "si-nhinfo" { return "SiNhinfo" }
    if yname == "si-nhtype" { return "SiNhtype" }
    if yname == "si-ifh" { return "SiIfh" }
    if yname == "si-pfi-interface-type" { return "SiPfiInterfaceType" }
    if yname == "si-adj-ptr" { return "SiAdjPtr" }
    if yname == "si-adj-present" { return "SiAdjPresent" }
    if yname == "si-special-type" { return "SiSpecialType" }
    if yname == "si-refcount" { return "SiRefcount" }
    if yname == "si-flags" { return "SiFlags" }
    if yname == "si-adj-if" { return "SiAdjIf" }
    if yname == "si-ext-pfx" { return "SiExtPfx" }
    if yname == "si-ext-pfx-len" { return "SiExtPfxLen" }
    if yname == "si-ext-pfx-proto" { return "SiExtPfxProto" }
    if yname == "si-adj-address" { return "SiAdjAddress" }
    if yname == "si-adj-addrlen" { return "SiAdjAddrlen" }
    if yname == "si-adj-addr-proto" { return "SiAdjAddrProto" }
    if yname == "si-adj-rw-len" { return "SiAdjRwLen" }
    if yname == "si-adj-rw" { return "SiAdjRw" }
    if yname == "si-dep-nhinfo-type" { return "SiDepNhinfoType" }
    if yname == "si-dep-nhinfo" { return "SiDepNhinfo" }
    if yname == "si-dep-nhinfo-ifh" { return "SiDepNhinfoIfh" }
    if yname == "si-bkup-frr" { return "SiBkupFrr" }
    if yname == "si-protect-frr" { return "SiProtectFrr" }
    if yname == "si-bkup-nhinfo" { return "SiBkupNhinfo" }
    if yname == "si-bkup-ifh" { return "SiBkupIfh" }
    if yname == "si-bkup-addr" { return "SiBkupAddr" }
    if yname == "si-bkup-addrlen" { return "SiBkupAddrlen" }
    if yname == "si-bkup-addr-proto" { return "SiBkupAddrProto" }
    if yname == "si-frr-active" { return "SiFrrActive" }
    if yname == "si-attr-is-ext-mgd" { return "SiAttrIsExtMgd" }
    if yname == "si-attr-is-incomp" { return "SiAttrIsIncomp" }
    if yname == "si-attr-is-tunnel" { return "SiAttrIsTunnel" }
    if yname == "si-attr-is-tunnel-srte" { return "SiAttrIsTunnelSrte" }
    if yname == "si-attr-is-gre-tunnel" { return "SiAttrIsGreTunnel" }
    if yname == "si-gre-ti" { return "SiGreTi" }
    if yname == "si-gre-ti-flags" { return "SiGreTiFlags" }
    if yname == "si-gre-ti-refcnt" { return "SiGreTiRefcnt" }
    if yname == "si-gre-tos-propagate" { return "SiGreTosPropagate" }
    if yname == "si-hardware" { return "SiHardware" }
    if yname == "si-nhinfo-ptr" { return "SiNhinfoPtr" }
    if yname == "si-fnb-idb-ptr" { return "SiFnbIdbPtr" }
    if yname == "si-anc-ifh" { return "SiAncIfh" }
    if yname == "si-gre-ti-resolving-leafp" { return "SiGreTiResolvingLeafp" }
    if yname == "si-gre-dest-addr" { return "SiGreDestAddr" }
    if yname == "si-nhid" { return "SiNhid" }
    if yname == "si-upd-ts" { return "SiUpdTs" }
    if yname == "si-pwhe" { return "SiPwhe" }
    if yname == "nh-info-extension" { return "NhInfoExtension" }
    return ""
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetSegmentPath() string {
    return "nh-info-local-brief"
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "si-pwhe" {
        return &nhInfoLocalBrief.SiPwhe
    }
    if childYangName == "nh-info-extension" {
        return &nhInfoLocalBrief.NhInfoExtension
    }
    return nil
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["si-pwhe"] = &nhInfoLocalBrief.SiPwhe
    children["nh-info-extension"] = &nhInfoLocalBrief.NhInfoExtension
    return children
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-interface-name"] = nhInfoLocalBrief.NhInterfaceName
    leafs["nh-address"] = nhInfoLocalBrief.NhAddress
    leafs["si-link-proto"] = nhInfoLocalBrief.SiLinkProto
    leafs["si-nhinfo"] = nhInfoLocalBrief.SiNhinfo
    leafs["si-nhtype"] = nhInfoLocalBrief.SiNhtype
    leafs["si-ifh"] = nhInfoLocalBrief.SiIfh
    leafs["si-pfi-interface-type"] = nhInfoLocalBrief.SiPfiInterfaceType
    leafs["si-adj-ptr"] = nhInfoLocalBrief.SiAdjPtr
    leafs["si-adj-present"] = nhInfoLocalBrief.SiAdjPresent
    leafs["si-special-type"] = nhInfoLocalBrief.SiSpecialType
    leafs["si-refcount"] = nhInfoLocalBrief.SiRefcount
    leafs["si-flags"] = nhInfoLocalBrief.SiFlags
    leafs["si-adj-if"] = nhInfoLocalBrief.SiAdjIf
    leafs["si-ext-pfx"] = nhInfoLocalBrief.SiExtPfx
    leafs["si-ext-pfx-len"] = nhInfoLocalBrief.SiExtPfxLen
    leafs["si-ext-pfx-proto"] = nhInfoLocalBrief.SiExtPfxProto
    leafs["si-adj-address"] = nhInfoLocalBrief.SiAdjAddress
    leafs["si-adj-addrlen"] = nhInfoLocalBrief.SiAdjAddrlen
    leafs["si-adj-addr-proto"] = nhInfoLocalBrief.SiAdjAddrProto
    leafs["si-adj-rw-len"] = nhInfoLocalBrief.SiAdjRwLen
    leafs["si-adj-rw"] = nhInfoLocalBrief.SiAdjRw
    leafs["si-dep-nhinfo-type"] = nhInfoLocalBrief.SiDepNhinfoType
    leafs["si-dep-nhinfo"] = nhInfoLocalBrief.SiDepNhinfo
    leafs["si-dep-nhinfo-ifh"] = nhInfoLocalBrief.SiDepNhinfoIfh
    leafs["si-bkup-frr"] = nhInfoLocalBrief.SiBkupFrr
    leafs["si-protect-frr"] = nhInfoLocalBrief.SiProtectFrr
    leafs["si-bkup-nhinfo"] = nhInfoLocalBrief.SiBkupNhinfo
    leafs["si-bkup-ifh"] = nhInfoLocalBrief.SiBkupIfh
    leafs["si-bkup-addr"] = nhInfoLocalBrief.SiBkupAddr
    leafs["si-bkup-addrlen"] = nhInfoLocalBrief.SiBkupAddrlen
    leafs["si-bkup-addr-proto"] = nhInfoLocalBrief.SiBkupAddrProto
    leafs["si-frr-active"] = nhInfoLocalBrief.SiFrrActive
    leafs["si-attr-is-ext-mgd"] = nhInfoLocalBrief.SiAttrIsExtMgd
    leafs["si-attr-is-incomp"] = nhInfoLocalBrief.SiAttrIsIncomp
    leafs["si-attr-is-tunnel"] = nhInfoLocalBrief.SiAttrIsTunnel
    leafs["si-attr-is-tunnel-srte"] = nhInfoLocalBrief.SiAttrIsTunnelSrte
    leafs["si-attr-is-gre-tunnel"] = nhInfoLocalBrief.SiAttrIsGreTunnel
    leafs["si-gre-ti"] = nhInfoLocalBrief.SiGreTi
    leafs["si-gre-ti-flags"] = nhInfoLocalBrief.SiGreTiFlags
    leafs["si-gre-ti-refcnt"] = nhInfoLocalBrief.SiGreTiRefcnt
    leafs["si-gre-tos-propagate"] = nhInfoLocalBrief.SiGreTosPropagate
    leafs["si-hardware"] = nhInfoLocalBrief.SiHardware
    leafs["si-nhinfo-ptr"] = nhInfoLocalBrief.SiNhinfoPtr
    leafs["si-fnb-idb-ptr"] = nhInfoLocalBrief.SiFnbIdbPtr
    leafs["si-anc-ifh"] = nhInfoLocalBrief.SiAncIfh
    leafs["si-gre-ti-resolving-leafp"] = nhInfoLocalBrief.SiGreTiResolvingLeafp
    leafs["si-gre-dest-addr"] = nhInfoLocalBrief.SiGreDestAddr
    leafs["si-nhid"] = nhInfoLocalBrief.SiNhid
    leafs["si-upd-ts"] = nhInfoLocalBrief.SiUpdTs
    return leafs
}

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetYangName() string { return "nh-info-local-brief" }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) SetParent(parent types.Entity) { nhInfoLocalBrief.parent = parent }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetParent() types.Entity { return nhInfoLocalBrief.parent }

func (nhInfoLocalBrief *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief) GetParentYangName() string { return "nh-info-local-briefs" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe
// PW-HE interface extension
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PW-HE specific client data in adjacency. The type is interface{} with
    // range: 0..4294967295.
    PwheAdjacencyClientData interface{}

    // VC type. The type is interface{} with range: 0..4294967295.
    Vctype interface{}

    // VC Internal Label. The type is interface{} with range: 0..4294967295.
    VcInternalLabel interface{}

    // Is CW enabled?. The type is bool.
    CwEnabled interface{}

    // L2 overhead bytes for interface stats accounting. The type is interface{}
    // with range: 0..65535. Units are byte.
    L2OverheadBytes interface{}

    // VLAN tag. The type is interface{} with range: 0..4294967295.
    Dot1QVlanTag interface{}
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetFilter() yfilter.YFilter { return siPwhe.YFilter }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) SetFilter(yf yfilter.YFilter) { siPwhe.YFilter = yf }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetGoName(yname string) string {
    if yname == "pwhe-adjacency-client-data" { return "PwheAdjacencyClientData" }
    if yname == "vctype" { return "Vctype" }
    if yname == "vc-internal-label" { return "VcInternalLabel" }
    if yname == "cw-enabled" { return "CwEnabled" }
    if yname == "l2-overhead-bytes" { return "L2OverheadBytes" }
    if yname == "dot1q-vlan-tag" { return "Dot1QVlanTag" }
    return ""
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetSegmentPath() string {
    return "si-pwhe"
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-adjacency-client-data"] = siPwhe.PwheAdjacencyClientData
    leafs["vctype"] = siPwhe.Vctype
    leafs["vc-internal-label"] = siPwhe.VcInternalLabel
    leafs["cw-enabled"] = siPwhe.CwEnabled
    leafs["l2-overhead-bytes"] = siPwhe.L2OverheadBytes
    leafs["dot1q-vlan-tag"] = siPwhe.Dot1QVlanTag
    return leafs
}

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetBundleName() string { return "cisco_ios_xr" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetYangName() string { return "si-pwhe" }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) SetParent(parent types.Entity) { siPwhe.parent = parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetParent() types.Entity { return siPwhe.parent }

func (siPwhe *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_SiPwhe) GetParentYangName() string { return "nh-info-local-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension
// NHinfo Extensions
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension Detail. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail.
    NhInfoExtensionDetail []Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetFilter() yfilter.YFilter { return nhInfoExtension.YFilter }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) SetFilter(yf yfilter.YFilter) { nhInfoExtension.YFilter = yf }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetGoName(yname string) string {
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetSegmentPath() string {
    return "nh-info-extension"
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-detail" {
        for _, c := range nhInfoExtension.NhInfoExtensionDetail {
            if nhInfoExtension.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail{}
        nhInfoExtension.NhInfoExtensionDetail = append(nhInfoExtension.NhInfoExtensionDetail, child)
        return &nhInfoExtension.NhInfoExtensionDetail[len(nhInfoExtension.NhInfoExtensionDetail)-1]
    }
    return nil
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhInfoExtension.NhInfoExtensionDetail {
        children[nhInfoExtension.NhInfoExtensionDetail[i].GetSegmentPath()] = &nhInfoExtension.NhInfoExtensionDetail[i]
    }
    return children
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetYangName() string { return "nh-info-extension" }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) SetParent(parent types.Entity) { nhInfoExtension.parent = parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetParent() types.Entity { return nhInfoExtension.parent }

func (nhInfoExtension *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension) GetParentYangName() string { return "nh-info-local-brief" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail
// NHINFO Extension Detail
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NHINFO Extension object base information.
    NhInfoExtensionBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase

    // NHINFO Extension Detail Information.
    NhInfoExtensionDetail Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "nh-info-extension-base" { return "NhInfoExtensionBase" }
    if yname == "nh-info-extension-detail" { return "NhInfoExtensionDetail" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-info-extension-base" {
        return &nhInfoExtensionDetail.NhInfoExtensionBase
    }
    if childYangName == "nh-info-extension-detail" {
        return &nhInfoExtensionDetail.NhInfoExtensionDetail
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nh-info-extension-base"] = &nhInfoExtensionDetail.NhInfoExtensionBase
    children["nh-info-extension-detail"] = &nhInfoExtensionDetail.NhInfoExtensionDetail
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase
// NHINFO Extension object base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Extension Object's parent pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ParentObjectPointer interface{}

    // FIB Extension Object's back pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    BackObjectPointer interface{}

    // FIB Object Base information.
    ObjectBase Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetFilter() yfilter.YFilter { return nhInfoExtensionBase.YFilter }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetFilter(yf yfilter.YFilter) { nhInfoExtensionBase.YFilter = yf }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetGoName(yname string) string {
    if yname == "parent-object-pointer" { return "ParentObjectPointer" }
    if yname == "back-object-pointer" { return "BackObjectPointer" }
    if yname == "object-base" { return "ObjectBase" }
    return ""
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetSegmentPath() string {
    return "nh-info-extension-base"
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "object-base" {
        return &nhInfoExtensionBase.ObjectBase
    }
    return nil
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["object-base"] = &nhInfoExtensionBase.ObjectBase
    return children
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["parent-object-pointer"] = nhInfoExtensionBase.ParentObjectPointer
    leafs["back-object-pointer"] = nhInfoExtensionBase.BackObjectPointer
    return leafs
}

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetYangName() string { return "nh-info-extension-base" }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) SetParent(parent types.Entity) { nhInfoExtensionBase.parent = parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParent() types.Entity { return nhInfoExtensionBase.parent }

func (nhInfoExtensionBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase
// FIB Object Base information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Object Reference Count. The type is interface{} with range:
    // 0..4294967295.
    ObjectReferenceCount interface{}

    // FIB Object flags. The type is interface{} with range: 0..4294967295.
    ObjectFlags interface{}

    // FIB Object type. The type is interface{} with range: 0..255.
    ObjectType interface{}

    // FIB Object TimeStamp in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectTimeStamp interface{}

    // FIB Object pointer. The type is interface{} with range:
    // 0..18446744073709551615.
    ObjectPointer interface{}
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetFilter() yfilter.YFilter { return objectBase.YFilter }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetFilter(yf yfilter.YFilter) { objectBase.YFilter = yf }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetGoName(yname string) string {
    if yname == "object-reference-count" { return "ObjectReferenceCount" }
    if yname == "object-flags" { return "ObjectFlags" }
    if yname == "object-type" { return "ObjectType" }
    if yname == "object-time-stamp" { return "ObjectTimeStamp" }
    if yname == "object-pointer" { return "ObjectPointer" }
    return ""
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetSegmentPath() string {
    return "object-base"
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["object-reference-count"] = objectBase.ObjectReferenceCount
    leafs["object-flags"] = objectBase.ObjectFlags
    leafs["object-type"] = objectBase.ObjectType
    leafs["object-time-stamp"] = objectBase.ObjectTimeStamp
    leafs["object-pointer"] = objectBase.ObjectPointer
    return leafs
}

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleName() string { return "cisco_ios_xr" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetYangName() string { return "object-base" }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) SetParent(parent types.Entity) { objectBase.parent = parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParent() types.Entity { return objectBase.parent }

func (objectBase *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionBase_ObjectBase) GetParentYangName() string { return "nh-info-extension-base" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail
// NHINFO Extension Detail Information
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibNhinfoExtBag.
    Type interface{}

    // snecd nhr.
    SnecdNhr Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetFilter() yfilter.YFilter { return nhInfoExtensionDetail.YFilter }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetFilter(yf yfilter.YFilter) { nhInfoExtensionDetail.YFilter = yf }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "snecd-nhr" { return "SnecdNhr" }
    return ""
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetSegmentPath() string {
    return "nh-info-extension-detail"
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snecd-nhr" {
        return &nhInfoExtensionDetail.SnecdNhr
    }
    return nil
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snecd-nhr"] = &nhInfoExtensionDetail.SnecdNhr
    return children
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = nhInfoExtensionDetail.Type
    return leafs
}

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetYangName() string { return "nh-info-extension-detail" }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) SetParent(parent types.Entity) { nhInfoExtensionDetail.parent = parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParent() types.Entity { return nhInfoExtensionDetail.parent }

func (nhInfoExtensionDetail *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr
// snecd nhr
type Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Replicated NHINFO type. The type is interface{} with range: 0..255.
    NhInfoReplicatedType interface{}

    // NHID of the replicated NHINFO. The type is interface{} with range:
    // 0..4294967295.
    NhInfoReplicatedNhId interface{}

    // Interface of the replicated NHINFO. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NhInfoReplicatedInterface interface{}
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetFilter() yfilter.YFilter { return snecdNhr.YFilter }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetFilter(yf yfilter.YFilter) { snecdNhr.YFilter = yf }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetGoName(yname string) string {
    if yname == "nh-info-replicated-type" { return "NhInfoReplicatedType" }
    if yname == "nh-info-replicated-nh-id" { return "NhInfoReplicatedNhId" }
    if yname == "nh-info-replicated-interface" { return "NhInfoReplicatedInterface" }
    return ""
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetSegmentPath() string {
    return "snecd-nhr"
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-info-replicated-type"] = snecdNhr.NhInfoReplicatedType
    leafs["nh-info-replicated-nh-id"] = snecdNhr.NhInfoReplicatedNhId
    leafs["nh-info-replicated-interface"] = snecdNhr.NhInfoReplicatedInterface
    return leafs
}

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleName() string { return "cisco_ios_xr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetYangName() string { return "snecd-nhr" }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) SetParent(parent types.Entity) { snecdNhr.parent = parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParent() types.Entity { return snecdNhr.parent }

func (snecdNhr *Fib_Nodes_Node_Protocols_Protocol_Vrfs_Vrf_NhInfoBrief_NhInfoLocalBriefs_NhInfoLocalBrief_NhInfoExtension_NhInfoExtensionDetail_NhInfoExtensionDetail_SnecdNhr) GetParentYangName() string { return "nh-info-extension-detail" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes
// Exact Route Table
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exact route for the given source and destination addresses. The type is
    // slice of Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute.
    ExactRoute []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetFilter() yfilter.YFilter { return exactRoutes.YFilter }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) SetFilter(yf yfilter.YFilter) { exactRoutes.YFilter = yf }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetGoName(yname string) string {
    if yname == "exact-route" { return "ExactRoute" }
    return ""
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetSegmentPath() string {
    return "exact-routes"
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exact-route" {
        for _, c := range exactRoutes.ExactRoute {
            if exactRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute{}
        exactRoutes.ExactRoute = append(exactRoutes.ExactRoute, child)
        return &exactRoutes.ExactRoute[len(exactRoutes.ExactRoute)-1]
    }
    return nil
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range exactRoutes.ExactRoute {
        children[exactRoutes.ExactRoute[i].GetSegmentPath()] = &exactRoutes.ExactRoute[i]
    }
    return children
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetYangName() string { return "exact-routes" }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) SetParent(parent types.Entity) { exactRoutes.parent = parent }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetParent() types.Entity { return exactRoutes.parent }

func (exactRoutes *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute
// Exact route for the given source and
// destination addresses
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol Name. The type is FibProtocol.
    ProtocolName interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Source address. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Source interface{}

    // Destination address. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Destination interface{}

    // Proto type for this entry. The type is interface{} with range:
    // 0..4294967295.
    ProtocolTypeFibEntry interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardware interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToPathList interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // The pathlist source. The type is interface{} with range: 0..4294967295.
    PathListSource interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    NumberOfReferancesToLdi interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The flags of ext assocaited with LDI . The type is interface{} with range:
    // 0..4294967295.
    FlagsExternalLdi interface{}

    // The pointer to the ext assocaited with LDI. The type is interface{} with
    // range: 0..4294967295.
    PointerExternalLdi interface{}

    // exact-path interface handle. The type is interface{} with range:
    // 0..4294967295.
    ExactPathInterfaceHandle interface{}

    // exact-path GRE physical interface handle. The type is interface{} with
    // range: 0..4294967295.
    ExactPathGreInterfaceHandle interface{}

    // exact-route GRE phy ifh available. The type is bool.
    ExactRouteGrePhysIfhAvail interface{}

    // exact-route result. The type is bool.
    ExactRouteResult interface{}

    // Prefix is static or connected. The type is bool.
    PrefixIsStaticOrConnected interface{}

    // Packet should always be received. The type is bool.
    PacketShouldRecieve interface{}

    // Prefix is connected. The type is bool.
    PrefixConnected interface{}

    // Prefix is for an adjacency. The type is bool.
    PrefixForAdjancency interface{}

    // Prefix is for a PIC nexthop. The type is bool.
    PrefixForPicNextHop interface{}

    // Purgable after the purge interval. The type is bool.
    PurgableAfterPurgeInterval interface{}

    // Broadcast receive flag. The type is bool.
    BroadcastReciveFlag interface{}

    // Broadcast forward flag. The type is bool.
    BroadcastForwardFlag interface{}

    // 0/0 route added as default route. The type is bool.
    ZeroByZeroRouteAsDefault interface{}

    // External switch function triggered. The type is bool.
    ExternalSwitchTriggered interface{}

    // Route attributes summary flag. The type is bool.
    RouteAttributeFlag interface{}

    // Dummy real zero route. The type is bool.
    DummyRealZeroRoute interface{}

    // The LDI LW flags. The type is interface{} with range: 0..4294967295.
    LdiLwFlag interface{}

    // The refcounter of LDI LW LDI. The type is interface{} with range:
    // 0..4294967295.
    RefCounterOfLdiLwLdi interface{}

    // The type of LDI LW LDI. The type is interface{} with range: 0..4294967295.
    TypeOfLdiLwLdi interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    VersionOfRoute interface{}

    // Priority at which the route was downloaded. The type is interface{} with
    // range: 0..4294967295.
    FibRouteDownloadPriority interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}

    // Is L2 Subscriber route. The type is bool.
    L2SubscriberRoute interface{}

    // XConnect-id associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberXconnectId interface{}

    // IP protocol associated with L2 subscriber. The type is interface{} with
    // range: 0..4294967295.
    L2SubscriberIpProtocol interface{}

    // L2TPv3 cookie length for L2 subscriber. The type is interface{} with range:
    // 0..4294967295.
    L2Tpv3CookieLengthBits interface{}

    // Route destined for Line Card that support External Reach only. The type is
    // bool.
    RouteForExternalReachLinecardFlag interface{}

    // Route is a MPLS Segment-Routing prefix. The type is bool.
    RouteIsSrFlag interface{}

    // Detailed FIB entry information.
    DetailFibEntryInformation Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation

    // FIB entry path details.
    FibEntryPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath

    // Information about IPv6 SR prefix.
    Srv6Information Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information

    // Leaf Extension Object List. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject.
    ExtensionObject []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetFilter() yfilter.YFilter { return exactRoute.YFilter }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) SetFilter(yf yfilter.YFilter) { exactRoute.YFilter = yf }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    if yname == "protocol-type-fib-entry" { return "ProtocolTypeFibEntry" }
    if yname == "platform-hardware" { return "PlatformHardware" }
    if yname == "number-of-referances-to-path-list" { return "NumberOfReferancesToPathList" }
    if yname == "path-list-flags" { return "PathListFlags" }
    if yname == "path-list-source" { return "PathListSource" }
    if yname == "number-of-referances-to-ldi" { return "NumberOfReferancesToLdi" }
    if yname == "ldi-flags" { return "LdiFlags" }
    if yname == "flags-external-ldi" { return "FlagsExternalLdi" }
    if yname == "pointer-external-ldi" { return "PointerExternalLdi" }
    if yname == "exact-path-interface-handle" { return "ExactPathInterfaceHandle" }
    if yname == "exact-path-gre-interface-handle" { return "ExactPathGreInterfaceHandle" }
    if yname == "exact-route-gre-phys-ifh-avail" { return "ExactRouteGrePhysIfhAvail" }
    if yname == "exact-route-result" { return "ExactRouteResult" }
    if yname == "prefix-is-static-or-connected" { return "PrefixIsStaticOrConnected" }
    if yname == "packet-should-recieve" { return "PacketShouldRecieve" }
    if yname == "prefix-connected" { return "PrefixConnected" }
    if yname == "prefix-for-adjancency" { return "PrefixForAdjancency" }
    if yname == "prefix-for-pic-next-hop" { return "PrefixForPicNextHop" }
    if yname == "purgable-after-purge-interval" { return "PurgableAfterPurgeInterval" }
    if yname == "broadcast-recive-flag" { return "BroadcastReciveFlag" }
    if yname == "broadcast-forward-flag" { return "BroadcastForwardFlag" }
    if yname == "zero-by-zero-route-as-default" { return "ZeroByZeroRouteAsDefault" }
    if yname == "external-switch-triggered" { return "ExternalSwitchTriggered" }
    if yname == "route-attribute-flag" { return "RouteAttributeFlag" }
    if yname == "dummy-real-zero-route" { return "DummyRealZeroRoute" }
    if yname == "ldi-lw-flag" { return "LdiLwFlag" }
    if yname == "ref-counter-of-ldi-lw-ldi" { return "RefCounterOfLdiLwLdi" }
    if yname == "type-of-ldi-lw-ldi" { return "TypeOfLdiLwLdi" }
    if yname == "lspa-flags" { return "LspaFlags" }
    if yname == "version-of-route" { return "VersionOfRoute" }
    if yname == "fib-route-download-priority" { return "FibRouteDownloadPriority" }
    if yname == "time-of-last-update-in-msec" { return "TimeOfLastUpdateInMsec" }
    if yname == "l2-subscriber-route" { return "L2SubscriberRoute" }
    if yname == "l2-subscriber-xconnect-id" { return "L2SubscriberXconnectId" }
    if yname == "l2-subscriber-ip-protocol" { return "L2SubscriberIpProtocol" }
    if yname == "l2tpv3-cookie-length-bits" { return "L2Tpv3CookieLengthBits" }
    if yname == "route-for-external-reach-linecard-flag" { return "RouteForExternalReachLinecardFlag" }
    if yname == "route-is-sr-flag" { return "RouteIsSrFlag" }
    if yname == "detail-fib-entry-information" { return "DetailFibEntryInformation" }
    if yname == "fib-entry-path" { return "FibEntryPath" }
    if yname == "srv6-information" { return "Srv6Information" }
    if yname == "extension-object" { return "ExtensionObject" }
    return ""
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetSegmentPath() string {
    return "exact-route"
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-fib-entry-information" {
        return &exactRoute.DetailFibEntryInformation
    }
    if childYangName == "fib-entry-path" {
        return &exactRoute.FibEntryPath
    }
    if childYangName == "srv6-information" {
        return &exactRoute.Srv6Information
    }
    if childYangName == "extension-object" {
        for _, c := range exactRoute.ExtensionObject {
            if exactRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject{}
        exactRoute.ExtensionObject = append(exactRoute.ExtensionObject, child)
        return &exactRoute.ExtensionObject[len(exactRoute.ExtensionObject)-1]
    }
    return nil
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["detail-fib-entry-information"] = &exactRoute.DetailFibEntryInformation
    children["fib-entry-path"] = &exactRoute.FibEntryPath
    children["srv6-information"] = &exactRoute.Srv6Information
    for i := range exactRoute.ExtensionObject {
        children[exactRoute.ExtensionObject[i].GetSegmentPath()] = &exactRoute.ExtensionObject[i]
    }
    return children
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = exactRoute.ProtocolName
    leafs["vrf-name"] = exactRoute.VrfName
    leafs["source"] = exactRoute.Source
    leafs["destination"] = exactRoute.Destination
    leafs["protocol-type-fib-entry"] = exactRoute.ProtocolTypeFibEntry
    leafs["platform-hardware"] = exactRoute.PlatformHardware
    leafs["number-of-referances-to-path-list"] = exactRoute.NumberOfReferancesToPathList
    leafs["path-list-flags"] = exactRoute.PathListFlags
    leafs["path-list-source"] = exactRoute.PathListSource
    leafs["number-of-referances-to-ldi"] = exactRoute.NumberOfReferancesToLdi
    leafs["ldi-flags"] = exactRoute.LdiFlags
    leafs["flags-external-ldi"] = exactRoute.FlagsExternalLdi
    leafs["pointer-external-ldi"] = exactRoute.PointerExternalLdi
    leafs["exact-path-interface-handle"] = exactRoute.ExactPathInterfaceHandle
    leafs["exact-path-gre-interface-handle"] = exactRoute.ExactPathGreInterfaceHandle
    leafs["exact-route-gre-phys-ifh-avail"] = exactRoute.ExactRouteGrePhysIfhAvail
    leafs["exact-route-result"] = exactRoute.ExactRouteResult
    leafs["prefix-is-static-or-connected"] = exactRoute.PrefixIsStaticOrConnected
    leafs["packet-should-recieve"] = exactRoute.PacketShouldRecieve
    leafs["prefix-connected"] = exactRoute.PrefixConnected
    leafs["prefix-for-adjancency"] = exactRoute.PrefixForAdjancency
    leafs["prefix-for-pic-next-hop"] = exactRoute.PrefixForPicNextHop
    leafs["purgable-after-purge-interval"] = exactRoute.PurgableAfterPurgeInterval
    leafs["broadcast-recive-flag"] = exactRoute.BroadcastReciveFlag
    leafs["broadcast-forward-flag"] = exactRoute.BroadcastForwardFlag
    leafs["zero-by-zero-route-as-default"] = exactRoute.ZeroByZeroRouteAsDefault
    leafs["external-switch-triggered"] = exactRoute.ExternalSwitchTriggered
    leafs["route-attribute-flag"] = exactRoute.RouteAttributeFlag
    leafs["dummy-real-zero-route"] = exactRoute.DummyRealZeroRoute
    leafs["ldi-lw-flag"] = exactRoute.LdiLwFlag
    leafs["ref-counter-of-ldi-lw-ldi"] = exactRoute.RefCounterOfLdiLwLdi
    leafs["type-of-ldi-lw-ldi"] = exactRoute.TypeOfLdiLwLdi
    leafs["lspa-flags"] = exactRoute.LspaFlags
    leafs["version-of-route"] = exactRoute.VersionOfRoute
    leafs["fib-route-download-priority"] = exactRoute.FibRouteDownloadPriority
    leafs["time-of-last-update-in-msec"] = exactRoute.TimeOfLastUpdateInMsec
    leafs["l2-subscriber-route"] = exactRoute.L2SubscriberRoute
    leafs["l2-subscriber-xconnect-id"] = exactRoute.L2SubscriberXconnectId
    leafs["l2-subscriber-ip-protocol"] = exactRoute.L2SubscriberIpProtocol
    leafs["l2tpv3-cookie-length-bits"] = exactRoute.L2Tpv3CookieLengthBits
    leafs["route-for-external-reach-linecard-flag"] = exactRoute.RouteForExternalReachLinecardFlag
    leafs["route-is-sr-flag"] = exactRoute.RouteIsSrFlag
    return leafs
}

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetBundleName() string { return "cisco_ios_xr" }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetYangName() string { return "exact-route" }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) SetParent(parent types.Entity) { exactRoute.parent = parent }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetParent() types.Entity { return exactRoute.parent }

func (exactRoute *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute) GetParentYangName() string { return "exact-routes" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation
// Detailed FIB entry information
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB entry version number. The type is interface{} with range:
    // 0..4294967295.
    FibEntryVersion interface{}

    // Per Prefix Accounting. The type is interface{} with range: 0..255.
    PerPrefixAccounting interface{}

    // Load sharing type. The type is FibLoadshareShow.
    LoadSharingType interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    FibEntryAdjacencyType interface{}

    // FIB Protocol type. The type is interface{} with range: 0..4294967295.
    FibProtocolType interface{}

    // AFI FIB protocol type. The type is interface{} with range: 0..4294967295.
    AfiFibProtocolType interface{}

    // AIB L3 Address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    AibL3Address interface{}

    // ADJ ADDR LEN. The type is interface{} with range: 0..4294967295.
    AdjacencyAddressLength interface{}

    // ADJ IFH. The type is interface{} with range: 0..4294967295.
    AdjacencyInterface interface{}

    // FIB Special NHINFO Type. The type is interface{} with range: 0..4294967295.
    FibSpecialNhInformationType interface{}

    // FIB entry adj address. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    FibEntryAdjacencyAddress interface{}

    // FIB entry adjacency interface. The type is interface{} with range:
    // 0..4294967295.
    FibEntryAdjacencyInterface interface{}

    // Packets through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughFibEntry interface{}

    // Bytes through this FIB entry. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughFibEntry interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    DetailedPrefixLength interface{}

    // Prefix protocol. The type is interface{} with range: 0..4294967295.
    PrefixProtocol interface{}

    // Precedence for packets to this entry. The type is interface{} with range:
    // 0..255.
    PrecedenceForpackets interface{}

    // Traffic index for packets to this entry. The type is interface{} with
    // range: 0..255.
    TrafficIndexForPackets interface{}

    // Switch function compontent ID. The type is interface{} with range:
    // 0..4294967295.
    SwitchCompontentId interface{}

    // Fast adjacency flag. The type is bool.
    FastAdjacencyFlag interface{}

    // Illegal fast adjacency flag. The type is bool.
    IllegalFastAdjacencyFlag interface{}

    // Remote adjacency flag. The type is bool.
    RemoteAdjacencyFlag interface{}

    // BGP attribute id. The type is interface{} with range: 0..4294967295.
    BgpAttributeId interface{}

    // BGP local attribute id. The type is interface{} with range: 0..4294967295.
    BgpLocalAttributeId interface{}

    // BGP attribute origin as. The type is interface{} with range: 0..4294967295.
    BgpAttributeOriginAs interface{}

    // BGP attribute next hop as. The type is interface{} with range:
    // 0..4294967295.
    BgpAttributeNextHopAs interface{}

    // As path string. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathString interface{}

    // extcom st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtcomString interface{}

    // com st. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ComString interface{}

    // extended community. The type is interface{} with range: 0..4294967295.
    ExtendedCommunity interface{}

    // qos group. The type is interface{} with range: 0..4294967295.
    QosGroup interface{}

    // mpls fec. The type is interface{} with range: 0..4294967295.
    MplsFec interface{}

    // qppb QOS group and IP precedence. The type is interface{} with range:
    // 0..4294967295.
    QppbQosGroupAndIpPrecedence interface{}

    // PBR flow-tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // SPP forwarding class ID. The type is interface{} with range: 0..255.
    ForwardClass interface{}

    // The time of last update for PL in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    PlTimeOfLastUpdateInMsec interface{}

    // The time of last update for LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LdiTimeOfLastUpdateInMsec interface{}

    // The time of last update for LW-LDI in msec. The type is interface{} with
    // range: 0..18446744073709551615.
    LwldiTimeOfLastUpdateInMsec interface{}

    // The type of time-stamp on PL. The type is interface{} with range:
    // 0..4294967295.
    PlTimeStampType interface{}

    // Detailed Loadshare info.
    LoadshareInformation Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetFilter() yfilter.YFilter { return detailFibEntryInformation.YFilter }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) SetFilter(yf yfilter.YFilter) { detailFibEntryInformation.YFilter = yf }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetGoName(yname string) string {
    if yname == "fib-entry-version" { return "FibEntryVersion" }
    if yname == "per-prefix-accounting" { return "PerPrefixAccounting" }
    if yname == "load-sharing-type" { return "LoadSharingType" }
    if yname == "fib-entry-adjacency-type" { return "FibEntryAdjacencyType" }
    if yname == "fib-protocol-type" { return "FibProtocolType" }
    if yname == "afi-fib-protocol-type" { return "AfiFibProtocolType" }
    if yname == "aib-l3-address" { return "AibL3Address" }
    if yname == "adjacency-address-length" { return "AdjacencyAddressLength" }
    if yname == "adjacency-interface" { return "AdjacencyInterface" }
    if yname == "fib-special-nh-information-type" { return "FibSpecialNhInformationType" }
    if yname == "fib-entry-adjacency-address" { return "FibEntryAdjacencyAddress" }
    if yname == "fib-entry-adjacency-interface" { return "FibEntryAdjacencyInterface" }
    if yname == "packets-through-fib-entry" { return "PacketsThroughFibEntry" }
    if yname == "bytes-through-fib-entry" { return "BytesThroughFibEntry" }
    if yname == "detailed-prefix-length" { return "DetailedPrefixLength" }
    if yname == "prefix-protocol" { return "PrefixProtocol" }
    if yname == "precedence-forpackets" { return "PrecedenceForpackets" }
    if yname == "traffic-index-for-packets" { return "TrafficIndexForPackets" }
    if yname == "switch-compontent-id" { return "SwitchCompontentId" }
    if yname == "fast-adjacency-flag" { return "FastAdjacencyFlag" }
    if yname == "illegal-fast-adjacency-flag" { return "IllegalFastAdjacencyFlag" }
    if yname == "remote-adjacency-flag" { return "RemoteAdjacencyFlag" }
    if yname == "bgp-attribute-id" { return "BgpAttributeId" }
    if yname == "bgp-local-attribute-id" { return "BgpLocalAttributeId" }
    if yname == "bgp-attribute-origin-as" { return "BgpAttributeOriginAs" }
    if yname == "bgp-attribute-next-hop-as" { return "BgpAttributeNextHopAs" }
    if yname == "path-string" { return "PathString" }
    if yname == "extcom-string" { return "ExtcomString" }
    if yname == "com-string" { return "ComString" }
    if yname == "extended-community" { return "ExtendedCommunity" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "mpls-fec" { return "MplsFec" }
    if yname == "qppb-qos-group-and-ip-precedence" { return "QppbQosGroupAndIpPrecedence" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "forward-class" { return "ForwardClass" }
    if yname == "pl-time-of-last-update-in-msec" { return "PlTimeOfLastUpdateInMsec" }
    if yname == "ldi-time-of-last-update-in-msec" { return "LdiTimeOfLastUpdateInMsec" }
    if yname == "lwldi-time-of-last-update-in-msec" { return "LwldiTimeOfLastUpdateInMsec" }
    if yname == "pl-time-stamp-type" { return "PlTimeStampType" }
    if yname == "loadshare-information" { return "LoadshareInformation" }
    return ""
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetSegmentPath() string {
    return "detail-fib-entry-information"
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loadshare-information" {
        return &detailFibEntryInformation.LoadshareInformation
    }
    return nil
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["loadshare-information"] = &detailFibEntryInformation.LoadshareInformation
    return children
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fib-entry-version"] = detailFibEntryInformation.FibEntryVersion
    leafs["per-prefix-accounting"] = detailFibEntryInformation.PerPrefixAccounting
    leafs["load-sharing-type"] = detailFibEntryInformation.LoadSharingType
    leafs["fib-entry-adjacency-type"] = detailFibEntryInformation.FibEntryAdjacencyType
    leafs["fib-protocol-type"] = detailFibEntryInformation.FibProtocolType
    leafs["afi-fib-protocol-type"] = detailFibEntryInformation.AfiFibProtocolType
    leafs["aib-l3-address"] = detailFibEntryInformation.AibL3Address
    leafs["adjacency-address-length"] = detailFibEntryInformation.AdjacencyAddressLength
    leafs["adjacency-interface"] = detailFibEntryInformation.AdjacencyInterface
    leafs["fib-special-nh-information-type"] = detailFibEntryInformation.FibSpecialNhInformationType
    leafs["fib-entry-adjacency-address"] = detailFibEntryInformation.FibEntryAdjacencyAddress
    leafs["fib-entry-adjacency-interface"] = detailFibEntryInformation.FibEntryAdjacencyInterface
    leafs["packets-through-fib-entry"] = detailFibEntryInformation.PacketsThroughFibEntry
    leafs["bytes-through-fib-entry"] = detailFibEntryInformation.BytesThroughFibEntry
    leafs["detailed-prefix-length"] = detailFibEntryInformation.DetailedPrefixLength
    leafs["prefix-protocol"] = detailFibEntryInformation.PrefixProtocol
    leafs["precedence-forpackets"] = detailFibEntryInformation.PrecedenceForpackets
    leafs["traffic-index-for-packets"] = detailFibEntryInformation.TrafficIndexForPackets
    leafs["switch-compontent-id"] = detailFibEntryInformation.SwitchCompontentId
    leafs["fast-adjacency-flag"] = detailFibEntryInformation.FastAdjacencyFlag
    leafs["illegal-fast-adjacency-flag"] = detailFibEntryInformation.IllegalFastAdjacencyFlag
    leafs["remote-adjacency-flag"] = detailFibEntryInformation.RemoteAdjacencyFlag
    leafs["bgp-attribute-id"] = detailFibEntryInformation.BgpAttributeId
    leafs["bgp-local-attribute-id"] = detailFibEntryInformation.BgpLocalAttributeId
    leafs["bgp-attribute-origin-as"] = detailFibEntryInformation.BgpAttributeOriginAs
    leafs["bgp-attribute-next-hop-as"] = detailFibEntryInformation.BgpAttributeNextHopAs
    leafs["path-string"] = detailFibEntryInformation.PathString
    leafs["extcom-string"] = detailFibEntryInformation.ExtcomString
    leafs["com-string"] = detailFibEntryInformation.ComString
    leafs["extended-community"] = detailFibEntryInformation.ExtendedCommunity
    leafs["qos-group"] = detailFibEntryInformation.QosGroup
    leafs["mpls-fec"] = detailFibEntryInformation.MplsFec
    leafs["qppb-qos-group-and-ip-precedence"] = detailFibEntryInformation.QppbQosGroupAndIpPrecedence
    leafs["flow-tag"] = detailFibEntryInformation.FlowTag
    leafs["forward-class"] = detailFibEntryInformation.ForwardClass
    leafs["pl-time-of-last-update-in-msec"] = detailFibEntryInformation.PlTimeOfLastUpdateInMsec
    leafs["ldi-time-of-last-update-in-msec"] = detailFibEntryInformation.LdiTimeOfLastUpdateInMsec
    leafs["lwldi-time-of-last-update-in-msec"] = detailFibEntryInformation.LwldiTimeOfLastUpdateInMsec
    leafs["pl-time-stamp-type"] = detailFibEntryInformation.PlTimeStampType
    return leafs
}

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetBundleName() string { return "cisco_ios_xr" }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetYangName() string { return "detail-fib-entry-information" }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) SetParent(parent types.Entity) { detailFibEntryInformation.parent = parent }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetParent() types.Entity { return detailFibEntryInformation.parent }

func (detailFibEntryInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation) GetParentYangName() string { return "exact-route" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation
// Detailed Loadshare info
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    PacketsThroughLoadInformation interface{}

    // Bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    BytesThroughLoadInformation interface{}

    // Total packets through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalPacketsThroughLoadInformation interface{}

    // Total bytes through this loadinfo. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TotalBytesThroughLoadInformation interface{}

    // Prefix of the owner. The type is interface{} with range: 0..4294967295.
    PrefixOfOwner interface{}

    // Mask length of the owner. The type is interface{} with range:
    // 0..4294967295.
    MaskLengthOfOwner interface{}

    // Loadinfo reference count. The type is interface{} with range: 0..65535.
    LoadInformationReferenceCount interface{}

    // Per destination load sharing flag. The type is bool.
    PerDestLoadSharingFlag interface{}

    // Loadinfo owner deleted flag. The type is bool.
    LoadInformationOwnerDeletedFlag interface{}

    // Loadinfo sanity flag. The type is bool.
    LoadinfoSanityFlag interface{}

    // Owner flag. The type is bool.
    IsOwner interface{}

    // Loadinfo internal data.
    LoadInformtionInternalData Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetFilter() yfilter.YFilter { return loadshareInformation.YFilter }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) SetFilter(yf yfilter.YFilter) { loadshareInformation.YFilter = yf }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetGoName(yname string) string {
    if yname == "packets-through-load-information" { return "PacketsThroughLoadInformation" }
    if yname == "bytes-through-load-information" { return "BytesThroughLoadInformation" }
    if yname == "total-packets-through-load-information" { return "TotalPacketsThroughLoadInformation" }
    if yname == "total-bytes-through-load-information" { return "TotalBytesThroughLoadInformation" }
    if yname == "prefix-of-owner" { return "PrefixOfOwner" }
    if yname == "mask-length-of-owner" { return "MaskLengthOfOwner" }
    if yname == "load-information-reference-count" { return "LoadInformationReferenceCount" }
    if yname == "per-dest-load-sharing-flag" { return "PerDestLoadSharingFlag" }
    if yname == "load-information-owner-deleted-flag" { return "LoadInformationOwnerDeletedFlag" }
    if yname == "loadinfo-sanity-flag" { return "LoadinfoSanityFlag" }
    if yname == "is-owner" { return "IsOwner" }
    if yname == "load-informtion-internal-data" { return "LoadInformtionInternalData" }
    return ""
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetSegmentPath() string {
    return "loadshare-information"
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "load-informtion-internal-data" {
        return &loadshareInformation.LoadInformtionInternalData
    }
    return nil
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["load-informtion-internal-data"] = &loadshareInformation.LoadInformtionInternalData
    return children
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["packets-through-load-information"] = loadshareInformation.PacketsThroughLoadInformation
    leafs["bytes-through-load-information"] = loadshareInformation.BytesThroughLoadInformation
    leafs["total-packets-through-load-information"] = loadshareInformation.TotalPacketsThroughLoadInformation
    leafs["total-bytes-through-load-information"] = loadshareInformation.TotalBytesThroughLoadInformation
    leafs["prefix-of-owner"] = loadshareInformation.PrefixOfOwner
    leafs["mask-length-of-owner"] = loadshareInformation.MaskLengthOfOwner
    leafs["load-information-reference-count"] = loadshareInformation.LoadInformationReferenceCount
    leafs["per-dest-load-sharing-flag"] = loadshareInformation.PerDestLoadSharingFlag
    leafs["load-information-owner-deleted-flag"] = loadshareInformation.LoadInformationOwnerDeletedFlag
    leafs["loadinfo-sanity-flag"] = loadshareInformation.LoadinfoSanityFlag
    leafs["is-owner"] = loadshareInformation.IsOwner
    return leafs
}

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetBundleName() string { return "cisco_ios_xr" }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetYangName() string { return "loadshare-information" }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) SetParent(parent types.Entity) { loadshareInformation.parent = parent }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetParent() types.Entity { return loadshareInformation.parent }

func (loadshareInformation *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation) GetParentYangName() string { return "detail-fib-entry-information" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData
// Loadinfo internal data
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // level of ldis. The type is interface{} with range: 0..255.
    LevelOfldis interface{}

    // no. of ldis. The type is interface{} with range: 0..255.
    NumberOfLdis interface{}

    // Maximum index of the arrays. The type is interface{} with range:
    // 0..4294967295.
    MaximumIndexArrays interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathIndices interface{}

    // Path indices. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PathLdiNumbers interface{}

    // Maximum slots. The type is interface{} with range: 0..4294967295.
    MaximumSlots interface{}

    // Normalized weights. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NormalizedWeights interface{}

    // Tunnel class value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TunnelClassValue interface{}

    // PBTS info valid flag. The type is bool.
    IsPbtsInfoValid interface{}

    // PBTS class offset. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassOffset interface{}

    // PBTS class num paths. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsClassNumPaths interface{}

    // PBTS class falls back to class. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PbtsFallbackMappedClass interface{}

    // Round Robin Disable. The type is bool.
    RoundRobinDisable interface{}

    // Number of LDI next hop buckets. The type is interface{} with range: 0..255.
    LdiNextHopBuckets interface{}

    // Platform Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    PlatformHardwareInformation interface{}

    // Sanity flag. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag.
    SanityFlag []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag

    // Interface handle. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle.
    InterfaceHandle []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle

    // Weights of paths. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath.
    WeightsOfPath []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath

    // Adjacency address. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress.
    AdjacencyAddress []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress

    // Does PBTS class fall back to drop or any class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped.
    PbtsClassIsFallbackMapped []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped

    // PBTS class falls back to drop. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop.
    PbtsFallbackToDrop []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop

    // Tunnel is forward class. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass.
    TunnelIsForwardClass []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetFilter() yfilter.YFilter { return loadInformtionInternalData.YFilter }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) SetFilter(yf yfilter.YFilter) { loadInformtionInternalData.YFilter = yf }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetGoName(yname string) string {
    if yname == "level-ofldis" { return "LevelOfldis" }
    if yname == "number-of-ldis" { return "NumberOfLdis" }
    if yname == "maximum-index-arrays" { return "MaximumIndexArrays" }
    if yname == "path-indices" { return "PathIndices" }
    if yname == "path-ldi-numbers" { return "PathLdiNumbers" }
    if yname == "maximum-slots" { return "MaximumSlots" }
    if yname == "normalized-weights" { return "NormalizedWeights" }
    if yname == "tunnel-class-value" { return "TunnelClassValue" }
    if yname == "is-pbts-info-valid" { return "IsPbtsInfoValid" }
    if yname == "pbts-class-offset" { return "PbtsClassOffset" }
    if yname == "pbts-class-num-paths" { return "PbtsClassNumPaths" }
    if yname == "pbts-fallback-mapped-class" { return "PbtsFallbackMappedClass" }
    if yname == "round-robin-disable" { return "RoundRobinDisable" }
    if yname == "ldi-next-hop-buckets" { return "LdiNextHopBuckets" }
    if yname == "platform-hardware-information" { return "PlatformHardwareInformation" }
    if yname == "sanity-flag" { return "SanityFlag" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "weights-of-path" { return "WeightsOfPath" }
    if yname == "adjacency-address" { return "AdjacencyAddress" }
    if yname == "pbts-class-is-fallback-mapped" { return "PbtsClassIsFallbackMapped" }
    if yname == "pbts-fallback-to-drop" { return "PbtsFallbackToDrop" }
    if yname == "tunnel-is-forward-class" { return "TunnelIsForwardClass" }
    return ""
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetSegmentPath() string {
    return "load-informtion-internal-data"
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sanity-flag" {
        for _, c := range loadInformtionInternalData.SanityFlag {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag{}
        loadInformtionInternalData.SanityFlag = append(loadInformtionInternalData.SanityFlag, child)
        return &loadInformtionInternalData.SanityFlag[len(loadInformtionInternalData.SanityFlag)-1]
    }
    if childYangName == "interface-handle" {
        for _, c := range loadInformtionInternalData.InterfaceHandle {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle{}
        loadInformtionInternalData.InterfaceHandle = append(loadInformtionInternalData.InterfaceHandle, child)
        return &loadInformtionInternalData.InterfaceHandle[len(loadInformtionInternalData.InterfaceHandle)-1]
    }
    if childYangName == "weights-of-path" {
        for _, c := range loadInformtionInternalData.WeightsOfPath {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath{}
        loadInformtionInternalData.WeightsOfPath = append(loadInformtionInternalData.WeightsOfPath, child)
        return &loadInformtionInternalData.WeightsOfPath[len(loadInformtionInternalData.WeightsOfPath)-1]
    }
    if childYangName == "adjacency-address" {
        for _, c := range loadInformtionInternalData.AdjacencyAddress {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress{}
        loadInformtionInternalData.AdjacencyAddress = append(loadInformtionInternalData.AdjacencyAddress, child)
        return &loadInformtionInternalData.AdjacencyAddress[len(loadInformtionInternalData.AdjacencyAddress)-1]
    }
    if childYangName == "pbts-class-is-fallback-mapped" {
        for _, c := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped{}
        loadInformtionInternalData.PbtsClassIsFallbackMapped = append(loadInformtionInternalData.PbtsClassIsFallbackMapped, child)
        return &loadInformtionInternalData.PbtsClassIsFallbackMapped[len(loadInformtionInternalData.PbtsClassIsFallbackMapped)-1]
    }
    if childYangName == "pbts-fallback-to-drop" {
        for _, c := range loadInformtionInternalData.PbtsFallbackToDrop {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop{}
        loadInformtionInternalData.PbtsFallbackToDrop = append(loadInformtionInternalData.PbtsFallbackToDrop, child)
        return &loadInformtionInternalData.PbtsFallbackToDrop[len(loadInformtionInternalData.PbtsFallbackToDrop)-1]
    }
    if childYangName == "tunnel-is-forward-class" {
        for _, c := range loadInformtionInternalData.TunnelIsForwardClass {
            if loadInformtionInternalData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass{}
        loadInformtionInternalData.TunnelIsForwardClass = append(loadInformtionInternalData.TunnelIsForwardClass, child)
        return &loadInformtionInternalData.TunnelIsForwardClass[len(loadInformtionInternalData.TunnelIsForwardClass)-1]
    }
    return nil
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range loadInformtionInternalData.SanityFlag {
        children[loadInformtionInternalData.SanityFlag[i].GetSegmentPath()] = &loadInformtionInternalData.SanityFlag[i]
    }
    for i := range loadInformtionInternalData.InterfaceHandle {
        children[loadInformtionInternalData.InterfaceHandle[i].GetSegmentPath()] = &loadInformtionInternalData.InterfaceHandle[i]
    }
    for i := range loadInformtionInternalData.WeightsOfPath {
        children[loadInformtionInternalData.WeightsOfPath[i].GetSegmentPath()] = &loadInformtionInternalData.WeightsOfPath[i]
    }
    for i := range loadInformtionInternalData.AdjacencyAddress {
        children[loadInformtionInternalData.AdjacencyAddress[i].GetSegmentPath()] = &loadInformtionInternalData.AdjacencyAddress[i]
    }
    for i := range loadInformtionInternalData.PbtsClassIsFallbackMapped {
        children[loadInformtionInternalData.PbtsClassIsFallbackMapped[i].GetSegmentPath()] = &loadInformtionInternalData.PbtsClassIsFallbackMapped[i]
    }
    for i := range loadInformtionInternalData.PbtsFallbackToDrop {
        children[loadInformtionInternalData.PbtsFallbackToDrop[i].GetSegmentPath()] = &loadInformtionInternalData.PbtsFallbackToDrop[i]
    }
    for i := range loadInformtionInternalData.TunnelIsForwardClass {
        children[loadInformtionInternalData.TunnelIsForwardClass[i].GetSegmentPath()] = &loadInformtionInternalData.TunnelIsForwardClass[i]
    }
    return children
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level-ofldis"] = loadInformtionInternalData.LevelOfldis
    leafs["number-of-ldis"] = loadInformtionInternalData.NumberOfLdis
    leafs["maximum-index-arrays"] = loadInformtionInternalData.MaximumIndexArrays
    leafs["path-indices"] = loadInformtionInternalData.PathIndices
    leafs["path-ldi-numbers"] = loadInformtionInternalData.PathLdiNumbers
    leafs["maximum-slots"] = loadInformtionInternalData.MaximumSlots
    leafs["normalized-weights"] = loadInformtionInternalData.NormalizedWeights
    leafs["tunnel-class-value"] = loadInformtionInternalData.TunnelClassValue
    leafs["is-pbts-info-valid"] = loadInformtionInternalData.IsPbtsInfoValid
    leafs["pbts-class-offset"] = loadInformtionInternalData.PbtsClassOffset
    leafs["pbts-class-num-paths"] = loadInformtionInternalData.PbtsClassNumPaths
    leafs["pbts-fallback-mapped-class"] = loadInformtionInternalData.PbtsFallbackMappedClass
    leafs["round-robin-disable"] = loadInformtionInternalData.RoundRobinDisable
    leafs["ldi-next-hop-buckets"] = loadInformtionInternalData.LdiNextHopBuckets
    leafs["platform-hardware-information"] = loadInformtionInternalData.PlatformHardwareInformation
    return leafs
}

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetBundleName() string { return "cisco_ios_xr" }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetYangName() string { return "load-informtion-internal-data" }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) SetParent(parent types.Entity) { loadInformtionInternalData.parent = parent }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetParent() types.Entity { return loadInformtionInternalData.parent }

func (loadInformtionInternalData *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData) GetParentYangName() string { return "loadshare-information" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag
// Sanity flag
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is bool.
    Entry interface{}
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetFilter() yfilter.YFilter { return sanityFlag.YFilter }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) SetFilter(yf yfilter.YFilter) { sanityFlag.YFilter = yf }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetSegmentPath() string {
    return "sanity-flag"
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = sanityFlag.Entry
    return leafs
}

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetBundleName() string { return "cisco_ios_xr" }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetYangName() string { return "sanity-flag" }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) SetParent(parent types.Entity) { sanityFlag.parent = parent }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetParent() types.Entity { return sanityFlag.parent }

func (sanityFlag *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_SanityFlag) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle
// Interface handle
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-zA-Z0-9./-]+.
    Entry interface{}
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetFilter() yfilter.YFilter { return interfaceHandle.YFilter }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) SetFilter(yf yfilter.YFilter) { interfaceHandle.YFilter = yf }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetSegmentPath() string {
    return "interface-handle"
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceHandle.Entry
    return leafs
}

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetYangName() string { return "interface-handle" }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) SetParent(parent types.Entity) { interfaceHandle.parent = parent }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetParent() types.Entity { return interfaceHandle.parent }

func (interfaceHandle *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_InterfaceHandle) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath
// Weights of paths
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetFilter() yfilter.YFilter { return weightsOfPath.YFilter }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) SetFilter(yf yfilter.YFilter) { weightsOfPath.YFilter = yf }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetSegmentPath() string {
    return "weights-of-path"
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = weightsOfPath.Entry
    return leafs
}

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetBundleName() string { return "cisco_ios_xr" }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetYangName() string { return "weights-of-path" }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) SetParent(parent types.Entity) { weightsOfPath.parent = parent }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetParent() types.Entity { return weightsOfPath.parent }

func (weightsOfPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_WeightsOfPath) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress
// Adjacency address
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // address. The type is string with length: 0..60.
    Address interface{}
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetFilter() yfilter.YFilter { return adjacencyAddress.YFilter }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) SetFilter(yf yfilter.YFilter) { adjacencyAddress.YFilter = yf }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetSegmentPath() string {
    return "adjacency-address"
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = adjacencyAddress.Address
    return leafs
}

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetYangName() string { return "adjacency-address" }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) SetParent(parent types.Entity) { adjacencyAddress.parent = parent }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetParent() types.Entity { return adjacencyAddress.parent }

func (adjacencyAddress *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_AdjacencyAddress) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped
// Does PBTS class fall back to drop or any class
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetFilter() yfilter.YFilter { return pbtsClassIsFallbackMapped.YFilter }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) SetFilter(yf yfilter.YFilter) { pbtsClassIsFallbackMapped.YFilter = yf }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetSegmentPath() string {
    return "pbts-class-is-fallback-mapped"
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = pbtsClassIsFallbackMapped.Entry
    return leafs
}

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetBundleName() string { return "cisco_ios_xr" }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetYangName() string { return "pbts-class-is-fallback-mapped" }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) SetParent(parent types.Entity) { pbtsClassIsFallbackMapped.parent = parent }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetParent() types.Entity { return pbtsClassIsFallbackMapped.parent }

func (pbtsClassIsFallbackMapped *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsClassIsFallbackMapped) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop
// PBTS class falls back to drop
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetFilter() yfilter.YFilter { return pbtsFallbackToDrop.YFilter }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) SetFilter(yf yfilter.YFilter) { pbtsFallbackToDrop.YFilter = yf }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetSegmentPath() string {
    return "pbts-fallback-to-drop"
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = pbtsFallbackToDrop.Entry
    return leafs
}

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetBundleName() string { return "cisco_ios_xr" }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetYangName() string { return "pbts-fallback-to-drop" }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) SetParent(parent types.Entity) { pbtsFallbackToDrop.parent = parent }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetParent() types.Entity { return pbtsFallbackToDrop.parent }

func (pbtsFallbackToDrop *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_PbtsFallbackToDrop) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass
// Tunnel is forward class
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetFilter() yfilter.YFilter { return tunnelIsForwardClass.YFilter }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) SetFilter(yf yfilter.YFilter) { tunnelIsForwardClass.YFilter = yf }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetSegmentPath() string {
    return "tunnel-is-forward-class"
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tunnelIsForwardClass.Entry
    return leafs
}

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetYangName() string { return "tunnel-is-forward-class" }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) SetParent(parent types.Entity) { tunnelIsForwardClass.parent = parent }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetParent() types.Entity { return tunnelIsForwardClass.parent }

func (tunnelIsForwardClass *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_DetailFibEntryInformation_LoadshareInformation_LoadInformtionInternalData_TunnelIsForwardClass) GetParentYangName() string { return "load-informtion-internal-data" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath
// FIB entry path details
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // fib sh tbl path. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath.
    FibShTblPath []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetFilter() yfilter.YFilter { return fibEntryPath.YFilter }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) SetFilter(yf yfilter.YFilter) { fibEntryPath.YFilter = yf }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetGoName(yname string) string {
    if yname == "fib-sh-tbl-path" { return "FibShTblPath" }
    return ""
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetSegmentPath() string {
    return "fib-entry-path"
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-sh-tbl-path" {
        for _, c := range fibEntryPath.FibShTblPath {
            if fibEntryPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath{}
        fibEntryPath.FibShTblPath = append(fibEntryPath.FibShTblPath, child)
        return &fibEntryPath.FibShTblPath[len(fibEntryPath.FibShTblPath)-1]
    }
    return nil
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fibEntryPath.FibShTblPath {
        children[fibEntryPath.FibShTblPath[i].GetSegmentPath()] = &fibEntryPath.FibShTblPath[i]
    }
    return children
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetBundleName() string { return "cisco_ios_xr" }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetYangName() string { return "fib-entry-path" }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) SetParent(parent types.Entity) { fibEntryPath.parent = parent }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetParent() types.Entity { return fibEntryPath.parent }

func (fibEntryPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath) GetParentYangName() string { return "exact-route" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath
// fib sh tbl path
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    BriefInterfaceHandle interface{}

    // Next hop prefix. The type is string with length: 0..52.
    BriefNextHopPrefix interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    ViaLabelToRecurse interface{}

    // P-node address. The type is string with length: 0..52.
    BriefPnodeAddress interface{}

    // Q-node address. The type is string with length: 0..52.
    BriefQnodeAddress interface{}

    // LFA protection type. The type is FibUpdatePathLfaProtection.
    BriefLfaProtectionType interface{}

    // Resolved path. The type is bool.
    ResolvedPath interface{}

    // Recursive path. The type is bool.
    RecursivePath interface{}

    // Packets received on this path. The type is bool.
    PacketsReceivedPath interface{}

    // Attached path. The type is bool.
    AttachedPath interface{}

    // Backup path. The type is bool.
    BackupPath interface{}

    // Best external path. The type is bool.
    BestExternalPath interface{}

    // Is protection ignored. The type is bool.
    ProtectIgnore interface{}

    // Is this the path used for DLB. The type is bool.
    PathDlb interface{}

    // Path flags. The type is interface{} with range: 0..4294967295.
    PathFlags interface{}

    // Path Info flags. The type is interface{} with range: 0..65535.
    PathInfoFlags interface{}

    // Path index. The type is interface{} with range: 0..255.
    PathIndex interface{}

    // Backup path index. The type is interface{} with range: 0..255.
    BackupIndex interface{}

    // Next Hop Index. The type is interface{} with range: 0..4294967295.
    NextHopIndex interface{}

    // Parent Interface Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceHandle interface{}

    // recursion via /N constraint. The type is interface{} with range: 0..255.
    RecursionviaLen interface{}

    // More detail about this path entry.
    MoreDetailAboutPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath

    // mpls info for this path entry.
    MplsInformationForPath Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetFilter() yfilter.YFilter { return fibShTblPath.YFilter }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) SetFilter(yf yfilter.YFilter) { fibShTblPath.YFilter = yf }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetGoName(yname string) string {
    if yname == "hardware-information" { return "HardwareInformation" }
    if yname == "brief-interface-handle" { return "BriefInterfaceHandle" }
    if yname == "brief-next-hop-prefix" { return "BriefNextHopPrefix" }
    if yname == "via-label-to-recurse" { return "ViaLabelToRecurse" }
    if yname == "brief-pnode-address" { return "BriefPnodeAddress" }
    if yname == "brief-qnode-address" { return "BriefQnodeAddress" }
    if yname == "brief-lfa-protection-type" { return "BriefLfaProtectionType" }
    if yname == "resolved-path" { return "ResolvedPath" }
    if yname == "recursive-path" { return "RecursivePath" }
    if yname == "packets-received-path" { return "PacketsReceivedPath" }
    if yname == "attached-path" { return "AttachedPath" }
    if yname == "backup-path" { return "BackupPath" }
    if yname == "best-external-path" { return "BestExternalPath" }
    if yname == "protect-ignore" { return "ProtectIgnore" }
    if yname == "path-dlb" { return "PathDlb" }
    if yname == "path-flags" { return "PathFlags" }
    if yname == "path-info-flags" { return "PathInfoFlags" }
    if yname == "path-index" { return "PathIndex" }
    if yname == "backup-index" { return "BackupIndex" }
    if yname == "next-hop-index" { return "NextHopIndex" }
    if yname == "parent-interface-handle" { return "ParentInterfaceHandle" }
    if yname == "recursionvia-len" { return "RecursionviaLen" }
    if yname == "more-detail-about-path" { return "MoreDetailAboutPath" }
    if yname == "mpls-information-for-path" { return "MplsInformationForPath" }
    return ""
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetSegmentPath() string {
    return "fib-sh-tbl-path"
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "more-detail-about-path" {
        return &fibShTblPath.MoreDetailAboutPath
    }
    if childYangName == "mpls-information-for-path" {
        return &fibShTblPath.MplsInformationForPath
    }
    return nil
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["more-detail-about-path"] = &fibShTblPath.MoreDetailAboutPath
    children["mpls-information-for-path"] = &fibShTblPath.MplsInformationForPath
    return children
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hardware-information"] = fibShTblPath.HardwareInformation
    leafs["brief-interface-handle"] = fibShTblPath.BriefInterfaceHandle
    leafs["brief-next-hop-prefix"] = fibShTblPath.BriefNextHopPrefix
    leafs["via-label-to-recurse"] = fibShTblPath.ViaLabelToRecurse
    leafs["brief-pnode-address"] = fibShTblPath.BriefPnodeAddress
    leafs["brief-qnode-address"] = fibShTblPath.BriefQnodeAddress
    leafs["brief-lfa-protection-type"] = fibShTblPath.BriefLfaProtectionType
    leafs["resolved-path"] = fibShTblPath.ResolvedPath
    leafs["recursive-path"] = fibShTblPath.RecursivePath
    leafs["packets-received-path"] = fibShTblPath.PacketsReceivedPath
    leafs["attached-path"] = fibShTblPath.AttachedPath
    leafs["backup-path"] = fibShTblPath.BackupPath
    leafs["best-external-path"] = fibShTblPath.BestExternalPath
    leafs["protect-ignore"] = fibShTblPath.ProtectIgnore
    leafs["path-dlb"] = fibShTblPath.PathDlb
    leafs["path-flags"] = fibShTblPath.PathFlags
    leafs["path-info-flags"] = fibShTblPath.PathInfoFlags
    leafs["path-index"] = fibShTblPath.PathIndex
    leafs["backup-index"] = fibShTblPath.BackupIndex
    leafs["next-hop-index"] = fibShTblPath.NextHopIndex
    leafs["parent-interface-handle"] = fibShTblPath.ParentInterfaceHandle
    leafs["recursionvia-len"] = fibShTblPath.RecursionviaLen
    return leafs
}

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetBundleName() string { return "cisco_ios_xr" }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetYangName() string { return "fib-sh-tbl-path" }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) SetParent(parent types.Entity) { fibShTblPath.parent = parent }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetParent() types.Entity { return fibShTblPath.parent }

func (fibShTblPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath) GetParentYangName() string { return "fib-entry-path" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath
// More detail about this path entry
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address to recurse to. The type is string with length: 0..52.
    IpAddressToRecurse interface{}

    // Local label to recurse over. The type is interface{} with range:
    // 0..4294967295.
    LabelToRecurse interface{}

    // Next hop prefix. The type is string with length: 0..52.
    DetailNextHopPrefix interface{}

    // Next hop mask length. The type is interface{} with range: 0..255.
    NextHopMaskLength interface{}

    // Interface associated with this path. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceAssociatedPath interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // Next hop VRF. The type is string with length: 0..33.
    NextHopVrf interface{}

    // Tunnel endpoint id. The type is interface{} with range: 0..4294967295.
    TunnleEndpointId interface{}

    // LISP RLOC ID. The type is interface{} with range: 0..4294967295.
    Lisprlocid interface{}

    // No. of dependents for this path. The type is interface{} with range:
    // 0..4294967295.
    NumberOfDependenciesThisPath interface{}

    // Round robin reset value. The type is interface{} with range: 0..255.
    RobinResetValue interface{}

    // Is recursion object a leaf?. The type is bool.
    RecursePrefixObject interface{}

    // Next prefix recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion interface{}

    // Next prefix length. The type is interface{} with range: 0..255.
    NextPrefixLength interface{}

    // Recursion has two leaves (e.g. implicit-null path). The type is bool.
    RecursePrefixObject2 interface{}

    // Next prefix2 recursion in the path. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NextPrefixRecursion2 interface{}

    // Next prefix2 length. The type is interface{} with range: 0..255.
    NextPrefixLength2 interface{}

    // FIB entry adjacency type. The type is FibAdjacencyShow.
    DetailFibAdjacencyType interface{}

    // Current path flag. The type is bool.
    CurrentPathFlag interface{}

    // Recursive path information is available. The type is bool.
    RecursivePathInformation interface{}

    // Path is an external adjacency. The type is bool.
    ExternalAdjacency interface{}

    // FIB Nhinfo type. The type is FibNeh.
    FibPathNhInformationType interface{}

    // FIB Nhinfo type special. The type is FibNehSpecial.
    FibPathNhInformationTypeSpecial interface{}

    // Weight of the path. The type is interface{} with range: 0..4294967295.
    WeightOfPath interface{}

    // Tunnel class of the path. The type is interface{} with range: 0..255.
    TunnelClass interface{}

    // Tunnel is forward class. The type is bool.
    TunnelIsForwardClass interface{}

    // IP Encap. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap.
    SpdIpencap []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetFilter() yfilter.YFilter { return moreDetailAboutPath.YFilter }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) SetFilter(yf yfilter.YFilter) { moreDetailAboutPath.YFilter = yf }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetGoName(yname string) string {
    if yname == "ip-address-to-recurse" { return "IpAddressToRecurse" }
    if yname == "label-to-recurse" { return "LabelToRecurse" }
    if yname == "detail-next-hop-prefix" { return "DetailNextHopPrefix" }
    if yname == "next-hop-mask-length" { return "NextHopMaskLength" }
    if yname == "interface-associated-path" { return "InterfaceAssociatedPath" }
    if yname == "next-hop-interface" { return "NextHopInterface" }
    if yname == "next-hop-vrf" { return "NextHopVrf" }
    if yname == "tunnle-endpoint-id" { return "TunnleEndpointId" }
    if yname == "lisprlocid" { return "Lisprlocid" }
    if yname == "number-of-dependencies-this-path" { return "NumberOfDependenciesThisPath" }
    if yname == "robin-reset-value" { return "RobinResetValue" }
    if yname == "recurse-prefix-object" { return "RecursePrefixObject" }
    if yname == "next-prefix-recursion" { return "NextPrefixRecursion" }
    if yname == "next-prefix-length" { return "NextPrefixLength" }
    if yname == "recurse-prefix-object2" { return "RecursePrefixObject2" }
    if yname == "next-prefix-recursion2" { return "NextPrefixRecursion2" }
    if yname == "next-prefix-length2" { return "NextPrefixLength2" }
    if yname == "detail-fib-adjacency-type" { return "DetailFibAdjacencyType" }
    if yname == "current-path-flag" { return "CurrentPathFlag" }
    if yname == "recursive-path-information" { return "RecursivePathInformation" }
    if yname == "external-adjacency" { return "ExternalAdjacency" }
    if yname == "fib-path-nh-information-type" { return "FibPathNhInformationType" }
    if yname == "fib-path-nh-information-type-special" { return "FibPathNhInformationTypeSpecial" }
    if yname == "weight-of-path" { return "WeightOfPath" }
    if yname == "tunnel-class" { return "TunnelClass" }
    if yname == "tunnel-is-forward-class" { return "TunnelIsForwardClass" }
    if yname == "spd-ipencap" { return "SpdIpencap" }
    return ""
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetSegmentPath() string {
    return "more-detail-about-path"
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spd-ipencap" {
        for _, c := range moreDetailAboutPath.SpdIpencap {
            if moreDetailAboutPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap{}
        moreDetailAboutPath.SpdIpencap = append(moreDetailAboutPath.SpdIpencap, child)
        return &moreDetailAboutPath.SpdIpencap[len(moreDetailAboutPath.SpdIpencap)-1]
    }
    return nil
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range moreDetailAboutPath.SpdIpencap {
        children[moreDetailAboutPath.SpdIpencap[i].GetSegmentPath()] = &moreDetailAboutPath.SpdIpencap[i]
    }
    return children
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-address-to-recurse"] = moreDetailAboutPath.IpAddressToRecurse
    leafs["label-to-recurse"] = moreDetailAboutPath.LabelToRecurse
    leafs["detail-next-hop-prefix"] = moreDetailAboutPath.DetailNextHopPrefix
    leafs["next-hop-mask-length"] = moreDetailAboutPath.NextHopMaskLength
    leafs["interface-associated-path"] = moreDetailAboutPath.InterfaceAssociatedPath
    leafs["next-hop-interface"] = moreDetailAboutPath.NextHopInterface
    leafs["next-hop-vrf"] = moreDetailAboutPath.NextHopVrf
    leafs["tunnle-endpoint-id"] = moreDetailAboutPath.TunnleEndpointId
    leafs["lisprlocid"] = moreDetailAboutPath.Lisprlocid
    leafs["number-of-dependencies-this-path"] = moreDetailAboutPath.NumberOfDependenciesThisPath
    leafs["robin-reset-value"] = moreDetailAboutPath.RobinResetValue
    leafs["recurse-prefix-object"] = moreDetailAboutPath.RecursePrefixObject
    leafs["next-prefix-recursion"] = moreDetailAboutPath.NextPrefixRecursion
    leafs["next-prefix-length"] = moreDetailAboutPath.NextPrefixLength
    leafs["recurse-prefix-object2"] = moreDetailAboutPath.RecursePrefixObject2
    leafs["next-prefix-recursion2"] = moreDetailAboutPath.NextPrefixRecursion2
    leafs["next-prefix-length2"] = moreDetailAboutPath.NextPrefixLength2
    leafs["detail-fib-adjacency-type"] = moreDetailAboutPath.DetailFibAdjacencyType
    leafs["current-path-flag"] = moreDetailAboutPath.CurrentPathFlag
    leafs["recursive-path-information"] = moreDetailAboutPath.RecursivePathInformation
    leafs["external-adjacency"] = moreDetailAboutPath.ExternalAdjacency
    leafs["fib-path-nh-information-type"] = moreDetailAboutPath.FibPathNhInformationType
    leafs["fib-path-nh-information-type-special"] = moreDetailAboutPath.FibPathNhInformationTypeSpecial
    leafs["weight-of-path"] = moreDetailAboutPath.WeightOfPath
    leafs["tunnel-class"] = moreDetailAboutPath.TunnelClass
    leafs["tunnel-is-forward-class"] = moreDetailAboutPath.TunnelIsForwardClass
    return leafs
}

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetBundleName() string { return "cisco_ios_xr" }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetYangName() string { return "more-detail-about-path" }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) SetParent(parent types.Entity) { moreDetailAboutPath.parent = parent }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetParent() types.Entity { return moreDetailAboutPath.parent }

func (moreDetailAboutPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath) GetParentYangName() string { return "fib-sh-tbl-path" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap
// IP Encap
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Header Count. The type is interface{} with range: 0..255.
    IpEncapHdrCount interface{}

    // IPEncap Object Locks. The type is interface{} with range: 0..4294967295.
    IpEncapLocks interface{}

    // Transport Table. The type is interface{} with range: 0..4294967295.
    IpEncapTransportTbl interface{}

    // Transport VRF name. The type is string.
    IpeTransportVrfName interface{}

    // Transport AF. The type is interface{} with range: 0..4294967295.
    IpEncapTransportAf interface{}

    // Payload AF. The type is interface{} with range: 0..4294967295.
    IpEncapPayloadAf interface{}

    // Payload MTU. The type is interface{} with range: 0..65535.
    IpEncapPayloadMtu interface{}

    // Pointer to parent. The type is interface{} with range: 0..4294967295.
    IpEncapParent interface{}

    // Parent type enumeration. The type is interface{} with range: 0..4294967295.
    IpEncapParentType interface{}

    // Headers. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr.
    IpEncapHdr []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetFilter() yfilter.YFilter { return spdIpencap.YFilter }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) SetFilter(yf yfilter.YFilter) { spdIpencap.YFilter = yf }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetGoName(yname string) string {
    if yname == "ip-encap-hdr-count" { return "IpEncapHdrCount" }
    if yname == "ip-encap-locks" { return "IpEncapLocks" }
    if yname == "ip-encap-transport-tbl" { return "IpEncapTransportTbl" }
    if yname == "ipe-transport-vrf-name" { return "IpeTransportVrfName" }
    if yname == "ip-encap-transport-af" { return "IpEncapTransportAf" }
    if yname == "ip-encap-payload-af" { return "IpEncapPayloadAf" }
    if yname == "ip-encap-payload-mtu" { return "IpEncapPayloadMtu" }
    if yname == "ip-encap-parent" { return "IpEncapParent" }
    if yname == "ip-encap-parent-type" { return "IpEncapParentType" }
    if yname == "ip-encap-hdr" { return "IpEncapHdr" }
    return ""
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetSegmentPath() string {
    return "spd-ipencap"
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-encap-hdr" {
        for _, c := range spdIpencap.IpEncapHdr {
            if spdIpencap.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr{}
        spdIpencap.IpEncapHdr = append(spdIpencap.IpEncapHdr, child)
        return &spdIpencap.IpEncapHdr[len(spdIpencap.IpEncapHdr)-1]
    }
    return nil
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spdIpencap.IpEncapHdr {
        children[spdIpencap.IpEncapHdr[i].GetSegmentPath()] = &spdIpencap.IpEncapHdr[i]
    }
    return children
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-encap-hdr-count"] = spdIpencap.IpEncapHdrCount
    leafs["ip-encap-locks"] = spdIpencap.IpEncapLocks
    leafs["ip-encap-transport-tbl"] = spdIpencap.IpEncapTransportTbl
    leafs["ipe-transport-vrf-name"] = spdIpencap.IpeTransportVrfName
    leafs["ip-encap-transport-af"] = spdIpencap.IpEncapTransportAf
    leafs["ip-encap-payload-af"] = spdIpencap.IpEncapPayloadAf
    leafs["ip-encap-payload-mtu"] = spdIpencap.IpEncapPayloadMtu
    leafs["ip-encap-parent"] = spdIpencap.IpEncapParent
    leafs["ip-encap-parent-type"] = spdIpencap.IpEncapParentType
    return leafs
}

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetBundleName() string { return "cisco_ios_xr" }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetYangName() string { return "spd-ipencap" }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) SetParent(parent types.Entity) { spdIpencap.parent = parent }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetParent() types.Entity { return spdIpencap.parent }

func (spdIpencap *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap) GetParentYangName() string { return "more-detail-about-path" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr
// Headers
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Header Type. The type is FibShIpencapHdr.
    IpEncapHdrType interface{}

    // Static Header. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    IpEncapHdrp interface{}

    // Dynamic Header Fields. The type is interface{} with range: 0..4294967295.
    IpEncapHdrDyn interface{}
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetFilter() yfilter.YFilter { return ipEncapHdr.YFilter }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) SetFilter(yf yfilter.YFilter) { ipEncapHdr.YFilter = yf }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetGoName(yname string) string {
    if yname == "ip-encap-hdr-type" { return "IpEncapHdrType" }
    if yname == "ip-encap-hdrp" { return "IpEncapHdrp" }
    if yname == "ip-encap-hdr-dyn" { return "IpEncapHdrDyn" }
    return ""
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetSegmentPath() string {
    return "ip-encap-hdr"
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-encap-hdr-type"] = ipEncapHdr.IpEncapHdrType
    leafs["ip-encap-hdrp"] = ipEncapHdr.IpEncapHdrp
    leafs["ip-encap-hdr-dyn"] = ipEncapHdr.IpEncapHdrDyn
    return leafs
}

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetBundleName() string { return "cisco_ios_xr" }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetYangName() string { return "ip-encap-hdr" }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) SetParent(parent types.Entity) { ipEncapHdr.parent = parent }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetParent() types.Entity { return ipEncapHdr.parent }

func (ipEncapHdr *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MoreDetailAboutPath_SpdIpencap_IpEncapHdr) GetParentYangName() string { return "spd-ipencap" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath
// mpls info for this path entry
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LocalLable. The type is interface{} with range: 0..4294967295.
    LocalLable interface{}

    // RecursiveFwdChain. The type is bool.
    RecursiveFwdChain interface{}

    // NumberOfIGPPaths. The type is interface{} with range: 0..4294967295.
    NumberOfIgpPaths interface{}

    // RemoteBackupPath. The type is bool.
    RemoteBackup interface{}

    // Recursive Label(s). The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack.
    RecursiveLblStack []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack

    // igp label stack array. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray.
    IgpLabelStackArray []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetFilter() yfilter.YFilter { return mplsInformationForPath.YFilter }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) SetFilter(yf yfilter.YFilter) { mplsInformationForPath.YFilter = yf }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetGoName(yname string) string {
    if yname == "local-lable" { return "LocalLable" }
    if yname == "recursive-fwd-chain" { return "RecursiveFwdChain" }
    if yname == "number-of-igp-paths" { return "NumberOfIgpPaths" }
    if yname == "remote-backup" { return "RemoteBackup" }
    if yname == "recursive-lbl-stack" { return "RecursiveLblStack" }
    if yname == "igp-label-stack-array" { return "IgpLabelStackArray" }
    return ""
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetSegmentPath() string {
    return "mpls-information-for-path"
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "recursive-lbl-stack" {
        for _, c := range mplsInformationForPath.RecursiveLblStack {
            if mplsInformationForPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack{}
        mplsInformationForPath.RecursiveLblStack = append(mplsInformationForPath.RecursiveLblStack, child)
        return &mplsInformationForPath.RecursiveLblStack[len(mplsInformationForPath.RecursiveLblStack)-1]
    }
    if childYangName == "igp-label-stack-array" {
        for _, c := range mplsInformationForPath.IgpLabelStackArray {
            if mplsInformationForPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray{}
        mplsInformationForPath.IgpLabelStackArray = append(mplsInformationForPath.IgpLabelStackArray, child)
        return &mplsInformationForPath.IgpLabelStackArray[len(mplsInformationForPath.IgpLabelStackArray)-1]
    }
    return nil
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mplsInformationForPath.RecursiveLblStack {
        children[mplsInformationForPath.RecursiveLblStack[i].GetSegmentPath()] = &mplsInformationForPath.RecursiveLblStack[i]
    }
    for i := range mplsInformationForPath.IgpLabelStackArray {
        children[mplsInformationForPath.IgpLabelStackArray[i].GetSegmentPath()] = &mplsInformationForPath.IgpLabelStackArray[i]
    }
    return children
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-lable"] = mplsInformationForPath.LocalLable
    leafs["recursive-fwd-chain"] = mplsInformationForPath.RecursiveFwdChain
    leafs["number-of-igp-paths"] = mplsInformationForPath.NumberOfIgpPaths
    leafs["remote-backup"] = mplsInformationForPath.RemoteBackup
    return leafs
}

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetBundleName() string { return "cisco_ios_xr" }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetYangName() string { return "mpls-information-for-path" }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) SetParent(parent types.Entity) { mplsInformationForPath.parent = parent }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetParent() types.Entity { return mplsInformationForPath.parent }

func (mplsInformationForPath *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath) GetParentYangName() string { return "fib-sh-tbl-path" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack
// Recursive Label(s)
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetFilter() yfilter.YFilter { return recursiveLblStack.YFilter }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) SetFilter(yf yfilter.YFilter) { recursiveLblStack.YFilter = yf }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetSegmentPath() string {
    return "recursive-lbl-stack"
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = recursiveLblStack.Entry
    return leafs
}

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetBundleName() string { return "cisco_ios_xr" }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetYangName() string { return "recursive-lbl-stack" }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) SetParent(parent types.Entity) { recursiveLblStack.parent = parent }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetParent() types.Entity { return recursiveLblStack.parent }

func (recursiveLblStack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_RecursiveLblStack) GetParentYangName() string { return "mpls-information-for-path" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray
// igp label stack array
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NumberOfLabels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}

    // OutInterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // NHAddress. The type is string with length: 0..52.
    NhAddress interface{}

    // lstack. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack.
    Lstack []Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetFilter() yfilter.YFilter { return igpLabelStackArray.YFilter }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) SetFilter(yf yfilter.YFilter) { igpLabelStackArray.YFilter = yf }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetGoName(yname string) string {
    if yname == "number-of-labels" { return "NumberOfLabels" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "lstack" { return "Lstack" }
    return ""
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetSegmentPath() string {
    return "igp-label-stack-array"
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lstack" {
        for _, c := range igpLabelStackArray.Lstack {
            if igpLabelStackArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack{}
        igpLabelStackArray.Lstack = append(igpLabelStackArray.Lstack, child)
        return &igpLabelStackArray.Lstack[len(igpLabelStackArray.Lstack)-1]
    }
    return nil
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range igpLabelStackArray.Lstack {
        children[igpLabelStackArray.Lstack[i].GetSegmentPath()] = &igpLabelStackArray.Lstack[i]
    }
    return children
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-labels"] = igpLabelStackArray.NumberOfLabels
    leafs["out-interface"] = igpLabelStackArray.OutInterface
    leafs["nh-address"] = igpLabelStackArray.NhAddress
    return leafs
}

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetBundleName() string { return "cisco_ios_xr" }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetYangName() string { return "igp-label-stack-array" }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) SetParent(parent types.Entity) { igpLabelStackArray.parent = parent }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetParent() types.Entity { return igpLabelStackArray.parent }

func (igpLabelStackArray *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray) GetParentYangName() string { return "mpls-information-for-path" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack
// lstack
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetFilter() yfilter.YFilter { return lstack.YFilter }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) SetFilter(yf yfilter.YFilter) { lstack.YFilter = yf }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetSegmentPath() string {
    return "lstack"
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = lstack.Entry
    return leafs
}

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetBundleName() string { return "cisco_ios_xr" }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetYangName() string { return "lstack" }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) SetParent(parent types.Entity) { lstack.parent = parent }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetParent() types.Entity { return lstack.parent }

func (lstack *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_FibEntryPath_FibShTblPath_MplsInformationForPath_IgpLabelStackArray_Lstack) GetParentYangName() string { return "igp-label-stack-array" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information
// Information about IPv6 SR prefix
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route is an IPv6 Segment-Routing prefix. The type is bool.
    RouteIsSripv6Flag interface{}

    // Route is a SRv6 prefix resolved via Policy label. The type is bool.
    Srv6PfxResolvedViaPolicyLabel interface{}

    // Statistics are valid for this prefix. The type is bool.
    Sripv6StatsValidFlag interface{}

    // Statistics for a IPv6 SR prefix.
    Srv6Statistics Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetFilter() yfilter.YFilter { return srv6Information.YFilter }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) SetFilter(yf yfilter.YFilter) { srv6Information.YFilter = yf }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetGoName(yname string) string {
    if yname == "route-is-sripv6-flag" { return "RouteIsSripv6Flag" }
    if yname == "srv6-pfx-resolved-via-policy-label" { return "Srv6PfxResolvedViaPolicyLabel" }
    if yname == "sripv6-stats-valid-flag" { return "Sripv6StatsValidFlag" }
    if yname == "srv6-statistics" { return "Srv6Statistics" }
    return ""
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetSegmentPath() string {
    return "srv6-information"
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srv6-statistics" {
        return &srv6Information.Srv6Statistics
    }
    return nil
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["srv6-statistics"] = &srv6Information.Srv6Statistics
    return children
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-is-sripv6-flag"] = srv6Information.RouteIsSripv6Flag
    leafs["srv6-pfx-resolved-via-policy-label"] = srv6Information.Srv6PfxResolvedViaPolicyLabel
    leafs["sripv6-stats-valid-flag"] = srv6Information.Sripv6StatsValidFlag
    return leafs
}

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetBundleName() string { return "cisco_ios_xr" }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetYangName() string { return "srv6-information" }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) SetParent(parent types.Entity) { srv6Information.parent = parent }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetParent() types.Entity { return srv6Information.parent }

func (srv6Information *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information) GetParentYangName() string { return "exact-route" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics
// Statistics for a IPv6 SR prefix
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRv6 packets forwarded for a prefix. The type is interface{} with range:
    // 0..18446744073709551615.
    Srv6PacketsForwarded interface{}

    // SRv6 Packets dropped for a prefix. The type is interface{} with range:
    // 0..18446744073709551615.
    Srv6PacketsDropped interface{}
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetFilter() yfilter.YFilter { return srv6Statistics.YFilter }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) SetFilter(yf yfilter.YFilter) { srv6Statistics.YFilter = yf }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetGoName(yname string) string {
    if yname == "srv6-packets-forwarded" { return "Srv6PacketsForwarded" }
    if yname == "srv6-packets-dropped" { return "Srv6PacketsDropped" }
    return ""
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetSegmentPath() string {
    return "srv6-statistics"
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srv6-packets-forwarded"] = srv6Statistics.Srv6PacketsForwarded
    leafs["srv6-packets-dropped"] = srv6Statistics.Srv6PacketsDropped
    return leafs
}

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetYangName() string { return "srv6-statistics" }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) SetParent(parent types.Entity) { srv6Statistics.parent = parent }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetParent() types.Entity { return srv6Statistics.parent }

func (srv6Statistics *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_Srv6Information_Srv6Statistics) GetParentYangName() string { return "srv6-information" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject
// Leaf Extension Object List
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibShTblFibExtBag.
    Type interface{}

    // sfecd le.
    SfecdLe Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetFilter() yfilter.YFilter { return extensionObject.YFilter }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) SetFilter(yf yfilter.YFilter) { extensionObject.YFilter = yf }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "sfecd-le" { return "SfecdLe" }
    return ""
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetSegmentPath() string {
    return "extension-object"
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sfecd-le" {
        return &extensionObject.SfecdLe
    }
    return nil
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sfecd-le"] = &extensionObject.SfecdLe
    return children
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extensionObject.Type
    return leafs
}

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetBundleName() string { return "cisco_ios_xr" }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetYangName() string { return "extension-object" }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) SetParent(parent types.Entity) { extensionObject.parent = parent }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetParent() types.Entity { return extensionObject.parent }

func (extensionObject *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject) GetParentYangName() string { return "exact-route" }

// Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe
// sfecd le
type Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Context Label Exist. The type is bool.
    ContextLabelFlag interface{}

    // Context Label. The type is interface{} with range: 0..4294967295.
    ContextLabel interface{}
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetFilter() yfilter.YFilter { return sfecdLe.YFilter }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) SetFilter(yf yfilter.YFilter) { sfecdLe.YFilter = yf }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetGoName(yname string) string {
    if yname == "context-label-flag" { return "ContextLabelFlag" }
    if yname == "context-label" { return "ContextLabel" }
    return ""
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetSegmentPath() string {
    return "sfecd-le"
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["context-label-flag"] = sfecdLe.ContextLabelFlag
    leafs["context-label"] = sfecdLe.ContextLabel
    return leafs
}

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetBundleName() string { return "cisco_ios_xr" }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetYangName() string { return "sfecd-le" }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) SetParent(parent types.Entity) { sfecdLe.parent = parent }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetParent() types.Entity { return sfecdLe.parent }

func (sfecdLe *Fib_Nodes_Node_Protocols_Protocol_ExactRoutes_ExactRoute_ExtensionObject_SfecdLe) GetParentYangName() string { return "extension-object" }

// Fib_Nodes_Node_Protocols_Protocol_NhIds
// NHIdTable is accessed by two keys;
// {NHIdValue} and/or {NHInterface,NHAddress
type Fib_Nodes_Node_Protocols_Protocol_NhIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NextHopeId table entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId.
    NhId []Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetFilter() yfilter.YFilter { return nhIds.YFilter }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) SetFilter(yf yfilter.YFilter) { nhIds.YFilter = yf }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetGoName(yname string) string {
    if yname == "nh-id" { return "NhId" }
    return ""
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetSegmentPath() string {
    return "nh-ids"
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nh-id" {
        for _, c := range nhIds.NhId {
            if nhIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId{}
        nhIds.NhId = append(nhIds.NhId, child)
        return &nhIds.NhId[len(nhIds.NhId)-1]
    }
    return nil
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nhIds.NhId {
        children[nhIds.NhId[i].GetSegmentPath()] = &nhIds.NhId[i]
    }
    return children
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetBundleName() string { return "cisco_ios_xr" }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetYangName() string { return "nh-ids" }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) SetParent(parent types.Entity) { nhIds.parent = parent }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetParent() types.Entity { return nhIds.parent }

func (nhIds *Fib_Nodes_Node_Protocols_Protocol_NhIds) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId
// NextHopeId table entry
type Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NexthopId Value. The type is interface{} with range:
    // -2147483648..2147483647.
    NhIdValue interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfaceName interface{}

    // Next-hop address in string format (e.g., 1 .2.3.4). The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    NhAddress interface{}

    // Next-hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NhInterfHandle interface{}

    // Next-hop address. The type is string.
    NhAddressXr interface{}

    // Next-hop address protocol, IPv4/IPv6. The type is interface{} with range:
    // 0..255.
    NhProtocol interface{}

    // Payload linktype. The type is interface{} with range: 0..255.
    NhLinkType interface{}

    // Table-ID entry notified for. The type is interface{} with range:
    // 0..4294967295.
    NhTableId interface{}

    // NHID value. The type is interface{} with range: 0..4294967295.
    NhId interface{}

    // NHID application type. The type is interface{} with range: 0..255.
    NhIdApplication interface{}

    // RIB version. The type is interface{} with range: 0..18446744073709551615.
    Version interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeOfLastUpdateInMsec interface{}
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetFilter() yfilter.YFilter { return nhId.YFilter }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) SetFilter(yf yfilter.YFilter) { nhId.YFilter = yf }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetGoName(yname string) string {
    if yname == "nh-id-value" { return "NhIdValue" }
    if yname == "nh-interface-name" { return "NhInterfaceName" }
    if yname == "nh-address" { return "NhAddress" }
    if yname == "nh-interf-handle" { return "NhInterfHandle" }
    if yname == "nh-address-xr" { return "NhAddressXr" }
    if yname == "nh-protocol" { return "NhProtocol" }
    if yname == "nh-link-type" { return "NhLinkType" }
    if yname == "nh-table-id" { return "NhTableId" }
    if yname == "nh-id" { return "NhId" }
    if yname == "nh-id-application" { return "NhIdApplication" }
    if yname == "version" { return "Version" }
    if yname == "time-of-last-update-in-msec" { return "TimeOfLastUpdateInMsec" }
    return ""
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetSegmentPath() string {
    return "nh-id"
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh-id-value"] = nhId.NhIdValue
    leafs["nh-interface-name"] = nhId.NhInterfaceName
    leafs["nh-address"] = nhId.NhAddress
    leafs["nh-interf-handle"] = nhId.NhInterfHandle
    leafs["nh-address-xr"] = nhId.NhAddressXr
    leafs["nh-protocol"] = nhId.NhProtocol
    leafs["nh-link-type"] = nhId.NhLinkType
    leafs["nh-table-id"] = nhId.NhTableId
    leafs["nh-id"] = nhId.NhId
    leafs["nh-id-application"] = nhId.NhIdApplication
    leafs["version"] = nhId.Version
    leafs["time-of-last-update-in-msec"] = nhId.TimeOfLastUpdateInMsec
    return leafs
}

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetBundleName() string { return "cisco_ios_xr" }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetYangName() string { return "nh-id" }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) SetParent(parent types.Entity) { nhId.parent = parent }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetParent() types.Entity { return nhId.parent }

func (nhId *Fib_Nodes_Node_Protocols_Protocol_NhIds_NhId) GetParentYangName() string { return "nh-ids" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries
// External Client Summary Table
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the external clients. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary.
    ExternalClientSummary []Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetFilter() yfilter.YFilter { return externalClientSummaries.YFilter }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) SetFilter(yf yfilter.YFilter) { externalClientSummaries.YFilter = yf }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetGoName(yname string) string {
    if yname == "external-client-summary" { return "ExternalClientSummary" }
    return ""
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetSegmentPath() string {
    return "external-client-summaries"
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "external-client-summary" {
        for _, c := range externalClientSummaries.ExternalClientSummary {
            if externalClientSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary{}
        externalClientSummaries.ExternalClientSummary = append(externalClientSummaries.ExternalClientSummary, child)
        return &externalClientSummaries.ExternalClientSummary[len(externalClientSummaries.ExternalClientSummary)-1]
    }
    return nil
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range externalClientSummaries.ExternalClientSummary {
        children[externalClientSummaries.ExternalClientSummary[i].GetSegmentPath()] = &externalClientSummaries.ExternalClientSummary[i]
    }
    return children
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetYangName() string { return "external-client-summaries" }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) SetParent(parent types.Entity) { externalClientSummaries.parent = parent }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetParent() types.Entity { return externalClientSummaries.parent }

func (externalClientSummaries *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary
// Summary of the external clients
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ecd Version. The type is interface{} with range: -2147483648..2147483647.
    EcdVer interface{}

    // ID of the client: ECDv1 is component id, ECDv2 is client id. The type is
    // interface{} with range: -2147483648..2147483647.
    Id interface{}

    // External client name. The type is string.
    SesClientName interface{}

    // Registration proto. The type is interface{} with range: 0..4294967295.
    SesFeciFibProto interface{}

    // Number of registrations. The type is interface{} with range: 0..4294967295.
    SesNumRegs interface{}

    // Number of pending notifs. The type is interface{} with range:
    // 0..4294967295.
    SesNumPending interface{}

    // Client pulsed timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    SesClientPulsedTime interface{}

    // component-id of the client. The type is interface{} with range:
    // 0..4294967295.
    SesCompId interface{}

    // ECD version. The type is interface{} with range: 0..4294967295.
    SesEcdVersion interface{}

    // ECD pathlist summary.
    SesPlSum Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetFilter() yfilter.YFilter { return externalClientSummary.YFilter }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) SetFilter(yf yfilter.YFilter) { externalClientSummary.YFilter = yf }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetGoName(yname string) string {
    if yname == "ecd-ver" { return "EcdVer" }
    if yname == "id" { return "Id" }
    if yname == "ses-client-name" { return "SesClientName" }
    if yname == "ses-feci-fib-proto" { return "SesFeciFibProto" }
    if yname == "ses-num-regs" { return "SesNumRegs" }
    if yname == "ses-num-pending" { return "SesNumPending" }
    if yname == "ses-client-pulsed-time" { return "SesClientPulsedTime" }
    if yname == "ses-comp-id" { return "SesCompId" }
    if yname == "ses-ecd-version" { return "SesEcdVersion" }
    if yname == "ses-pl-sum" { return "SesPlSum" }
    return ""
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetSegmentPath() string {
    return "external-client-summary"
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ses-pl-sum" {
        return &externalClientSummary.SesPlSum
    }
    return nil
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ses-pl-sum"] = &externalClientSummary.SesPlSum
    return children
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ecd-ver"] = externalClientSummary.EcdVer
    leafs["id"] = externalClientSummary.Id
    leafs["ses-client-name"] = externalClientSummary.SesClientName
    leafs["ses-feci-fib-proto"] = externalClientSummary.SesFeciFibProto
    leafs["ses-num-regs"] = externalClientSummary.SesNumRegs
    leafs["ses-num-pending"] = externalClientSummary.SesNumPending
    leafs["ses-client-pulsed-time"] = externalClientSummary.SesClientPulsedTime
    leafs["ses-comp-id"] = externalClientSummary.SesCompId
    leafs["ses-ecd-version"] = externalClientSummary.SesEcdVersion
    return leafs
}

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetBundleName() string { return "cisco_ios_xr" }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetYangName() string { return "external-client-summary" }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) SetParent(parent types.Entity) { externalClientSummary.parent = parent }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetParent() types.Entity { return externalClientSummary.parent }

func (externalClientSummary *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary) GetParentYangName() string { return "external-client-summaries" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum
// ECD pathlist summary
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of ECD pathlists. The type is interface{} with range: 0..4294967295.
    SepNumEcdPathlist interface{}

    // Number of ECD pathlists unresolved. The type is interface{} with range:
    // 0..4294967295.
    SepNumEcdPlUnresolved interface{}

    // Number of ECD pathlists per interest. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest.
    SepNumEcdPlPerInterest []Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetFilter() yfilter.YFilter { return sesPlSum.YFilter }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) SetFilter(yf yfilter.YFilter) { sesPlSum.YFilter = yf }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetGoName(yname string) string {
    if yname == "sep-num-ecd-pathlist" { return "SepNumEcdPathlist" }
    if yname == "sep-num-ecd-pl-unresolved" { return "SepNumEcdPlUnresolved" }
    if yname == "sep-num-ecd-pl-per-interest" { return "SepNumEcdPlPerInterest" }
    return ""
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetSegmentPath() string {
    return "ses-pl-sum"
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sep-num-ecd-pl-per-interest" {
        for _, c := range sesPlSum.SepNumEcdPlPerInterest {
            if sesPlSum.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest{}
        sesPlSum.SepNumEcdPlPerInterest = append(sesPlSum.SepNumEcdPlPerInterest, child)
        return &sesPlSum.SepNumEcdPlPerInterest[len(sesPlSum.SepNumEcdPlPerInterest)-1]
    }
    return nil
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sesPlSum.SepNumEcdPlPerInterest {
        children[sesPlSum.SepNumEcdPlPerInterest[i].GetSegmentPath()] = &sesPlSum.SepNumEcdPlPerInterest[i]
    }
    return children
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sep-num-ecd-pathlist"] = sesPlSum.SepNumEcdPathlist
    leafs["sep-num-ecd-pl-unresolved"] = sesPlSum.SepNumEcdPlUnresolved
    return leafs
}

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetBundleName() string { return "cisco_ios_xr" }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetYangName() string { return "ses-pl-sum" }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) SetParent(parent types.Entity) { sesPlSum.parent = parent }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetParent() types.Entity { return sesPlSum.parent }

func (sesPlSum *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum) GetParentYangName() string { return "external-client-summary" }

// Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest
// Number of ECD pathlists per interest
type Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetFilter() yfilter.YFilter { return sepNumEcdPlPerInterest.YFilter }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) SetFilter(yf yfilter.YFilter) { sepNumEcdPlPerInterest.YFilter = yf }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetSegmentPath() string {
    return "sep-num-ecd-pl-per-interest"
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = sepNumEcdPlPerInterest.Entry
    return leafs
}

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetBundleName() string { return "cisco_ios_xr" }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetYangName() string { return "sep-num-ecd-pl-per-interest" }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) SetParent(parent types.Entity) { sepNumEcdPlPerInterest.parent = parent }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetParent() types.Entity { return sepNumEcdPlPerInterest.parent }

func (sepNumEcdPlPerInterest *Fib_Nodes_Node_Protocols_Protocol_ExternalClientSummaries_ExternalClientSummary_SesPlSum_SepNumEcdPlPerInterest) GetParentYangName() string { return "ses-pl-sum" }

// Fib_Nodes_Node_Protocols_Protocol_Misc
// CEF misc hidden data
type Fib_Nodes_Node_Protocols_Protocol_Misc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // number of pfi ifh create notif. The type is interface{} with range:
    // 0..18446744073709551615.
    MiPfiIfhUpd interface{}

    // number of pfi ifh delete notif. The type is interface{} with range:
    // 0..18446744073709551615.
    MiPfiIfhDel interface{}

    // number of stale ifh removed. The type is interface{} with range:
    // 0..18446744073709551615.
    MiPfiIfhStale interface{}

    // total platform update time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiTotPlatUpdTime interface{}

    // total time spent in gtrie operations. The type is interface{} with range:
    // 0..18446744073709551615.
    MiTotGtrieTime interface{}

    // total download time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiTotDnldTime interface{}

    // clock download time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiClockTime interface{}

    // CPU download time. The type is interface{} with range:
    // 0..18446744073709551615.
    MiCpuTime interface{}

    // Last FIB shared memory reset time stamp. The type is interface{} with
    // range: 0..18446744073709551615.
    MiShmResetTs interface{}

    // Number of idbs that hit ifh recycle. The type is interface{} with range:
    // 0..4294967295.
    MiIdbRecycleCount interface{}

    // Number of idb cleaned up after hitting ifh recycle. The type is interface{}
    // with range: 0..4294967295.
    MiIdbRecycleCleanupCount interface{}

    // Number of management interfaces. The type is interface{} with range:
    // 0..4294967295.
    MiNumMgmtList interface{}

    // mi num virtual ll addresses added. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesAdded interface{}

    // mi num virtual ll addresses deleted. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesDeleted interface{}

    // mi num virtual ll addresses dropped. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesDropped interface{}

    // mi num virtual ll addresses cached. The type is interface{} with range:
    // 0..4294967295.
    MiNumVirtualLlAddressesCached interface{}

    // cpuless node list init. The type is bool.
    MiCpulessInit interface{}

    // count of cpuless line cards. The type is interface{} with range:
    // 0..4294967295.
    MiCpulessCount interface{}

    // Prefer AIB routes over RIB/LSD operational state. The type is bool.
    MiPreferAibRoutesOverRibOper interface{}

    // Prefer AIB routes over RIB/LSD configured state. The type is bool.
    MiPreferAibRoutesOverRibCfg interface{}

    // XPL loadinfo is enabled. The type is bool.
    MiXplLdiEnabled interface{}

    // FIB ISSU state.
    MiIssuState Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState

    // FIB platform capabilities.
    MiPlatCapabilities Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities

    // Number of recycled idb extensions that failed  cleanup. The type is slice
    // of Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount.
    MiIdbExtCleanupFailedCount []Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount

    // Per protocol Failure stats for label RPF. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail.
    MiLrpfStatsFail []Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail

    // Per protocol actions stats for label RPF. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct.
    MiLrpfStatsAct []Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct

    // Per protocol number of label RPFs. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum.
    MiLrpfNum []Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum

    // Number of interfaces having label security  enabled. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum.
    MiIdbLsecEnabledNum []Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum

    // number of LISP EID prefixes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid.
    MiNumLispEid []Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid

    // number of LISP EID prefixes eligible for  forwarding. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid.
    MiNumLispValidEid []Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid

    // list of cpuless line cards. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode.
    MiCpulessNode []Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode

    // Per protocol debug stats. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat.
    MiProtoDbgStat []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat

    // the number of counters used for purge counter stats. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr.
    MiIdbPurgeCntr []Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr

    // Timestamps of deleted routes. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel.
    MiDel []Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel

    // FRR statistics. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat.
    MiFrrStat []Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetFilter() yfilter.YFilter { return misc.YFilter }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) SetFilter(yf yfilter.YFilter) { misc.YFilter = yf }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetGoName(yname string) string {
    if yname == "mi-pfi-ifh-upd" { return "MiPfiIfhUpd" }
    if yname == "mi-pfi-ifh-del" { return "MiPfiIfhDel" }
    if yname == "mi-pfi-ifh-stale" { return "MiPfiIfhStale" }
    if yname == "mi-tot-plat-upd-time" { return "MiTotPlatUpdTime" }
    if yname == "mi-tot-gtrie-time" { return "MiTotGtrieTime" }
    if yname == "mi-tot-dnld-time" { return "MiTotDnldTime" }
    if yname == "mi-clock-time" { return "MiClockTime" }
    if yname == "mi-cpu-time" { return "MiCpuTime" }
    if yname == "mi-shm-reset-ts" { return "MiShmResetTs" }
    if yname == "mi-idb-recycle-count" { return "MiIdbRecycleCount" }
    if yname == "mi-idb-recycle-cleanup-count" { return "MiIdbRecycleCleanupCount" }
    if yname == "mi-num-mgmt-list" { return "MiNumMgmtList" }
    if yname == "mi-num-virtual-ll-addresses-added" { return "MiNumVirtualLlAddressesAdded" }
    if yname == "mi-num-virtual-ll-addresses-deleted" { return "MiNumVirtualLlAddressesDeleted" }
    if yname == "mi-num-virtual-ll-addresses-dropped" { return "MiNumVirtualLlAddressesDropped" }
    if yname == "mi-num-virtual-ll-addresses-cached" { return "MiNumVirtualLlAddressesCached" }
    if yname == "mi-cpuless-init" { return "MiCpulessInit" }
    if yname == "mi-cpuless-count" { return "MiCpulessCount" }
    if yname == "mi-prefer-aib-routes-over-rib-oper" { return "MiPreferAibRoutesOverRibOper" }
    if yname == "mi-prefer-aib-routes-over-rib-cfg" { return "MiPreferAibRoutesOverRibCfg" }
    if yname == "mi-xpl-ldi-enabled" { return "MiXplLdiEnabled" }
    if yname == "mi-issu-state" { return "MiIssuState" }
    if yname == "mi-plat-capabilities" { return "MiPlatCapabilities" }
    if yname == "mi-idb-ext-cleanup-failed-count" { return "MiIdbExtCleanupFailedCount" }
    if yname == "mi-lrpf-stats-fail" { return "MiLrpfStatsFail" }
    if yname == "mi-lrpf-stats-act" { return "MiLrpfStatsAct" }
    if yname == "mi-lrpf-num" { return "MiLrpfNum" }
    if yname == "mi-idb-lsec-enabled-num" { return "MiIdbLsecEnabledNum" }
    if yname == "mi-num-lisp-eid" { return "MiNumLispEid" }
    if yname == "mi-num-lisp-valid-eid" { return "MiNumLispValidEid" }
    if yname == "mi-cpuless-node" { return "MiCpulessNode" }
    if yname == "mi-proto-dbg-stat" { return "MiProtoDbgStat" }
    if yname == "mi-idb-purge-cntr" { return "MiIdbPurgeCntr" }
    if yname == "mi-del" { return "MiDel" }
    if yname == "mi-frr-stat" { return "MiFrrStat" }
    return ""
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetSegmentPath() string {
    return "misc"
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mi-issu-state" {
        return &misc.MiIssuState
    }
    if childYangName == "mi-plat-capabilities" {
        return &misc.MiPlatCapabilities
    }
    if childYangName == "mi-idb-ext-cleanup-failed-count" {
        for _, c := range misc.MiIdbExtCleanupFailedCount {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount{}
        misc.MiIdbExtCleanupFailedCount = append(misc.MiIdbExtCleanupFailedCount, child)
        return &misc.MiIdbExtCleanupFailedCount[len(misc.MiIdbExtCleanupFailedCount)-1]
    }
    if childYangName == "mi-lrpf-stats-fail" {
        for _, c := range misc.MiLrpfStatsFail {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail{}
        misc.MiLrpfStatsFail = append(misc.MiLrpfStatsFail, child)
        return &misc.MiLrpfStatsFail[len(misc.MiLrpfStatsFail)-1]
    }
    if childYangName == "mi-lrpf-stats-act" {
        for _, c := range misc.MiLrpfStatsAct {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct{}
        misc.MiLrpfStatsAct = append(misc.MiLrpfStatsAct, child)
        return &misc.MiLrpfStatsAct[len(misc.MiLrpfStatsAct)-1]
    }
    if childYangName == "mi-lrpf-num" {
        for _, c := range misc.MiLrpfNum {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum{}
        misc.MiLrpfNum = append(misc.MiLrpfNum, child)
        return &misc.MiLrpfNum[len(misc.MiLrpfNum)-1]
    }
    if childYangName == "mi-idb-lsec-enabled-num" {
        for _, c := range misc.MiIdbLsecEnabledNum {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum{}
        misc.MiIdbLsecEnabledNum = append(misc.MiIdbLsecEnabledNum, child)
        return &misc.MiIdbLsecEnabledNum[len(misc.MiIdbLsecEnabledNum)-1]
    }
    if childYangName == "mi-num-lisp-eid" {
        for _, c := range misc.MiNumLispEid {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid{}
        misc.MiNumLispEid = append(misc.MiNumLispEid, child)
        return &misc.MiNumLispEid[len(misc.MiNumLispEid)-1]
    }
    if childYangName == "mi-num-lisp-valid-eid" {
        for _, c := range misc.MiNumLispValidEid {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid{}
        misc.MiNumLispValidEid = append(misc.MiNumLispValidEid, child)
        return &misc.MiNumLispValidEid[len(misc.MiNumLispValidEid)-1]
    }
    if childYangName == "mi-cpuless-node" {
        for _, c := range misc.MiCpulessNode {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode{}
        misc.MiCpulessNode = append(misc.MiCpulessNode, child)
        return &misc.MiCpulessNode[len(misc.MiCpulessNode)-1]
    }
    if childYangName == "mi-proto-dbg-stat" {
        for _, c := range misc.MiProtoDbgStat {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat{}
        misc.MiProtoDbgStat = append(misc.MiProtoDbgStat, child)
        return &misc.MiProtoDbgStat[len(misc.MiProtoDbgStat)-1]
    }
    if childYangName == "mi-idb-purge-cntr" {
        for _, c := range misc.MiIdbPurgeCntr {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr{}
        misc.MiIdbPurgeCntr = append(misc.MiIdbPurgeCntr, child)
        return &misc.MiIdbPurgeCntr[len(misc.MiIdbPurgeCntr)-1]
    }
    if childYangName == "mi-del" {
        for _, c := range misc.MiDel {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel{}
        misc.MiDel = append(misc.MiDel, child)
        return &misc.MiDel[len(misc.MiDel)-1]
    }
    if childYangName == "mi-frr-stat" {
        for _, c := range misc.MiFrrStat {
            if misc.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat{}
        misc.MiFrrStat = append(misc.MiFrrStat, child)
        return &misc.MiFrrStat[len(misc.MiFrrStat)-1]
    }
    return nil
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mi-issu-state"] = &misc.MiIssuState
    children["mi-plat-capabilities"] = &misc.MiPlatCapabilities
    for i := range misc.MiIdbExtCleanupFailedCount {
        children[misc.MiIdbExtCleanupFailedCount[i].GetSegmentPath()] = &misc.MiIdbExtCleanupFailedCount[i]
    }
    for i := range misc.MiLrpfStatsFail {
        children[misc.MiLrpfStatsFail[i].GetSegmentPath()] = &misc.MiLrpfStatsFail[i]
    }
    for i := range misc.MiLrpfStatsAct {
        children[misc.MiLrpfStatsAct[i].GetSegmentPath()] = &misc.MiLrpfStatsAct[i]
    }
    for i := range misc.MiLrpfNum {
        children[misc.MiLrpfNum[i].GetSegmentPath()] = &misc.MiLrpfNum[i]
    }
    for i := range misc.MiIdbLsecEnabledNum {
        children[misc.MiIdbLsecEnabledNum[i].GetSegmentPath()] = &misc.MiIdbLsecEnabledNum[i]
    }
    for i := range misc.MiNumLispEid {
        children[misc.MiNumLispEid[i].GetSegmentPath()] = &misc.MiNumLispEid[i]
    }
    for i := range misc.MiNumLispValidEid {
        children[misc.MiNumLispValidEid[i].GetSegmentPath()] = &misc.MiNumLispValidEid[i]
    }
    for i := range misc.MiCpulessNode {
        children[misc.MiCpulessNode[i].GetSegmentPath()] = &misc.MiCpulessNode[i]
    }
    for i := range misc.MiProtoDbgStat {
        children[misc.MiProtoDbgStat[i].GetSegmentPath()] = &misc.MiProtoDbgStat[i]
    }
    for i := range misc.MiIdbPurgeCntr {
        children[misc.MiIdbPurgeCntr[i].GetSegmentPath()] = &misc.MiIdbPurgeCntr[i]
    }
    for i := range misc.MiDel {
        children[misc.MiDel[i].GetSegmentPath()] = &misc.MiDel[i]
    }
    for i := range misc.MiFrrStat {
        children[misc.MiFrrStat[i].GetSegmentPath()] = &misc.MiFrrStat[i]
    }
    return children
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mi-pfi-ifh-upd"] = misc.MiPfiIfhUpd
    leafs["mi-pfi-ifh-del"] = misc.MiPfiIfhDel
    leafs["mi-pfi-ifh-stale"] = misc.MiPfiIfhStale
    leafs["mi-tot-plat-upd-time"] = misc.MiTotPlatUpdTime
    leafs["mi-tot-gtrie-time"] = misc.MiTotGtrieTime
    leafs["mi-tot-dnld-time"] = misc.MiTotDnldTime
    leafs["mi-clock-time"] = misc.MiClockTime
    leafs["mi-cpu-time"] = misc.MiCpuTime
    leafs["mi-shm-reset-ts"] = misc.MiShmResetTs
    leafs["mi-idb-recycle-count"] = misc.MiIdbRecycleCount
    leafs["mi-idb-recycle-cleanup-count"] = misc.MiIdbRecycleCleanupCount
    leafs["mi-num-mgmt-list"] = misc.MiNumMgmtList
    leafs["mi-num-virtual-ll-addresses-added"] = misc.MiNumVirtualLlAddressesAdded
    leafs["mi-num-virtual-ll-addresses-deleted"] = misc.MiNumVirtualLlAddressesDeleted
    leafs["mi-num-virtual-ll-addresses-dropped"] = misc.MiNumVirtualLlAddressesDropped
    leafs["mi-num-virtual-ll-addresses-cached"] = misc.MiNumVirtualLlAddressesCached
    leafs["mi-cpuless-init"] = misc.MiCpulessInit
    leafs["mi-cpuless-count"] = misc.MiCpulessCount
    leafs["mi-prefer-aib-routes-over-rib-oper"] = misc.MiPreferAibRoutesOverRibOper
    leafs["mi-prefer-aib-routes-over-rib-cfg"] = misc.MiPreferAibRoutesOverRibCfg
    leafs["mi-xpl-ldi-enabled"] = misc.MiXplLdiEnabled
    return leafs
}

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetBundleName() string { return "cisco_ios_xr" }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetYangName() string { return "misc" }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) SetParent(parent types.Entity) { misc.parent = parent }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetParent() types.Entity { return misc.parent }

func (misc *Fib_Nodes_Node_Protocols_Protocol_Misc) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState
// FIB ISSU state
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IMDR supported. The type is bool.
    ImdrSupport interface{}

    // SLC supported. The type is bool.
    SlcSupport interface{}

    // ISSU restart. The type is bool.
    FisIssuRestart interface{}

    // IMDR End-of-config implicit. The type is bool.
    ImdrEocImplicit interface{}

    // SLC End-of-config implicit. The type is bool.
    SlcEocImplicit interface{}

    // End-of-config received from IMDR timestamp. The type is string with length:
    // 0..33.
    EocReceivedImdrTimeStamp interface{}

    // End-of-config received from SLC timestamp. The type is string with length:
    // 0..33.
    EocReceivedSlcTimeStamp interface{}

    // End-of-download received from IM timestamp. The type is string with length:
    // 0..33.
    EodReceivedImTimeStamp interface{}

    // End-of-download send to IMDR timestamp. The type is string with length:
    // 0..33.
    EodSentImdrTimeStamp interface{}

    // End-of-download send to SLC timestamp. The type is string with length:
    // 0..33.
    EodSentSlcTimeStamp interface{}

    // ISSU error sent to ISSUMGR timetstamp. The type is interface{} with range:
    // 0..18446744073709551615.
    FisIssuErrorTs interface{}

    // IMDR state for the protocols. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState.
    FisProtoState []Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetFilter() yfilter.YFilter { return miIssuState.YFilter }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) SetFilter(yf yfilter.YFilter) { miIssuState.YFilter = yf }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetGoName(yname string) string {
    if yname == "imdr-support" { return "ImdrSupport" }
    if yname == "slc-support" { return "SlcSupport" }
    if yname == "fis-issu-restart" { return "FisIssuRestart" }
    if yname == "imdr-eoc-implicit" { return "ImdrEocImplicit" }
    if yname == "slc-eoc-implicit" { return "SlcEocImplicit" }
    if yname == "eoc-received-imdr-time-stamp" { return "EocReceivedImdrTimeStamp" }
    if yname == "eoc-received-slc-time-stamp" { return "EocReceivedSlcTimeStamp" }
    if yname == "eod-received-im-time-stamp" { return "EodReceivedImTimeStamp" }
    if yname == "eod-sent-imdr-time-stamp" { return "EodSentImdrTimeStamp" }
    if yname == "eod-sent-slc-time-stamp" { return "EodSentSlcTimeStamp" }
    if yname == "fis-issu-error-ts" { return "FisIssuErrorTs" }
    if yname == "fis-proto-state" { return "FisProtoState" }
    return ""
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetSegmentPath() string {
    return "mi-issu-state"
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fis-proto-state" {
        for _, c := range miIssuState.FisProtoState {
            if miIssuState.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState{}
        miIssuState.FisProtoState = append(miIssuState.FisProtoState, child)
        return &miIssuState.FisProtoState[len(miIssuState.FisProtoState)-1]
    }
    return nil
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range miIssuState.FisProtoState {
        children[miIssuState.FisProtoState[i].GetSegmentPath()] = &miIssuState.FisProtoState[i]
    }
    return children
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["imdr-support"] = miIssuState.ImdrSupport
    leafs["slc-support"] = miIssuState.SlcSupport
    leafs["fis-issu-restart"] = miIssuState.FisIssuRestart
    leafs["imdr-eoc-implicit"] = miIssuState.ImdrEocImplicit
    leafs["slc-eoc-implicit"] = miIssuState.SlcEocImplicit
    leafs["eoc-received-imdr-time-stamp"] = miIssuState.EocReceivedImdrTimeStamp
    leafs["eoc-received-slc-time-stamp"] = miIssuState.EocReceivedSlcTimeStamp
    leafs["eod-received-im-time-stamp"] = miIssuState.EodReceivedImTimeStamp
    leafs["eod-sent-imdr-time-stamp"] = miIssuState.EodSentImdrTimeStamp
    leafs["eod-sent-slc-time-stamp"] = miIssuState.EodSentSlcTimeStamp
    leafs["fis-issu-error-ts"] = miIssuState.FisIssuErrorTs
    return leafs
}

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetBundleName() string { return "cisco_ios_xr" }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetYangName() string { return "mi-issu-state" }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) SetParent(parent types.Entity) { miIssuState.parent = parent }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetParent() types.Entity { return miIssuState.parent }

func (miIssuState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState
// IMDR state for the protocols
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol name. The type is string with length: 0..6.
    ProtocolName interface{}

    // AIB EODTimeStamp. The type is string with length: 0..33.
    AibEodTimeStamp interface{}

    // RSI EOD expected/valid. The type is bool.
    RsiEodValid interface{}

    // RSI EOD received timestamp. The type is string with length: 0..33.
    RsiEodTimeStamp interface{}

    // LSD EOD expected/valid. The type is bool.
    LsdEodValid interface{}

    // LSD EOD received timestamp. The type is string with length: 0..33.
    LsdEodTimeStamp interface{}

    // LMRIB EOD expected/valid. The type is bool.
    LmribEodValid interface{}

    // LMRIB EOD received timestamp. The type is string with length: 0..33.
    LmribEodTimeStamp interface{}

    // RIB table info valid. The type is bool.
    RibInfoValid interface{}

    // Number of BCDL tables. The type is interface{} with range: 0..4294967295.
    BcdlTables interface{}

    // Number of tables converged. The type is interface{} with range:
    // 0..4294967295.
    ConvergedTables interface{}

    // All RIB tables converged timestamp. The type is string with length: 0..33.
    RibTablesConvergedTimeStamp interface{}

    // Protocol EOD expected/valid. The type is bool.
    ProtocolEodValid interface{}

    // Protocol EOD sent timestamp. The type is string with length: 0..33.
    ProtocolEodTimeStamp interface{}
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetFilter() yfilter.YFilter { return fisProtoState.YFilter }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) SetFilter(yf yfilter.YFilter) { fisProtoState.YFilter = yf }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "aib-eod-time-stamp" { return "AibEodTimeStamp" }
    if yname == "rsi-eod-valid" { return "RsiEodValid" }
    if yname == "rsi-eod-time-stamp" { return "RsiEodTimeStamp" }
    if yname == "lsd-eod-valid" { return "LsdEodValid" }
    if yname == "lsd-eod-time-stamp" { return "LsdEodTimeStamp" }
    if yname == "lmrib-eod-valid" { return "LmribEodValid" }
    if yname == "lmrib-eod-time-stamp" { return "LmribEodTimeStamp" }
    if yname == "rib-info-valid" { return "RibInfoValid" }
    if yname == "bcdl-tables" { return "BcdlTables" }
    if yname == "converged-tables" { return "ConvergedTables" }
    if yname == "rib-tables-converged-time-stamp" { return "RibTablesConvergedTimeStamp" }
    if yname == "protocol-eod-valid" { return "ProtocolEodValid" }
    if yname == "protocol-eod-time-stamp" { return "ProtocolEodTimeStamp" }
    return ""
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetSegmentPath() string {
    return "fis-proto-state"
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = fisProtoState.ProtocolName
    leafs["aib-eod-time-stamp"] = fisProtoState.AibEodTimeStamp
    leafs["rsi-eod-valid"] = fisProtoState.RsiEodValid
    leafs["rsi-eod-time-stamp"] = fisProtoState.RsiEodTimeStamp
    leafs["lsd-eod-valid"] = fisProtoState.LsdEodValid
    leafs["lsd-eod-time-stamp"] = fisProtoState.LsdEodTimeStamp
    leafs["lmrib-eod-valid"] = fisProtoState.LmribEodValid
    leafs["lmrib-eod-time-stamp"] = fisProtoState.LmribEodTimeStamp
    leafs["rib-info-valid"] = fisProtoState.RibInfoValid
    leafs["bcdl-tables"] = fisProtoState.BcdlTables
    leafs["converged-tables"] = fisProtoState.ConvergedTables
    leafs["rib-tables-converged-time-stamp"] = fisProtoState.RibTablesConvergedTimeStamp
    leafs["protocol-eod-valid"] = fisProtoState.ProtocolEodValid
    leafs["protocol-eod-time-stamp"] = fisProtoState.ProtocolEodTimeStamp
    return leafs
}

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetBundleName() string { return "cisco_ios_xr" }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetYangName() string { return "fis-proto-state" }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) SetParent(parent types.Entity) { fisProtoState.parent = parent }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetParent() types.Entity { return fisProtoState.parent }

func (fisProtoState *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIssuState_FisProtoState) GetParentYangName() string { return "mi-issu-state" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities
// FIB platform capabilities
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L3 LBL levels. The type is interface{} with range: 0..255.
    FpcNumL3LblLevels interface{}

    // L3 Hash buckets. The type is interface{} with range: 0..255.
    FpcNumL3LblPaths interface{}

    // L3 Recursive Hash buckets. The type is interface{} with range: 0..255.
    FpcNumL3LblRecPaths interface{}

    // L3 Unequal cost hash buckets. The type is interface{} with range: 0..255.
    FpcNumL3UcmpPaths interface{}

    // Forwarding stages. The type is interface{} with range: 0..255.
    FpcNumFwdingStages interface{}

    // Label split. The type is interface{} with range: 0..4294967295.
    FpcLocalLabelSplit interface{}

    // Statistics support. The type is bool.
    FpcStatsSupport interface{}

    // Plat ready cb register. The type is bool.
    FpcPlatfReadyCbWait interface{}

    // Path per tunnel class. The type is interface{} with range: 0..255.
    FpcNumPathsPerPbtsClass interface{}

    // V4 update disable. The type is bool.
    FpcPlatfV4UpdDisable interface{}

    // V6 update disable. The type is bool.
    FpcPlatfV6UpdDisable interface{}

    // LBA tuples. The type is interface{} with range: 0..4294967295.
    FpcLbaTuplesDefault interface{}

    // MRAPS support. The type is bool.
    FpcMrapsSupport interface{}

    // PBTS default class support. The type is bool.
    FpcPbtsDefclassSupport interface{}

    // loadinfo filter support. The type is bool.
    FpcLoadinfoFilterSupport interface{}

    // NHID support. The type is bool.
    FpcNhid interface{}

    // Backwalk dependents is required. The type is bool.
    FpcPlatfTempBackWalkReqd interface{}

    // Link MPLS IPv6 NH support. The type is bool.
    FpcLinkMplsNhinfoInIpv6ThreadSupport interface{}

    // Exclude Deag backup Paths. The type is bool.
    FpcExcludeDeagBkup interface{}

    // Per-destination load-balancing support. The type is bool.
    FpcDlbSupport interface{}

    // Prefix filter level of support. The type is interface{} with range: 0..255.
    FpcPrefixFilterSupport interface{}

    // Slowpath ingress inject required. The type is bool.
    FpcSlowpathIngressInjectReqd interface{}

    // LISP Decap over 4. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4.
    FpcLispDecapOverV4 []Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4

    // LISP Decap over 6. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6.
    FpcLispDecapOverV6 []Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6

    // LISP UCMP support. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp.
    FpcLispUcmp []Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp

    // Fallback VRF support. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable.
    FpcResolveViaTable []Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetFilter() yfilter.YFilter { return miPlatCapabilities.YFilter }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) SetFilter(yf yfilter.YFilter) { miPlatCapabilities.YFilter = yf }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetGoName(yname string) string {
    if yname == "fpc-num-l3-lbl-levels" { return "FpcNumL3LblLevels" }
    if yname == "fpc-num-l3-lbl-paths" { return "FpcNumL3LblPaths" }
    if yname == "fpc-num-l3-lbl-rec-paths" { return "FpcNumL3LblRecPaths" }
    if yname == "fpc-num-l3-ucmp-paths" { return "FpcNumL3UcmpPaths" }
    if yname == "fpc-num-fwding-stages" { return "FpcNumFwdingStages" }
    if yname == "fpc-local-label-split" { return "FpcLocalLabelSplit" }
    if yname == "fpc-stats-support" { return "FpcStatsSupport" }
    if yname == "fpc-platf-ready-cb-wait" { return "FpcPlatfReadyCbWait" }
    if yname == "fpc-num-paths-per-pbts-class" { return "FpcNumPathsPerPbtsClass" }
    if yname == "fpc-platf-v4-upd-disable" { return "FpcPlatfV4UpdDisable" }
    if yname == "fpc-platf-v6-upd-disable" { return "FpcPlatfV6UpdDisable" }
    if yname == "fpc-lba-tuples-default" { return "FpcLbaTuplesDefault" }
    if yname == "fpc-mraps-support" { return "FpcMrapsSupport" }
    if yname == "fpc-pbts-defclass-support" { return "FpcPbtsDefclassSupport" }
    if yname == "fpc-loadinfo-filter-support" { return "FpcLoadinfoFilterSupport" }
    if yname == "fpc-nhid" { return "FpcNhid" }
    if yname == "fpc-platf-temp-back-walk-reqd" { return "FpcPlatfTempBackWalkReqd" }
    if yname == "fpc-link-mpls-nhinfo-in-ipv6-thread-support" { return "FpcLinkMplsNhinfoInIpv6ThreadSupport" }
    if yname == "fpc-exclude-deag-bkup" { return "FpcExcludeDeagBkup" }
    if yname == "fpc-dlb-support" { return "FpcDlbSupport" }
    if yname == "fpc-prefix-filter-support" { return "FpcPrefixFilterSupport" }
    if yname == "fpc-slowpath-ingress-inject-reqd" { return "FpcSlowpathIngressInjectReqd" }
    if yname == "fpc-lisp-decap-over-v4" { return "FpcLispDecapOverV4" }
    if yname == "fpc-lisp-decap-over-v6" { return "FpcLispDecapOverV6" }
    if yname == "fpc-lisp-ucmp" { return "FpcLispUcmp" }
    if yname == "fpc-resolve-via-table" { return "FpcResolveViaTable" }
    return ""
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetSegmentPath() string {
    return "mi-plat-capabilities"
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpc-lisp-decap-over-v4" {
        for _, c := range miPlatCapabilities.FpcLispDecapOverV4 {
            if miPlatCapabilities.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4{}
        miPlatCapabilities.FpcLispDecapOverV4 = append(miPlatCapabilities.FpcLispDecapOverV4, child)
        return &miPlatCapabilities.FpcLispDecapOverV4[len(miPlatCapabilities.FpcLispDecapOverV4)-1]
    }
    if childYangName == "fpc-lisp-decap-over-v6" {
        for _, c := range miPlatCapabilities.FpcLispDecapOverV6 {
            if miPlatCapabilities.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6{}
        miPlatCapabilities.FpcLispDecapOverV6 = append(miPlatCapabilities.FpcLispDecapOverV6, child)
        return &miPlatCapabilities.FpcLispDecapOverV6[len(miPlatCapabilities.FpcLispDecapOverV6)-1]
    }
    if childYangName == "fpc-lisp-ucmp" {
        for _, c := range miPlatCapabilities.FpcLispUcmp {
            if miPlatCapabilities.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp{}
        miPlatCapabilities.FpcLispUcmp = append(miPlatCapabilities.FpcLispUcmp, child)
        return &miPlatCapabilities.FpcLispUcmp[len(miPlatCapabilities.FpcLispUcmp)-1]
    }
    if childYangName == "fpc-resolve-via-table" {
        for _, c := range miPlatCapabilities.FpcResolveViaTable {
            if miPlatCapabilities.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable{}
        miPlatCapabilities.FpcResolveViaTable = append(miPlatCapabilities.FpcResolveViaTable, child)
        return &miPlatCapabilities.FpcResolveViaTable[len(miPlatCapabilities.FpcResolveViaTable)-1]
    }
    return nil
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range miPlatCapabilities.FpcLispDecapOverV4 {
        children[miPlatCapabilities.FpcLispDecapOverV4[i].GetSegmentPath()] = &miPlatCapabilities.FpcLispDecapOverV4[i]
    }
    for i := range miPlatCapabilities.FpcLispDecapOverV6 {
        children[miPlatCapabilities.FpcLispDecapOverV6[i].GetSegmentPath()] = &miPlatCapabilities.FpcLispDecapOverV6[i]
    }
    for i := range miPlatCapabilities.FpcLispUcmp {
        children[miPlatCapabilities.FpcLispUcmp[i].GetSegmentPath()] = &miPlatCapabilities.FpcLispUcmp[i]
    }
    for i := range miPlatCapabilities.FpcResolveViaTable {
        children[miPlatCapabilities.FpcResolveViaTable[i].GetSegmentPath()] = &miPlatCapabilities.FpcResolveViaTable[i]
    }
    return children
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpc-num-l3-lbl-levels"] = miPlatCapabilities.FpcNumL3LblLevels
    leafs["fpc-num-l3-lbl-paths"] = miPlatCapabilities.FpcNumL3LblPaths
    leafs["fpc-num-l3-lbl-rec-paths"] = miPlatCapabilities.FpcNumL3LblRecPaths
    leafs["fpc-num-l3-ucmp-paths"] = miPlatCapabilities.FpcNumL3UcmpPaths
    leafs["fpc-num-fwding-stages"] = miPlatCapabilities.FpcNumFwdingStages
    leafs["fpc-local-label-split"] = miPlatCapabilities.FpcLocalLabelSplit
    leafs["fpc-stats-support"] = miPlatCapabilities.FpcStatsSupport
    leafs["fpc-platf-ready-cb-wait"] = miPlatCapabilities.FpcPlatfReadyCbWait
    leafs["fpc-num-paths-per-pbts-class"] = miPlatCapabilities.FpcNumPathsPerPbtsClass
    leafs["fpc-platf-v4-upd-disable"] = miPlatCapabilities.FpcPlatfV4UpdDisable
    leafs["fpc-platf-v6-upd-disable"] = miPlatCapabilities.FpcPlatfV6UpdDisable
    leafs["fpc-lba-tuples-default"] = miPlatCapabilities.FpcLbaTuplesDefault
    leafs["fpc-mraps-support"] = miPlatCapabilities.FpcMrapsSupport
    leafs["fpc-pbts-defclass-support"] = miPlatCapabilities.FpcPbtsDefclassSupport
    leafs["fpc-loadinfo-filter-support"] = miPlatCapabilities.FpcLoadinfoFilterSupport
    leafs["fpc-nhid"] = miPlatCapabilities.FpcNhid
    leafs["fpc-platf-temp-back-walk-reqd"] = miPlatCapabilities.FpcPlatfTempBackWalkReqd
    leafs["fpc-link-mpls-nhinfo-in-ipv6-thread-support"] = miPlatCapabilities.FpcLinkMplsNhinfoInIpv6ThreadSupport
    leafs["fpc-exclude-deag-bkup"] = miPlatCapabilities.FpcExcludeDeagBkup
    leafs["fpc-dlb-support"] = miPlatCapabilities.FpcDlbSupport
    leafs["fpc-prefix-filter-support"] = miPlatCapabilities.FpcPrefixFilterSupport
    leafs["fpc-slowpath-ingress-inject-reqd"] = miPlatCapabilities.FpcSlowpathIngressInjectReqd
    return leafs
}

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetBundleName() string { return "cisco_ios_xr" }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetYangName() string { return "mi-plat-capabilities" }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) SetParent(parent types.Entity) { miPlatCapabilities.parent = parent }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetParent() types.Entity { return miPlatCapabilities.parent }

func (miPlatCapabilities *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4
// LISP Decap over 4
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetFilter() yfilter.YFilter { return fpcLispDecapOverV4.YFilter }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) SetFilter(yf yfilter.YFilter) { fpcLispDecapOverV4.YFilter = yf }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetSegmentPath() string {
    return "fpc-lisp-decap-over-v4"
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpcLispDecapOverV4.Entry
    return leafs
}

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetBundleName() string { return "cisco_ios_xr" }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetYangName() string { return "fpc-lisp-decap-over-v4" }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) SetParent(parent types.Entity) { fpcLispDecapOverV4.parent = parent }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetParent() types.Entity { return fpcLispDecapOverV4.parent }

func (fpcLispDecapOverV4 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV4) GetParentYangName() string { return "mi-plat-capabilities" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6
// LISP Decap over 6
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetFilter() yfilter.YFilter { return fpcLispDecapOverV6.YFilter }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) SetFilter(yf yfilter.YFilter) { fpcLispDecapOverV6.YFilter = yf }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetSegmentPath() string {
    return "fpc-lisp-decap-over-v6"
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpcLispDecapOverV6.Entry
    return leafs
}

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetBundleName() string { return "cisco_ios_xr" }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetYangName() string { return "fpc-lisp-decap-over-v6" }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) SetParent(parent types.Entity) { fpcLispDecapOverV6.parent = parent }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetParent() types.Entity { return fpcLispDecapOverV6.parent }

func (fpcLispDecapOverV6 *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispDecapOverV6) GetParentYangName() string { return "mi-plat-capabilities" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp
// LISP UCMP support
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetFilter() yfilter.YFilter { return fpcLispUcmp.YFilter }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) SetFilter(yf yfilter.YFilter) { fpcLispUcmp.YFilter = yf }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetSegmentPath() string {
    return "fpc-lisp-ucmp"
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpcLispUcmp.Entry
    return leafs
}

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetBundleName() string { return "cisco_ios_xr" }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetYangName() string { return "fpc-lisp-ucmp" }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) SetParent(parent types.Entity) { fpcLispUcmp.parent = parent }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetParent() types.Entity { return fpcLispUcmp.parent }

func (fpcLispUcmp *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcLispUcmp) GetParentYangName() string { return "mi-plat-capabilities" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable
// Fallback VRF support
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetFilter() yfilter.YFilter { return fpcResolveViaTable.YFilter }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) SetFilter(yf yfilter.YFilter) { fpcResolveViaTable.YFilter = yf }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetSegmentPath() string {
    return "fpc-resolve-via-table"
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpcResolveViaTable.Entry
    return leafs
}

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetBundleName() string { return "cisco_ios_xr" }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetYangName() string { return "fpc-resolve-via-table" }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) SetParent(parent types.Entity) { fpcResolveViaTable.parent = parent }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetParent() types.Entity { return fpcResolveViaTable.parent }

func (fpcResolveViaTable *Fib_Nodes_Node_Protocols_Protocol_Misc_MiPlatCapabilities_FpcResolveViaTable) GetParentYangName() string { return "mi-plat-capabilities" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount
// Number of recycled idb extensions that failed
// 
// cleanup
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetFilter() yfilter.YFilter { return miIdbExtCleanupFailedCount.YFilter }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) SetFilter(yf yfilter.YFilter) { miIdbExtCleanupFailedCount.YFilter = yf }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetSegmentPath() string {
    return "mi-idb-ext-cleanup-failed-count"
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miIdbExtCleanupFailedCount.Entry
    return leafs
}

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetBundleName() string { return "cisco_ios_xr" }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetYangName() string { return "mi-idb-ext-cleanup-failed-count" }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) SetParent(parent types.Entity) { miIdbExtCleanupFailedCount.parent = parent }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetParent() types.Entity { return miIdbExtCleanupFailedCount.parent }

func (miIdbExtCleanupFailedCount *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbExtCleanupFailedCount) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail
// Per protocol Failure stats for label RPF
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetFilter() yfilter.YFilter { return miLrpfStatsFail.YFilter }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) SetFilter(yf yfilter.YFilter) { miLrpfStatsFail.YFilter = yf }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetSegmentPath() string {
    return "mi-lrpf-stats-fail"
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miLrpfStatsFail.Entry
    return leafs
}

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetBundleName() string { return "cisco_ios_xr" }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetYangName() string { return "mi-lrpf-stats-fail" }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) SetParent(parent types.Entity) { miLrpfStatsFail.parent = parent }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetParent() types.Entity { return miLrpfStatsFail.parent }

func (miLrpfStatsFail *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsFail) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct
// Per protocol actions stats for label RPF
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetFilter() yfilter.YFilter { return miLrpfStatsAct.YFilter }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) SetFilter(yf yfilter.YFilter) { miLrpfStatsAct.YFilter = yf }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetSegmentPath() string {
    return "mi-lrpf-stats-act"
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miLrpfStatsAct.Entry
    return leafs
}

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetBundleName() string { return "cisco_ios_xr" }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetYangName() string { return "mi-lrpf-stats-act" }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) SetParent(parent types.Entity) { miLrpfStatsAct.parent = parent }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetParent() types.Entity { return miLrpfStatsAct.parent }

func (miLrpfStatsAct *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfStatsAct) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum
// Per protocol number of label RPFs
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetFilter() yfilter.YFilter { return miLrpfNum.YFilter }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) SetFilter(yf yfilter.YFilter) { miLrpfNum.YFilter = yf }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetSegmentPath() string {
    return "mi-lrpf-num"
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miLrpfNum.Entry
    return leafs
}

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetBundleName() string { return "cisco_ios_xr" }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetYangName() string { return "mi-lrpf-num" }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) SetParent(parent types.Entity) { miLrpfNum.parent = parent }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetParent() types.Entity { return miLrpfNum.parent }

func (miLrpfNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiLrpfNum) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum
// Number of interfaces having label security
// 
// enabled
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetFilter() yfilter.YFilter { return miIdbLsecEnabledNum.YFilter }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) SetFilter(yf yfilter.YFilter) { miIdbLsecEnabledNum.YFilter = yf }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetSegmentPath() string {
    return "mi-idb-lsec-enabled-num"
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miIdbLsecEnabledNum.Entry
    return leafs
}

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetBundleName() string { return "cisco_ios_xr" }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetYangName() string { return "mi-idb-lsec-enabled-num" }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) SetParent(parent types.Entity) { miIdbLsecEnabledNum.parent = parent }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetParent() types.Entity { return miIdbLsecEnabledNum.parent }

func (miIdbLsecEnabledNum *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbLsecEnabledNum) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid
// number of LISP EID prefixes
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetFilter() yfilter.YFilter { return miNumLispEid.YFilter }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) SetFilter(yf yfilter.YFilter) { miNumLispEid.YFilter = yf }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetSegmentPath() string {
    return "mi-num-lisp-eid"
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miNumLispEid.Entry
    return leafs
}

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetBundleName() string { return "cisco_ios_xr" }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetYangName() string { return "mi-num-lisp-eid" }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) SetParent(parent types.Entity) { miNumLispEid.parent = parent }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetParent() types.Entity { return miNumLispEid.parent }

func (miNumLispEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispEid) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid
// number of LISP EID prefixes eligible for
// 
// forwarding
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetFilter() yfilter.YFilter { return miNumLispValidEid.YFilter }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) SetFilter(yf yfilter.YFilter) { miNumLispValidEid.YFilter = yf }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetSegmentPath() string {
    return "mi-num-lisp-valid-eid"
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miNumLispValidEid.Entry
    return leafs
}

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetBundleName() string { return "cisco_ios_xr" }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetYangName() string { return "mi-num-lisp-valid-eid" }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) SetParent(parent types.Entity) { miNumLispValidEid.parent = parent }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetParent() types.Entity { return miNumLispValidEid.parent }

func (miNumLispValidEid *Fib_Nodes_Node_Protocols_Protocol_Misc_MiNumLispValidEid) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode
// list of cpuless line cards
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetFilter() yfilter.YFilter { return miCpulessNode.YFilter }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) SetFilter(yf yfilter.YFilter) { miCpulessNode.YFilter = yf }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetSegmentPath() string {
    return "mi-cpuless-node"
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = miCpulessNode.Entry
    return leafs
}

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetBundleName() string { return "cisco_ios_xr" }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetYangName() string { return "mi-cpuless-node" }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) SetParent(parent types.Entity) { miCpulessNode.parent = parent }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetParent() types.Entity { return miCpulessNode.parent }

func (miCpulessNode *Fib_Nodes_Node_Protocols_Protocol_Misc_MiCpulessNode) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat
// Per protocol debug stats
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // the number of fib entries in global tbl. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdGbltblEntries interface{}

    // the number of fib entries in global retry tbl. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdGbltblRejEntries interface{}

    // the number of fib entries in vrf tbls. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdVrftblEntries interface{}

    // the number of fib entries in vrf retry tbls. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdVrftblRejEntries interface{}

    // the number of tables in table set. The type is interface{} with range:
    // 0..4294967295.
    FpdNumTbls interface{}

    // the number of bcdl msgs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdBcdlMsgs interface{}

    // the number of route updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteUpd interface{}

    // the number of route deletes. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteDel interface{}

    // the number of routes received. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteRcv interface{}

    // the number of routes dropped. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdRouteDrops interface{}

    // the number of routes handled with recycled label. The type is interface{}
    // with range: 0..18446744073709551615.
    FpdLblRecycled interface{}

    // the number of routes dropped because of version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdVersionMismatchDrops interface{}

    // the number of adjacency updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdAdjUpd interface{}

    // the number of adjacency deletes. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdAdjDel interface{}

    // number of TX adjacency updates from AIB. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdAdjUpdTx interface{}

    // number of TX adjacency updates that found or created NH. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdAdjUpdTxNhFound interface{}

    // number of TX adjacency updates that went to retry. The type is interface{}
    // with range: 0..18446744073709551615.
    FpdAdjUpdTxRetryCreated interface{}

    // number of TX adj retries that found or created NH. The type is interface{}
    // with range: 0..18446744073709551615.
    FpdAdjTxRetryNhFound interface{}

    // number of times TX NH retry objects updated. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdAdjTxRetryObjReinit interface{}

    // number of adj updates dropped because of OOR. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdAdjDrops interface{}

    // number of AIB messages. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdAdjMsg interface{}

    // the number of TE upds received. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdTeRcv interface{}

    // the number of TE upds dropped because of version mismatch. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdTeVersionMismatchDrops interface{}

    // the number of retry timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdNumRetryTouts interface{}

    // the number of fixup LDIs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiNumFixedup interface{}

    // the number of corrected fixup LDIs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiNumCorrectFixup interface{}

    // the number of PL queued for fixup. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlNumQueuedFixedup interface{}

    // the number of corrected fixup PLs. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlNumCorrectFixup interface{}

    // the number PLs added to retry while already in retry. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdPlRetryAddExist interface{}

    // the number of PLs linked to resolving tables for inline res. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdPlInlineResQ interface{}

    // number of pl creates with backu path. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlWithBackupCreateCount interface{}

    // number of pl deletes with backup path. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdPlWithBackupDelCount interface{}

    // number of PLs marked to include backup path. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdPlBackupEnableCount interface{}

    // number of PLs unmarked to include backup path. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdPlBackupDisableCount interface{}

    // number of PLs visited on fast notification. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdPlFastNfnCount interface{}

    // number of ldi backup path activications. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiBackupActivateCount interface{}

    // ldi mod time for last backup activation. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiLastBackupActivateTime interface{}

    // max ldi mod time for backup activation. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiMaxBackupActivateTime interface{}

    // min ldi mod time for backup activation. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiMinBackupActivateTime interface{}

    // total ldi mod time for backup activation. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiTotalBackupActivateTime interface{}

    // avg ldi mod time for backup activation. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdLdiAvgBackupActivateTime interface{}

    // number of resolution failures because of recursion constraint. The type is
    // interface{} with range: 0..18446744073709551615.
    FpdRecursionConstraintCount interface{}

    // the number of deleted with non-zero refcount. The type is interface{} with
    // range: 0..18446744073709551615.
    FpdLdiNumDelRefcnt interface{}

    // the number of elements in retryq. The type is interface{} with range:
    // 0..4294967295.
    FpdRetryqSize interface{}

    // the number of allocs for this proto. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdNumAllocs interface{}

    // the number of frees for this proto. The type is interface{} with range:
    // 0..18446744073709551615.
    FpdNumFrees interface{}

    // timeout value in msec. The type is interface{} with range: 0..4294967295.
    FpdRetryqTimeout interface{}

    // Scheduler time period in msec. The type is interface{} with range:
    // 0..4294967295.
    FpdRetryqSchedTime interface{}

    // platform update statistics.
    FpdPlatfUpdStats Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats

    // Gtrie timing statistics.
    FpdGtrieTiming Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming

    // Number of global routes from                      each route source. The
    // type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry.
    FpdGbltblSrcEntry []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry

    // Number of vrf routes from                         each route source. The
    // type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry.
    FpdVrftblSrcEntry []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry

    // the number of retries of each type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry.
    FpdNumRetry []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetFilter() yfilter.YFilter { return miProtoDbgStat.YFilter }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) SetFilter(yf yfilter.YFilter) { miProtoDbgStat.YFilter = yf }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetGoName(yname string) string {
    if yname == "fpd-gbltbl-entries" { return "FpdGbltblEntries" }
    if yname == "fpd-gbltbl-rej-entries" { return "FpdGbltblRejEntries" }
    if yname == "fpd-vrftbl-entries" { return "FpdVrftblEntries" }
    if yname == "fpd-vrftbl-rej-entries" { return "FpdVrftblRejEntries" }
    if yname == "fpd-num-tbls" { return "FpdNumTbls" }
    if yname == "fpd-bcdl-msgs" { return "FpdBcdlMsgs" }
    if yname == "fpd-route-upd" { return "FpdRouteUpd" }
    if yname == "fpd-route-del" { return "FpdRouteDel" }
    if yname == "fpd-route-rcv" { return "FpdRouteRcv" }
    if yname == "fpd-route-drops" { return "FpdRouteDrops" }
    if yname == "fpd-lbl-recycled" { return "FpdLblRecycled" }
    if yname == "fpd-version-mismatch-drops" { return "FpdVersionMismatchDrops" }
    if yname == "fpd-adj-upd" { return "FpdAdjUpd" }
    if yname == "fpd-adj-del" { return "FpdAdjDel" }
    if yname == "fpd-adj-upd-tx" { return "FpdAdjUpdTx" }
    if yname == "fpd-adj-upd-tx-nh-found" { return "FpdAdjUpdTxNhFound" }
    if yname == "fpd-adj-upd-tx-retry-created" { return "FpdAdjUpdTxRetryCreated" }
    if yname == "fpd-adj-tx-retry-nh-found" { return "FpdAdjTxRetryNhFound" }
    if yname == "fpd-adj-tx-retry-obj-reinit" { return "FpdAdjTxRetryObjReinit" }
    if yname == "fpd-adj-drops" { return "FpdAdjDrops" }
    if yname == "fpd-adj-msg" { return "FpdAdjMsg" }
    if yname == "fpd-te-rcv" { return "FpdTeRcv" }
    if yname == "fpd-te-version-mismatch-drops" { return "FpdTeVersionMismatchDrops" }
    if yname == "fpd-num-retry-touts" { return "FpdNumRetryTouts" }
    if yname == "fpd-ldi-num-fixedup" { return "FpdLdiNumFixedup" }
    if yname == "fpd-ldi-num-correct-fixup" { return "FpdLdiNumCorrectFixup" }
    if yname == "fpd-pl-num-queued-fixedup" { return "FpdPlNumQueuedFixedup" }
    if yname == "fpd-pl-num-correct-fixup" { return "FpdPlNumCorrectFixup" }
    if yname == "fpd-pl-retry-add-exist" { return "FpdPlRetryAddExist" }
    if yname == "fpd-pl-inline-res-q" { return "FpdPlInlineResQ" }
    if yname == "fpd-pl-with-backup-create-count" { return "FpdPlWithBackupCreateCount" }
    if yname == "fpd-pl-with-backup-del-count" { return "FpdPlWithBackupDelCount" }
    if yname == "fpd-pl-backup-enable-count" { return "FpdPlBackupEnableCount" }
    if yname == "fpd-pl-backup-disable-count" { return "FpdPlBackupDisableCount" }
    if yname == "fpd-pl-fast-nfn-count" { return "FpdPlFastNfnCount" }
    if yname == "fpd-ldi-backup-activate-count" { return "FpdLdiBackupActivateCount" }
    if yname == "fpd-ldi-last-backup-activate-time" { return "FpdLdiLastBackupActivateTime" }
    if yname == "fpd-ldi-max-backup-activate-time" { return "FpdLdiMaxBackupActivateTime" }
    if yname == "fpd-ldi-min-backup-activate-time" { return "FpdLdiMinBackupActivateTime" }
    if yname == "fpd-ldi-total-backup-activate-time" { return "FpdLdiTotalBackupActivateTime" }
    if yname == "fpd-ldi-avg-backup-activate-time" { return "FpdLdiAvgBackupActivateTime" }
    if yname == "fpd-recursion-constraint-count" { return "FpdRecursionConstraintCount" }
    if yname == "fpd-ldi-num-del-refcnt" { return "FpdLdiNumDelRefcnt" }
    if yname == "fpd-retryq-size" { return "FpdRetryqSize" }
    if yname == "fpd-num-allocs" { return "FpdNumAllocs" }
    if yname == "fpd-num-frees" { return "FpdNumFrees" }
    if yname == "fpd-retryq-timeout" { return "FpdRetryqTimeout" }
    if yname == "fpd-retryq-sched-time" { return "FpdRetryqSchedTime" }
    if yname == "fpd-platf-upd-stats" { return "FpdPlatfUpdStats" }
    if yname == "fpd-gtrie-timing" { return "FpdGtrieTiming" }
    if yname == "fpd-gbltbl-src-entry" { return "FpdGbltblSrcEntry" }
    if yname == "fpd-vrftbl-src-entry" { return "FpdVrftblSrcEntry" }
    if yname == "fpd-num-retry" { return "FpdNumRetry" }
    return ""
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetSegmentPath() string {
    return "mi-proto-dbg-stat"
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpd-platf-upd-stats" {
        return &miProtoDbgStat.FpdPlatfUpdStats
    }
    if childYangName == "fpd-gtrie-timing" {
        return &miProtoDbgStat.FpdGtrieTiming
    }
    if childYangName == "fpd-gbltbl-src-entry" {
        for _, c := range miProtoDbgStat.FpdGbltblSrcEntry {
            if miProtoDbgStat.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry{}
        miProtoDbgStat.FpdGbltblSrcEntry = append(miProtoDbgStat.FpdGbltblSrcEntry, child)
        return &miProtoDbgStat.FpdGbltblSrcEntry[len(miProtoDbgStat.FpdGbltblSrcEntry)-1]
    }
    if childYangName == "fpd-vrftbl-src-entry" {
        for _, c := range miProtoDbgStat.FpdVrftblSrcEntry {
            if miProtoDbgStat.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry{}
        miProtoDbgStat.FpdVrftblSrcEntry = append(miProtoDbgStat.FpdVrftblSrcEntry, child)
        return &miProtoDbgStat.FpdVrftblSrcEntry[len(miProtoDbgStat.FpdVrftblSrcEntry)-1]
    }
    if childYangName == "fpd-num-retry" {
        for _, c := range miProtoDbgStat.FpdNumRetry {
            if miProtoDbgStat.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry{}
        miProtoDbgStat.FpdNumRetry = append(miProtoDbgStat.FpdNumRetry, child)
        return &miProtoDbgStat.FpdNumRetry[len(miProtoDbgStat.FpdNumRetry)-1]
    }
    return nil
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpd-platf-upd-stats"] = &miProtoDbgStat.FpdPlatfUpdStats
    children["fpd-gtrie-timing"] = &miProtoDbgStat.FpdGtrieTiming
    for i := range miProtoDbgStat.FpdGbltblSrcEntry {
        children[miProtoDbgStat.FpdGbltblSrcEntry[i].GetSegmentPath()] = &miProtoDbgStat.FpdGbltblSrcEntry[i]
    }
    for i := range miProtoDbgStat.FpdVrftblSrcEntry {
        children[miProtoDbgStat.FpdVrftblSrcEntry[i].GetSegmentPath()] = &miProtoDbgStat.FpdVrftblSrcEntry[i]
    }
    for i := range miProtoDbgStat.FpdNumRetry {
        children[miProtoDbgStat.FpdNumRetry[i].GetSegmentPath()] = &miProtoDbgStat.FpdNumRetry[i]
    }
    return children
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpd-gbltbl-entries"] = miProtoDbgStat.FpdGbltblEntries
    leafs["fpd-gbltbl-rej-entries"] = miProtoDbgStat.FpdGbltblRejEntries
    leafs["fpd-vrftbl-entries"] = miProtoDbgStat.FpdVrftblEntries
    leafs["fpd-vrftbl-rej-entries"] = miProtoDbgStat.FpdVrftblRejEntries
    leafs["fpd-num-tbls"] = miProtoDbgStat.FpdNumTbls
    leafs["fpd-bcdl-msgs"] = miProtoDbgStat.FpdBcdlMsgs
    leafs["fpd-route-upd"] = miProtoDbgStat.FpdRouteUpd
    leafs["fpd-route-del"] = miProtoDbgStat.FpdRouteDel
    leafs["fpd-route-rcv"] = miProtoDbgStat.FpdRouteRcv
    leafs["fpd-route-drops"] = miProtoDbgStat.FpdRouteDrops
    leafs["fpd-lbl-recycled"] = miProtoDbgStat.FpdLblRecycled
    leafs["fpd-version-mismatch-drops"] = miProtoDbgStat.FpdVersionMismatchDrops
    leafs["fpd-adj-upd"] = miProtoDbgStat.FpdAdjUpd
    leafs["fpd-adj-del"] = miProtoDbgStat.FpdAdjDel
    leafs["fpd-adj-upd-tx"] = miProtoDbgStat.FpdAdjUpdTx
    leafs["fpd-adj-upd-tx-nh-found"] = miProtoDbgStat.FpdAdjUpdTxNhFound
    leafs["fpd-adj-upd-tx-retry-created"] = miProtoDbgStat.FpdAdjUpdTxRetryCreated
    leafs["fpd-adj-tx-retry-nh-found"] = miProtoDbgStat.FpdAdjTxRetryNhFound
    leafs["fpd-adj-tx-retry-obj-reinit"] = miProtoDbgStat.FpdAdjTxRetryObjReinit
    leafs["fpd-adj-drops"] = miProtoDbgStat.FpdAdjDrops
    leafs["fpd-adj-msg"] = miProtoDbgStat.FpdAdjMsg
    leafs["fpd-te-rcv"] = miProtoDbgStat.FpdTeRcv
    leafs["fpd-te-version-mismatch-drops"] = miProtoDbgStat.FpdTeVersionMismatchDrops
    leafs["fpd-num-retry-touts"] = miProtoDbgStat.FpdNumRetryTouts
    leafs["fpd-ldi-num-fixedup"] = miProtoDbgStat.FpdLdiNumFixedup
    leafs["fpd-ldi-num-correct-fixup"] = miProtoDbgStat.FpdLdiNumCorrectFixup
    leafs["fpd-pl-num-queued-fixedup"] = miProtoDbgStat.FpdPlNumQueuedFixedup
    leafs["fpd-pl-num-correct-fixup"] = miProtoDbgStat.FpdPlNumCorrectFixup
    leafs["fpd-pl-retry-add-exist"] = miProtoDbgStat.FpdPlRetryAddExist
    leafs["fpd-pl-inline-res-q"] = miProtoDbgStat.FpdPlInlineResQ
    leafs["fpd-pl-with-backup-create-count"] = miProtoDbgStat.FpdPlWithBackupCreateCount
    leafs["fpd-pl-with-backup-del-count"] = miProtoDbgStat.FpdPlWithBackupDelCount
    leafs["fpd-pl-backup-enable-count"] = miProtoDbgStat.FpdPlBackupEnableCount
    leafs["fpd-pl-backup-disable-count"] = miProtoDbgStat.FpdPlBackupDisableCount
    leafs["fpd-pl-fast-nfn-count"] = miProtoDbgStat.FpdPlFastNfnCount
    leafs["fpd-ldi-backup-activate-count"] = miProtoDbgStat.FpdLdiBackupActivateCount
    leafs["fpd-ldi-last-backup-activate-time"] = miProtoDbgStat.FpdLdiLastBackupActivateTime
    leafs["fpd-ldi-max-backup-activate-time"] = miProtoDbgStat.FpdLdiMaxBackupActivateTime
    leafs["fpd-ldi-min-backup-activate-time"] = miProtoDbgStat.FpdLdiMinBackupActivateTime
    leafs["fpd-ldi-total-backup-activate-time"] = miProtoDbgStat.FpdLdiTotalBackupActivateTime
    leafs["fpd-ldi-avg-backup-activate-time"] = miProtoDbgStat.FpdLdiAvgBackupActivateTime
    leafs["fpd-recursion-constraint-count"] = miProtoDbgStat.FpdRecursionConstraintCount
    leafs["fpd-ldi-num-del-refcnt"] = miProtoDbgStat.FpdLdiNumDelRefcnt
    leafs["fpd-retryq-size"] = miProtoDbgStat.FpdRetryqSize
    leafs["fpd-num-allocs"] = miProtoDbgStat.FpdNumAllocs
    leafs["fpd-num-frees"] = miProtoDbgStat.FpdNumFrees
    leafs["fpd-retryq-timeout"] = miProtoDbgStat.FpdRetryqTimeout
    leafs["fpd-retryq-sched-time"] = miProtoDbgStat.FpdRetryqSchedTime
    return leafs
}

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetBundleName() string { return "cisco_ios_xr" }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetYangName() string { return "mi-proto-dbg-stat" }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) SetParent(parent types.Entity) { miProtoDbgStat.parent = parent }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetParent() types.Entity { return miProtoDbgStat.parent }

func (miProtoDbgStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats
// platform update statistics
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of successful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpusNumSuccess interface{}

    // Number of unsuccessful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpusNumFailure interface{}

    // Total time for all pd updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FpusUpdTotalTime interface{}

    // Array of max time info indexed by object type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat.
    FpusObjStat []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetFilter() yfilter.YFilter { return fpdPlatfUpdStats.YFilter }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) SetFilter(yf yfilter.YFilter) { fpdPlatfUpdStats.YFilter = yf }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetGoName(yname string) string {
    if yname == "fpus-num-success" { return "FpusNumSuccess" }
    if yname == "fpus-num-failure" { return "FpusNumFailure" }
    if yname == "fpus-upd-total-time" { return "FpusUpdTotalTime" }
    if yname == "fpus-obj-stat" { return "FpusObjStat" }
    return ""
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetSegmentPath() string {
    return "fpd-platf-upd-stats"
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpus-obj-stat" {
        for _, c := range fpdPlatfUpdStats.FpusObjStat {
            if fpdPlatfUpdStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat{}
        fpdPlatfUpdStats.FpusObjStat = append(fpdPlatfUpdStats.FpusObjStat, child)
        return &fpdPlatfUpdStats.FpusObjStat[len(fpdPlatfUpdStats.FpusObjStat)-1]
    }
    return nil
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fpdPlatfUpdStats.FpusObjStat {
        children[fpdPlatfUpdStats.FpusObjStat[i].GetSegmentPath()] = &fpdPlatfUpdStats.FpusObjStat[i]
    }
    return children
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpus-num-success"] = fpdPlatfUpdStats.FpusNumSuccess
    leafs["fpus-num-failure"] = fpdPlatfUpdStats.FpusNumFailure
    leafs["fpus-upd-total-time"] = fpdPlatfUpdStats.FpusUpdTotalTime
    return leafs
}

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetBundleName() string { return "cisco_ios_xr" }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetYangName() string { return "fpd-platf-upd-stats" }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) SetParent(parent types.Entity) { fpdPlatfUpdStats.parent = parent }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetParent() types.Entity { return fpdPlatfUpdStats.parent }

func (fpdPlatfUpdStats *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats) GetParentYangName() string { return "mi-proto-dbg-stat" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat
// Array of max time info indexed by object type
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FosTotUpdates interface{}

    // Total time for updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FosTotUpdTime interface{}

    // Array of max time info indexed by action type. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat.
    FosObjActStat []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetFilter() yfilter.YFilter { return fpusObjStat.YFilter }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) SetFilter(yf yfilter.YFilter) { fpusObjStat.YFilter = yf }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetGoName(yname string) string {
    if yname == "fos-tot-updates" { return "FosTotUpdates" }
    if yname == "fos-tot-upd-time" { return "FosTotUpdTime" }
    if yname == "fos-obj-act-stat" { return "FosObjActStat" }
    return ""
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetSegmentPath() string {
    return "fpus-obj-stat"
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fos-obj-act-stat" {
        for _, c := range fpusObjStat.FosObjActStat {
            if fpusObjStat.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat{}
        fpusObjStat.FosObjActStat = append(fpusObjStat.FosObjActStat, child)
        return &fpusObjStat.FosObjActStat[len(fpusObjStat.FosObjActStat)-1]
    }
    return nil
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fpusObjStat.FosObjActStat {
        children[fpusObjStat.FosObjActStat[i].GetSegmentPath()] = &fpusObjStat.FosObjActStat[i]
    }
    return children
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fos-tot-updates"] = fpusObjStat.FosTotUpdates
    leafs["fos-tot-upd-time"] = fpusObjStat.FosTotUpdTime
    return leafs
}

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetBundleName() string { return "cisco_ios_xr" }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetYangName() string { return "fpus-obj-stat" }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) SetParent(parent types.Entity) { fpusObjStat.parent = parent }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetParent() types.Entity { return fpusObjStat.parent }

func (fpusObjStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat) GetParentYangName() string { return "fpd-platf-upd-stats" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat
// Array of max time info indexed by action type
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasTotUpdates interface{}

    // Total time for updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasTotUpdTime interface{}

    // Total number of updates that took zero time. The type is interface{} with
    // range: 0..18446744073709551615.
    FoasTotUpdatesZero interface{}

    // Total number of successful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasNumSuccess interface{}

    // Total number of failed updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasNumFailure interface{}

    // Time for the update. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasMaxTime interface{}

    // Time stamp of max update. The type is interface{} with range:
    // 0..18446744073709551615.
    FoasMaxTstamp interface{}
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetFilter() yfilter.YFilter { return fosObjActStat.YFilter }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) SetFilter(yf yfilter.YFilter) { fosObjActStat.YFilter = yf }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetGoName(yname string) string {
    if yname == "foas-tot-updates" { return "FoasTotUpdates" }
    if yname == "foas-tot-upd-time" { return "FoasTotUpdTime" }
    if yname == "foas-tot-updates-zero" { return "FoasTotUpdatesZero" }
    if yname == "foas-num-success" { return "FoasNumSuccess" }
    if yname == "foas-num-failure" { return "FoasNumFailure" }
    if yname == "foas-max-time" { return "FoasMaxTime" }
    if yname == "foas-max-tstamp" { return "FoasMaxTstamp" }
    return ""
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetSegmentPath() string {
    return "fos-obj-act-stat"
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["foas-tot-updates"] = fosObjActStat.FoasTotUpdates
    leafs["foas-tot-upd-time"] = fosObjActStat.FoasTotUpdTime
    leafs["foas-tot-updates-zero"] = fosObjActStat.FoasTotUpdatesZero
    leafs["foas-num-success"] = fosObjActStat.FoasNumSuccess
    leafs["foas-num-failure"] = fosObjActStat.FoasNumFailure
    leafs["foas-max-time"] = fosObjActStat.FoasMaxTime
    leafs["foas-max-tstamp"] = fosObjActStat.FoasMaxTstamp
    return leafs
}

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetBundleName() string { return "cisco_ios_xr" }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetYangName() string { return "fos-obj-act-stat" }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) SetParent(parent types.Entity) { fosObjActStat.parent = parent }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetParent() types.Entity { return fosObjActStat.parent }

func (fosObjActStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdPlatfUpdStats_FpusObjStat_FosObjActStat) GetParentYangName() string { return "fpus-obj-stat" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming
// Gtrie timing statistics
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of successful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgtNumSuccess interface{}

    // Number of unsuccessful updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgtNumFailure interface{}

    // Total time for all pd updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgtUpdTotalTime interface{}

    // Array of max time info indexed by gtrie function. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming.
    FgtGtrieFnTiming []Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetFilter() yfilter.YFilter { return fpdGtrieTiming.YFilter }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) SetFilter(yf yfilter.YFilter) { fpdGtrieTiming.YFilter = yf }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetGoName(yname string) string {
    if yname == "fgt-num-success" { return "FgtNumSuccess" }
    if yname == "fgt-num-failure" { return "FgtNumFailure" }
    if yname == "fgt-upd-total-time" { return "FgtUpdTotalTime" }
    if yname == "fgt-gtrie-fn-timing" { return "FgtGtrieFnTiming" }
    return ""
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetSegmentPath() string {
    return "fpd-gtrie-timing"
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fgt-gtrie-fn-timing" {
        for _, c := range fpdGtrieTiming.FgtGtrieFnTiming {
            if fpdGtrieTiming.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming{}
        fpdGtrieTiming.FgtGtrieFnTiming = append(fpdGtrieTiming.FgtGtrieFnTiming, child)
        return &fpdGtrieTiming.FgtGtrieFnTiming[len(fpdGtrieTiming.FgtGtrieFnTiming)-1]
    }
    return nil
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fpdGtrieTiming.FgtGtrieFnTiming {
        children[fpdGtrieTiming.FgtGtrieFnTiming[i].GetSegmentPath()] = &fpdGtrieTiming.FgtGtrieFnTiming[i]
    }
    return children
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fgt-num-success"] = fpdGtrieTiming.FgtNumSuccess
    leafs["fgt-num-failure"] = fpdGtrieTiming.FgtNumFailure
    leafs["fgt-upd-total-time"] = fpdGtrieTiming.FgtUpdTotalTime
    return leafs
}

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetBundleName() string { return "cisco_ios_xr" }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetYangName() string { return "fpd-gtrie-timing" }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) SetParent(parent types.Entity) { fpdGtrieTiming.parent = parent }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetParent() types.Entity { return fpdGtrieTiming.parent }

func (fpdGtrieTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming) GetParentYangName() string { return "mi-proto-dbg-stat" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming
// Array of max time info indexed by gtrie function
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Gtrie operation. The type is string with length: 0..64.
    FgftFn interface{}

    // Total number of updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftTotUpdates interface{}

    // Total number of updates with zero timing (due to timestamp granularity).
    // The type is interface{} with range: 0..18446744073709551615.
    FgftTotUpdatesZero interface{}

    // Total time for updates. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftTotUpdTime interface{}

    // Time for the update. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftMaxTime interface{}

    // Time stamp of max update. The type is interface{} with range:
    // 0..18446744073709551615.
    FgftMaxTstamp interface{}
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetFilter() yfilter.YFilter { return fgtGtrieFnTiming.YFilter }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) SetFilter(yf yfilter.YFilter) { fgtGtrieFnTiming.YFilter = yf }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetGoName(yname string) string {
    if yname == "fgft-fn" { return "FgftFn" }
    if yname == "fgft-tot-updates" { return "FgftTotUpdates" }
    if yname == "fgft-tot-updates-zero" { return "FgftTotUpdatesZero" }
    if yname == "fgft-tot-upd-time" { return "FgftTotUpdTime" }
    if yname == "fgft-max-time" { return "FgftMaxTime" }
    if yname == "fgft-max-tstamp" { return "FgftMaxTstamp" }
    return ""
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetSegmentPath() string {
    return "fgt-gtrie-fn-timing"
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fgft-fn"] = fgtGtrieFnTiming.FgftFn
    leafs["fgft-tot-updates"] = fgtGtrieFnTiming.FgftTotUpdates
    leafs["fgft-tot-updates-zero"] = fgtGtrieFnTiming.FgftTotUpdatesZero
    leafs["fgft-tot-upd-time"] = fgtGtrieFnTiming.FgftTotUpdTime
    leafs["fgft-max-time"] = fgtGtrieFnTiming.FgftMaxTime
    leafs["fgft-max-tstamp"] = fgtGtrieFnTiming.FgftMaxTstamp
    return leafs
}

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetBundleName() string { return "cisco_ios_xr" }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetYangName() string { return "fgt-gtrie-fn-timing" }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) SetParent(parent types.Entity) { fgtGtrieFnTiming.parent = parent }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetParent() types.Entity { return fgtGtrieFnTiming.parent }

func (fgtGtrieFnTiming *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGtrieTiming_FgtGtrieFnTiming) GetParentYangName() string { return "fpd-gtrie-timing" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry
// Number of global routes from                    
// 
// each route source
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetFilter() yfilter.YFilter { return fpdGbltblSrcEntry.YFilter }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) SetFilter(yf yfilter.YFilter) { fpdGbltblSrcEntry.YFilter = yf }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetSegmentPath() string {
    return "fpd-gbltbl-src-entry"
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpdGbltblSrcEntry.Entry
    return leafs
}

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetBundleName() string { return "cisco_ios_xr" }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetYangName() string { return "fpd-gbltbl-src-entry" }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) SetParent(parent types.Entity) { fpdGbltblSrcEntry.parent = parent }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetParent() types.Entity { return fpdGbltblSrcEntry.parent }

func (fpdGbltblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdGbltblSrcEntry) GetParentYangName() string { return "mi-proto-dbg-stat" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry
// Number of vrf routes from                       
// 
// each route source
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetFilter() yfilter.YFilter { return fpdVrftblSrcEntry.YFilter }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) SetFilter(yf yfilter.YFilter) { fpdVrftblSrcEntry.YFilter = yf }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetSegmentPath() string {
    return "fpd-vrftbl-src-entry"
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpdVrftblSrcEntry.Entry
    return leafs
}

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetBundleName() string { return "cisco_ios_xr" }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetYangName() string { return "fpd-vrftbl-src-entry" }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) SetParent(parent types.Entity) { fpdVrftblSrcEntry.parent = parent }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetParent() types.Entity { return fpdVrftblSrcEntry.parent }

func (fpdVrftblSrcEntry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdVrftblSrcEntry) GetParentYangName() string { return "mi-proto-dbg-stat" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry
// the number of retries of each type
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Entry interface{}
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetFilter() yfilter.YFilter { return fpdNumRetry.YFilter }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) SetFilter(yf yfilter.YFilter) { fpdNumRetry.YFilter = yf }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetSegmentPath() string {
    return "fpd-num-retry"
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fpdNumRetry.Entry
    return leafs
}

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetBundleName() string { return "cisco_ios_xr" }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetYangName() string { return "fpd-num-retry" }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) SetParent(parent types.Entity) { fpdNumRetry.parent = parent }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetParent() types.Entity { return fpdNumRetry.parent }

func (fpdNumRetry *Fib_Nodes_Node_Protocols_Protocol_Misc_MiProtoDbgStat_FpdNumRetry) GetParentYangName() string { return "mi-proto-dbg-stat" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr
// the number of counters used for purge counter
// stats
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // the number of frees for this proto. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr.
    FppCntr []Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetFilter() yfilter.YFilter { return miIdbPurgeCntr.YFilter }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) SetFilter(yf yfilter.YFilter) { miIdbPurgeCntr.YFilter = yf }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetGoName(yname string) string {
    if yname == "fpp-cntr" { return "FppCntr" }
    return ""
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetSegmentPath() string {
    return "mi-idb-purge-cntr"
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpp-cntr" {
        for _, c := range miIdbPurgeCntr.FppCntr {
            if miIdbPurgeCntr.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr{}
        miIdbPurgeCntr.FppCntr = append(miIdbPurgeCntr.FppCntr, child)
        return &miIdbPurgeCntr.FppCntr[len(miIdbPurgeCntr.FppCntr)-1]
    }
    return nil
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range miIdbPurgeCntr.FppCntr {
        children[miIdbPurgeCntr.FppCntr[i].GetSegmentPath()] = &miIdbPurgeCntr.FppCntr[i]
    }
    return children
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetBundleName() string { return "cisco_ios_xr" }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetYangName() string { return "mi-idb-purge-cntr" }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) SetParent(parent types.Entity) { miIdbPurgeCntr.parent = parent }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetParent() types.Entity { return miIdbPurgeCntr.parent }

func (miIdbPurgeCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr
// the number of frees for this proto
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetFilter() yfilter.YFilter { return fppCntr.YFilter }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) SetFilter(yf yfilter.YFilter) { fppCntr.YFilter = yf }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetSegmentPath() string {
    return "fpp-cntr"
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fppCntr.Entry
    return leafs
}

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetBundleName() string { return "cisco_ios_xr" }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetYangName() string { return "fpp-cntr" }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) SetParent(parent types.Entity) { fppCntr.parent = parent }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetParent() types.Entity { return fppCntr.parent }

func (fppCntr *Fib_Nodes_Node_Protocols_Protocol_Misc_MiIdbPurgeCntr_FppCntr) GetParentYangName() string { return "mi-idb-purge-cntr" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel
// Timestamps of deleted routes
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // tableid. The type is interface{} with range: 0..4294967295.
    Tableid interface{}

    // prfx. The type is string with length: 0..16.
    Prfx interface{}

    // prfx len. The type is interface{} with range: 0..65535.
    PrfxLen interface{}

    // prfx proto. The type is interface{} with range: 0..65535.
    PrfxProto interface{}

    // msec time. The type is interface{} with range: 0..18446744073709551615.
    MsecTime interface{}
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetFilter() yfilter.YFilter { return miDel.YFilter }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) SetFilter(yf yfilter.YFilter) { miDel.YFilter = yf }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetGoName(yname string) string {
    if yname == "tableid" { return "Tableid" }
    if yname == "prfx" { return "Prfx" }
    if yname == "prfx-len" { return "PrfxLen" }
    if yname == "prfx-proto" { return "PrfxProto" }
    if yname == "msec-time" { return "MsecTime" }
    return ""
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetSegmentPath() string {
    return "mi-del"
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tableid"] = miDel.Tableid
    leafs["prfx"] = miDel.Prfx
    leafs["prfx-len"] = miDel.PrfxLen
    leafs["prfx-proto"] = miDel.PrfxProto
    leafs["msec-time"] = miDel.MsecTime
    return leafs
}

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetBundleName() string { return "cisco_ios_xr" }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetYangName() string { return "mi-del" }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) SetParent(parent types.Entity) { miDel.parent = parent }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetParent() types.Entity { return miDel.parent }

func (miDel *Fib_Nodes_Node_Protocols_Protocol_Misc_MiDel) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat
// FRR statistics
type Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // number of FRR events sent on nh interface down. The type is interface{}
    // with range: 0..4294967295.
    MiNumIntfFrr interface{}

    // number of FRR events sent on nh parent interface down. The type is
    // interface{} with range: 0..4294967295.
    MiNumParentIntfFrr interface{}

    // number of interface down FRR events from PFI. The type is interface{} with
    // range: 0..4294967295.
    MiNumPfiIntfDown interface{}

    // number of NH down FRR events frm BFD. The type is interface{} with range:
    // 0..4294967295.
    MiNumBfdDown interface{}

    // total number of prot FRR objects. The type is interface{} with range:
    // 0..4294967295.
    MiNumProtFrrObjects interface{}

    // total number of backup FRR objects. The type is interface{} with range:
    // 0..4294967295.
    MiNumBkupFrrObjects interface{}

    // total number of successful FRR tunnel ID allocations. The type is
    // interface{} with range: 0..4294967295.
    MiNumTunidAllocs interface{}

    // total number of FRR tunnel ID allocation failures. The type is interface{}
    // with range: 0..4294967295.
    MiNumTunidAllocFailures interface{}

    // total number of successful FRR tunnel ID frees. The type is interface{}
    // with range: 0..4294967295.
    MiNumTunidFrees interface{}

    // total number of FRR tunnel ID free failures. The type is interface{} with
    // range: 0..4294967295.
    MiNumTunidFreeFailures interface{}

    // number of frr reset queue adds. The type is interface{} with range:
    // 0..4294967295.
    MiNumFrrResetQueueAdds interface{}

    // number of frr reset queue deletes. The type is interface{} with range:
    // 0..4294967295.
    MiNumFrrResetQueueRemove interface{}

    // number of frr resets. The type is interface{} with range: 0..4294967295.
    MiNumFrrReset interface{}

    // number of frr events received in proto thread. The type is interface{} with
    // range: 0..4294967295.
    MiNumFrrProtoEvents interface{}

    // frr log size. The type is interface{} with range: 0..4294967295.
    MiNumFrrLogs interface{}
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetFilter() yfilter.YFilter { return miFrrStat.YFilter }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) SetFilter(yf yfilter.YFilter) { miFrrStat.YFilter = yf }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetGoName(yname string) string {
    if yname == "mi-num-intf-frr" { return "MiNumIntfFrr" }
    if yname == "mi-num-parent-intf-frr" { return "MiNumParentIntfFrr" }
    if yname == "mi-num-pfi-intf-down" { return "MiNumPfiIntfDown" }
    if yname == "mi-num-bfd-down" { return "MiNumBfdDown" }
    if yname == "mi-num-prot-frr-objects" { return "MiNumProtFrrObjects" }
    if yname == "mi-num-bkup-frr-objects" { return "MiNumBkupFrrObjects" }
    if yname == "mi-num-tunid-allocs" { return "MiNumTunidAllocs" }
    if yname == "mi-num-tunid-alloc-failures" { return "MiNumTunidAllocFailures" }
    if yname == "mi-num-tunid-frees" { return "MiNumTunidFrees" }
    if yname == "mi-num-tunid-free-failures" { return "MiNumTunidFreeFailures" }
    if yname == "mi-num-frr-reset-queue-adds" { return "MiNumFrrResetQueueAdds" }
    if yname == "mi-num-frr-reset-queue-remove" { return "MiNumFrrResetQueueRemove" }
    if yname == "mi-num-frr-reset" { return "MiNumFrrReset" }
    if yname == "mi-num-frr-proto-events" { return "MiNumFrrProtoEvents" }
    if yname == "mi-num-frr-logs" { return "MiNumFrrLogs" }
    return ""
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetSegmentPath() string {
    return "mi-frr-stat"
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mi-num-intf-frr"] = miFrrStat.MiNumIntfFrr
    leafs["mi-num-parent-intf-frr"] = miFrrStat.MiNumParentIntfFrr
    leafs["mi-num-pfi-intf-down"] = miFrrStat.MiNumPfiIntfDown
    leafs["mi-num-bfd-down"] = miFrrStat.MiNumBfdDown
    leafs["mi-num-prot-frr-objects"] = miFrrStat.MiNumProtFrrObjects
    leafs["mi-num-bkup-frr-objects"] = miFrrStat.MiNumBkupFrrObjects
    leafs["mi-num-tunid-allocs"] = miFrrStat.MiNumTunidAllocs
    leafs["mi-num-tunid-alloc-failures"] = miFrrStat.MiNumTunidAllocFailures
    leafs["mi-num-tunid-frees"] = miFrrStat.MiNumTunidFrees
    leafs["mi-num-tunid-free-failures"] = miFrrStat.MiNumTunidFreeFailures
    leafs["mi-num-frr-reset-queue-adds"] = miFrrStat.MiNumFrrResetQueueAdds
    leafs["mi-num-frr-reset-queue-remove"] = miFrrStat.MiNumFrrResetQueueRemove
    leafs["mi-num-frr-reset"] = miFrrStat.MiNumFrrReset
    leafs["mi-num-frr-proto-events"] = miFrrStat.MiNumFrrProtoEvents
    leafs["mi-num-frr-logs"] = miFrrStat.MiNumFrrLogs
    return leafs
}

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetBundleName() string { return "cisco_ios_xr" }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetYangName() string { return "mi-frr-stat" }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) SetParent(parent types.Entity) { miFrrStat.parent = parent }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetParent() types.Entity { return miFrrStat.parent }

func (miFrrStat *Fib_Nodes_Node_Protocols_Protocol_Misc_MiFrrStat) GetParentYangName() string { return "misc" }

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel
// Local label
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FIB Local-label conflicts database.
    Conflicts Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetFilter() yfilter.YFilter { return localLabel.YFilter }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) SetFilter(yf yfilter.YFilter) { localLabel.YFilter = yf }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetGoName(yname string) string {
    if yname == "conflicts" { return "Conflicts" }
    return ""
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetSegmentPath() string {
    return "local-label"
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "conflicts" {
        return &localLabel.Conflicts
    }
    return nil
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["conflicts"] = &localLabel.Conflicts
    return children
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetBundleName() string { return "cisco_ios_xr" }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetYangName() string { return "local-label" }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) SetParent(parent types.Entity) { localLabel.parent = parent }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetParent() types.Entity { return localLabel.parent }

func (localLabel *Fib_Nodes_Node_Protocols_Protocol_LocalLabel) GetParentYangName() string { return "protocol" }

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts
// FIB Local-label conflicts database
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CEF Local-label conflicts entry. The type is slice of
    // Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict.
    Conflict []Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetFilter() yfilter.YFilter { return conflicts.YFilter }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) SetFilter(yf yfilter.YFilter) { conflicts.YFilter = yf }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetGoName(yname string) string {
    if yname == "conflict" { return "Conflict" }
    return ""
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetSegmentPath() string {
    return "conflicts"
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "conflict" {
        for _, c := range conflicts.Conflict {
            if conflicts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict{}
        conflicts.Conflict = append(conflicts.Conflict, child)
        return &conflicts.Conflict[len(conflicts.Conflict)-1]
    }
    return nil
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range conflicts.Conflict {
        children[conflicts.Conflict[i].GetSegmentPath()] = &conflicts.Conflict[i]
    }
    return children
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetBundleName() string { return "cisco_ios_xr" }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetYangName() string { return "conflicts" }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) SetParent(parent types.Entity) { conflicts.parent = parent }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetParent() types.Entity { return conflicts.parent }

func (conflicts *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts) GetParentYangName() string { return "local-label" }

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict
// CEF Local-label conflicts entry
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Route source. The type is FibRouteSource.
    Source interface{}

    // Type of entry. The type is FibllcEntry.
    LlCtype interface{}

    // Table ID of IP prefix. The type is interface{} with range:
    // -2147483648..2147483647.
    PfxTblId interface{}

    // IP Prefix. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Prefix interface{}

    // Length of IP Prefix. The type is interface{} with range:
    // -2147483648..2147483647.
    PrefixLen interface{}

    // local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // source xr. The type is interface{} with range: 0..4294967295.
    SourceXr interface{}

    // update ts. The type is interface{} with range: 0..18446744073709551615.
    UpdateTs interface{}

    // retry ts. The type is interface{} with range: 0..18446744073709551615.
    RetryTs interface{}

    // num retries. The type is interface{} with range: 0..4294967295.
    NumRetries interface{}

    // ext.
    Ext Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetFilter() yfilter.YFilter { return conflict.YFilter }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) SetFilter(yf yfilter.YFilter) { conflict.YFilter = yf }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "source" { return "Source" }
    if yname == "ll-ctype" { return "LlCtype" }
    if yname == "pfx-tbl-id" { return "PfxTblId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "local-label" { return "LocalLabel" }
    if yname == "source-xr" { return "SourceXr" }
    if yname == "update-ts" { return "UpdateTs" }
    if yname == "retry-ts" { return "RetryTs" }
    if yname == "num-retries" { return "NumRetries" }
    if yname == "ext" { return "Ext" }
    return ""
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetSegmentPath() string {
    return "conflict"
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ext" {
        return &conflict.Ext
    }
    return nil
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ext"] = &conflict.Ext
    return children
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = conflict.Label
    leafs["source"] = conflict.Source
    leafs["ll-ctype"] = conflict.LlCtype
    leafs["pfx-tbl-id"] = conflict.PfxTblId
    leafs["prefix"] = conflict.Prefix
    leafs["prefix-len"] = conflict.PrefixLen
    leafs["local-label"] = conflict.LocalLabel
    leafs["source-xr"] = conflict.SourceXr
    leafs["update-ts"] = conflict.UpdateTs
    leafs["retry-ts"] = conflict.RetryTs
    leafs["num-retries"] = conflict.NumRetries
    return leafs
}

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetBundleName() string { return "cisco_ios_xr" }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetYangName() string { return "conflict" }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) SetParent(parent types.Entity) { conflict.parent = parent }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetParent() types.Entity { return conflict.parent }

func (conflict *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict) GetParentYangName() string { return "conflicts" }

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext
// ext
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // type. The type is FibMplsLlcEntryBag.
    Type interface{}

    // pfx.
    Pfx Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx

    // lsm.
    Lsm Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetFilter() yfilter.YFilter { return ext.YFilter }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) SetFilter(yf yfilter.YFilter) { ext.YFilter = yf }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "pfx" { return "Pfx" }
    if yname == "lsm" { return "Lsm" }
    return ""
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetSegmentPath() string {
    return "ext"
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pfx" {
        return &ext.Pfx
    }
    if childYangName == "lsm" {
        return &ext.Lsm
    }
    return nil
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pfx"] = &ext.Pfx
    children["lsm"] = &ext.Lsm
    return children
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = ext.Type
    return leafs
}

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetBundleName() string { return "cisco_ios_xr" }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetYangName() string { return "ext" }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) SetParent(parent types.Entity) { ext.parent = parent }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetParent() types.Entity { return ext.parent }

func (ext *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext) GetParentYangName() string { return "conflict" }

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx
// pfx
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // pfx. The type is string with length: 0..52.
    Pfx interface{}

    // tbl id. The type is interface{} with range: 0..4294967295.
    TblId interface{}
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetFilter() yfilter.YFilter { return pfx.YFilter }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) SetFilter(yf yfilter.YFilter) { pfx.YFilter = yf }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetGoName(yname string) string {
    if yname == "pfx" { return "Pfx" }
    if yname == "tbl-id" { return "TblId" }
    return ""
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetSegmentPath() string {
    return "pfx"
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pfx"] = pfx.Pfx
    leafs["tbl-id"] = pfx.TblId
    return leafs
}

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetBundleName() string { return "cisco_ios_xr" }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetYangName() string { return "pfx" }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) SetParent(parent types.Entity) { pfx.parent = parent }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetParent() types.Entity { return pfx.parent }

func (pfx *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Pfx) GetParentYangName() string { return "ext" }

// Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm
// lsm
type Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // nh. The type is string with length: 0..52.
    Nh interface{}

    // mcast id. The type is interface{} with range: 0..4294967295.
    McastId interface{}
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetFilter() yfilter.YFilter { return lsm.YFilter }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) SetFilter(yf yfilter.YFilter) { lsm.YFilter = yf }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetGoName(yname string) string {
    if yname == "nh" { return "Nh" }
    if yname == "mcast-id" { return "McastId" }
    return ""
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetSegmentPath() string {
    return "lsm"
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nh"] = lsm.Nh
    leafs["mcast-id"] = lsm.McastId
    return leafs
}

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetBundleName() string { return "cisco_ios_xr" }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetYangName() string { return "lsm" }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) SetParent(parent types.Entity) { lsm.parent = parent }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetParent() types.Entity { return lsm.parent }

func (lsm *Fib_Nodes_Node_Protocols_Protocol_LocalLabel_Conflicts_Conflict_Ext_Lsm) GetParentYangName() string { return "ext" }

// MplsForwarding
// mpls forwarding
type MplsForwarding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of Nodes.
    Nodes MplsForwarding_Nodes
}

func (mplsForwarding *MplsForwarding) GetFilter() yfilter.YFilter { return mplsForwarding.YFilter }

func (mplsForwarding *MplsForwarding) SetFilter(yf yfilter.YFilter) { mplsForwarding.YFilter = yf }

func (mplsForwarding *MplsForwarding) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (mplsForwarding *MplsForwarding) GetSegmentPath() string {
    return "Cisco-IOS-XR-fib-common-oper:mpls-forwarding"
}

func (mplsForwarding *MplsForwarding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &mplsForwarding.Nodes
    }
    return nil
}

func (mplsForwarding *MplsForwarding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &mplsForwarding.Nodes
    return children
}

func (mplsForwarding *MplsForwarding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mplsForwarding *MplsForwarding) GetBundleName() string { return "cisco_ios_xr" }

func (mplsForwarding *MplsForwarding) GetYangName() string { return "mpls-forwarding" }

func (mplsForwarding *MplsForwarding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsForwarding *MplsForwarding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsForwarding *MplsForwarding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsForwarding *MplsForwarding) SetParent(parent types.Entity) { mplsForwarding.parent = parent }

func (mplsForwarding *MplsForwarding) GetParent() types.Entity { return mplsForwarding.parent }

func (mplsForwarding *MplsForwarding) GetParentYangName() string { return "Cisco-IOS-XR-fib-common-oper" }

// MplsForwarding_Nodes
// Table of Nodes
type MplsForwarding_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data for a specific Node. The type is slice of
    // MplsForwarding_Nodes_Node.
    Node []MplsForwarding_Nodes_Node
}

func (nodes *MplsForwarding_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *MplsForwarding_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *MplsForwarding_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *MplsForwarding_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *MplsForwarding_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *MplsForwarding_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *MplsForwarding_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *MplsForwarding_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *MplsForwarding_Nodes) GetYangName() string { return "nodes" }

func (nodes *MplsForwarding_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *MplsForwarding_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *MplsForwarding_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *MplsForwarding_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *MplsForwarding_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *MplsForwarding_Nodes) GetParentYangName() string { return "mpls-forwarding" }

// MplsForwarding_Nodes_Node
// Operational data for a specific Node
type MplsForwarding_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // MPLS forwarding summary.
    ForwardingSummary MplsForwarding_Nodes_Node_ForwardingSummary

    // FRR Log Table.
    FrrLogs MplsForwarding_Nodes_Node_FrrLogs

    // Labels For FIB.
    LabelFib MplsForwarding_Nodes_Node_LabelFib

    // TE Tunnel information.
    Tunnel MplsForwarding_Nodes_Node_Tunnel

    // MPLS forwarding FRR Database.
    FrrDatabase MplsForwarding_Nodes_Node_FrrDatabase
}

func (node *MplsForwarding_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *MplsForwarding_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *MplsForwarding_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "forwarding-summary" { return "ForwardingSummary" }
    if yname == "frr-logs" { return "FrrLogs" }
    if yname == "label-fib" { return "LabelFib" }
    if yname == "tunnel" { return "Tunnel" }
    if yname == "frr-database" { return "FrrDatabase" }
    return ""
}

func (node *MplsForwarding_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *MplsForwarding_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarding-summary" {
        return &node.ForwardingSummary
    }
    if childYangName == "frr-logs" {
        return &node.FrrLogs
    }
    if childYangName == "label-fib" {
        return &node.LabelFib
    }
    if childYangName == "tunnel" {
        return &node.Tunnel
    }
    if childYangName == "frr-database" {
        return &node.FrrDatabase
    }
    return nil
}

func (node *MplsForwarding_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarding-summary"] = &node.ForwardingSummary
    children["frr-logs"] = &node.FrrLogs
    children["label-fib"] = &node.LabelFib
    children["tunnel"] = &node.Tunnel
    children["frr-database"] = &node.FrrDatabase
    return children
}

func (node *MplsForwarding_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *MplsForwarding_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *MplsForwarding_Nodes_Node) GetYangName() string { return "node" }

func (node *MplsForwarding_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *MplsForwarding_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *MplsForwarding_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *MplsForwarding_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *MplsForwarding_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *MplsForwarding_Nodes_Node) GetParentYangName() string { return "nodes" }

// MplsForwarding_Nodes_Node_ForwardingSummary
// MPLS forwarding summary
type MplsForwarding_Nodes_Node_ForwardingSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of IPv4 imposition entries. The type is interface{} with range:
    // 0..4294967295.
    Ipv4ImpositionEntries interface{}

    // Number of reserved label entries. The type is interface{} with range:
    // 0..4294967295.
    ReservedLabelEntries interface{}

    // Number of label swap/disposition entries. The type is interface{} with
    // range: 0..4294967295.
    LabelSwitchedEntries interface{}

    // Number of delete stale label entries. The type is interface{} with range:
    // 0..4294967295.
    DeletedStaleEntries interface{}

    // Number of TE tunnel head imposition entries. The type is interface{} with
    // range: 0..4294967295.
    TeHeadEntries interface{}

    // Number of TE FRR tunnel head imposition entries. The type is interface{}
    // with range: 0..4294967295.
    TeFrrHeadEntries interface{}

    // Number of TE FRR protected interface entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrInterfaceEntries interface{}

    // Number of TE FRR protected next-hop entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrNextHopEntries interface{}

    // Number of TE MidPoints forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeMidPointsEntries interface{}

    // Number of TE FRR MidPoints forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrMidPointsEntries interface{}

    // Number of TE internal forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeInternalEntries interface{}

    // Number of TE internal forwarding entries. The type is interface{} with
    // range: 0..4294967295.
    TeFrrInternalEntries interface{}

    // Total forwarding updates from LSD to LFDs. The type is interface{} with
    // range: 0..4294967295.
    TotalForwardingUpdates interface{}

    // Total forwarding update messages from LSD to LFDs. The type is interface{}
    // with range: 0..4294967295.
    TotalForwardingUpdateMessages interface{}

    // Total forwarding updates from MRIB to LFDs. The type is interface{} with
    // range: 0..4294967295.
    TotalP2MpForwardingUpdates interface{}

    // Total p2mp forwarding add/modify messages from MRIB to LFDs. The type is
    // interface{} with range: 0..4294967295.
    TotalP2MpForwardingAddedOrModifyMessages interface{}

    // Total p2mp forwarding del messages from MRIB to LFDs. The type is
    // interface{} with range: 0..4294967295.
    TotalP2MpForwardingDeleteMessages interface{}

    // Total p2mp forwarding messages dropped from MRIB to LFDs. The type is
    // interface{} with range: 0..4294967295.
    TotalP2MpForwardingDropMessages interface{}

    // Total IIR triggered p2mp forwarding MRIB messages dropped. The type is
    // interface{} with range: 0..4294967295.
    TotalP2MpIirForwardingDropMessages interface{}

    // Lowest label in use. The type is interface{} with range: 0..4294967295.
    LowestLabel interface{}

    // Highest Label in use. The type is interface{} with range: 0..4294967295.
    HighestLabel interface{}

    // Number of TE tunnels treated as non-protected. The type is interface{} with
    // range: 0..4294967295.
    IgnoreProtect interface{}

    // Number of MTE tunnel head entries. The type is interface{} with range:
    // 0..4294967295.
    MteHeadEntries interface{}

    // Number of MTE local entries. The type is interface{} with range:
    // 0..4294967295.
    MteLlEntries interface{}

    // Number of MTE midpoint entries. The type is interface{} with range:
    // 0..4294967295.
    MteMidpointEntries interface{}

    // Number of global FIB packets dropped. The type is interface{} with range:
    // 0..18446744073709551615.
    GlobalDroppedPackets interface{}

    // Number of global FIB packets fragmented. The type is interface{} with
    // range: 0..18446744073709551615.
    GlobalFragmentedPackets interface{}

    // Number of global failed lookups. The type is interface{} with range:
    // 0..18446744073709551615.
    GlobalFailedLookups interface{}

    // Number of labels with RPF. The type is interface{} with range:
    // 0..4294967295.
    LrpfEntries interface{}
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetFilter() yfilter.YFilter { return forwardingSummary.YFilter }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) SetFilter(yf yfilter.YFilter) { forwardingSummary.YFilter = yf }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetGoName(yname string) string {
    if yname == "ipv4-imposition-entries" { return "Ipv4ImpositionEntries" }
    if yname == "reserved-label-entries" { return "ReservedLabelEntries" }
    if yname == "label-switched-entries" { return "LabelSwitchedEntries" }
    if yname == "deleted-stale-entries" { return "DeletedStaleEntries" }
    if yname == "te-head-entries" { return "TeHeadEntries" }
    if yname == "te-frr-head-entries" { return "TeFrrHeadEntries" }
    if yname == "te-frr-interface-entries" { return "TeFrrInterfaceEntries" }
    if yname == "te-frr-next-hop-entries" { return "TeFrrNextHopEntries" }
    if yname == "te-mid-points-entries" { return "TeMidPointsEntries" }
    if yname == "te-frr-mid-points-entries" { return "TeFrrMidPointsEntries" }
    if yname == "te-internal-entries" { return "TeInternalEntries" }
    if yname == "te-frr-internal-entries" { return "TeFrrInternalEntries" }
    if yname == "total-forwarding-updates" { return "TotalForwardingUpdates" }
    if yname == "total-forwarding-update-messages" { return "TotalForwardingUpdateMessages" }
    if yname == "total-p2mp-forwarding-updates" { return "TotalP2MpForwardingUpdates" }
    if yname == "total-p2mp-forwarding-added-or-modify-messages" { return "TotalP2MpForwardingAddedOrModifyMessages" }
    if yname == "total-p2mp-forwarding-delete-messages" { return "TotalP2MpForwardingDeleteMessages" }
    if yname == "total-p2mp-forwarding-drop-messages" { return "TotalP2MpForwardingDropMessages" }
    if yname == "total-p2mp-iir-forwarding-drop-messages" { return "TotalP2MpIirForwardingDropMessages" }
    if yname == "lowest-label" { return "LowestLabel" }
    if yname == "highest-label" { return "HighestLabel" }
    if yname == "ignore-protect" { return "IgnoreProtect" }
    if yname == "mte-head-entries" { return "MteHeadEntries" }
    if yname == "mte-ll-entries" { return "MteLlEntries" }
    if yname == "mte-midpoint-entries" { return "MteMidpointEntries" }
    if yname == "global-dropped-packets" { return "GlobalDroppedPackets" }
    if yname == "global-fragmented-packets" { return "GlobalFragmentedPackets" }
    if yname == "global-failed-lookups" { return "GlobalFailedLookups" }
    if yname == "lrpf-entries" { return "LrpfEntries" }
    return ""
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetSegmentPath() string {
    return "forwarding-summary"
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv4-imposition-entries"] = forwardingSummary.Ipv4ImpositionEntries
    leafs["reserved-label-entries"] = forwardingSummary.ReservedLabelEntries
    leafs["label-switched-entries"] = forwardingSummary.LabelSwitchedEntries
    leafs["deleted-stale-entries"] = forwardingSummary.DeletedStaleEntries
    leafs["te-head-entries"] = forwardingSummary.TeHeadEntries
    leafs["te-frr-head-entries"] = forwardingSummary.TeFrrHeadEntries
    leafs["te-frr-interface-entries"] = forwardingSummary.TeFrrInterfaceEntries
    leafs["te-frr-next-hop-entries"] = forwardingSummary.TeFrrNextHopEntries
    leafs["te-mid-points-entries"] = forwardingSummary.TeMidPointsEntries
    leafs["te-frr-mid-points-entries"] = forwardingSummary.TeFrrMidPointsEntries
    leafs["te-internal-entries"] = forwardingSummary.TeInternalEntries
    leafs["te-frr-internal-entries"] = forwardingSummary.TeFrrInternalEntries
    leafs["total-forwarding-updates"] = forwardingSummary.TotalForwardingUpdates
    leafs["total-forwarding-update-messages"] = forwardingSummary.TotalForwardingUpdateMessages
    leafs["total-p2mp-forwarding-updates"] = forwardingSummary.TotalP2MpForwardingUpdates
    leafs["total-p2mp-forwarding-added-or-modify-messages"] = forwardingSummary.TotalP2MpForwardingAddedOrModifyMessages
    leafs["total-p2mp-forwarding-delete-messages"] = forwardingSummary.TotalP2MpForwardingDeleteMessages
    leafs["total-p2mp-forwarding-drop-messages"] = forwardingSummary.TotalP2MpForwardingDropMessages
    leafs["total-p2mp-iir-forwarding-drop-messages"] = forwardingSummary.TotalP2MpIirForwardingDropMessages
    leafs["lowest-label"] = forwardingSummary.LowestLabel
    leafs["highest-label"] = forwardingSummary.HighestLabel
    leafs["ignore-protect"] = forwardingSummary.IgnoreProtect
    leafs["mte-head-entries"] = forwardingSummary.MteHeadEntries
    leafs["mte-ll-entries"] = forwardingSummary.MteLlEntries
    leafs["mte-midpoint-entries"] = forwardingSummary.MteMidpointEntries
    leafs["global-dropped-packets"] = forwardingSummary.GlobalDroppedPackets
    leafs["global-fragmented-packets"] = forwardingSummary.GlobalFragmentedPackets
    leafs["global-failed-lookups"] = forwardingSummary.GlobalFailedLookups
    leafs["lrpf-entries"] = forwardingSummary.LrpfEntries
    return leafs
}

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetYangName() string { return "forwarding-summary" }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) SetParent(parent types.Entity) { forwardingSummary.parent = parent }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetParent() types.Entity { return forwardingSummary.parent }

func (forwardingSummary *MplsForwarding_Nodes_Node_ForwardingSummary) GetParentYangName() string { return "node" }

// MplsForwarding_Nodes_Node_FrrLogs
// FRR Log Table
type MplsForwarding_Nodes_Node_FrrLogs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR Log information. The type is slice of
    // MplsForwarding_Nodes_Node_FrrLogs_FrrLog.
    FrrLog []MplsForwarding_Nodes_Node_FrrLogs_FrrLog
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetFilter() yfilter.YFilter { return frrLogs.YFilter }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) SetFilter(yf yfilter.YFilter) { frrLogs.YFilter = yf }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetGoName(yname string) string {
    if yname == "frr-log" { return "FrrLog" }
    return ""
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetSegmentPath() string {
    return "frr-logs"
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-log" {
        for _, c := range frrLogs.FrrLog {
            if frrLogs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrLogs_FrrLog{}
        frrLogs.FrrLog = append(frrLogs.FrrLog, child)
        return &frrLogs.FrrLog[len(frrLogs.FrrLog)-1]
    }
    return nil
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrLogs.FrrLog {
        children[frrLogs.FrrLog[i].GetSegmentPath()] = &frrLogs.FrrLog[i]
    }
    return children
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetBundleName() string { return "cisco_ios_xr" }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetYangName() string { return "frr-logs" }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) SetParent(parent types.Entity) { frrLogs.parent = parent }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetParent() types.Entity { return frrLogs.parent }

func (frrLogs *MplsForwarding_Nodes_Node_FrrLogs) GetParentYangName() string { return "node" }

// MplsForwarding_Nodes_Node_FrrLogs_FrrLog
// FRR Log information
type MplsForwarding_Nodes_Node_FrrLogs_FrrLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Event ID. The type is interface{} with range:
    // -2147483648..2147483647.
    EventId interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProtectedFrrInterfaceName interface{}

    // Next Hop. The type is interface{} with range: 0..4294967295.
    NextHop interface{}

    // Number of rewrites affected. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRewritesAffected interface{}

    // Time to switch rewrites [nsecs]. The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    SwitchingTimeNsecs interface{}

    // Main Processing for FRR. The type is interface{} with range: 0..4294967295.
    MainProcessing interface{}

    // Fast Bundle Member Down Interface. The type is interface{} with range:
    // 0..4294967295.
    FastBundleMemberDownInterface interface{}

    // Node on which the FRR event happened. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    FrrEventNodeId interface{}

    // Time of FRR event processing start, Seconds in UTC, and Nano Seconds.
    StartTime MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetFilter() yfilter.YFilter { return frrLog.YFilter }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) SetFilter(yf yfilter.YFilter) { frrLog.YFilter = yf }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "protected-frr-interface-name" { return "ProtectedFrrInterfaceName" }
    if yname == "next-hop" { return "NextHop" }
    if yname == "number-of-rewrites-affected" { return "NumberOfRewritesAffected" }
    if yname == "switching-time-nsecs" { return "SwitchingTimeNsecs" }
    if yname == "main-processing" { return "MainProcessing" }
    if yname == "fast-bundle-member-down-interface" { return "FastBundleMemberDownInterface" }
    if yname == "frr-event-node-id" { return "FrrEventNodeId" }
    if yname == "start-time" { return "StartTime" }
    return ""
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetSegmentPath() string {
    return "frr-log" + "[event-id='" + fmt.Sprintf("%v", frrLog.EventId) + "']"
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "start-time" {
        return &frrLog.StartTime
    }
    return nil
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["start-time"] = &frrLog.StartTime
    return children
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = frrLog.EventId
    leafs["protected-frr-interface-name"] = frrLog.ProtectedFrrInterfaceName
    leafs["next-hop"] = frrLog.NextHop
    leafs["number-of-rewrites-affected"] = frrLog.NumberOfRewritesAffected
    leafs["switching-time-nsecs"] = frrLog.SwitchingTimeNsecs
    leafs["main-processing"] = frrLog.MainProcessing
    leafs["fast-bundle-member-down-interface"] = frrLog.FastBundleMemberDownInterface
    leafs["frr-event-node-id"] = frrLog.FrrEventNodeId
    return leafs
}

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetBundleName() string { return "cisco_ios_xr" }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetYangName() string { return "frr-log" }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) SetParent(parent types.Entity) { frrLog.parent = parent }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetParent() types.Entity { return frrLog.parent }

func (frrLog *MplsForwarding_Nodes_Node_FrrLogs_FrrLog) GetParentYangName() string { return "frr-logs" }

// MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime
// Time of FRR event processing start, Seconds in
// UTC, and Nano Seconds
type MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds part of time valueiin UTC. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Nanoseconds part of time value. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetFilter() yfilter.YFilter { return startTime.YFilter }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) SetFilter(yf yfilter.YFilter) { startTime.YFilter = yf }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetSegmentPath() string {
    return "start-time"
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = startTime.Seconds
    leafs["nanoseconds"] = startTime.Nanoseconds
    return leafs
}

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetBundleName() string { return "cisco_ios_xr" }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetYangName() string { return "start-time" }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) SetParent(parent types.Entity) { startTime.parent = parent }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetParent() types.Entity { return startTime.parent }

func (startTime *MplsForwarding_Nodes_Node_FrrLogs_FrrLog_StartTime) GetParentYangName() string { return "frr-log" }

// MplsForwarding_Nodes_Node_LabelFib
// Labels For FIB
type MplsForwarding_Nodes_Node_LabelFib struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Forwarding Detail table.
    ForwardingDetails MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails

    // Forwarding filtering details.
    Informations MplsForwarding_Nodes_Node_LabelFib_Informations

    // MPLS label security.
    LabelSecurity MplsForwarding_Nodes_Node_LabelFib_LabelSecurity
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetFilter() yfilter.YFilter { return labelFib.YFilter }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) SetFilter(yf yfilter.YFilter) { labelFib.YFilter = yf }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetGoName(yname string) string {
    if yname == "forwarding-details" { return "ForwardingDetails" }
    if yname == "informations" { return "Informations" }
    if yname == "label-security" { return "LabelSecurity" }
    return ""
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetSegmentPath() string {
    return "label-fib"
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarding-details" {
        return &labelFib.ForwardingDetails
    }
    if childYangName == "informations" {
        return &labelFib.Informations
    }
    if childYangName == "label-security" {
        return &labelFib.LabelSecurity
    }
    return nil
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarding-details"] = &labelFib.ForwardingDetails
    children["informations"] = &labelFib.Informations
    children["label-security"] = &labelFib.LabelSecurity
    return children
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetBundleName() string { return "cisco_ios_xr" }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetYangName() string { return "label-fib" }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) SetParent(parent types.Entity) { labelFib.parent = parent }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetParent() types.Entity { return labelFib.parent }

func (labelFib *MplsForwarding_Nodes_Node_LabelFib) GetParentYangName() string { return "node" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails
// MPLS Forwarding Detail table
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding details. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail.
    ForwardingDetail []MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetFilter() yfilter.YFilter { return forwardingDetails.YFilter }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) SetFilter(yf yfilter.YFilter) { forwardingDetails.YFilter = yf }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetGoName(yname string) string {
    if yname == "forwarding-detail" { return "ForwardingDetail" }
    return ""
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetSegmentPath() string {
    return "forwarding-details"
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarding-detail" {
        for _, c := range forwardingDetails.ForwardingDetail {
            if forwardingDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail{}
        forwardingDetails.ForwardingDetail = append(forwardingDetails.ForwardingDetail, child)
        return &forwardingDetails.ForwardingDetail[len(forwardingDetails.ForwardingDetail)-1]
    }
    return nil
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range forwardingDetails.ForwardingDetail {
        children[forwardingDetails.ForwardingDetail[i].GetSegmentPath()] = &forwardingDetails.ForwardingDetail[i]
    }
    return children
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetYangName() string { return "forwarding-details" }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) SetParent(parent types.Entity) { forwardingDetails.parent = parent }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetParent() types.Entity { return forwardingDetails.parent }

func (forwardingDetails *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails) GetParentYangName() string { return "label-fib" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail
// MPLS forwarding details
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local label value. The type is interface{} with range: 16..1048575.
    LabelValue interface{}

    // End of stack flag. The type is Mplseos.
    Eos interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LeafLocalLabel interface{}

    // EOS bit. The type is interface{} with range: 0..4294967295.
    EosBit interface{}

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Number of references to the leaf. The type is interface{} with range:
    // 0..4294967295.
    LeafReferanceCount interface{}

    // The leaf flags. The type is interface{} with range: 0..4294967295.
    LeafFlags interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    PathListReferanceCount interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    LdiReferanceCount interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The LDI type. The type is interface{} with range: 0..4294967295.
    LdiType interface{}

    // The pointer to the LDI. The type is interface{} with range: 0..4294967295.
    LdiPointer interface{}

    // The LW-LDI type. The type is interface{} with range: 0..4294967295.
    LwLdiType interface{}

    // The pointer to the LW-LDI. The type is interface{} with range:
    // 0..4294967295.
    LwLdiPointer interface{}

    // The LW-LDI refcounter. The type is interface{} with range: 0..4294967295.
    LwLdiRefernaceCount interface{}

    // The pointer to the shared LDI in LW-LDI. The type is interface{} with
    // range: 0..4294967295.
    LwSharedLdiPointer interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The AFI table ID. The type is interface{} with range: 0..4294967295.
    AfiTableId interface{}

    // The unicast or multicast label. The type is bool.
    MulticastLabel interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LeafTimeInMilliSeconds interface{}

    // LDI-info in FIB leaf.
    LdiInformation MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation

    // The multicast info.
    MulticastInformation MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation

    // Label-infos in FIB leaf. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation.
    LabelInformation []MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetFilter() yfilter.YFilter { return forwardingDetail.YFilter }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) SetFilter(yf yfilter.YFilter) { forwardingDetail.YFilter = yf }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetGoName(yname string) string {
    if yname == "label-value" { return "LabelValue" }
    if yname == "eos" { return "Eos" }
    if yname == "leaf-local-label" { return "LeafLocalLabel" }
    if yname == "eos-bit" { return "EosBit" }
    if yname == "hardware-information" { return "HardwareInformation" }
    if yname == "leaf-referance-count" { return "LeafReferanceCount" }
    if yname == "leaf-flags" { return "LeafFlags" }
    if yname == "path-list-referance-count" { return "PathListReferanceCount" }
    if yname == "path-list-flags" { return "PathListFlags" }
    if yname == "ldi-referance-count" { return "LdiReferanceCount" }
    if yname == "ldi-flags" { return "LdiFlags" }
    if yname == "ldi-type" { return "LdiType" }
    if yname == "ldi-pointer" { return "LdiPointer" }
    if yname == "lw-ldi-type" { return "LwLdiType" }
    if yname == "lw-ldi-pointer" { return "LwLdiPointer" }
    if yname == "lw-ldi-refernace-count" { return "LwLdiRefernaceCount" }
    if yname == "lw-shared-ldi-pointer" { return "LwSharedLdiPointer" }
    if yname == "lspa-flags" { return "LspaFlags" }
    if yname == "afi-table-id" { return "AfiTableId" }
    if yname == "multicast-label" { return "MulticastLabel" }
    if yname == "leaf-time-in-milli-seconds" { return "LeafTimeInMilliSeconds" }
    if yname == "ldi-information" { return "LdiInformation" }
    if yname == "multicast-information" { return "MulticastInformation" }
    if yname == "label-information" { return "LabelInformation" }
    return ""
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetSegmentPath() string {
    return "forwarding-detail"
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ldi-information" {
        return &forwardingDetail.LdiInformation
    }
    if childYangName == "multicast-information" {
        return &forwardingDetail.MulticastInformation
    }
    if childYangName == "label-information" {
        for _, c := range forwardingDetail.LabelInformation {
            if forwardingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation{}
        forwardingDetail.LabelInformation = append(forwardingDetail.LabelInformation, child)
        return &forwardingDetail.LabelInformation[len(forwardingDetail.LabelInformation)-1]
    }
    return nil
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ldi-information"] = &forwardingDetail.LdiInformation
    children["multicast-information"] = &forwardingDetail.MulticastInformation
    for i := range forwardingDetail.LabelInformation {
        children[forwardingDetail.LabelInformation[i].GetSegmentPath()] = &forwardingDetail.LabelInformation[i]
    }
    return children
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-value"] = forwardingDetail.LabelValue
    leafs["eos"] = forwardingDetail.Eos
    leafs["leaf-local-label"] = forwardingDetail.LeafLocalLabel
    leafs["eos-bit"] = forwardingDetail.EosBit
    leafs["hardware-information"] = forwardingDetail.HardwareInformation
    leafs["leaf-referance-count"] = forwardingDetail.LeafReferanceCount
    leafs["leaf-flags"] = forwardingDetail.LeafFlags
    leafs["path-list-referance-count"] = forwardingDetail.PathListReferanceCount
    leafs["path-list-flags"] = forwardingDetail.PathListFlags
    leafs["ldi-referance-count"] = forwardingDetail.LdiReferanceCount
    leafs["ldi-flags"] = forwardingDetail.LdiFlags
    leafs["ldi-type"] = forwardingDetail.LdiType
    leafs["ldi-pointer"] = forwardingDetail.LdiPointer
    leafs["lw-ldi-type"] = forwardingDetail.LwLdiType
    leafs["lw-ldi-pointer"] = forwardingDetail.LwLdiPointer
    leafs["lw-ldi-refernace-count"] = forwardingDetail.LwLdiRefernaceCount
    leafs["lw-shared-ldi-pointer"] = forwardingDetail.LwSharedLdiPointer
    leafs["lspa-flags"] = forwardingDetail.LspaFlags
    leafs["afi-table-id"] = forwardingDetail.AfiTableId
    leafs["multicast-label"] = forwardingDetail.MulticastLabel
    leafs["leaf-time-in-milli-seconds"] = forwardingDetail.LeafTimeInMilliSeconds
    return leafs
}

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetYangName() string { return "forwarding-detail" }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) SetParent(parent types.Entity) { forwardingDetail.parent = parent }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetParent() types.Entity { return forwardingDetail.parent }

func (forwardingDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail) GetParentYangName() string { return "forwarding-details" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation
// LDI-info in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LdiHardwareInformation interface{}
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetFilter() yfilter.YFilter { return ldiInformation.YFilter }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) SetFilter(yf yfilter.YFilter) { ldiInformation.YFilter = yf }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetGoName(yname string) string {
    if yname == "ldi-hardware-information" { return "LdiHardwareInformation" }
    return ""
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetSegmentPath() string {
    return "ldi-information"
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ldi-hardware-information"] = ldiInformation.LdiHardwareInformation
    return leafs
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetYangName() string { return "ldi-information" }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) SetParent(parent types.Entity) { ldiInformation.parent = parent }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetParent() types.Entity { return ldiInformation.parent }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LdiInformation) GetParentYangName() string { return "forwarding-detail" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation
// The multicast info
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MOL base flags. The type is interface{} with range: 0..4294967295.
    MulticastMolBaseFlags interface{}

    // MOL flags. The type is interface{} with range: 0..65535.
    MulticastMolFlags interface{}

    // MOL refcount. The type is interface{} with range: 0..65535.
    MulticastMolReferanceCount interface{}

    // multicast mpls tunnel. The type is string with pattern: [a-zA-Z0-9./-]+.
    MulticastTunnelInterfaceHandler interface{}

    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes. The
    // type is interface{} with range: 0..4294967295.
    MulticastTunnelId interface{}

    // multicast nhinfo for p2mp TE Head. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelNextHopInformation interface{}

    // multicast LSPVIF for MLDP Tunnels. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLspvif interface{}

    // num multicast mpls output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsOutputPaths interface{}

    // num multicast mpls prot output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsProtocolOutputPaths interface{}

    // num multicast mpls local output paths. The type is interface{} with range:
    // 0..65535.
    MulticastMplsLocalOutputPaths interface{}

    // The multicast RPF-ID . The type is interface{} with range: 0..4294967295.
    MulticastRpfId interface{}

    // The multicast ENCAP-ID . The type is interface{} with range: 0..4294967295.
    MulticastEncapId interface{}

    // The multicast platform data len. The type is interface{} with range:
    // 0..255.
    MulticastPlatformDataLength interface{}

    // The multicast platform data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    MulticastPlatformData interface{}
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetFilter() yfilter.YFilter { return multicastInformation.YFilter }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) SetFilter(yf yfilter.YFilter) { multicastInformation.YFilter = yf }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetGoName(yname string) string {
    if yname == "multicast-mol-base-flags" { return "MulticastMolBaseFlags" }
    if yname == "multicast-mol-flags" { return "MulticastMolFlags" }
    if yname == "multicast-mol-referance-count" { return "MulticastMolReferanceCount" }
    if yname == "multicast-tunnel-interface-handler" { return "MulticastTunnelInterfaceHandler" }
    if yname == "multicast-tunnel-id" { return "MulticastTunnelId" }
    if yname == "multicast-tunnel-next-hop-information" { return "MulticastTunnelNextHopInformation" }
    if yname == "multicast-tunnel-lspvif" { return "MulticastTunnelLspvif" }
    if yname == "multicast-mpls-output-paths" { return "MulticastMplsOutputPaths" }
    if yname == "multicast-mpls-protocol-output-paths" { return "MulticastMplsProtocolOutputPaths" }
    if yname == "multicast-mpls-local-output-paths" { return "MulticastMplsLocalOutputPaths" }
    if yname == "multicast-rpf-id" { return "MulticastRpfId" }
    if yname == "multicast-encap-id" { return "MulticastEncapId" }
    if yname == "multicast-platform-data-length" { return "MulticastPlatformDataLength" }
    if yname == "multicast-platform-data" { return "MulticastPlatformData" }
    return ""
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetSegmentPath() string {
    return "multicast-information"
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["multicast-mol-base-flags"] = multicastInformation.MulticastMolBaseFlags
    leafs["multicast-mol-flags"] = multicastInformation.MulticastMolFlags
    leafs["multicast-mol-referance-count"] = multicastInformation.MulticastMolReferanceCount
    leafs["multicast-tunnel-interface-handler"] = multicastInformation.MulticastTunnelInterfaceHandler
    leafs["multicast-tunnel-id"] = multicastInformation.MulticastTunnelId
    leafs["multicast-tunnel-next-hop-information"] = multicastInformation.MulticastTunnelNextHopInformation
    leafs["multicast-tunnel-lspvif"] = multicastInformation.MulticastTunnelLspvif
    leafs["multicast-mpls-output-paths"] = multicastInformation.MulticastMplsOutputPaths
    leafs["multicast-mpls-protocol-output-paths"] = multicastInformation.MulticastMplsProtocolOutputPaths
    leafs["multicast-mpls-local-output-paths"] = multicastInformation.MulticastMplsLocalOutputPaths
    leafs["multicast-rpf-id"] = multicastInformation.MulticastRpfId
    leafs["multicast-encap-id"] = multicastInformation.MulticastEncapId
    leafs["multicast-platform-data-length"] = multicastInformation.MulticastPlatformDataLength
    leafs["multicast-platform-data"] = multicastInformation.MulticastPlatformData
    return leafs
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetBundleName() string { return "cisco_ios_xr" }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetYangName() string { return "multicast-information" }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) SetParent(parent types.Entity) { multicastInformation.parent = parent }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetParent() types.Entity { return multicastInformation.parent }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_MulticastInformation) GetParentYangName() string { return "forwarding-detail" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation
// Label-infos in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label-Info type. The type is interface{} with range: 0..4294967295.
    LabelInformationType interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // MPLS Adjacency flags. The type is interface{} with range: 0..4294967295.
    MplsAdjacencyFlags interface{}

    // Tunnel id present?. The type is bool.
    TunnelIdPresent interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing Physical Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingPhysicalInterface interface{}

    // Outgoing Parent Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingParentInterface interface{}

    // Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // LabelInformationPathIndex. The type is interface{} with range:
    // 0..4294967295.
    LabelInformationPathIndex interface{}

    // NHinfo Type. The type is NextHop.
    LabelInformationNextHopType interface{}

    // The address family (v4/v6) . The type is Proto.
    LabelInformationNextHopProtocol interface{}

    // Bytes transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TxBytes interface{}

    // Packets transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615.
    TxPackets interface{}

    // Output Interface in string format. The type is string.
    OutgoingInterfaceString interface{}

    // Output Label in string format. The type is string.
    OutgoingLabelString interface{}

    // Prefix Or ID. The type is string.
    PrefixOrId interface{}

    // Next hop address in string format. The type is string.
    LabelInformationNextHopString interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationRouteVersion interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationTimeInMilliSeconds interface{}

    // Detail label info.
    LabelInformationDetail MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail

    // Path's Hash info in case of exact-route command.
    ExactRouteHashInfo MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetFilter() yfilter.YFilter { return labelInformation.YFilter }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) SetFilter(yf yfilter.YFilter) { labelInformation.YFilter = yf }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetGoName(yname string) string {
    if yname == "label-information-type" { return "LabelInformationType" }
    if yname == "local-label" { return "LocalLabel" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "mpls-adjacency-flags" { return "MplsAdjacencyFlags" }
    if yname == "tunnel-id-present" { return "TunnelIdPresent" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-physical-interface" { return "OutgoingPhysicalInterface" }
    if yname == "outgoing-parent-interface" { return "OutgoingParentInterface" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "label-information-path-index" { return "LabelInformationPathIndex" }
    if yname == "label-information-next-hop-type" { return "LabelInformationNextHopType" }
    if yname == "label-information-next-hop-protocol" { return "LabelInformationNextHopProtocol" }
    if yname == "tx-bytes" { return "TxBytes" }
    if yname == "tx-packets" { return "TxPackets" }
    if yname == "outgoing-interface-string" { return "OutgoingInterfaceString" }
    if yname == "outgoing-label-string" { return "OutgoingLabelString" }
    if yname == "prefix-or-id" { return "PrefixOrId" }
    if yname == "label-information-next-hop-string" { return "LabelInformationNextHopString" }
    if yname == "label-information-route-version" { return "LabelInformationRouteVersion" }
    if yname == "label-information-time-in-milli-seconds" { return "LabelInformationTimeInMilliSeconds" }
    if yname == "label-information-detail" { return "LabelInformationDetail" }
    if yname == "exact-route-hash-info" { return "ExactRouteHashInfo" }
    return ""
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetSegmentPath() string {
    return "label-information"
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-information-detail" {
        return &labelInformation.LabelInformationDetail
    }
    if childYangName == "exact-route-hash-info" {
        return &labelInformation.ExactRouteHashInfo
    }
    return nil
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-information-detail"] = &labelInformation.LabelInformationDetail
    children["exact-route-hash-info"] = &labelInformation.ExactRouteHashInfo
    return children
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-information-type"] = labelInformation.LabelInformationType
    leafs["local-label"] = labelInformation.LocalLabel
    leafs["outgoing-label"] = labelInformation.OutgoingLabel
    leafs["mpls-adjacency-flags"] = labelInformation.MplsAdjacencyFlags
    leafs["tunnel-id-present"] = labelInformation.TunnelIdPresent
    leafs["outgoing-interface"] = labelInformation.OutgoingInterface
    leafs["outgoing-physical-interface"] = labelInformation.OutgoingPhysicalInterface
    leafs["outgoing-parent-interface"] = labelInformation.OutgoingParentInterface
    leafs["tunnel-interface"] = labelInformation.TunnelInterface
    leafs["label-information-path-index"] = labelInformation.LabelInformationPathIndex
    leafs["label-information-next-hop-type"] = labelInformation.LabelInformationNextHopType
    leafs["label-information-next-hop-protocol"] = labelInformation.LabelInformationNextHopProtocol
    leafs["tx-bytes"] = labelInformation.TxBytes
    leafs["tx-packets"] = labelInformation.TxPackets
    leafs["outgoing-interface-string"] = labelInformation.OutgoingInterfaceString
    leafs["outgoing-label-string"] = labelInformation.OutgoingLabelString
    leafs["prefix-or-id"] = labelInformation.PrefixOrId
    leafs["label-information-next-hop-string"] = labelInformation.LabelInformationNextHopString
    leafs["label-information-route-version"] = labelInformation.LabelInformationRouteVersion
    leafs["label-information-time-in-milli-seconds"] = labelInformation.LabelInformationTimeInMilliSeconds
    return leafs
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetBundleName() string { return "cisco_ios_xr" }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetYangName() string { return "label-information" }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) SetParent(parent types.Entity) { labelInformation.parent = parent }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetParent() types.Entity { return labelInformation.parent }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation) GetParentYangName() string { return "forwarding-detail" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail
// Detail label info
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L3 MTU. The type is interface{} with range: 0..4294967295.
    L3Mtu interface{}

    // Total encapsulation size: L2 + MPLS. The type is interface{} with range:
    // 0..4294967295.
    TotalEncapsulationSize interface{}

    // Length of L2 encapsulation. The type is interface{} with range:
    // 0..4294967295.
    MacSize interface{}

    // Number of packets switched. The type is interface{} with range:
    // 0..18446744073709551615.
    TransmitNumberOfPacketsSwitched interface{}

    // Number of Bytes switched. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TransmitNumberOfBytesSwitched interface{}

    // Status. The type is interface{} with range: -2147483648..2147483647.
    Status interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // The address family (V4/V6) . The type is Proto.
    NextHopProtocol interface{}

    // Next hop address in string format. The type is string.
    NextHopString interface{}

    // Label stack. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack.
    LabelStack []MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetFilter() yfilter.YFilter { return labelInformationDetail.YFilter }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) SetFilter(yf yfilter.YFilter) { labelInformationDetail.YFilter = yf }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetGoName(yname string) string {
    if yname == "l3-mtu" { return "L3Mtu" }
    if yname == "total-encapsulation-size" { return "TotalEncapsulationSize" }
    if yname == "mac-size" { return "MacSize" }
    if yname == "transmit-number-of-packets-switched" { return "TransmitNumberOfPacketsSwitched" }
    if yname == "transmit-number-of-bytes-switched" { return "TransmitNumberOfBytesSwitched" }
    if yname == "status" { return "Status" }
    if yname == "next-hop-interface" { return "NextHopInterface" }
    if yname == "next-hop-protocol" { return "NextHopProtocol" }
    if yname == "next-hop-string" { return "NextHopString" }
    if yname == "label-stack" { return "LabelStack" }
    return ""
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetSegmentPath() string {
    return "label-information-detail"
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-stack" {
        for _, c := range labelInformationDetail.LabelStack {
            if labelInformationDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack{}
        labelInformationDetail.LabelStack = append(labelInformationDetail.LabelStack, child)
        return &labelInformationDetail.LabelStack[len(labelInformationDetail.LabelStack)-1]
    }
    return nil
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelInformationDetail.LabelStack {
        children[labelInformationDetail.LabelStack[i].GetSegmentPath()] = &labelInformationDetail.LabelStack[i]
    }
    return children
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l3-mtu"] = labelInformationDetail.L3Mtu
    leafs["total-encapsulation-size"] = labelInformationDetail.TotalEncapsulationSize
    leafs["mac-size"] = labelInformationDetail.MacSize
    leafs["transmit-number-of-packets-switched"] = labelInformationDetail.TransmitNumberOfPacketsSwitched
    leafs["transmit-number-of-bytes-switched"] = labelInformationDetail.TransmitNumberOfBytesSwitched
    leafs["status"] = labelInformationDetail.Status
    leafs["next-hop-interface"] = labelInformationDetail.NextHopInterface
    leafs["next-hop-protocol"] = labelInformationDetail.NextHopProtocol
    leafs["next-hop-string"] = labelInformationDetail.NextHopString
    return leafs
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetBundleName() string { return "cisco_ios_xr" }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetYangName() string { return "label-information-detail" }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) SetParent(parent types.Entity) { labelInformationDetail.parent = parent }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetParent() types.Entity { return labelInformationDetail.parent }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail) GetParentYangName() string { return "label-information" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack
// Label stack
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetFilter() yfilter.YFilter { return labelStack.YFilter }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) SetFilter(yf yfilter.YFilter) { labelStack.YFilter = yf }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetSegmentPath() string {
    return "label-stack"
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelStack.Entry
    return leafs
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetYangName() string { return "label-stack" }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) SetParent(parent types.Entity) { labelStack.parent = parent }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetParent() types.Entity { return labelStack.parent }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_LabelInformationDetail_LabelStack) GetParentYangName() string { return "label-information-detail" }

// MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo
// Path's Hash info in case of exact-route command
type MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Hash Index valid?. The type is bool.
    HashIndexIsValid interface{}

    // Hash Index value. The type is interface{} with range: 0..255.
    HashIndex interface{}
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetFilter() yfilter.YFilter { return exactRouteHashInfo.YFilter }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) SetFilter(yf yfilter.YFilter) { exactRouteHashInfo.YFilter = yf }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetGoName(yname string) string {
    if yname == "hash-index-is-valid" { return "HashIndexIsValid" }
    if yname == "hash-index" { return "HashIndex" }
    return ""
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetSegmentPath() string {
    return "exact-route-hash-info"
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hash-index-is-valid"] = exactRouteHashInfo.HashIndexIsValid
    leafs["hash-index"] = exactRouteHashInfo.HashIndex
    return leafs
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetBundleName() string { return "cisco_ios_xr" }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetYangName() string { return "exact-route-hash-info" }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) SetParent(parent types.Entity) { exactRouteHashInfo.parent = parent }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetParent() types.Entity { return exactRouteHashInfo.parent }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_ForwardingDetails_ForwardingDetail_LabelInformation_ExactRouteHashInfo) GetParentYangName() string { return "label-information" }

// MplsForwarding_Nodes_Node_LabelFib_Informations
// Forwarding filtering details
type MplsForwarding_Nodes_Node_LabelFib_Informations struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding information. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_Informations_Information.
    Information []MplsForwarding_Nodes_Node_LabelFib_Informations_Information
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetFilter() yfilter.YFilter { return informations.YFilter }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) SetFilter(yf yfilter.YFilter) { informations.YFilter = yf }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetGoName(yname string) string {
    if yname == "information" { return "Information" }
    return ""
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetSegmentPath() string {
    return "informations"
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "information" {
        for _, c := range informations.Information {
            if informations.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_Informations_Information{}
        informations.Information = append(informations.Information, child)
        return &informations.Information[len(informations.Information)-1]
    }
    return nil
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range informations.Information {
        children[informations.Information[i].GetSegmentPath()] = &informations.Information[i]
    }
    return children
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetBundleName() string { return "cisco_ios_xr" }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetYangName() string { return "informations" }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) SetParent(parent types.Entity) { informations.parent = parent }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetParent() types.Entity { return informations.parent }

func (informations *MplsForwarding_Nodes_Node_LabelFib_Informations) GetParentYangName() string { return "label-fib" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information
// MPLS forwarding information
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local label value. The type is interface{} with range: 16..1048575.
    LabelValue interface{}

    // End of stack flag. The type is Mplseos.
    Eos interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LeafLocalLabel interface{}

    // EOS bit. The type is interface{} with range: 0..4294967295.
    EosBit interface{}

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Number of references to the leaf. The type is interface{} with range:
    // 0..4294967295.
    LeafReferanceCount interface{}

    // The leaf flags. The type is interface{} with range: 0..4294967295.
    LeafFlags interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    PathListReferanceCount interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    LdiReferanceCount interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The LDI type. The type is interface{} with range: 0..4294967295.
    LdiType interface{}

    // The pointer to the LDI. The type is interface{} with range: 0..4294967295.
    LdiPointer interface{}

    // The LW-LDI type. The type is interface{} with range: 0..4294967295.
    LwLdiType interface{}

    // The pointer to the LW-LDI. The type is interface{} with range:
    // 0..4294967295.
    LwLdiPointer interface{}

    // The LW-LDI refcounter. The type is interface{} with range: 0..4294967295.
    LwLdiRefernaceCount interface{}

    // The pointer to the shared LDI in LW-LDI. The type is interface{} with
    // range: 0..4294967295.
    LwSharedLdiPointer interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The AFI table ID. The type is interface{} with range: 0..4294967295.
    AfiTableId interface{}

    // The unicast or multicast label. The type is bool.
    MulticastLabel interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LeafTimeInMilliSeconds interface{}

    // LDI-info in FIB leaf.
    LdiInformation MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation

    // The multicast info.
    MulticastInformation MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation

    // Label-infos in FIB leaf. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation.
    LabelInformation []MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetGoName(yname string) string {
    if yname == "label-value" { return "LabelValue" }
    if yname == "eos" { return "Eos" }
    if yname == "leaf-local-label" { return "LeafLocalLabel" }
    if yname == "eos-bit" { return "EosBit" }
    if yname == "hardware-information" { return "HardwareInformation" }
    if yname == "leaf-referance-count" { return "LeafReferanceCount" }
    if yname == "leaf-flags" { return "LeafFlags" }
    if yname == "path-list-referance-count" { return "PathListReferanceCount" }
    if yname == "path-list-flags" { return "PathListFlags" }
    if yname == "ldi-referance-count" { return "LdiReferanceCount" }
    if yname == "ldi-flags" { return "LdiFlags" }
    if yname == "ldi-type" { return "LdiType" }
    if yname == "ldi-pointer" { return "LdiPointer" }
    if yname == "lw-ldi-type" { return "LwLdiType" }
    if yname == "lw-ldi-pointer" { return "LwLdiPointer" }
    if yname == "lw-ldi-refernace-count" { return "LwLdiRefernaceCount" }
    if yname == "lw-shared-ldi-pointer" { return "LwSharedLdiPointer" }
    if yname == "lspa-flags" { return "LspaFlags" }
    if yname == "afi-table-id" { return "AfiTableId" }
    if yname == "multicast-label" { return "MulticastLabel" }
    if yname == "leaf-time-in-milli-seconds" { return "LeafTimeInMilliSeconds" }
    if yname == "ldi-information" { return "LdiInformation" }
    if yname == "multicast-information" { return "MulticastInformation" }
    if yname == "label-information" { return "LabelInformation" }
    return ""
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetSegmentPath() string {
    return "information"
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ldi-information" {
        return &information.LdiInformation
    }
    if childYangName == "multicast-information" {
        return &information.MulticastInformation
    }
    if childYangName == "label-information" {
        for _, c := range information.LabelInformation {
            if information.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation{}
        information.LabelInformation = append(information.LabelInformation, child)
        return &information.LabelInformation[len(information.LabelInformation)-1]
    }
    return nil
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ldi-information"] = &information.LdiInformation
    children["multicast-information"] = &information.MulticastInformation
    for i := range information.LabelInformation {
        children[information.LabelInformation[i].GetSegmentPath()] = &information.LabelInformation[i]
    }
    return children
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-value"] = information.LabelValue
    leafs["eos"] = information.Eos
    leafs["leaf-local-label"] = information.LeafLocalLabel
    leafs["eos-bit"] = information.EosBit
    leafs["hardware-information"] = information.HardwareInformation
    leafs["leaf-referance-count"] = information.LeafReferanceCount
    leafs["leaf-flags"] = information.LeafFlags
    leafs["path-list-referance-count"] = information.PathListReferanceCount
    leafs["path-list-flags"] = information.PathListFlags
    leafs["ldi-referance-count"] = information.LdiReferanceCount
    leafs["ldi-flags"] = information.LdiFlags
    leafs["ldi-type"] = information.LdiType
    leafs["ldi-pointer"] = information.LdiPointer
    leafs["lw-ldi-type"] = information.LwLdiType
    leafs["lw-ldi-pointer"] = information.LwLdiPointer
    leafs["lw-ldi-refernace-count"] = information.LwLdiRefernaceCount
    leafs["lw-shared-ldi-pointer"] = information.LwSharedLdiPointer
    leafs["lspa-flags"] = information.LspaFlags
    leafs["afi-table-id"] = information.AfiTableId
    leafs["multicast-label"] = information.MulticastLabel
    leafs["leaf-time-in-milli-seconds"] = information.LeafTimeInMilliSeconds
    return leafs
}

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetYangName() string { return "information" }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetParent() types.Entity { return information.parent }

func (information *MplsForwarding_Nodes_Node_LabelFib_Informations_Information) GetParentYangName() string { return "informations" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation
// LDI-info in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LdiHardwareInformation interface{}
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetFilter() yfilter.YFilter { return ldiInformation.YFilter }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) SetFilter(yf yfilter.YFilter) { ldiInformation.YFilter = yf }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetGoName(yname string) string {
    if yname == "ldi-hardware-information" { return "LdiHardwareInformation" }
    return ""
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetSegmentPath() string {
    return "ldi-information"
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ldi-hardware-information"] = ldiInformation.LdiHardwareInformation
    return leafs
}

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetYangName() string { return "ldi-information" }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) SetParent(parent types.Entity) { ldiInformation.parent = parent }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetParent() types.Entity { return ldiInformation.parent }

func (ldiInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LdiInformation) GetParentYangName() string { return "information" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation
// The multicast info
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MOL base flags. The type is interface{} with range: 0..4294967295.
    MulticastMolBaseFlags interface{}

    // MOL flags. The type is interface{} with range: 0..65535.
    MulticastMolFlags interface{}

    // MOL refcount. The type is interface{} with range: 0..65535.
    MulticastMolReferanceCount interface{}

    // multicast mpls tunnel. The type is string with pattern: [a-zA-Z0-9./-]+.
    MulticastTunnelInterfaceHandler interface{}

    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes. The
    // type is interface{} with range: 0..4294967295.
    MulticastTunnelId interface{}

    // multicast nhinfo for p2mp TE Head. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelNextHopInformation interface{}

    // multicast LSPVIF for MLDP Tunnels. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLspvif interface{}

    // num multicast mpls output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsOutputPaths interface{}

    // num multicast mpls prot output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsProtocolOutputPaths interface{}

    // num multicast mpls local output paths. The type is interface{} with range:
    // 0..65535.
    MulticastMplsLocalOutputPaths interface{}

    // The multicast RPF-ID . The type is interface{} with range: 0..4294967295.
    MulticastRpfId interface{}

    // The multicast ENCAP-ID . The type is interface{} with range: 0..4294967295.
    MulticastEncapId interface{}

    // The multicast platform data len. The type is interface{} with range:
    // 0..255.
    MulticastPlatformDataLength interface{}

    // The multicast platform data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    MulticastPlatformData interface{}
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetFilter() yfilter.YFilter { return multicastInformation.YFilter }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) SetFilter(yf yfilter.YFilter) { multicastInformation.YFilter = yf }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetGoName(yname string) string {
    if yname == "multicast-mol-base-flags" { return "MulticastMolBaseFlags" }
    if yname == "multicast-mol-flags" { return "MulticastMolFlags" }
    if yname == "multicast-mol-referance-count" { return "MulticastMolReferanceCount" }
    if yname == "multicast-tunnel-interface-handler" { return "MulticastTunnelInterfaceHandler" }
    if yname == "multicast-tunnel-id" { return "MulticastTunnelId" }
    if yname == "multicast-tunnel-next-hop-information" { return "MulticastTunnelNextHopInformation" }
    if yname == "multicast-tunnel-lspvif" { return "MulticastTunnelLspvif" }
    if yname == "multicast-mpls-output-paths" { return "MulticastMplsOutputPaths" }
    if yname == "multicast-mpls-protocol-output-paths" { return "MulticastMplsProtocolOutputPaths" }
    if yname == "multicast-mpls-local-output-paths" { return "MulticastMplsLocalOutputPaths" }
    if yname == "multicast-rpf-id" { return "MulticastRpfId" }
    if yname == "multicast-encap-id" { return "MulticastEncapId" }
    if yname == "multicast-platform-data-length" { return "MulticastPlatformDataLength" }
    if yname == "multicast-platform-data" { return "MulticastPlatformData" }
    return ""
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetSegmentPath() string {
    return "multicast-information"
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["multicast-mol-base-flags"] = multicastInformation.MulticastMolBaseFlags
    leafs["multicast-mol-flags"] = multicastInformation.MulticastMolFlags
    leafs["multicast-mol-referance-count"] = multicastInformation.MulticastMolReferanceCount
    leafs["multicast-tunnel-interface-handler"] = multicastInformation.MulticastTunnelInterfaceHandler
    leafs["multicast-tunnel-id"] = multicastInformation.MulticastTunnelId
    leafs["multicast-tunnel-next-hop-information"] = multicastInformation.MulticastTunnelNextHopInformation
    leafs["multicast-tunnel-lspvif"] = multicastInformation.MulticastTunnelLspvif
    leafs["multicast-mpls-output-paths"] = multicastInformation.MulticastMplsOutputPaths
    leafs["multicast-mpls-protocol-output-paths"] = multicastInformation.MulticastMplsProtocolOutputPaths
    leafs["multicast-mpls-local-output-paths"] = multicastInformation.MulticastMplsLocalOutputPaths
    leafs["multicast-rpf-id"] = multicastInformation.MulticastRpfId
    leafs["multicast-encap-id"] = multicastInformation.MulticastEncapId
    leafs["multicast-platform-data-length"] = multicastInformation.MulticastPlatformDataLength
    leafs["multicast-platform-data"] = multicastInformation.MulticastPlatformData
    return leafs
}

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetBundleName() string { return "cisco_ios_xr" }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetYangName() string { return "multicast-information" }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) SetParent(parent types.Entity) { multicastInformation.parent = parent }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetParent() types.Entity { return multicastInformation.parent }

func (multicastInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_MulticastInformation) GetParentYangName() string { return "information" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation
// Label-infos in FIB leaf
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label-Info type. The type is interface{} with range: 0..4294967295.
    LabelInformationType interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // MPLS Adjacency flags. The type is interface{} with range: 0..4294967295.
    MplsAdjacencyFlags interface{}

    // Tunnel id present?. The type is bool.
    TunnelIdPresent interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing Physical Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingPhysicalInterface interface{}

    // Outgoing Parent Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingParentInterface interface{}

    // Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // LabelInformationPathIndex. The type is interface{} with range:
    // 0..4294967295.
    LabelInformationPathIndex interface{}

    // NHinfo Type. The type is NextHop.
    LabelInformationNextHopType interface{}

    // The address family (v4/v6) . The type is Proto.
    LabelInformationNextHopProtocol interface{}

    // Bytes transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TxBytes interface{}

    // Packets transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615.
    TxPackets interface{}

    // Output Interface in string format. The type is string.
    OutgoingInterfaceString interface{}

    // Output Label in string format. The type is string.
    OutgoingLabelString interface{}

    // Prefix Or ID. The type is string.
    PrefixOrId interface{}

    // Next hop address in string format. The type is string.
    LabelInformationNextHopString interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationRouteVersion interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationTimeInMilliSeconds interface{}

    // Detail label info.
    LabelInformationDetail MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail

    // Path's Hash info in case of exact-route command.
    ExactRouteHashInfo MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetFilter() yfilter.YFilter { return labelInformation.YFilter }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) SetFilter(yf yfilter.YFilter) { labelInformation.YFilter = yf }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetGoName(yname string) string {
    if yname == "label-information-type" { return "LabelInformationType" }
    if yname == "local-label" { return "LocalLabel" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "mpls-adjacency-flags" { return "MplsAdjacencyFlags" }
    if yname == "tunnel-id-present" { return "TunnelIdPresent" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-physical-interface" { return "OutgoingPhysicalInterface" }
    if yname == "outgoing-parent-interface" { return "OutgoingParentInterface" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "label-information-path-index" { return "LabelInformationPathIndex" }
    if yname == "label-information-next-hop-type" { return "LabelInformationNextHopType" }
    if yname == "label-information-next-hop-protocol" { return "LabelInformationNextHopProtocol" }
    if yname == "tx-bytes" { return "TxBytes" }
    if yname == "tx-packets" { return "TxPackets" }
    if yname == "outgoing-interface-string" { return "OutgoingInterfaceString" }
    if yname == "outgoing-label-string" { return "OutgoingLabelString" }
    if yname == "prefix-or-id" { return "PrefixOrId" }
    if yname == "label-information-next-hop-string" { return "LabelInformationNextHopString" }
    if yname == "label-information-route-version" { return "LabelInformationRouteVersion" }
    if yname == "label-information-time-in-milli-seconds" { return "LabelInformationTimeInMilliSeconds" }
    if yname == "label-information-detail" { return "LabelInformationDetail" }
    if yname == "exact-route-hash-info" { return "ExactRouteHashInfo" }
    return ""
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetSegmentPath() string {
    return "label-information"
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-information-detail" {
        return &labelInformation.LabelInformationDetail
    }
    if childYangName == "exact-route-hash-info" {
        return &labelInformation.ExactRouteHashInfo
    }
    return nil
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-information-detail"] = &labelInformation.LabelInformationDetail
    children["exact-route-hash-info"] = &labelInformation.ExactRouteHashInfo
    return children
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-information-type"] = labelInformation.LabelInformationType
    leafs["local-label"] = labelInformation.LocalLabel
    leafs["outgoing-label"] = labelInformation.OutgoingLabel
    leafs["mpls-adjacency-flags"] = labelInformation.MplsAdjacencyFlags
    leafs["tunnel-id-present"] = labelInformation.TunnelIdPresent
    leafs["outgoing-interface"] = labelInformation.OutgoingInterface
    leafs["outgoing-physical-interface"] = labelInformation.OutgoingPhysicalInterface
    leafs["outgoing-parent-interface"] = labelInformation.OutgoingParentInterface
    leafs["tunnel-interface"] = labelInformation.TunnelInterface
    leafs["label-information-path-index"] = labelInformation.LabelInformationPathIndex
    leafs["label-information-next-hop-type"] = labelInformation.LabelInformationNextHopType
    leafs["label-information-next-hop-protocol"] = labelInformation.LabelInformationNextHopProtocol
    leafs["tx-bytes"] = labelInformation.TxBytes
    leafs["tx-packets"] = labelInformation.TxPackets
    leafs["outgoing-interface-string"] = labelInformation.OutgoingInterfaceString
    leafs["outgoing-label-string"] = labelInformation.OutgoingLabelString
    leafs["prefix-or-id"] = labelInformation.PrefixOrId
    leafs["label-information-next-hop-string"] = labelInformation.LabelInformationNextHopString
    leafs["label-information-route-version"] = labelInformation.LabelInformationRouteVersion
    leafs["label-information-time-in-milli-seconds"] = labelInformation.LabelInformationTimeInMilliSeconds
    return leafs
}

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetBundleName() string { return "cisco_ios_xr" }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetYangName() string { return "label-information" }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) SetParent(parent types.Entity) { labelInformation.parent = parent }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetParent() types.Entity { return labelInformation.parent }

func (labelInformation *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation) GetParentYangName() string { return "information" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail
// Detail label info
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L3 MTU. The type is interface{} with range: 0..4294967295.
    L3Mtu interface{}

    // Total encapsulation size: L2 + MPLS. The type is interface{} with range:
    // 0..4294967295.
    TotalEncapsulationSize interface{}

    // Length of L2 encapsulation. The type is interface{} with range:
    // 0..4294967295.
    MacSize interface{}

    // Number of packets switched. The type is interface{} with range:
    // 0..18446744073709551615.
    TransmitNumberOfPacketsSwitched interface{}

    // Number of Bytes switched. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TransmitNumberOfBytesSwitched interface{}

    // Status. The type is interface{} with range: -2147483648..2147483647.
    Status interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // The address family (V4/V6) . The type is Proto.
    NextHopProtocol interface{}

    // Next hop address in string format. The type is string.
    NextHopString interface{}

    // Label stack. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack.
    LabelStack []MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetFilter() yfilter.YFilter { return labelInformationDetail.YFilter }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) SetFilter(yf yfilter.YFilter) { labelInformationDetail.YFilter = yf }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetGoName(yname string) string {
    if yname == "l3-mtu" { return "L3Mtu" }
    if yname == "total-encapsulation-size" { return "TotalEncapsulationSize" }
    if yname == "mac-size" { return "MacSize" }
    if yname == "transmit-number-of-packets-switched" { return "TransmitNumberOfPacketsSwitched" }
    if yname == "transmit-number-of-bytes-switched" { return "TransmitNumberOfBytesSwitched" }
    if yname == "status" { return "Status" }
    if yname == "next-hop-interface" { return "NextHopInterface" }
    if yname == "next-hop-protocol" { return "NextHopProtocol" }
    if yname == "next-hop-string" { return "NextHopString" }
    if yname == "label-stack" { return "LabelStack" }
    return ""
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetSegmentPath() string {
    return "label-information-detail"
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-stack" {
        for _, c := range labelInformationDetail.LabelStack {
            if labelInformationDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack{}
        labelInformationDetail.LabelStack = append(labelInformationDetail.LabelStack, child)
        return &labelInformationDetail.LabelStack[len(labelInformationDetail.LabelStack)-1]
    }
    return nil
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelInformationDetail.LabelStack {
        children[labelInformationDetail.LabelStack[i].GetSegmentPath()] = &labelInformationDetail.LabelStack[i]
    }
    return children
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l3-mtu"] = labelInformationDetail.L3Mtu
    leafs["total-encapsulation-size"] = labelInformationDetail.TotalEncapsulationSize
    leafs["mac-size"] = labelInformationDetail.MacSize
    leafs["transmit-number-of-packets-switched"] = labelInformationDetail.TransmitNumberOfPacketsSwitched
    leafs["transmit-number-of-bytes-switched"] = labelInformationDetail.TransmitNumberOfBytesSwitched
    leafs["status"] = labelInformationDetail.Status
    leafs["next-hop-interface"] = labelInformationDetail.NextHopInterface
    leafs["next-hop-protocol"] = labelInformationDetail.NextHopProtocol
    leafs["next-hop-string"] = labelInformationDetail.NextHopString
    return leafs
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetBundleName() string { return "cisco_ios_xr" }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetYangName() string { return "label-information-detail" }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) SetParent(parent types.Entity) { labelInformationDetail.parent = parent }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetParent() types.Entity { return labelInformationDetail.parent }

func (labelInformationDetail *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail) GetParentYangName() string { return "label-information" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack
// Label stack
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetFilter() yfilter.YFilter { return labelStack.YFilter }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) SetFilter(yf yfilter.YFilter) { labelStack.YFilter = yf }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetSegmentPath() string {
    return "label-stack"
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelStack.Entry
    return leafs
}

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetYangName() string { return "label-stack" }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) SetParent(parent types.Entity) { labelStack.parent = parent }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetParent() types.Entity { return labelStack.parent }

func (labelStack *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_LabelInformationDetail_LabelStack) GetParentYangName() string { return "label-information-detail" }

// MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo
// Path's Hash info in case of exact-route command
type MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Hash Index valid?. The type is bool.
    HashIndexIsValid interface{}

    // Hash Index value. The type is interface{} with range: 0..255.
    HashIndex interface{}
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetFilter() yfilter.YFilter { return exactRouteHashInfo.YFilter }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) SetFilter(yf yfilter.YFilter) { exactRouteHashInfo.YFilter = yf }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetGoName(yname string) string {
    if yname == "hash-index-is-valid" { return "HashIndexIsValid" }
    if yname == "hash-index" { return "HashIndex" }
    return ""
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetSegmentPath() string {
    return "exact-route-hash-info"
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hash-index-is-valid"] = exactRouteHashInfo.HashIndexIsValid
    leafs["hash-index"] = exactRouteHashInfo.HashIndex
    return leafs
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetBundleName() string { return "cisco_ios_xr" }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetYangName() string { return "exact-route-hash-info" }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) SetParent(parent types.Entity) { exactRouteHashInfo.parent = parent }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetParent() types.Entity { return exactRouteHashInfo.parent }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_LabelFib_Informations_Information_LabelInformation_ExactRouteHashInfo) GetParentYangName() string { return "label-information" }

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity
// MPLS label security
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS label security interface table.
    Interfaces MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces

    // MPLS label security summary.
    Summary MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetFilter() yfilter.YFilter { return labelSecurity.YFilter }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) SetFilter(yf yfilter.YFilter) { labelSecurity.YFilter = yf }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "summary" { return "Summary" }
    return ""
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetSegmentPath() string {
    return "label-security"
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &labelSecurity.Interfaces
    }
    if childYangName == "summary" {
        return &labelSecurity.Summary
    }
    return nil
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &labelSecurity.Interfaces
    children["summary"] = &labelSecurity.Summary
    return children
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetBundleName() string { return "cisco_ios_xr" }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetYangName() string { return "label-security" }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) SetParent(parent types.Entity) { labelSecurity.parent = parent }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetParent() types.Entity { return labelSecurity.parent }

func (labelSecurity *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity) GetParentYangName() string { return "label-fib" }

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces
// MPLS label security interface table
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify interface Name. The type is slice of
    // MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface.
    Interface []MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces) GetParentYangName() string { return "label-security" }

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface
// Specify interface Name
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // RPF is enabled on interface. The type is bool.
    RpfEnabled interface{}

    // RPF stats supported per interface. The type is bool.
    RpfSupported interface{}

    // Multi-label drop is enabled on interface. The type is bool.
    MldEnabled interface{}

    // Multi-label drop counters are supported per interface. The type is bool.
    MldSupported interface{}

    // RPF drops. The type is interface{} with range: 0..18446744073709551615.
    RpfDrops interface{}

    // Multi-label drops. The type is interface{} with range:
    // 0..18446744073709551615.
    MultiLabelDrops interface{}

    // RPF interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    Rpfifh interface{}
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "rpf-enabled" { return "RpfEnabled" }
    if yname == "rpf-supported" { return "RpfSupported" }
    if yname == "mld-enabled" { return "MldEnabled" }
    if yname == "mld-supported" { return "MldSupported" }
    if yname == "rpf-drops" { return "RpfDrops" }
    if yname == "multi-label-drops" { return "MultiLabelDrops" }
    if yname == "rpfifh" { return "Rpfifh" }
    return ""
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["rpf-enabled"] = self.RpfEnabled
    leafs["rpf-supported"] = self.RpfSupported
    leafs["mld-enabled"] = self.MldEnabled
    leafs["mld-supported"] = self.MldSupported
    leafs["rpf-drops"] = self.RpfDrops
    leafs["multi-label-drops"] = self.MultiLabelDrops
    leafs["rpfifh"] = self.Rpfifh
    return leafs
}

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary
// MPLS label security summary
type MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF drops. The type is interface{} with range: 0..18446744073709551615.
    RpfDrops interface{}

    // Multi-label drops. The type is interface{} with range:
    // 0..18446744073709551615.
    MultiLabelDrops interface{}
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetGoName(yname string) string {
    if yname == "rpf-drops" { return "RpfDrops" }
    if yname == "multi-label-drops" { return "MultiLabelDrops" }
    return ""
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-drops"] = summary.RpfDrops
    leafs["multi-label-drops"] = summary.MultiLabelDrops
    return leafs
}

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetYangName() string { return "summary" }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetParent() types.Entity { return summary.parent }

func (summary *MplsForwarding_Nodes_Node_LabelFib_LabelSecurity_Summary) GetParentYangName() string { return "label-security" }

// MplsForwarding_Nodes_Node_Tunnel
// TE Tunnel information
type MplsForwarding_Nodes_Node_Tunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Forwarding details for TE tunnels.
    ForwardingTunnels MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetFilter() yfilter.YFilter { return tunnel.YFilter }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) SetFilter(yf yfilter.YFilter) { tunnel.YFilter = yf }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetGoName(yname string) string {
    if yname == "forwarding-tunnels" { return "ForwardingTunnels" }
    return ""
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetSegmentPath() string {
    return "tunnel"
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarding-tunnels" {
        return &tunnel.ForwardingTunnels
    }
    return nil
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarding-tunnels"] = &tunnel.ForwardingTunnels
    return children
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetBundleName() string { return "cisco_ios_xr" }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetYangName() string { return "tunnel" }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) SetParent(parent types.Entity) { tunnel.parent = parent }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetParent() types.Entity { return tunnel.parent }

func (tunnel *MplsForwarding_Nodes_Node_Tunnel) GetParentYangName() string { return "node" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels
// Forwarding details for TE tunnels
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Forwarding information for the TE tunnel. The type is slice of
    // MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel.
    ForwardingTunnel []MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetFilter() yfilter.YFilter { return forwardingTunnels.YFilter }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) SetFilter(yf yfilter.YFilter) { forwardingTunnels.YFilter = yf }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetGoName(yname string) string {
    if yname == "forwarding-tunnel" { return "ForwardingTunnel" }
    return ""
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetSegmentPath() string {
    return "forwarding-tunnels"
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarding-tunnel" {
        for _, c := range forwardingTunnels.ForwardingTunnel {
            if forwardingTunnels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel{}
        forwardingTunnels.ForwardingTunnel = append(forwardingTunnels.ForwardingTunnel, child)
        return &forwardingTunnels.ForwardingTunnel[len(forwardingTunnels.ForwardingTunnel)-1]
    }
    return nil
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range forwardingTunnels.ForwardingTunnel {
        children[forwardingTunnels.ForwardingTunnel[i].GetSegmentPath()] = &forwardingTunnels.ForwardingTunnel[i]
    }
    return children
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetYangName() string { return "forwarding-tunnels" }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) SetParent(parent types.Entity) { forwardingTunnels.parent = parent }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetParent() types.Entity { return forwardingTunnels.parent }

func (forwardingTunnels *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels) GetParentYangName() string { return "tunnel" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel
// Forwarding information for the TE tunnel
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Tunnel head information.
    TunnelInfo MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo

    // Tunnel forwarding information.
    Fwdg MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetFilter() yfilter.YFilter { return forwardingTunnel.YFilter }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) SetFilter(yf yfilter.YFilter) { forwardingTunnel.YFilter = yf }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "tunnel-info" { return "TunnelInfo" }
    if yname == "fwdg" { return "Fwdg" }
    return ""
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetSegmentPath() string {
    return "forwarding-tunnel" + "[interface-name='" + fmt.Sprintf("%v", forwardingTunnel.InterfaceName) + "']"
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-info" {
        return &forwardingTunnel.TunnelInfo
    }
    if childYangName == "fwdg" {
        return &forwardingTunnel.Fwdg
    }
    return nil
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-info"] = &forwardingTunnel.TunnelInfo
    children["fwdg"] = &forwardingTunnel.Fwdg
    return children
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = forwardingTunnel.InterfaceName
    return leafs
}

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetYangName() string { return "forwarding-tunnel" }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) SetParent(parent types.Entity) { forwardingTunnel.parent = parent }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetParent() types.Entity { return forwardingTunnel.parent }

func (forwardingTunnel *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel) GetParentYangName() string { return "forwarding-tunnels" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo
// Tunnel head information
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Tunnel Local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel Forward Class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load Metric. The type is interface{} with range: 0..255.
    TunnelLoadMetric interface{}

    // Is Tunnel SRTE. The type is bool.
    TunnelIsSrte interface{}

    // Tunnel head resolution is incomplete. The type is bool.
    TunnelResolutionIncomplete interface{}

    // Tunnel head resolition is inconsitent b/w TEhead and Local label. The type
    // is bool.
    TunnelResolutionInconsistent interface{}

    // Is Tunnel programmed as drop. The type is bool.
    TunnelIsProgrammedToDrop interface{}
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetFilter() yfilter.YFilter { return tunnelInfo.YFilter }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) SetFilter(yf yfilter.YFilter) { tunnelInfo.YFilter = yf }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetGoName(yname string) string {
    if yname == "tunnel-interface-name" { return "TunnelInterfaceName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "tunnel-is-srte" { return "TunnelIsSrte" }
    if yname == "tunnel-resolution-incomplete" { return "TunnelResolutionIncomplete" }
    if yname == "tunnel-resolution-inconsistent" { return "TunnelResolutionInconsistent" }
    if yname == "tunnel-is-programmed-to-drop" { return "TunnelIsProgrammedToDrop" }
    return ""
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetSegmentPath() string {
    return "tunnel-info"
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface-name"] = tunnelInfo.TunnelInterfaceName
    leafs["tunnel-local-label"] = tunnelInfo.TunnelLocalLabel
    leafs["tunnel-fwd-class"] = tunnelInfo.TunnelFwdClass
    leafs["tunnel-load-metric"] = tunnelInfo.TunnelLoadMetric
    leafs["tunnel-is-srte"] = tunnelInfo.TunnelIsSrte
    leafs["tunnel-resolution-incomplete"] = tunnelInfo.TunnelResolutionIncomplete
    leafs["tunnel-resolution-inconsistent"] = tunnelInfo.TunnelResolutionInconsistent
    leafs["tunnel-is-programmed-to-drop"] = tunnelInfo.TunnelIsProgrammedToDrop
    return leafs
}

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetYangName() string { return "tunnel-info" }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) SetParent(parent types.Entity) { tunnelInfo.parent = parent }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetParent() types.Entity { return tunnelInfo.parent }

func (tunnelInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_TunnelInfo) GetParentYangName() string { return "forwarding-tunnel" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg
// Tunnel forwarding information
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LeafLocalLabel interface{}

    // EOS bit. The type is interface{} with range: 0..4294967295.
    EosBit interface{}

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    HardwareInformation interface{}

    // Number of references to the leaf. The type is interface{} with range:
    // 0..4294967295.
    LeafReferanceCount interface{}

    // The leaf flags. The type is interface{} with range: 0..4294967295.
    LeafFlags interface{}

    // Number of references to the pathlist. The type is interface{} with range:
    // 0..4294967295.
    PathListReferanceCount interface{}

    // The pathlist flags. The type is interface{} with range: 0..4294967295.
    PathListFlags interface{}

    // Number of references to the LDI. The type is interface{} with range:
    // 0..4294967295.
    LdiReferanceCount interface{}

    // The LDI flags. The type is interface{} with range: 0..4294967295.
    LdiFlags interface{}

    // The LDI type. The type is interface{} with range: 0..4294967295.
    LdiType interface{}

    // The pointer to the LDI. The type is interface{} with range: 0..4294967295.
    LdiPointer interface{}

    // The LW-LDI type. The type is interface{} with range: 0..4294967295.
    LwLdiType interface{}

    // The pointer to the LW-LDI. The type is interface{} with range:
    // 0..4294967295.
    LwLdiPointer interface{}

    // The LW-LDI refcounter. The type is interface{} with range: 0..4294967295.
    LwLdiRefernaceCount interface{}

    // The pointer to the shared LDI in LW-LDI. The type is interface{} with
    // range: 0..4294967295.
    LwSharedLdiPointer interface{}

    // The LSPA flags. The type is interface{} with range: 0..4294967295.
    LspaFlags interface{}

    // The AFI table ID. The type is interface{} with range: 0..4294967295.
    AfiTableId interface{}

    // The unicast or multicast label. The type is bool.
    MulticastLabel interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LeafTimeInMilliSeconds interface{}

    // LDI-info in FIB leaf.
    LdiInformation MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation

    // The multicast info.
    MulticastInformation MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation

    // Label-infos in FIB leaf. The type is slice of
    // MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation.
    LabelInformation []MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetFilter() yfilter.YFilter { return fwdg.YFilter }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) SetFilter(yf yfilter.YFilter) { fwdg.YFilter = yf }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetGoName(yname string) string {
    if yname == "leaf-local-label" { return "LeafLocalLabel" }
    if yname == "eos-bit" { return "EosBit" }
    if yname == "hardware-information" { return "HardwareInformation" }
    if yname == "leaf-referance-count" { return "LeafReferanceCount" }
    if yname == "leaf-flags" { return "LeafFlags" }
    if yname == "path-list-referance-count" { return "PathListReferanceCount" }
    if yname == "path-list-flags" { return "PathListFlags" }
    if yname == "ldi-referance-count" { return "LdiReferanceCount" }
    if yname == "ldi-flags" { return "LdiFlags" }
    if yname == "ldi-type" { return "LdiType" }
    if yname == "ldi-pointer" { return "LdiPointer" }
    if yname == "lw-ldi-type" { return "LwLdiType" }
    if yname == "lw-ldi-pointer" { return "LwLdiPointer" }
    if yname == "lw-ldi-refernace-count" { return "LwLdiRefernaceCount" }
    if yname == "lw-shared-ldi-pointer" { return "LwSharedLdiPointer" }
    if yname == "lspa-flags" { return "LspaFlags" }
    if yname == "afi-table-id" { return "AfiTableId" }
    if yname == "multicast-label" { return "MulticastLabel" }
    if yname == "leaf-time-in-milli-seconds" { return "LeafTimeInMilliSeconds" }
    if yname == "ldi-information" { return "LdiInformation" }
    if yname == "multicast-information" { return "MulticastInformation" }
    if yname == "label-information" { return "LabelInformation" }
    return ""
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetSegmentPath() string {
    return "fwdg"
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ldi-information" {
        return &fwdg.LdiInformation
    }
    if childYangName == "multicast-information" {
        return &fwdg.MulticastInformation
    }
    if childYangName == "label-information" {
        for _, c := range fwdg.LabelInformation {
            if fwdg.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation{}
        fwdg.LabelInformation = append(fwdg.LabelInformation, child)
        return &fwdg.LabelInformation[len(fwdg.LabelInformation)-1]
    }
    return nil
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ldi-information"] = &fwdg.LdiInformation
    children["multicast-information"] = &fwdg.MulticastInformation
    for i := range fwdg.LabelInformation {
        children[fwdg.LabelInformation[i].GetSegmentPath()] = &fwdg.LabelInformation[i]
    }
    return children
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["leaf-local-label"] = fwdg.LeafLocalLabel
    leafs["eos-bit"] = fwdg.EosBit
    leafs["hardware-information"] = fwdg.HardwareInformation
    leafs["leaf-referance-count"] = fwdg.LeafReferanceCount
    leafs["leaf-flags"] = fwdg.LeafFlags
    leafs["path-list-referance-count"] = fwdg.PathListReferanceCount
    leafs["path-list-flags"] = fwdg.PathListFlags
    leafs["ldi-referance-count"] = fwdg.LdiReferanceCount
    leafs["ldi-flags"] = fwdg.LdiFlags
    leafs["ldi-type"] = fwdg.LdiType
    leafs["ldi-pointer"] = fwdg.LdiPointer
    leafs["lw-ldi-type"] = fwdg.LwLdiType
    leafs["lw-ldi-pointer"] = fwdg.LwLdiPointer
    leafs["lw-ldi-refernace-count"] = fwdg.LwLdiRefernaceCount
    leafs["lw-shared-ldi-pointer"] = fwdg.LwSharedLdiPointer
    leafs["lspa-flags"] = fwdg.LspaFlags
    leafs["afi-table-id"] = fwdg.AfiTableId
    leafs["multicast-label"] = fwdg.MulticastLabel
    leafs["leaf-time-in-milli-seconds"] = fwdg.LeafTimeInMilliSeconds
    return leafs
}

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetBundleName() string { return "cisco_ios_xr" }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetYangName() string { return "fwdg" }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) SetParent(parent types.Entity) { fwdg.parent = parent }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetParent() types.Entity { return fwdg.parent }

func (fwdg *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg) GetParentYangName() string { return "forwarding-tunnel" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation
// LDI-info in FIB leaf
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hardware info. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LdiHardwareInformation interface{}
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetFilter() yfilter.YFilter { return ldiInformation.YFilter }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) SetFilter(yf yfilter.YFilter) { ldiInformation.YFilter = yf }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetGoName(yname string) string {
    if yname == "ldi-hardware-information" { return "LdiHardwareInformation" }
    return ""
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetSegmentPath() string {
    return "ldi-information"
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ldi-hardware-information"] = ldiInformation.LdiHardwareInformation
    return leafs
}

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetYangName() string { return "ldi-information" }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) SetParent(parent types.Entity) { ldiInformation.parent = parent }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetParent() types.Entity { return ldiInformation.parent }

func (ldiInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LdiInformation) GetParentYangName() string { return "fwdg" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation
// The multicast info
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MOL base flags. The type is interface{} with range: 0..4294967295.
    MulticastMolBaseFlags interface{}

    // MOL flags. The type is interface{} with range: 0..65535.
    MulticastMolFlags interface{}

    // MOL refcount. The type is interface{} with range: 0..65535.
    MulticastMolReferanceCount interface{}

    // multicast mpls tunnel. The type is string with pattern: [a-zA-Z0-9./-]+.
    MulticastTunnelInterfaceHandler interface{}

    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes. The
    // type is interface{} with range: 0..4294967295.
    MulticastTunnelId interface{}

    // multicast nhinfo for p2mp TE Head. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelNextHopInformation interface{}

    // multicast LSPVIF for MLDP Tunnels. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLspvif interface{}

    // num multicast mpls output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsOutputPaths interface{}

    // num multicast mpls prot output paths . The type is interface{} with range:
    // 0..65535.
    MulticastMplsProtocolOutputPaths interface{}

    // num multicast mpls local output paths. The type is interface{} with range:
    // 0..65535.
    MulticastMplsLocalOutputPaths interface{}

    // The multicast RPF-ID . The type is interface{} with range: 0..4294967295.
    MulticastRpfId interface{}

    // The multicast ENCAP-ID . The type is interface{} with range: 0..4294967295.
    MulticastEncapId interface{}

    // The multicast platform data len. The type is interface{} with range:
    // 0..255.
    MulticastPlatformDataLength interface{}

    // The multicast platform data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    MulticastPlatformData interface{}
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetFilter() yfilter.YFilter { return multicastInformation.YFilter }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) SetFilter(yf yfilter.YFilter) { multicastInformation.YFilter = yf }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetGoName(yname string) string {
    if yname == "multicast-mol-base-flags" { return "MulticastMolBaseFlags" }
    if yname == "multicast-mol-flags" { return "MulticastMolFlags" }
    if yname == "multicast-mol-referance-count" { return "MulticastMolReferanceCount" }
    if yname == "multicast-tunnel-interface-handler" { return "MulticastTunnelInterfaceHandler" }
    if yname == "multicast-tunnel-id" { return "MulticastTunnelId" }
    if yname == "multicast-tunnel-next-hop-information" { return "MulticastTunnelNextHopInformation" }
    if yname == "multicast-tunnel-lspvif" { return "MulticastTunnelLspvif" }
    if yname == "multicast-mpls-output-paths" { return "MulticastMplsOutputPaths" }
    if yname == "multicast-mpls-protocol-output-paths" { return "MulticastMplsProtocolOutputPaths" }
    if yname == "multicast-mpls-local-output-paths" { return "MulticastMplsLocalOutputPaths" }
    if yname == "multicast-rpf-id" { return "MulticastRpfId" }
    if yname == "multicast-encap-id" { return "MulticastEncapId" }
    if yname == "multicast-platform-data-length" { return "MulticastPlatformDataLength" }
    if yname == "multicast-platform-data" { return "MulticastPlatformData" }
    return ""
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetSegmentPath() string {
    return "multicast-information"
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["multicast-mol-base-flags"] = multicastInformation.MulticastMolBaseFlags
    leafs["multicast-mol-flags"] = multicastInformation.MulticastMolFlags
    leafs["multicast-mol-referance-count"] = multicastInformation.MulticastMolReferanceCount
    leafs["multicast-tunnel-interface-handler"] = multicastInformation.MulticastTunnelInterfaceHandler
    leafs["multicast-tunnel-id"] = multicastInformation.MulticastTunnelId
    leafs["multicast-tunnel-next-hop-information"] = multicastInformation.MulticastTunnelNextHopInformation
    leafs["multicast-tunnel-lspvif"] = multicastInformation.MulticastTunnelLspvif
    leafs["multicast-mpls-output-paths"] = multicastInformation.MulticastMplsOutputPaths
    leafs["multicast-mpls-protocol-output-paths"] = multicastInformation.MulticastMplsProtocolOutputPaths
    leafs["multicast-mpls-local-output-paths"] = multicastInformation.MulticastMplsLocalOutputPaths
    leafs["multicast-rpf-id"] = multicastInformation.MulticastRpfId
    leafs["multicast-encap-id"] = multicastInformation.MulticastEncapId
    leafs["multicast-platform-data-length"] = multicastInformation.MulticastPlatformDataLength
    leafs["multicast-platform-data"] = multicastInformation.MulticastPlatformData
    return leafs
}

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetBundleName() string { return "cisco_ios_xr" }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetYangName() string { return "multicast-information" }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) SetParent(parent types.Entity) { multicastInformation.parent = parent }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetParent() types.Entity { return multicastInformation.parent }

func (multicastInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_MulticastInformation) GetParentYangName() string { return "fwdg" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation
// Label-infos in FIB leaf
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label-Info type. The type is interface{} with range: 0..4294967295.
    LabelInformationType interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // MPLS Adjacency flags. The type is interface{} with range: 0..4294967295.
    MplsAdjacencyFlags interface{}

    // Tunnel id present?. The type is bool.
    TunnelIdPresent interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing Physical Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingPhysicalInterface interface{}

    // Outgoing Parent Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutgoingParentInterface interface{}

    // Tunnel Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // LabelInformationPathIndex. The type is interface{} with range:
    // 0..4294967295.
    LabelInformationPathIndex interface{}

    // NHinfo Type. The type is NextHop.
    LabelInformationNextHopType interface{}

    // The address family (v4/v6) . The type is Proto.
    LabelInformationNextHopProtocol interface{}

    // Bytes transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TxBytes interface{}

    // Packets transmitted per LSP. The type is interface{} with range:
    // 0..18446744073709551615.
    TxPackets interface{}

    // Output Interface in string format. The type is string.
    OutgoingInterfaceString interface{}

    // Output Label in string format. The type is string.
    OutgoingLabelString interface{}

    // Prefix Or ID. The type is string.
    PrefixOrId interface{}

    // Next hop address in string format. The type is string.
    LabelInformationNextHopString interface{}

    // The version of the route. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationRouteVersion interface{}

    // The time of last update in msec. The type is interface{} with range:
    // 0..18446744073709551615.
    LabelInformationTimeInMilliSeconds interface{}

    // Detail label info.
    LabelInformationDetail MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail

    // Path's Hash info in case of exact-route command.
    ExactRouteHashInfo MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetFilter() yfilter.YFilter { return labelInformation.YFilter }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) SetFilter(yf yfilter.YFilter) { labelInformation.YFilter = yf }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetGoName(yname string) string {
    if yname == "label-information-type" { return "LabelInformationType" }
    if yname == "local-label" { return "LocalLabel" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "mpls-adjacency-flags" { return "MplsAdjacencyFlags" }
    if yname == "tunnel-id-present" { return "TunnelIdPresent" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-physical-interface" { return "OutgoingPhysicalInterface" }
    if yname == "outgoing-parent-interface" { return "OutgoingParentInterface" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "label-information-path-index" { return "LabelInformationPathIndex" }
    if yname == "label-information-next-hop-type" { return "LabelInformationNextHopType" }
    if yname == "label-information-next-hop-protocol" { return "LabelInformationNextHopProtocol" }
    if yname == "tx-bytes" { return "TxBytes" }
    if yname == "tx-packets" { return "TxPackets" }
    if yname == "outgoing-interface-string" { return "OutgoingInterfaceString" }
    if yname == "outgoing-label-string" { return "OutgoingLabelString" }
    if yname == "prefix-or-id" { return "PrefixOrId" }
    if yname == "label-information-next-hop-string" { return "LabelInformationNextHopString" }
    if yname == "label-information-route-version" { return "LabelInformationRouteVersion" }
    if yname == "label-information-time-in-milli-seconds" { return "LabelInformationTimeInMilliSeconds" }
    if yname == "label-information-detail" { return "LabelInformationDetail" }
    if yname == "exact-route-hash-info" { return "ExactRouteHashInfo" }
    return ""
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetSegmentPath() string {
    return "label-information"
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-information-detail" {
        return &labelInformation.LabelInformationDetail
    }
    if childYangName == "exact-route-hash-info" {
        return &labelInformation.ExactRouteHashInfo
    }
    return nil
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-information-detail"] = &labelInformation.LabelInformationDetail
    children["exact-route-hash-info"] = &labelInformation.ExactRouteHashInfo
    return children
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-information-type"] = labelInformation.LabelInformationType
    leafs["local-label"] = labelInformation.LocalLabel
    leafs["outgoing-label"] = labelInformation.OutgoingLabel
    leafs["mpls-adjacency-flags"] = labelInformation.MplsAdjacencyFlags
    leafs["tunnel-id-present"] = labelInformation.TunnelIdPresent
    leafs["outgoing-interface"] = labelInformation.OutgoingInterface
    leafs["outgoing-physical-interface"] = labelInformation.OutgoingPhysicalInterface
    leafs["outgoing-parent-interface"] = labelInformation.OutgoingParentInterface
    leafs["tunnel-interface"] = labelInformation.TunnelInterface
    leafs["label-information-path-index"] = labelInformation.LabelInformationPathIndex
    leafs["label-information-next-hop-type"] = labelInformation.LabelInformationNextHopType
    leafs["label-information-next-hop-protocol"] = labelInformation.LabelInformationNextHopProtocol
    leafs["tx-bytes"] = labelInformation.TxBytes
    leafs["tx-packets"] = labelInformation.TxPackets
    leafs["outgoing-interface-string"] = labelInformation.OutgoingInterfaceString
    leafs["outgoing-label-string"] = labelInformation.OutgoingLabelString
    leafs["prefix-or-id"] = labelInformation.PrefixOrId
    leafs["label-information-next-hop-string"] = labelInformation.LabelInformationNextHopString
    leafs["label-information-route-version"] = labelInformation.LabelInformationRouteVersion
    leafs["label-information-time-in-milli-seconds"] = labelInformation.LabelInformationTimeInMilliSeconds
    return leafs
}

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetBundleName() string { return "cisco_ios_xr" }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetYangName() string { return "label-information" }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) SetParent(parent types.Entity) { labelInformation.parent = parent }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetParent() types.Entity { return labelInformation.parent }

func (labelInformation *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation) GetParentYangName() string { return "fwdg" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail
// Detail label info
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L3 MTU. The type is interface{} with range: 0..4294967295.
    L3Mtu interface{}

    // Total encapsulation size: L2 + MPLS. The type is interface{} with range:
    // 0..4294967295.
    TotalEncapsulationSize interface{}

    // Length of L2 encapsulation. The type is interface{} with range:
    // 0..4294967295.
    MacSize interface{}

    // Number of packets switched. The type is interface{} with range:
    // 0..18446744073709551615.
    TransmitNumberOfPacketsSwitched interface{}

    // Number of Bytes switched. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    TransmitNumberOfBytesSwitched interface{}

    // Status. The type is interface{} with range: -2147483648..2147483647.
    Status interface{}

    // Next hop interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    NextHopInterface interface{}

    // The address family (V4/V6) . The type is Proto.
    NextHopProtocol interface{}

    // Next hop address in string format. The type is string.
    NextHopString interface{}

    // Label stack. The type is slice of
    // MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack.
    LabelStack []MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetFilter() yfilter.YFilter { return labelInformationDetail.YFilter }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) SetFilter(yf yfilter.YFilter) { labelInformationDetail.YFilter = yf }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetGoName(yname string) string {
    if yname == "l3-mtu" { return "L3Mtu" }
    if yname == "total-encapsulation-size" { return "TotalEncapsulationSize" }
    if yname == "mac-size" { return "MacSize" }
    if yname == "transmit-number-of-packets-switched" { return "TransmitNumberOfPacketsSwitched" }
    if yname == "transmit-number-of-bytes-switched" { return "TransmitNumberOfBytesSwitched" }
    if yname == "status" { return "Status" }
    if yname == "next-hop-interface" { return "NextHopInterface" }
    if yname == "next-hop-protocol" { return "NextHopProtocol" }
    if yname == "next-hop-string" { return "NextHopString" }
    if yname == "label-stack" { return "LabelStack" }
    return ""
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetSegmentPath() string {
    return "label-information-detail"
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-stack" {
        for _, c := range labelInformationDetail.LabelStack {
            if labelInformationDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack{}
        labelInformationDetail.LabelStack = append(labelInformationDetail.LabelStack, child)
        return &labelInformationDetail.LabelStack[len(labelInformationDetail.LabelStack)-1]
    }
    return nil
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelInformationDetail.LabelStack {
        children[labelInformationDetail.LabelStack[i].GetSegmentPath()] = &labelInformationDetail.LabelStack[i]
    }
    return children
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l3-mtu"] = labelInformationDetail.L3Mtu
    leafs["total-encapsulation-size"] = labelInformationDetail.TotalEncapsulationSize
    leafs["mac-size"] = labelInformationDetail.MacSize
    leafs["transmit-number-of-packets-switched"] = labelInformationDetail.TransmitNumberOfPacketsSwitched
    leafs["transmit-number-of-bytes-switched"] = labelInformationDetail.TransmitNumberOfBytesSwitched
    leafs["status"] = labelInformationDetail.Status
    leafs["next-hop-interface"] = labelInformationDetail.NextHopInterface
    leafs["next-hop-protocol"] = labelInformationDetail.NextHopProtocol
    leafs["next-hop-string"] = labelInformationDetail.NextHopString
    return leafs
}

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetBundleName() string { return "cisco_ios_xr" }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetYangName() string { return "label-information-detail" }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) SetParent(parent types.Entity) { labelInformationDetail.parent = parent }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetParent() types.Entity { return labelInformationDetail.parent }

func (labelInformationDetail *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail) GetParentYangName() string { return "label-information" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack
// Label stack
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetFilter() yfilter.YFilter { return labelStack.YFilter }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) SetFilter(yf yfilter.YFilter) { labelStack.YFilter = yf }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetSegmentPath() string {
    return "label-stack"
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelStack.Entry
    return leafs
}

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetYangName() string { return "label-stack" }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) SetParent(parent types.Entity) { labelStack.parent = parent }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetParent() types.Entity { return labelStack.parent }

func (labelStack *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_LabelInformationDetail_LabelStack) GetParentYangName() string { return "label-information-detail" }

// MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo
// Path's Hash info in case of exact-route command
type MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Hash Index valid?. The type is bool.
    HashIndexIsValid interface{}

    // Hash Index value. The type is interface{} with range: 0..255.
    HashIndex interface{}
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetFilter() yfilter.YFilter { return exactRouteHashInfo.YFilter }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) SetFilter(yf yfilter.YFilter) { exactRouteHashInfo.YFilter = yf }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetGoName(yname string) string {
    if yname == "hash-index-is-valid" { return "HashIndexIsValid" }
    if yname == "hash-index" { return "HashIndex" }
    return ""
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetSegmentPath() string {
    return "exact-route-hash-info"
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hash-index-is-valid"] = exactRouteHashInfo.HashIndexIsValid
    leafs["hash-index"] = exactRouteHashInfo.HashIndex
    return leafs
}

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetBundleName() string { return "cisco_ios_xr" }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetYangName() string { return "exact-route-hash-info" }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) SetParent(parent types.Entity) { exactRouteHashInfo.parent = parent }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetParent() types.Entity { return exactRouteHashInfo.parent }

func (exactRouteHashInfo *MplsForwarding_Nodes_Node_Tunnel_ForwardingTunnels_ForwardingTunnel_Fwdg_LabelInformation_ExactRouteHashInfo) GetParentYangName() string { return "label-information" }

// MplsForwarding_Nodes_Node_FrrDatabase
// MPLS forwarding FRR Database
type MplsForwarding_Nodes_Node_FrrDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Summary.
    FrrdbSummary MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary

    // MPLS forwarding FRR Database Protected Interface Summary Table.
    FrrdbProtectedInterfaceTableSummaries MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries

    // MPLS forwarding FRR Database Tunnel Midpoint Summary.
    FrrdbTunnelMidpointSummary MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary

    // MPLS forwarding FRR Database Tunnel Midpoint Table.
    FrrdbTunnelMidpoints MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints

    // MPLS forwarding FRR Database Tunnel Head Table.
    FrrdbTunnelHeads MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads

    // MPLS forwarding FRR Database Tunnel Head Summary.
    FrrdbTunnelHeadSummary MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary

    // MPLS forwarding FRR Database Backup Interface Summary Table.
    FrrdbBackupInterfaceSummaries MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetFilter() yfilter.YFilter { return frrDatabase.YFilter }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) SetFilter(yf yfilter.YFilter) { frrDatabase.YFilter = yf }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetGoName(yname string) string {
    if yname == "frrdb-summary" { return "FrrdbSummary" }
    if yname == "frrdb-protected-interface-table-summaries" { return "FrrdbProtectedInterfaceTableSummaries" }
    if yname == "frrdb-tunnel-midpoint-summary" { return "FrrdbTunnelMidpointSummary" }
    if yname == "frrdb-tunnel-midpoints" { return "FrrdbTunnelMidpoints" }
    if yname == "frrdb-tunnel-heads" { return "FrrdbTunnelHeads" }
    if yname == "frrdb-tunnel-head-summary" { return "FrrdbTunnelHeadSummary" }
    if yname == "frrdb-backup-interface-summaries" { return "FrrdbBackupInterfaceSummaries" }
    return ""
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetSegmentPath() string {
    return "frr-database"
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frrdb-summary" {
        return &frrDatabase.FrrdbSummary
    }
    if childYangName == "frrdb-protected-interface-table-summaries" {
        return &frrDatabase.FrrdbProtectedInterfaceTableSummaries
    }
    if childYangName == "frrdb-tunnel-midpoint-summary" {
        return &frrDatabase.FrrdbTunnelMidpointSummary
    }
    if childYangName == "frrdb-tunnel-midpoints" {
        return &frrDatabase.FrrdbTunnelMidpoints
    }
    if childYangName == "frrdb-tunnel-heads" {
        return &frrDatabase.FrrdbTunnelHeads
    }
    if childYangName == "frrdb-tunnel-head-summary" {
        return &frrDatabase.FrrdbTunnelHeadSummary
    }
    if childYangName == "frrdb-backup-interface-summaries" {
        return &frrDatabase.FrrdbBackupInterfaceSummaries
    }
    return nil
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frrdb-summary"] = &frrDatabase.FrrdbSummary
    children["frrdb-protected-interface-table-summaries"] = &frrDatabase.FrrdbProtectedInterfaceTableSummaries
    children["frrdb-tunnel-midpoint-summary"] = &frrDatabase.FrrdbTunnelMidpointSummary
    children["frrdb-tunnel-midpoints"] = &frrDatabase.FrrdbTunnelMidpoints
    children["frrdb-tunnel-heads"] = &frrDatabase.FrrdbTunnelHeads
    children["frrdb-tunnel-head-summary"] = &frrDatabase.FrrdbTunnelHeadSummary
    children["frrdb-backup-interface-summaries"] = &frrDatabase.FrrdbBackupInterfaceSummaries
    return children
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetYangName() string { return "frr-database" }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) SetParent(parent types.Entity) { frrDatabase.parent = parent }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetParent() types.Entity { return frrDatabase.parent }

func (frrDatabase *MplsForwarding_Nodes_Node_FrrDatabase) GetParentYangName() string { return "node" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary
// MPLS forwarding FRR Database Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetFilter() yfilter.YFilter { return frrdbSummary.YFilter }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) SetFilter(yf yfilter.YFilter) { frrdbSummary.YFilter = yf }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "other" { return "Other" }
    return ""
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetSegmentPath() string {
    return "frrdb-summary"
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = frrdbSummary.Active
    leafs["ready"] = frrdbSummary.Ready
    leafs["partial"] = frrdbSummary.Partial
    leafs["other"] = frrdbSummary.Other
    return leafs
}

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetYangName() string { return "frrdb-summary" }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) SetParent(parent types.Entity) { frrdbSummary.parent = parent }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetParent() types.Entity { return frrdbSummary.parent }

func (frrdbSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbSummary) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries
// MPLS forwarding FRR Database Protected
// Interface Summary Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Protected Interface Summary. The type is slice
    // of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary.
    FrrdbProtectedInterfaceTableSummary []MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetFilter() yfilter.YFilter { return frrdbProtectedInterfaceTableSummaries.YFilter }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) SetFilter(yf yfilter.YFilter) { frrdbProtectedInterfaceTableSummaries.YFilter = yf }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetGoName(yname string) string {
    if yname == "frrdb-protected-interface-table-summary" { return "FrrdbProtectedInterfaceTableSummary" }
    return ""
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetSegmentPath() string {
    return "frrdb-protected-interface-table-summaries"
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frrdb-protected-interface-table-summary" {
        for _, c := range frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary {
            if frrdbProtectedInterfaceTableSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary{}
        frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary = append(frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary, child)
        return &frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary[len(frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary)-1]
    }
    return nil
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary {
        children[frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary[i].GetSegmentPath()] = &frrdbProtectedInterfaceTableSummaries.FrrdbProtectedInterfaceTableSummary[i]
    }
    return children
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetYangName() string { return "frrdb-protected-interface-table-summaries" }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) SetParent(parent types.Entity) { frrdbProtectedInterfaceTableSummaries.parent = parent }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetParent() types.Entity { return frrdbProtectedInterfaceTableSummaries.parent }

func (frrdbProtectedInterfaceTableSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary
// MPLS forwarding FRR Database Protected
// Interface Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetFilter() yfilter.YFilter { return frrdbProtectedInterfaceTableSummary.YFilter }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) SetFilter(yf yfilter.YFilter) { frrdbProtectedInterfaceTableSummary.YFilter = yf }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "other" { return "Other" }
    return ""
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetSegmentPath() string {
    return "frrdb-protected-interface-table-summary" + "[interface-name='" + fmt.Sprintf("%v", frrdbProtectedInterfaceTableSummary.InterfaceName) + "']"
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = frrdbProtectedInterfaceTableSummary.InterfaceName
    leafs["active"] = frrdbProtectedInterfaceTableSummary.Active
    leafs["ready"] = frrdbProtectedInterfaceTableSummary.Ready
    leafs["partial"] = frrdbProtectedInterfaceTableSummary.Partial
    leafs["other"] = frrdbProtectedInterfaceTableSummary.Other
    return leafs
}

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetYangName() string { return "frrdb-protected-interface-table-summary" }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) SetParent(parent types.Entity) { frrdbProtectedInterfaceTableSummary.parent = parent }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetParent() types.Entity { return frrdbProtectedInterfaceTableSummary.parent }

func (frrdbProtectedInterfaceTableSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbProtectedInterfaceTableSummaries_FrrdbProtectedInterfaceTableSummary) GetParentYangName() string { return "frrdb-protected-interface-table-summaries" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary
// MPLS forwarding FRR Database Tunnel Midpoint
// Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetFilter() yfilter.YFilter { return frrdbTunnelMidpointSummary.YFilter }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) SetFilter(yf yfilter.YFilter) { frrdbTunnelMidpointSummary.YFilter = yf }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "other" { return "Other" }
    return ""
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetSegmentPath() string {
    return "frrdb-tunnel-midpoint-summary"
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = frrdbTunnelMidpointSummary.Active
    leafs["ready"] = frrdbTunnelMidpointSummary.Ready
    leafs["partial"] = frrdbTunnelMidpointSummary.Partial
    leafs["other"] = frrdbTunnelMidpointSummary.Other
    return leafs
}

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetYangName() string { return "frrdb-tunnel-midpoint-summary" }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) SetParent(parent types.Entity) { frrdbTunnelMidpointSummary.parent = parent }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetParent() types.Entity { return frrdbTunnelMidpointSummary.parent }

func (frrdbTunnelMidpointSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpointSummary) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints
// MPLS forwarding FRR Database Tunnel Midpoint
// Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Tunnel Midpoint Entry. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint.
    FrrdbTunnelMidpoint []MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetFilter() yfilter.YFilter { return frrdbTunnelMidpoints.YFilter }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) SetFilter(yf yfilter.YFilter) { frrdbTunnelMidpoints.YFilter = yf }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetGoName(yname string) string {
    if yname == "frrdb-tunnel-midpoint" { return "FrrdbTunnelMidpoint" }
    return ""
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetSegmentPath() string {
    return "frrdb-tunnel-midpoints"
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frrdb-tunnel-midpoint" {
        for _, c := range frrdbTunnelMidpoints.FrrdbTunnelMidpoint {
            if frrdbTunnelMidpoints.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint{}
        frrdbTunnelMidpoints.FrrdbTunnelMidpoint = append(frrdbTunnelMidpoints.FrrdbTunnelMidpoint, child)
        return &frrdbTunnelMidpoints.FrrdbTunnelMidpoint[len(frrdbTunnelMidpoints.FrrdbTunnelMidpoint)-1]
    }
    return nil
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrdbTunnelMidpoints.FrrdbTunnelMidpoint {
        children[frrdbTunnelMidpoints.FrrdbTunnelMidpoint[i].GetSegmentPath()] = &frrdbTunnelMidpoints.FrrdbTunnelMidpoint[i]
    }
    return children
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetYangName() string { return "frrdb-tunnel-midpoints" }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) SetParent(parent types.Entity) { frrdbTunnelMidpoints.parent = parent }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetParent() types.Entity { return frrdbTunnelMidpoints.parent }

func (frrdbTunnelMidpoints *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint
// MPLS forwarding FRR Database Tunnel Midpoint
// Entry
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Local label value. The type is interface{} with
    // range: 16..1048575.
    LocalLabel interface{}

    // Output label in string format. The type is string.
    OutgoingLableString interface{}

    // FRR label in string format. The type is string.
    FrrLableString interface{}

    // FRR DB.
    FrrDb MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetFilter() yfilter.YFilter { return frrdbTunnelMidpoint.YFilter }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) SetFilter(yf yfilter.YFilter) { frrdbTunnelMidpoint.YFilter = yf }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetGoName(yname string) string {
    if yname == "local-label" { return "LocalLabel" }
    if yname == "outgoing-lable-string" { return "OutgoingLableString" }
    if yname == "frr-lable-string" { return "FrrLableString" }
    if yname == "frr-db" { return "FrrDb" }
    return ""
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetSegmentPath() string {
    return "frrdb-tunnel-midpoint" + "[local-label='" + fmt.Sprintf("%v", frrdbTunnelMidpoint.LocalLabel) + "']"
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-db" {
        return &frrdbTunnelMidpoint.FrrDb
    }
    return nil
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-db"] = &frrdbTunnelMidpoint.FrrDb
    return children
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-label"] = frrdbTunnelMidpoint.LocalLabel
    leafs["outgoing-lable-string"] = frrdbTunnelMidpoint.OutgoingLableString
    leafs["frr-lable-string"] = frrdbTunnelMidpoint.FrrLableString
    return leafs
}

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetYangName() string { return "frrdb-tunnel-midpoint" }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) SetParent(parent types.Entity) { frrdbTunnelMidpoint.parent = parent }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetParent() types.Entity { return frrdbTunnelMidpoint.parent }

func (frrdbTunnelMidpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint) GetParentYangName() string { return "frrdb-tunnel-midpoints" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb
// FRR DB
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // Multicast tunnel. The type is bool.
    IsMulticastTunnel interface{}

    // Number of legs in MCAST tunnel. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLegs interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId

    // MCAST legs. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg.
    MulticastLeg []MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetFilter() yfilter.YFilter { return frrDb.YFilter }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) SetFilter(yf yfilter.YFilter) { frrDb.YFilter = yf }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetGoName(yname string) string {
    if yname == "tunnel-interface-name" { return "TunnelInterfaceName" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "frr-interface-name" { return "FrrInterfaceName" }
    if yname == "frr-label" { return "FrrLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-next-hop-ipv4-address" { return "FrrNextHopIpv4Address" }
    if yname == "is-mldp-lsp" { return "IsMldpLsp" }
    if yname == "is-multicast-tunnel" { return "IsMulticastTunnel" }
    if yname == "multicast-tunnel-legs" { return "MulticastTunnelLegs" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    if yname == "multicast-leg" { return "MulticastLeg" }
    return ""
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetSegmentPath() string {
    return "frr-db"
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &frrDb.FrrEntryId
    }
    if childYangName == "multicast-leg" {
        for _, c := range frrDb.MulticastLeg {
            if frrDb.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg{}
        frrDb.MulticastLeg = append(frrDb.MulticastLeg, child)
        return &frrDb.MulticastLeg[len(frrDb.MulticastLeg)-1]
    }
    return nil
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &frrDb.FrrEntryId
    for i := range frrDb.MulticastLeg {
        children[frrDb.MulticastLeg[i].GetSegmentPath()] = &frrDb.MulticastLeg[i]
    }
    return children
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface-name"] = frrDb.TunnelInterfaceName
    leafs["input-label"] = frrDb.InputLabel
    leafs["outgoing-interface"] = frrDb.OutgoingInterface
    leafs["outgoing-label"] = frrDb.OutgoingLabel
    leafs["frr-interface-name"] = frrDb.FrrInterfaceName
    leafs["frr-label"] = frrDb.FrrLabel
    leafs["entry-frr-state"] = frrDb.EntryFrrState
    leafs["frr-next-hop-ipv4-address"] = frrDb.FrrNextHopIpv4Address
    leafs["is-mldp-lsp"] = frrDb.IsMldpLsp
    leafs["is-multicast-tunnel"] = frrDb.IsMulticastTunnel
    leafs["multicast-tunnel-legs"] = frrDb.MulticastTunnelLegs
    return leafs
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetBundleName() string { return "cisco_ios_xr" }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetYangName() string { return "frr-db" }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) SetParent(parent types.Entity) { frrDb.parent = parent }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetParent() types.Entity { return frrDb.parent }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb) GetParentYangName() string { return "frrdb-tunnel-midpoint" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId) GetParentYangName() string { return "frr-db" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg
// MCAST legs
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetFilter() yfilter.YFilter { return multicastLeg.YFilter }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) SetFilter(yf yfilter.YFilter) { multicastLeg.YFilter = yf }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetGoName(yname string) string {
    if yname == "tunnel-interface-name" { return "TunnelInterfaceName" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "frr-interface-name" { return "FrrInterfaceName" }
    if yname == "frr-label" { return "FrrLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-next-hop-ipv4-address" { return "FrrNextHopIpv4Address" }
    if yname == "is-mldp-lsp" { return "IsMldpLsp" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    return ""
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetSegmentPath() string {
    return "multicast-leg"
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &multicastLeg.FrrEntryId
    }
    return nil
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &multicastLeg.FrrEntryId
    return children
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface-name"] = multicastLeg.TunnelInterfaceName
    leafs["input-label"] = multicastLeg.InputLabel
    leafs["outgoing-interface"] = multicastLeg.OutgoingInterface
    leafs["outgoing-label"] = multicastLeg.OutgoingLabel
    leafs["frr-interface-name"] = multicastLeg.FrrInterfaceName
    leafs["frr-label"] = multicastLeg.FrrLabel
    leafs["entry-frr-state"] = multicastLeg.EntryFrrState
    leafs["frr-next-hop-ipv4-address"] = multicastLeg.FrrNextHopIpv4Address
    leafs["is-mldp-lsp"] = multicastLeg.IsMldpLsp
    return leafs
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetBundleName() string { return "cisco_ios_xr" }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetYangName() string { return "multicast-leg" }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) SetParent(parent types.Entity) { multicastLeg.parent = parent }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetParent() types.Entity { return multicastLeg.parent }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg) GetParentYangName() string { return "frr-db" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId) GetParentYangName() string { return "multicast-leg" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelMidpoints_FrrdbTunnelMidpoint_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads
// MPLS forwarding FRR Database Tunnel Head
// Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Tunnel Head Entry. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead.
    FrrdbTunnelHead []MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetFilter() yfilter.YFilter { return frrdbTunnelHeads.YFilter }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) SetFilter(yf yfilter.YFilter) { frrdbTunnelHeads.YFilter = yf }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetGoName(yname string) string {
    if yname == "frrdb-tunnel-head" { return "FrrdbTunnelHead" }
    return ""
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetSegmentPath() string {
    return "frrdb-tunnel-heads"
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frrdb-tunnel-head" {
        for _, c := range frrdbTunnelHeads.FrrdbTunnelHead {
            if frrdbTunnelHeads.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead{}
        frrdbTunnelHeads.FrrdbTunnelHead = append(frrdbTunnelHeads.FrrdbTunnelHead, child)
        return &frrdbTunnelHeads.FrrdbTunnelHead[len(frrdbTunnelHeads.FrrdbTunnelHead)-1]
    }
    return nil
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrdbTunnelHeads.FrrdbTunnelHead {
        children[frrdbTunnelHeads.FrrdbTunnelHead[i].GetSegmentPath()] = &frrdbTunnelHeads.FrrdbTunnelHead[i]
    }
    return children
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetYangName() string { return "frrdb-tunnel-heads" }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) SetParent(parent types.Entity) { frrdbTunnelHeads.parent = parent }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetParent() types.Entity { return frrdbTunnelHeads.parent }

func (frrdbTunnelHeads *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead
// MPLS forwarding FRR Database Tunnel Head
// Entry
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Output label in string format. The type is string.
    OutgoingLableString interface{}

    // FRR label in string format. The type is string.
    FrrLableString interface{}

    // FRR DB.
    FrrDb MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetFilter() yfilter.YFilter { return frrdbTunnelHead.YFilter }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) SetFilter(yf yfilter.YFilter) { frrdbTunnelHead.YFilter = yf }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "outgoing-lable-string" { return "OutgoingLableString" }
    if yname == "frr-lable-string" { return "FrrLableString" }
    if yname == "frr-db" { return "FrrDb" }
    return ""
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetSegmentPath() string {
    return "frrdb-tunnel-head" + "[interface-name='" + fmt.Sprintf("%v", frrdbTunnelHead.InterfaceName) + "']"
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-db" {
        return &frrdbTunnelHead.FrrDb
    }
    return nil
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-db"] = &frrdbTunnelHead.FrrDb
    return children
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = frrdbTunnelHead.InterfaceName
    leafs["outgoing-lable-string"] = frrdbTunnelHead.OutgoingLableString
    leafs["frr-lable-string"] = frrdbTunnelHead.FrrLableString
    return leafs
}

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetYangName() string { return "frrdb-tunnel-head" }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) SetParent(parent types.Entity) { frrdbTunnelHead.parent = parent }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetParent() types.Entity { return frrdbTunnelHead.parent }

func (frrdbTunnelHead *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead) GetParentYangName() string { return "frrdb-tunnel-heads" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb
// FRR DB
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // Multicast tunnel. The type is bool.
    IsMulticastTunnel interface{}

    // Number of legs in MCAST tunnel. The type is interface{} with range:
    // 0..4294967295.
    MulticastTunnelLegs interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId

    // MCAST legs. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg.
    MulticastLeg []MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetFilter() yfilter.YFilter { return frrDb.YFilter }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) SetFilter(yf yfilter.YFilter) { frrDb.YFilter = yf }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetGoName(yname string) string {
    if yname == "tunnel-interface-name" { return "TunnelInterfaceName" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "frr-interface-name" { return "FrrInterfaceName" }
    if yname == "frr-label" { return "FrrLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-next-hop-ipv4-address" { return "FrrNextHopIpv4Address" }
    if yname == "is-mldp-lsp" { return "IsMldpLsp" }
    if yname == "is-multicast-tunnel" { return "IsMulticastTunnel" }
    if yname == "multicast-tunnel-legs" { return "MulticastTunnelLegs" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    if yname == "multicast-leg" { return "MulticastLeg" }
    return ""
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetSegmentPath() string {
    return "frr-db"
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &frrDb.FrrEntryId
    }
    if childYangName == "multicast-leg" {
        for _, c := range frrDb.MulticastLeg {
            if frrDb.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg{}
        frrDb.MulticastLeg = append(frrDb.MulticastLeg, child)
        return &frrDb.MulticastLeg[len(frrDb.MulticastLeg)-1]
    }
    return nil
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &frrDb.FrrEntryId
    for i := range frrDb.MulticastLeg {
        children[frrDb.MulticastLeg[i].GetSegmentPath()] = &frrDb.MulticastLeg[i]
    }
    return children
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface-name"] = frrDb.TunnelInterfaceName
    leafs["input-label"] = frrDb.InputLabel
    leafs["outgoing-interface"] = frrDb.OutgoingInterface
    leafs["outgoing-label"] = frrDb.OutgoingLabel
    leafs["frr-interface-name"] = frrDb.FrrInterfaceName
    leafs["frr-label"] = frrDb.FrrLabel
    leafs["entry-frr-state"] = frrDb.EntryFrrState
    leafs["frr-next-hop-ipv4-address"] = frrDb.FrrNextHopIpv4Address
    leafs["is-mldp-lsp"] = frrDb.IsMldpLsp
    leafs["is-multicast-tunnel"] = frrDb.IsMulticastTunnel
    leafs["multicast-tunnel-legs"] = frrDb.MulticastTunnelLegs
    return leafs
}

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetBundleName() string { return "cisco_ios_xr" }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetYangName() string { return "frr-db" }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) SetParent(parent types.Entity) { frrDb.parent = parent }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetParent() types.Entity { return frrDb.parent }

func (frrDb *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb) GetParentYangName() string { return "frrdb-tunnel-head" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId) GetParentYangName() string { return "frr-db" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg
// MCAST legs
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterfaceName interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutgoingInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterfaceName interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}

    // MPLS FRR entry state. The type is MgmtFibMplsFrrState.
    EntryFrrState interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FrrNextHopIpv4Address interface{}

    // MLDP or P2MP-TE. The type is bool.
    IsMldpLsp interface{}

    // FRR entry ID.
    FrrEntryId MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetFilter() yfilter.YFilter { return multicastLeg.YFilter }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) SetFilter(yf yfilter.YFilter) { multicastLeg.YFilter = yf }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetGoName(yname string) string {
    if yname == "tunnel-interface-name" { return "TunnelInterfaceName" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "outgoing-interface" { return "OutgoingInterface" }
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "frr-interface-name" { return "FrrInterfaceName" }
    if yname == "frr-label" { return "FrrLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-next-hop-ipv4-address" { return "FrrNextHopIpv4Address" }
    if yname == "is-mldp-lsp" { return "IsMldpLsp" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    return ""
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetSegmentPath() string {
    return "multicast-leg"
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &multicastLeg.FrrEntryId
    }
    return nil
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &multicastLeg.FrrEntryId
    return children
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface-name"] = multicastLeg.TunnelInterfaceName
    leafs["input-label"] = multicastLeg.InputLabel
    leafs["outgoing-interface"] = multicastLeg.OutgoingInterface
    leafs["outgoing-label"] = multicastLeg.OutgoingLabel
    leafs["frr-interface-name"] = multicastLeg.FrrInterfaceName
    leafs["frr-label"] = multicastLeg.FrrLabel
    leafs["entry-frr-state"] = multicastLeg.EntryFrrState
    leafs["frr-next-hop-ipv4-address"] = multicastLeg.FrrNextHopIpv4Address
    leafs["is-mldp-lsp"] = multicastLeg.IsMldpLsp
    return leafs
}

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetBundleName() string { return "cisco_ios_xr" }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetYangName() string { return "multicast-leg" }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) SetParent(parent types.Entity) { multicastLeg.parent = parent }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetParent() types.Entity { return multicastLeg.parent }

func (multicastLeg *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg) GetParentYangName() string { return "frr-db" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId
// FRR entry ID
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtFibMplsLspRole.
    Role interface{}

    // head.
    Head MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head

    // midpoint.
    Midpoint MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId) GetParentYangName() string { return "multicast-leg" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head
// head
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range:
    // 0..4294967295.
    DestinationPrefixLength interface{}
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint
// midpoint
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeads_FrrdbTunnelHead_FrrDb_MulticastLeg_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary
// MPLS forwarding FRR Database Tunnel Head
// Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetFilter() yfilter.YFilter { return frrdbTunnelHeadSummary.YFilter }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) SetFilter(yf yfilter.YFilter) { frrdbTunnelHeadSummary.YFilter = yf }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "other" { return "Other" }
    return ""
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetSegmentPath() string {
    return "frrdb-tunnel-head-summary"
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = frrdbTunnelHeadSummary.Active
    leafs["ready"] = frrdbTunnelHeadSummary.Ready
    leafs["partial"] = frrdbTunnelHeadSummary.Partial
    leafs["other"] = frrdbTunnelHeadSummary.Other
    return leafs
}

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetYangName() string { return "frrdb-tunnel-head-summary" }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) SetParent(parent types.Entity) { frrdbTunnelHeadSummary.parent = parent }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetParent() types.Entity { return frrdbTunnelHeadSummary.parent }

func (frrdbTunnelHeadSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbTunnelHeadSummary) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries
// MPLS forwarding FRR Database Backup Interface
// Summary Table
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS forwarding FRR Database Backup Interface Summary. The type is slice of
    // MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary.
    FrrdbBackupInterfaceSummary []MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetFilter() yfilter.YFilter { return frrdbBackupInterfaceSummaries.YFilter }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) SetFilter(yf yfilter.YFilter) { frrdbBackupInterfaceSummaries.YFilter = yf }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetGoName(yname string) string {
    if yname == "frrdb-backup-interface-summary" { return "FrrdbBackupInterfaceSummary" }
    return ""
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetSegmentPath() string {
    return "frrdb-backup-interface-summaries"
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frrdb-backup-interface-summary" {
        for _, c := range frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary {
            if frrdbBackupInterfaceSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary{}
        frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary = append(frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary, child)
        return &frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary[len(frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary)-1]
    }
    return nil
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary {
        children[frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary[i].GetSegmentPath()] = &frrdbBackupInterfaceSummaries.FrrdbBackupInterfaceSummary[i]
    }
    return children
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetYangName() string { return "frrdb-backup-interface-summaries" }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) SetParent(parent types.Entity) { frrdbBackupInterfaceSummaries.parent = parent }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetParent() types.Entity { return frrdbBackupInterfaceSummaries.parent }

func (frrdbBackupInterfaceSummaries *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries) GetParentYangName() string { return "frr-database" }

// MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary
// MPLS forwarding FRR Database Backup
// Interface Summary
type MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in an unrecognized state. The type is interface{}
    // with range: 0..4294967295.
    Other interface{}
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetFilter() yfilter.YFilter { return frrdbBackupInterfaceSummary.YFilter }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) SetFilter(yf yfilter.YFilter) { frrdbBackupInterfaceSummary.YFilter = yf }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "other" { return "Other" }
    return ""
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetSegmentPath() string {
    return "frrdb-backup-interface-summary" + "[interface-name='" + fmt.Sprintf("%v", frrdbBackupInterfaceSummary.InterfaceName) + "']"
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = frrdbBackupInterfaceSummary.InterfaceName
    leafs["active"] = frrdbBackupInterfaceSummary.Active
    leafs["ready"] = frrdbBackupInterfaceSummary.Ready
    leafs["partial"] = frrdbBackupInterfaceSummary.Partial
    leafs["other"] = frrdbBackupInterfaceSummary.Other
    return leafs
}

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetYangName() string { return "frrdb-backup-interface-summary" }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) SetParent(parent types.Entity) { frrdbBackupInterfaceSummary.parent = parent }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetParent() types.Entity { return frrdbBackupInterfaceSummary.parent }

func (frrdbBackupInterfaceSummary *MplsForwarding_Nodes_Node_FrrDatabase_FrrdbBackupInterfaceSummaries_FrrdbBackupInterfaceSummary) GetParentYangName() string { return "frrdb-backup-interface-summaries" }

