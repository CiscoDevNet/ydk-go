// This module contains a collection of YANG definitions
// for Cisco IOS-XR lib-mpp package configuration.
// 
// This module contains definitions
// for the following management objects:
//   control-plane: Configure control Plane
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package lib_mpp_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package lib_mpp_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-lib-mpp-cfg control-plane}", reflect.TypeOf(ControlPlane{}))
    ydk.RegisterEntity("Cisco-IOS-XR-lib-mpp-cfg:control-plane", reflect.TypeOf(ControlPlane{}))
}

// ControlPlane
// Configure control Plane
type ControlPlane struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure management plane protection.
    ManagementPlaneProtection ControlPlane_ManagementPlaneProtection
}

func (controlPlane *ControlPlane) GetFilter() yfilter.YFilter { return controlPlane.YFilter }

func (controlPlane *ControlPlane) SetFilter(yf yfilter.YFilter) { controlPlane.YFilter = yf }

func (controlPlane *ControlPlane) GetGoName(yname string) string {
    if yname == "management-plane-protection" { return "ManagementPlaneProtection" }
    return ""
}

func (controlPlane *ControlPlane) GetSegmentPath() string {
    return "Cisco-IOS-XR-lib-mpp-cfg:control-plane"
}

func (controlPlane *ControlPlane) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "management-plane-protection" {
        return &controlPlane.ManagementPlaneProtection
    }
    return nil
}

func (controlPlane *ControlPlane) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["management-plane-protection"] = &controlPlane.ManagementPlaneProtection
    return children
}

func (controlPlane *ControlPlane) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controlPlane *ControlPlane) GetBundleName() string { return "cisco_ios_xr" }

func (controlPlane *ControlPlane) GetYangName() string { return "control-plane" }

func (controlPlane *ControlPlane) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controlPlane *ControlPlane) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controlPlane *ControlPlane) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controlPlane *ControlPlane) SetParent(parent types.Entity) { controlPlane.parent = parent }

func (controlPlane *ControlPlane) GetParent() types.Entity { return controlPlane.parent }

func (controlPlane *ControlPlane) GetParentYangName() string { return "Cisco-IOS-XR-lib-mpp-cfg" }

// ControlPlane_ManagementPlaneProtection
// Configure management plane protection
type ControlPlane_ManagementPlaneProtection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outband Configuration.
    Outband ControlPlane_ManagementPlaneProtection_Outband

    // Inband Configuration.
    Inband ControlPlane_ManagementPlaneProtection_Inband
}

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetFilter() yfilter.YFilter { return managementPlaneProtection.YFilter }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) SetFilter(yf yfilter.YFilter) { managementPlaneProtection.YFilter = yf }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetGoName(yname string) string {
    if yname == "outband" { return "Outband" }
    if yname == "inband" { return "Inband" }
    return ""
}

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetSegmentPath() string {
    return "management-plane-protection"
}

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "outband" {
        return &managementPlaneProtection.Outband
    }
    if childYangName == "inband" {
        return &managementPlaneProtection.Inband
    }
    return nil
}

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["outband"] = &managementPlaneProtection.Outband
    children["inband"] = &managementPlaneProtection.Inband
    return children
}

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetBundleName() string { return "cisco_ios_xr" }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetYangName() string { return "management-plane-protection" }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) SetParent(parent types.Entity) { managementPlaneProtection.parent = parent }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetParent() types.Entity { return managementPlaneProtection.parent }

func (managementPlaneProtection *ControlPlane_ManagementPlaneProtection) GetParentYangName() string { return "control-plane" }

// ControlPlane_ManagementPlaneProtection_Outband
// Outband Configuration
type ControlPlane_ManagementPlaneProtection_Outband struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure outband VRF. The type is string.
    OutbandVrf interface{}

    // Configure interfaces.
    InterfaceSelection ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection
}

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetFilter() yfilter.YFilter { return outband.YFilter }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) SetFilter(yf yfilter.YFilter) { outband.YFilter = yf }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetGoName(yname string) string {
    if yname == "outband-vrf" { return "OutbandVrf" }
    if yname == "interface-selection" { return "InterfaceSelection" }
    return ""
}

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetSegmentPath() string {
    return "outband"
}

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-selection" {
        return &outband.InterfaceSelection
    }
    return nil
}

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-selection"] = &outband.InterfaceSelection
    return children
}

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outband-vrf"] = outband.OutbandVrf
    return leafs
}

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetBundleName() string { return "cisco_ios_xr" }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetYangName() string { return "outband" }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) SetParent(parent types.Entity) { outband.parent = parent }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetParent() types.Entity { return outband.parent }

func (outband *ControlPlane_ManagementPlaneProtection_Outband) GetParentYangName() string { return "management-plane-protection" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection
// Configure interfaces
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a specific interface.
    Interfaces ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces

    // Configure all Inband interfaces.
    AllInterfaces ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetFilter() yfilter.YFilter { return interfaceSelection.YFilter }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) SetFilter(yf yfilter.YFilter) { interfaceSelection.YFilter = yf }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "all-interfaces" { return "AllInterfaces" }
    return ""
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetSegmentPath() string {
    return "interface-selection"
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &interfaceSelection.Interfaces
    }
    if childYangName == "all-interfaces" {
        return &interfaceSelection.AllInterfaces
    }
    return nil
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &interfaceSelection.Interfaces
    children["all-interfaces"] = &interfaceSelection.AllInterfaces
    return children
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetYangName() string { return "interface-selection" }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) SetParent(parent types.Entity) { interfaceSelection.parent = parent }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetParent() types.Entity { return interfaceSelection.parent }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection) GetParentYangName() string { return "outband" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces
// Configure a specific interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface.
    Interface []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces) GetParentYangName() string { return "interface-selection" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface
// Specific interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the Interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Configure HTTP on this interface.
    HttpProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol

    // Configure TFTP on this interface.
    TftpProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol

    // Configure NETCONF protocol and peer addresses.
    NetconfProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol

    // Configure XML and peer addresses.
    XrXml ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml

    // Configure SSH protocol and peer addresses.
    SshProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol

    // Configure SNMP for this interface.
    SnmpProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol

    // Configure Telnet for this interface.
    TelnetProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol

    // Configure all protocols on this interface.
    AllProtocols ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols
}

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "http-protocol" { return "HttpProtocol" }
    if yname == "tftp-protocol" { return "TftpProtocol" }
    if yname == "netconf-protocol" { return "NetconfProtocol" }
    if yname == "xr-xml" { return "XrXml" }
    if yname == "ssh-protocol" { return "SshProtocol" }
    if yname == "snmp-protocol" { return "SnmpProtocol" }
    if yname == "telnet-protocol" { return "TelnetProtocol" }
    if yname == "all-protocols" { return "AllProtocols" }
    return ""
}

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "http-protocol" {
        return &self.HttpProtocol
    }
    if childYangName == "tftp-protocol" {
        return &self.TftpProtocol
    }
    if childYangName == "netconf-protocol" {
        return &self.NetconfProtocol
    }
    if childYangName == "xr-xml" {
        return &self.XrXml
    }
    if childYangName == "ssh-protocol" {
        return &self.SshProtocol
    }
    if childYangName == "snmp-protocol" {
        return &self.SnmpProtocol
    }
    if childYangName == "telnet-protocol" {
        return &self.TelnetProtocol
    }
    if childYangName == "all-protocols" {
        return &self.AllProtocols
    }
    return nil
}

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["http-protocol"] = &self.HttpProtocol
    children["tftp-protocol"] = &self.TftpProtocol
    children["netconf-protocol"] = &self.NetconfProtocol
    children["xr-xml"] = &self.XrXml
    children["ssh-protocol"] = &self.SshProtocol
    children["snmp-protocol"] = &self.SnmpProtocol
    children["telnet-protocol"] = &self.TelnetProtocol
    children["all-protocols"] = &self.AllProtocols
    return children
}

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    return leafs
}

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol
// Configure HTTP on this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetFilter() yfilter.YFilter { return httpProtocol.YFilter }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) SetFilter(yf yfilter.YFilter) { httpProtocol.YFilter = yf }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetSegmentPath() string {
    return "http-protocol"
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &httpProtocol.PeerClass
    }
    return nil
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &httpProtocol.PeerClass
    return children
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetYangName() string { return "http-protocol" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) SetParent(parent types.Entity) { httpProtocol.parent = parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetParent() types.Entity { return httpProtocol.parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetParentYangName() string { return "http-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol
// Configure TFTP on this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetFilter() yfilter.YFilter { return tftpProtocol.YFilter }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) SetFilter(yf yfilter.YFilter) { tftpProtocol.YFilter = yf }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetSegmentPath() string {
    return "tftp-protocol"
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &tftpProtocol.PeerClass
    }
    return nil
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &tftpProtocol.PeerClass
    return children
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetYangName() string { return "tftp-protocol" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) SetParent(parent types.Entity) { tftpProtocol.parent = parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetParent() types.Entity { return tftpProtocol.parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetParentYangName() string { return "tftp-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol
// Configure NETCONF protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetFilter() yfilter.YFilter { return netconfProtocol.YFilter }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) SetFilter(yf yfilter.YFilter) { netconfProtocol.YFilter = yf }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetSegmentPath() string {
    return "netconf-protocol"
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &netconfProtocol.PeerClass
    }
    return nil
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &netconfProtocol.PeerClass
    return children
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetYangName() string { return "netconf-protocol" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) SetParent(parent types.Entity) { netconfProtocol.parent = parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetParent() types.Entity { return netconfProtocol.parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetParentYangName() string { return "netconf-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml
// Configure XML and peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetFilter() yfilter.YFilter { return xrXml.YFilter }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) SetFilter(yf yfilter.YFilter) { xrXml.YFilter = yf }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetSegmentPath() string {
    return "xr-xml"
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &xrXml.PeerClass
    }
    return nil
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &xrXml.PeerClass
    return children
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetBundleName() string { return "cisco_ios_xr" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetYangName() string { return "xr-xml" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) SetParent(parent types.Entity) { xrXml.parent = parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetParent() types.Entity { return xrXml.parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetParentYangName() string { return "xr-xml" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol
// Configure SSH protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetFilter() yfilter.YFilter { return sshProtocol.YFilter }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) SetFilter(yf yfilter.YFilter) { sshProtocol.YFilter = yf }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetSegmentPath() string {
    return "ssh-protocol"
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &sshProtocol.PeerClass
    }
    return nil
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &sshProtocol.PeerClass
    return children
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetYangName() string { return "ssh-protocol" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) SetParent(parent types.Entity) { sshProtocol.parent = parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetParent() types.Entity { return sshProtocol.parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetParentYangName() string { return "ssh-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol
// Configure SNMP for this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetFilter() yfilter.YFilter { return snmpProtocol.YFilter }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) SetFilter(yf yfilter.YFilter) { snmpProtocol.YFilter = yf }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetSegmentPath() string {
    return "snmp-protocol"
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &snmpProtocol.PeerClass
    }
    return nil
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &snmpProtocol.PeerClass
    return children
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetYangName() string { return "snmp-protocol" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) SetParent(parent types.Entity) { snmpProtocol.parent = parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetParent() types.Entity { return snmpProtocol.parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetParentYangName() string { return "snmp-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol
// Configure Telnet for this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetFilter() yfilter.YFilter { return telnetProtocol.YFilter }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) SetFilter(yf yfilter.YFilter) { telnetProtocol.YFilter = yf }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetSegmentPath() string {
    return "telnet-protocol"
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &telnetProtocol.PeerClass
    }
    return nil
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &telnetProtocol.PeerClass
    return children
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetYangName() string { return "telnet-protocol" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) SetParent(parent types.Entity) { telnetProtocol.parent = parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetParent() types.Entity { return telnetProtocol.parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetParentYangName() string { return "telnet-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols
// Configure all protocols on this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetFilter() yfilter.YFilter { return allProtocols.YFilter }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) SetFilter(yf yfilter.YFilter) { allProtocols.YFilter = yf }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetSegmentPath() string {
    return "all-protocols"
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &allProtocols.PeerClass
    }
    return nil
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &allProtocols.PeerClass
    return children
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetBundleName() string { return "cisco_ios_xr" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetYangName() string { return "all-protocols" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) SetParent(parent types.Entity) { allProtocols.parent = parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetParent() types.Entity { return allProtocols.parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetParentYangName() string { return "all-protocols" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces
// Configure all Inband interfaces
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure HTTP on this interface.
    HttpProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol

    // Configure TFTP on this interface.
    TftpProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol

    // Configure NETCONF protocol and peer addresses.
    NetconfProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol

    // Configure XML and peer addresses.
    XrXml ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml

    // Configure SSH protocol and peer addresses.
    SshProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol

    // Configure SNMP for this interface.
    SnmpProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol

    // Configure Telnet for this interface.
    TelnetProtocol ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol

    // Configure all protocols on this interface.
    AllProtocols ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetFilter() yfilter.YFilter { return allInterfaces.YFilter }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) SetFilter(yf yfilter.YFilter) { allInterfaces.YFilter = yf }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetGoName(yname string) string {
    if yname == "http-protocol" { return "HttpProtocol" }
    if yname == "tftp-protocol" { return "TftpProtocol" }
    if yname == "netconf-protocol" { return "NetconfProtocol" }
    if yname == "xr-xml" { return "XrXml" }
    if yname == "ssh-protocol" { return "SshProtocol" }
    if yname == "snmp-protocol" { return "SnmpProtocol" }
    if yname == "telnet-protocol" { return "TelnetProtocol" }
    if yname == "all-protocols" { return "AllProtocols" }
    return ""
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetSegmentPath() string {
    return "all-interfaces"
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "http-protocol" {
        return &allInterfaces.HttpProtocol
    }
    if childYangName == "tftp-protocol" {
        return &allInterfaces.TftpProtocol
    }
    if childYangName == "netconf-protocol" {
        return &allInterfaces.NetconfProtocol
    }
    if childYangName == "xr-xml" {
        return &allInterfaces.XrXml
    }
    if childYangName == "ssh-protocol" {
        return &allInterfaces.SshProtocol
    }
    if childYangName == "snmp-protocol" {
        return &allInterfaces.SnmpProtocol
    }
    if childYangName == "telnet-protocol" {
        return &allInterfaces.TelnetProtocol
    }
    if childYangName == "all-protocols" {
        return &allInterfaces.AllProtocols
    }
    return nil
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["http-protocol"] = &allInterfaces.HttpProtocol
    children["tftp-protocol"] = &allInterfaces.TftpProtocol
    children["netconf-protocol"] = &allInterfaces.NetconfProtocol
    children["xr-xml"] = &allInterfaces.XrXml
    children["ssh-protocol"] = &allInterfaces.SshProtocol
    children["snmp-protocol"] = &allInterfaces.SnmpProtocol
    children["telnet-protocol"] = &allInterfaces.TelnetProtocol
    children["all-protocols"] = &allInterfaces.AllProtocols
    return children
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetYangName() string { return "all-interfaces" }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) SetParent(parent types.Entity) { allInterfaces.parent = parent }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetParent() types.Entity { return allInterfaces.parent }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces) GetParentYangName() string { return "interface-selection" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol
// Configure HTTP on this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetFilter() yfilter.YFilter { return httpProtocol.YFilter }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) SetFilter(yf yfilter.YFilter) { httpProtocol.YFilter = yf }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetSegmentPath() string {
    return "http-protocol"
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &httpProtocol.PeerClass
    }
    return nil
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &httpProtocol.PeerClass
    return children
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetYangName() string { return "http-protocol" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) SetParent(parent types.Entity) { httpProtocol.parent = parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetParent() types.Entity { return httpProtocol.parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetParentYangName() string { return "http-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol
// Configure TFTP on this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetFilter() yfilter.YFilter { return tftpProtocol.YFilter }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) SetFilter(yf yfilter.YFilter) { tftpProtocol.YFilter = yf }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetSegmentPath() string {
    return "tftp-protocol"
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &tftpProtocol.PeerClass
    }
    return nil
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &tftpProtocol.PeerClass
    return children
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetYangName() string { return "tftp-protocol" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) SetParent(parent types.Entity) { tftpProtocol.parent = parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetParent() types.Entity { return tftpProtocol.parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetParentYangName() string { return "tftp-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol
// Configure NETCONF protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetFilter() yfilter.YFilter { return netconfProtocol.YFilter }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) SetFilter(yf yfilter.YFilter) { netconfProtocol.YFilter = yf }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetSegmentPath() string {
    return "netconf-protocol"
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &netconfProtocol.PeerClass
    }
    return nil
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &netconfProtocol.PeerClass
    return children
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetYangName() string { return "netconf-protocol" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) SetParent(parent types.Entity) { netconfProtocol.parent = parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetParent() types.Entity { return netconfProtocol.parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetParentYangName() string { return "netconf-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml
// Configure XML and peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetFilter() yfilter.YFilter { return xrXml.YFilter }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) SetFilter(yf yfilter.YFilter) { xrXml.YFilter = yf }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetSegmentPath() string {
    return "xr-xml"
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &xrXml.PeerClass
    }
    return nil
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &xrXml.PeerClass
    return children
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetBundleName() string { return "cisco_ios_xr" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetYangName() string { return "xr-xml" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) SetParent(parent types.Entity) { xrXml.parent = parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetParent() types.Entity { return xrXml.parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetParentYangName() string { return "xr-xml" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol
// Configure SSH protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetFilter() yfilter.YFilter { return sshProtocol.YFilter }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) SetFilter(yf yfilter.YFilter) { sshProtocol.YFilter = yf }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetSegmentPath() string {
    return "ssh-protocol"
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &sshProtocol.PeerClass
    }
    return nil
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &sshProtocol.PeerClass
    return children
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetYangName() string { return "ssh-protocol" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) SetParent(parent types.Entity) { sshProtocol.parent = parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetParent() types.Entity { return sshProtocol.parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetParentYangName() string { return "ssh-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol
// Configure SNMP for this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetFilter() yfilter.YFilter { return snmpProtocol.YFilter }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) SetFilter(yf yfilter.YFilter) { snmpProtocol.YFilter = yf }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetSegmentPath() string {
    return "snmp-protocol"
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &snmpProtocol.PeerClass
    }
    return nil
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &snmpProtocol.PeerClass
    return children
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetYangName() string { return "snmp-protocol" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) SetParent(parent types.Entity) { snmpProtocol.parent = parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetParent() types.Entity { return snmpProtocol.parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetParentYangName() string { return "snmp-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol
// Configure Telnet for this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetFilter() yfilter.YFilter { return telnetProtocol.YFilter }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) SetFilter(yf yfilter.YFilter) { telnetProtocol.YFilter = yf }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetSegmentPath() string {
    return "telnet-protocol"
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &telnetProtocol.PeerClass
    }
    return nil
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &telnetProtocol.PeerClass
    return children
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetYangName() string { return "telnet-protocol" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) SetParent(parent types.Entity) { telnetProtocol.parent = parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetParent() types.Entity { return telnetProtocol.parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetParentYangName() string { return "telnet-protocol" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols
// Configure all protocols on this interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetFilter() yfilter.YFilter { return allProtocols.YFilter }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) SetFilter(yf yfilter.YFilter) { allProtocols.YFilter = yf }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetSegmentPath() string {
    return "all-protocols"
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &allProtocols.PeerClass
    }
    return nil
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &allProtocols.PeerClass
    return children
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetBundleName() string { return "cisco_ios_xr" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetYangName() string { return "all-protocols" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) SetParent(parent types.Entity) { allProtocols.parent = parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetParent() types.Entity { return allProtocols.parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetParentYangName() string { return "all-protocols" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Outband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband
// Inband Configuration
type ControlPlane_ManagementPlaneProtection_Inband struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure interfaces.
    InterfaceSelection ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection
}

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetFilter() yfilter.YFilter { return inband.YFilter }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) SetFilter(yf yfilter.YFilter) { inband.YFilter = yf }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetGoName(yname string) string {
    if yname == "interface-selection" { return "InterfaceSelection" }
    return ""
}

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetSegmentPath() string {
    return "inband"
}

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-selection" {
        return &inband.InterfaceSelection
    }
    return nil
}

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-selection"] = &inband.InterfaceSelection
    return children
}

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetBundleName() string { return "cisco_ios_xr" }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetYangName() string { return "inband" }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) SetParent(parent types.Entity) { inband.parent = parent }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetParent() types.Entity { return inband.parent }

func (inband *ControlPlane_ManagementPlaneProtection_Inband) GetParentYangName() string { return "management-plane-protection" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection
// Configure interfaces
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a specific interface.
    Interfaces ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces

    // Configure all Inband interfaces.
    AllInterfaces ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetFilter() yfilter.YFilter { return interfaceSelection.YFilter }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) SetFilter(yf yfilter.YFilter) { interfaceSelection.YFilter = yf }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "all-interfaces" { return "AllInterfaces" }
    return ""
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetSegmentPath() string {
    return "interface-selection"
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &interfaceSelection.Interfaces
    }
    if childYangName == "all-interfaces" {
        return &interfaceSelection.AllInterfaces
    }
    return nil
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &interfaceSelection.Interfaces
    children["all-interfaces"] = &interfaceSelection.AllInterfaces
    return children
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetYangName() string { return "interface-selection" }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) SetParent(parent types.Entity) { interfaceSelection.parent = parent }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetParent() types.Entity { return interfaceSelection.parent }

func (interfaceSelection *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection) GetParentYangName() string { return "inband" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces
// Configure a specific interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface.
    Interface []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces) GetParentYangName() string { return "interface-selection" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface
// Specific interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the Interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Configure HTTP on this interface.
    HttpProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol

    // Configure TFTP on this interface.
    TftpProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol

    // Configure NETCONF protocol and peer addresses.
    NetconfProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol

    // Configure XML and peer addresses.
    XrXml ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml

    // Configure SSH protocol and peer addresses.
    SshProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol

    // Configure SNMP for this interface.
    SnmpProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol

    // Configure Telnet for this interface.
    TelnetProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol

    // Configure all protocols on this interface.
    AllProtocols ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols
}

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "http-protocol" { return "HttpProtocol" }
    if yname == "tftp-protocol" { return "TftpProtocol" }
    if yname == "netconf-protocol" { return "NetconfProtocol" }
    if yname == "xr-xml" { return "XrXml" }
    if yname == "ssh-protocol" { return "SshProtocol" }
    if yname == "snmp-protocol" { return "SnmpProtocol" }
    if yname == "telnet-protocol" { return "TelnetProtocol" }
    if yname == "all-protocols" { return "AllProtocols" }
    return ""
}

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "http-protocol" {
        return &self.HttpProtocol
    }
    if childYangName == "tftp-protocol" {
        return &self.TftpProtocol
    }
    if childYangName == "netconf-protocol" {
        return &self.NetconfProtocol
    }
    if childYangName == "xr-xml" {
        return &self.XrXml
    }
    if childYangName == "ssh-protocol" {
        return &self.SshProtocol
    }
    if childYangName == "snmp-protocol" {
        return &self.SnmpProtocol
    }
    if childYangName == "telnet-protocol" {
        return &self.TelnetProtocol
    }
    if childYangName == "all-protocols" {
        return &self.AllProtocols
    }
    return nil
}

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["http-protocol"] = &self.HttpProtocol
    children["tftp-protocol"] = &self.TftpProtocol
    children["netconf-protocol"] = &self.NetconfProtocol
    children["xr-xml"] = &self.XrXml
    children["ssh-protocol"] = &self.SshProtocol
    children["snmp-protocol"] = &self.SnmpProtocol
    children["telnet-protocol"] = &self.TelnetProtocol
    children["all-protocols"] = &self.AllProtocols
    return children
}

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    return leafs
}

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol
// Configure HTTP on this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetFilter() yfilter.YFilter { return httpProtocol.YFilter }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) SetFilter(yf yfilter.YFilter) { httpProtocol.YFilter = yf }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetSegmentPath() string {
    return "http-protocol"
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &httpProtocol.PeerClass
    }
    return nil
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &httpProtocol.PeerClass
    return children
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetYangName() string { return "http-protocol" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) SetParent(parent types.Entity) { httpProtocol.parent = parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetParent() types.Entity { return httpProtocol.parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass) GetParentYangName() string { return "http-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol
// Configure TFTP on this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetFilter() yfilter.YFilter { return tftpProtocol.YFilter }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) SetFilter(yf yfilter.YFilter) { tftpProtocol.YFilter = yf }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetSegmentPath() string {
    return "tftp-protocol"
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &tftpProtocol.PeerClass
    }
    return nil
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &tftpProtocol.PeerClass
    return children
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetYangName() string { return "tftp-protocol" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) SetParent(parent types.Entity) { tftpProtocol.parent = parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetParent() types.Entity { return tftpProtocol.parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass) GetParentYangName() string { return "tftp-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol
// Configure NETCONF protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetFilter() yfilter.YFilter { return netconfProtocol.YFilter }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) SetFilter(yf yfilter.YFilter) { netconfProtocol.YFilter = yf }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetSegmentPath() string {
    return "netconf-protocol"
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &netconfProtocol.PeerClass
    }
    return nil
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &netconfProtocol.PeerClass
    return children
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetYangName() string { return "netconf-protocol" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) SetParent(parent types.Entity) { netconfProtocol.parent = parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetParent() types.Entity { return netconfProtocol.parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass) GetParentYangName() string { return "netconf-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml
// Configure XML and peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetFilter() yfilter.YFilter { return xrXml.YFilter }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) SetFilter(yf yfilter.YFilter) { xrXml.YFilter = yf }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetSegmentPath() string {
    return "xr-xml"
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &xrXml.PeerClass
    }
    return nil
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &xrXml.PeerClass
    return children
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetBundleName() string { return "cisco_ios_xr" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetYangName() string { return "xr-xml" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) SetParent(parent types.Entity) { xrXml.parent = parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetParent() types.Entity { return xrXml.parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass) GetParentYangName() string { return "xr-xml" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol
// Configure SSH protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetFilter() yfilter.YFilter { return sshProtocol.YFilter }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) SetFilter(yf yfilter.YFilter) { sshProtocol.YFilter = yf }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetSegmentPath() string {
    return "ssh-protocol"
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &sshProtocol.PeerClass
    }
    return nil
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &sshProtocol.PeerClass
    return children
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetYangName() string { return "ssh-protocol" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) SetParent(parent types.Entity) { sshProtocol.parent = parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetParent() types.Entity { return sshProtocol.parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass) GetParentYangName() string { return "ssh-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol
// Configure SNMP for this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetFilter() yfilter.YFilter { return snmpProtocol.YFilter }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) SetFilter(yf yfilter.YFilter) { snmpProtocol.YFilter = yf }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetSegmentPath() string {
    return "snmp-protocol"
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &snmpProtocol.PeerClass
    }
    return nil
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &snmpProtocol.PeerClass
    return children
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetYangName() string { return "snmp-protocol" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) SetParent(parent types.Entity) { snmpProtocol.parent = parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetParent() types.Entity { return snmpProtocol.parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass) GetParentYangName() string { return "snmp-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol
// Configure Telnet for this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetFilter() yfilter.YFilter { return telnetProtocol.YFilter }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) SetFilter(yf yfilter.YFilter) { telnetProtocol.YFilter = yf }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetSegmentPath() string {
    return "telnet-protocol"
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &telnetProtocol.PeerClass
    }
    return nil
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &telnetProtocol.PeerClass
    return children
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetYangName() string { return "telnet-protocol" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) SetParent(parent types.Entity) { telnetProtocol.parent = parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetParent() types.Entity { return telnetProtocol.parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass) GetParentYangName() string { return "telnet-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols
// Configure all protocols on this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetFilter() yfilter.YFilter { return allProtocols.YFilter }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) SetFilter(yf yfilter.YFilter) { allProtocols.YFilter = yf }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetSegmentPath() string {
    return "all-protocols"
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &allProtocols.PeerClass
    }
    return nil
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &allProtocols.PeerClass
    return children
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetBundleName() string { return "cisco_ios_xr" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetYangName() string { return "all-protocols" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) SetParent(parent types.Entity) { allProtocols.parent = parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetParent() types.Entity { return allProtocols.parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols) GetParentYangName() string { return "interface" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass) GetParentYangName() string { return "all-protocols" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_Interfaces_Interface_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces
// Configure all Inband interfaces
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure HTTP on this interface.
    HttpProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol

    // Configure TFTP on this interface.
    TftpProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol

    // Configure NETCONF protocol and peer addresses.
    NetconfProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol

    // Configure XML and peer addresses.
    XrXml ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml

    // Configure SSH protocol and peer addresses.
    SshProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol

    // Configure SNMP for this interface.
    SnmpProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol

    // Configure Telnet for this interface.
    TelnetProtocol ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol

    // Configure all protocols on this interface.
    AllProtocols ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetFilter() yfilter.YFilter { return allInterfaces.YFilter }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) SetFilter(yf yfilter.YFilter) { allInterfaces.YFilter = yf }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetGoName(yname string) string {
    if yname == "http-protocol" { return "HttpProtocol" }
    if yname == "tftp-protocol" { return "TftpProtocol" }
    if yname == "netconf-protocol" { return "NetconfProtocol" }
    if yname == "xr-xml" { return "XrXml" }
    if yname == "ssh-protocol" { return "SshProtocol" }
    if yname == "snmp-protocol" { return "SnmpProtocol" }
    if yname == "telnet-protocol" { return "TelnetProtocol" }
    if yname == "all-protocols" { return "AllProtocols" }
    return ""
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetSegmentPath() string {
    return "all-interfaces"
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "http-protocol" {
        return &allInterfaces.HttpProtocol
    }
    if childYangName == "tftp-protocol" {
        return &allInterfaces.TftpProtocol
    }
    if childYangName == "netconf-protocol" {
        return &allInterfaces.NetconfProtocol
    }
    if childYangName == "xr-xml" {
        return &allInterfaces.XrXml
    }
    if childYangName == "ssh-protocol" {
        return &allInterfaces.SshProtocol
    }
    if childYangName == "snmp-protocol" {
        return &allInterfaces.SnmpProtocol
    }
    if childYangName == "telnet-protocol" {
        return &allInterfaces.TelnetProtocol
    }
    if childYangName == "all-protocols" {
        return &allInterfaces.AllProtocols
    }
    return nil
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["http-protocol"] = &allInterfaces.HttpProtocol
    children["tftp-protocol"] = &allInterfaces.TftpProtocol
    children["netconf-protocol"] = &allInterfaces.NetconfProtocol
    children["xr-xml"] = &allInterfaces.XrXml
    children["ssh-protocol"] = &allInterfaces.SshProtocol
    children["snmp-protocol"] = &allInterfaces.SnmpProtocol
    children["telnet-protocol"] = &allInterfaces.TelnetProtocol
    children["all-protocols"] = &allInterfaces.AllProtocols
    return children
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetYangName() string { return "all-interfaces" }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) SetParent(parent types.Entity) { allInterfaces.parent = parent }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetParent() types.Entity { return allInterfaces.parent }

func (allInterfaces *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces) GetParentYangName() string { return "interface-selection" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol
// Configure HTTP on this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetFilter() yfilter.YFilter { return httpProtocol.YFilter }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) SetFilter(yf yfilter.YFilter) { httpProtocol.YFilter = yf }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetSegmentPath() string {
    return "http-protocol"
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &httpProtocol.PeerClass
    }
    return nil
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &httpProtocol.PeerClass
    return children
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetYangName() string { return "http-protocol" }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) SetParent(parent types.Entity) { httpProtocol.parent = parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetParent() types.Entity { return httpProtocol.parent }

func (httpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass) GetParentYangName() string { return "http-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_HttpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol
// Configure TFTP on this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetFilter() yfilter.YFilter { return tftpProtocol.YFilter }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) SetFilter(yf yfilter.YFilter) { tftpProtocol.YFilter = yf }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetSegmentPath() string {
    return "tftp-protocol"
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &tftpProtocol.PeerClass
    }
    return nil
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &tftpProtocol.PeerClass
    return children
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetYangName() string { return "tftp-protocol" }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) SetParent(parent types.Entity) { tftpProtocol.parent = parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetParent() types.Entity { return tftpProtocol.parent }

func (tftpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass) GetParentYangName() string { return "tftp-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TftpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol
// Configure NETCONF protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetFilter() yfilter.YFilter { return netconfProtocol.YFilter }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) SetFilter(yf yfilter.YFilter) { netconfProtocol.YFilter = yf }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetSegmentPath() string {
    return "netconf-protocol"
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &netconfProtocol.PeerClass
    }
    return nil
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &netconfProtocol.PeerClass
    return children
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetYangName() string { return "netconf-protocol" }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) SetParent(parent types.Entity) { netconfProtocol.parent = parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetParent() types.Entity { return netconfProtocol.parent }

func (netconfProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass) GetParentYangName() string { return "netconf-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_NetconfProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml
// Configure XML and peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetFilter() yfilter.YFilter { return xrXml.YFilter }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) SetFilter(yf yfilter.YFilter) { xrXml.YFilter = yf }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetSegmentPath() string {
    return "xr-xml"
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &xrXml.PeerClass
    }
    return nil
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &xrXml.PeerClass
    return children
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetBundleName() string { return "cisco_ios_xr" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetYangName() string { return "xr-xml" }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) SetParent(parent types.Entity) { xrXml.parent = parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetParent() types.Entity { return xrXml.parent }

func (xrXml *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass) GetParentYangName() string { return "xr-xml" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_XrXml_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol
// Configure SSH protocol and peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetFilter() yfilter.YFilter { return sshProtocol.YFilter }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) SetFilter(yf yfilter.YFilter) { sshProtocol.YFilter = yf }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetSegmentPath() string {
    return "ssh-protocol"
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &sshProtocol.PeerClass
    }
    return nil
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &sshProtocol.PeerClass
    return children
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetYangName() string { return "ssh-protocol" }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) SetParent(parent types.Entity) { sshProtocol.parent = parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetParent() types.Entity { return sshProtocol.parent }

func (sshProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass) GetParentYangName() string { return "ssh-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SshProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol
// Configure SNMP for this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetFilter() yfilter.YFilter { return snmpProtocol.YFilter }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) SetFilter(yf yfilter.YFilter) { snmpProtocol.YFilter = yf }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetSegmentPath() string {
    return "snmp-protocol"
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &snmpProtocol.PeerClass
    }
    return nil
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &snmpProtocol.PeerClass
    return children
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetYangName() string { return "snmp-protocol" }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) SetParent(parent types.Entity) { snmpProtocol.parent = parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetParent() types.Entity { return snmpProtocol.parent }

func (snmpProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass) GetParentYangName() string { return "snmp-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_SnmpProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol
// Configure Telnet for this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetFilter() yfilter.YFilter { return telnetProtocol.YFilter }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) SetFilter(yf yfilter.YFilter) { telnetProtocol.YFilter = yf }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetSegmentPath() string {
    return "telnet-protocol"
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &telnetProtocol.PeerClass
    }
    return nil
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &telnetProtocol.PeerClass
    return children
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetYangName() string { return "telnet-protocol" }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) SetParent(parent types.Entity) { telnetProtocol.parent = parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetParent() types.Entity { return telnetProtocol.parent }

func (telnetProtocol *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass) GetParentYangName() string { return "telnet-protocol" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_TelnetProtocol_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols
// Configure all protocols on this interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    PeerClass ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetFilter() yfilter.YFilter { return allProtocols.YFilter }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) SetFilter(yf yfilter.YFilter) { allProtocols.YFilter = yf }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetGoName(yname string) string {
    if yname == "peer-class" { return "PeerClass" }
    return ""
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetSegmentPath() string {
    return "all-protocols"
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-class" {
        return &allProtocols.PeerClass
    }
    return nil
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-class"] = &allProtocols.PeerClass
    return children
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetBundleName() string { return "cisco_ios_xr" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetYangName() string { return "all-protocols" }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) SetParent(parent types.Entity) { allProtocols.parent = parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetParent() types.Entity { return allProtocols.parent }

func (allProtocols *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols) GetParentYangName() string { return "all-interfaces" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Only takes 'True'. The type is interface{}.
    PeerAll interface{}

    // Configure v4 peer addresses.
    PeerV4 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4

    // Configure v6 peer addresses.
    PeerV6 ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetFilter() yfilter.YFilter { return peerClass.YFilter }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) SetFilter(yf yfilter.YFilter) { peerClass.YFilter = yf }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetGoName(yname string) string {
    if yname == "peer-all" { return "PeerAll" }
    if yname == "peer-v4" { return "PeerV4" }
    if yname == "peer-v6" { return "PeerV6" }
    return ""
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetSegmentPath() string {
    return "peer-class"
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-v4" {
        return &peerClass.PeerV4
    }
    if childYangName == "peer-v6" {
        return &peerClass.PeerV6
    }
    return nil
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-v4"] = &peerClass.PeerV4
    children["peer-v6"] = &peerClass.PeerV6
    return children
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-all"] = peerClass.PeerAll
    return leafs
}

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetBundleName() string { return "cisco_ios_xr" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetYangName() string { return "peer-class" }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) SetParent(parent types.Entity) { peerClass.parent = parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetParent() types.Entity { return peerClass.parent }

func (peerClass *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass) GetParentYangName() string { return "all-protocols" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4
// Configure v4 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetFilter() yfilter.YFilter { return peerV4.YFilter }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) SetFilter(yf yfilter.YFilter) { peerV4.YFilter = yf }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetSegmentPath() string {
    return "peer-v4"
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV4.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV4.PeerPrefixes
    }
    return nil
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV4.Peers
    children["peer-prefixes"] = &peerV4.PeerPrefixes
    return children
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetBundleName() string { return "cisco_ios_xr" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetYangName() string { return "peer-v4" }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) SetParent(parent types.Entity) { peerV4.parent = parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetParent() types.Entity { return peerV4.parent }

func (peerV4 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes) GetParentYangName() string { return "peer-v4" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV4_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6
// Configure v6 peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer addresses.
    Peers ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers

    // Configure peer addresses with prefix.
    PeerPrefixes ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetFilter() yfilter.YFilter { return peerV6.YFilter }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) SetFilter(yf yfilter.YFilter) { peerV6.YFilter = yf }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetGoName(yname string) string {
    if yname == "peers" { return "Peers" }
    if yname == "peer-prefixes" { return "PeerPrefixes" }
    return ""
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetSegmentPath() string {
    return "peer-v6"
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &peerV6.Peers
    }
    if childYangName == "peer-prefixes" {
        return &peerV6.PeerPrefixes
    }
    return nil
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &peerV6.Peers
    children["peer-prefixes"] = &peerV6.PeerPrefixes
    return children
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetBundleName() string { return "cisco_ios_xr" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetYangName() string { return "peer-v6" }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) SetParent(parent types.Entity) { peerV6.parent = parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetParent() types.Entity { return peerV6.parent }

func (peerV6 *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6) GetParentYangName() string { return "peer-class" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers
// Configure peer addresses
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure peer on the interface. The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer.
    Peer []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetYangName() string { return "peers" }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetParent() types.Entity { return peers.parent }

func (peers *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer
// Configure peer on the interface
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[address='" + fmt.Sprintf("%v", peer.Address) + "']"
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = peer.Address
    return leafs
}

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetYangName() string { return "peer" }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_Peers_Peer) GetParentYangName() string { return "peers" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes
// Configure peer addresses with prefix
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer address (with prefix). The type is slice of
    // ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix.
    PeerPrefix []ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetFilter() yfilter.YFilter { return peerPrefixes.YFilter }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetFilter(yf yfilter.YFilter) { peerPrefixes.YFilter = yf }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetGoName(yname string) string {
    if yname == "peer-prefix" { return "PeerPrefix" }
    return ""
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetSegmentPath() string {
    return "peer-prefixes"
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-prefix" {
        for _, c := range peerPrefixes.PeerPrefix {
            if peerPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix{}
        peerPrefixes.PeerPrefix = append(peerPrefixes.PeerPrefix, child)
        return &peerPrefixes.PeerPrefix[len(peerPrefixes.PeerPrefix)-1]
    }
    return nil
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peerPrefixes.PeerPrefix {
        children[peerPrefixes.PeerPrefix[i].GetSegmentPath()] = &peerPrefixes.PeerPrefix[i]
    }
    return children
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetYangName() string { return "peer-prefixes" }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) SetParent(parent types.Entity) { peerPrefixes.parent = parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParent() types.Entity { return peerPrefixes.parent }

func (peerPrefixes *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes) GetParentYangName() string { return "peer-v6" }

// ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix
// Peer address (with prefix)
type ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. prefix/length. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    AddressPrefix interface{}
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetFilter() yfilter.YFilter { return peerPrefix.YFilter }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetFilter(yf yfilter.YFilter) { peerPrefix.YFilter = yf }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetGoName(yname string) string {
    if yname == "address-prefix" { return "AddressPrefix" }
    return ""
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetSegmentPath() string {
    return "peer-prefix" + "[address-prefix='" + fmt.Sprintf("%v", peerPrefix.AddressPrefix) + "']"
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-prefix"] = peerPrefix.AddressPrefix
    return leafs
}

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetYangName() string { return "peer-prefix" }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) SetParent(parent types.Entity) { peerPrefix.parent = parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParent() types.Entity { return peerPrefix.parent }

func (peerPrefix *ControlPlane_ManagementPlaneProtection_Inband_InterfaceSelection_AllInterfaces_AllProtocols_PeerClass_PeerV6_PeerPrefixes_PeerPrefix) GetParentYangName() string { return "peer-prefixes" }

